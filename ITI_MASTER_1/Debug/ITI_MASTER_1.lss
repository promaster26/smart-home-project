
ITI_MASTER_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001cc  00800060  00007064  000070f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080022c  0080022c  000072c4  2**0
                  ALLOC
  3 .stab         000065a0  00000000  00000000  000072c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000249e  00000000  00000000  0000d864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000fd02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000fee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00010114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  000129a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00013fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000153ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  000155ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  000158bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016311  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_1>
       8:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__vector_2>
       c:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__vector_10>
      2c:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f0 e7       	ldi	r31, 0x70	; 112
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <main>
      8a:	0c 94 30 38 	jmp	0x7060	; 0x7060 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 37 	jmp	0x6ff2	; 0x6ff2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ed       	ldi	r26, 0xDF	; 223
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 38 	jmp	0x702a	; 0x702a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 38 	jmp	0x700a	; 0x700a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 38 	jmp	0x700a	; 0x700a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 37 	jmp	0x6ff2	; 0x6ff2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ed       	ldi	r24, 0xDF	; 223
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 38 	jmp	0x702a	; 0x702a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 38 	jmp	0x7002	; 0x7002 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f ed       	ldi	r22, 0xDF	; 223
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1d 38 	jmp	0x703a	; 0x703a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 05 38 	jmp	0x700a	; 0x700a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 05 38 	jmp	0x700a	; 0x700a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 05 38 	jmp	0x700a	; 0x700a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 38 	jmp	0x700a	; 0x700a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 21 38 	jmp	0x7042	; 0x7042 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 02 38 	jmp	0x7004	; 0x7004 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 1e 38 	jmp	0x703c	; 0x703c <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 09 38 	jmp	0x7012	; 0x7012 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 25 38 	jmp	0x704a	; 0x704a <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 01 38 	jmp	0x7002	; 0x7002 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 1d 38 	jmp	0x703a	; 0x703a <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e9 51       	subi	r30, 0x19	; 25
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <TMU_CreateTask>:
static TCB_t Tasks_Arr[TMU_Tasks_Num] =
{
{ NULL } };

void TMU_CreateTask(void (*Copy_ptr_Func), u16 Copy_Periodicity,u8 Copy_Priority)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <TMU_CreateTask+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <TMU_CreateTask+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	7c 83       	std	Y+4, r23	; 0x04
     f5e:	6b 83       	std	Y+3, r22	; 0x03
     f60:	4d 83       	std	Y+5, r20	; 0x05
	if (Tasks_Arr[Copy_Priority].Pftask == NULL)
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	c9 01       	movw	r24, r18
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	fc 01       	movw	r30, r24
     f78:	e4 5d       	subi	r30, 0xD4	; 212
     f7a:	fd 4f       	sbci	r31, 0xFD	; 253
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	81 f5       	brne	.+96     	; 0xfe4 <TMU_CreateTask+0x9a>
	{
		Tasks_Arr[Copy_Priority].Pftask = Copy_ptr_Func;
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	49 81       	ldd	r20, Y+1	; 0x01
     f8c:	5a 81       	ldd	r21, Y+2	; 0x02
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	fc 01       	movw	r30, r24
     f9e:	e4 5d       	subi	r30, 0xD4	; 212
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	51 83       	std	Z+1, r21	; 0x01
     fa4:	40 83       	st	Z, r20
		Tasks_Arr[Copy_Priority].Periodicity = Copy_Periodicity;
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	c9 01       	movw	r24, r18
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	fc 01       	movw	r30, r24
     fbc:	e2 5d       	subi	r30, 0xD2	; 210
     fbe:	fd 4f       	sbci	r31, 0xFD	; 253
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	80 83       	st	Z, r24
		Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	fc 01       	movw	r30, r24
     fde:	e0 5d       	subi	r30, 0xD0	; 208
     fe0:	fd 4f       	sbci	r31, 0xFD	; 253
     fe2:	10 82       	st	Z, r1
		
	}
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <TMU_Delete_Task>:

void TMU_Delete_Task(u8 Copy_Priority)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Pftask = NULL;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	c9 01       	movw	r24, r18
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	fc 01       	movw	r30, r24
    1016:	e4 5d       	subi	r30, 0xD4	; 212
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	11 82       	std	Z+1, r1	; 0x01
    101c:	10 82       	st	Z, r1
}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <TMU_Suspend_Task>:

void TMU_Suspend_Task(u8 Copy_Priority)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Suspended;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	c9 01       	movw	r24, r18
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	fc 01       	movw	r30, r24
    1048:	e0 5d       	subi	r30, 0xD0	; 208
    104a:	fd 4f       	sbci	r31, 0xFD	; 253
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 83       	st	Z, r24
}
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <TMU_Resume_Task>:

void TMU_Resume_Task(u8 Copy_Priority)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	c9 01       	movw	r24, r18
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	fc 01       	movw	r30, r24
    107a:	e0 5d       	subi	r30, 0xD0	; 208
    107c:	fd 4f       	sbci	r31, 0xFD	; 253
    107e:	10 82       	st	Z, r1
}
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <TMU_Start_Scheduler>:

void TMU_Start_Scheduler(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	27 97       	sbiw	r28, 0x07	; 7
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
			.GPT_Timer = GPT_Timer0, 
			.GPT_WG_Mode = GPT_CTC,
			.GPT_Prescaler = GPT_Prescaler_64 ,
			.GPT_COM_Value = 125, 
			.GPT_OVF_CBF = Scheduler
		};
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	fe 01       	movw	r30, r28
    10a0:	31 96       	adiw	r30, 0x01	; 1
    10a2:	df 01       	movw	r26, r30
    10a4:	98 2f       	mov	r25, r24
    10a6:	1d 92       	st	X+, r1
    10a8:	9a 95       	dec	r25
    10aa:	e9 f7       	brne	.-6      	; 0x10a6 <TMU_Start_Scheduler+0x1e>
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	8d e7       	ldi	r24, 0x7D	; 125
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	8f e6       	ldi	r24, 0x6F	; 111
    10ba:	98 e0       	ldi	r25, 0x08	; 8
    10bc:	9f 83       	std	Y+7, r25	; 0x07
    10be:	8e 83       	std	Y+6, r24	; 0x06
		
	  GPT_Init(&Timer0);
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	0e 94 13 10 	call	0x2026	; 0x2026 <GPT_Init>


	G_INT_Enable();
    10c8:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <G_INT_Enable>
}
    10cc:	27 96       	adiw	r28, 0x07	; 7
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <Scheduler>:

void Scheduler(void)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Counter = 0;
    10e8:	19 82       	std	Y+1, r1	; 0x01
	static u16 Local_Index = 0;
	Local_Index++;
    10ea:	80 91 3b 02 	lds	r24, 0x023B
    10ee:	90 91 3c 02 	lds	r25, 0x023C
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 3c 02 	sts	0x023C, r25
    10f8:	80 93 3b 02 	sts	0x023B, r24

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	4e c0       	rjmp	.+156    	; 0x119c <Scheduler+0xbe>
	{

		if (Tasks_Arr[Local_Counter].Pftask != NULL)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	c9 01       	movw	r24, r18
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	e4 5d       	subi	r30, 0xD4	; 212
    1118:	fd 4f       	sbci	r31, 0xFD	; 253
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	d1 f1       	breq	.+116    	; 0x1196 <Scheduler+0xb8>
		{
			if (Tasks_Arr[Local_Counter].Task_State == Task_Resumed)
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	c9 01       	movw	r24, r18
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	fc 01       	movw	r30, r24
    1138:	e0 5d       	subi	r30, 0xD0	; 208
    113a:	fd 4f       	sbci	r31, 0xFD	; 253
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	51 f5       	brne	.+84     	; 0x1196 <Scheduler+0xb8>
			{	
				if (Local_Index % Tasks_Arr[Local_Counter].Periodicity == 0)
    1142:	40 91 3b 02 	lds	r20, 0x023B
    1146:	50 91 3c 02 	lds	r21, 0x023C
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	fc 01       	movw	r30, r24
    1160:	e2 5d       	subi	r30, 0xD2	; 210
    1162:	fd 4f       	sbci	r31, 0xFD	; 253
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	ca 01       	movw	r24, r20
    116a:	b9 01       	movw	r22, r18
    116c:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <__udivmodhi4>
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	89 f4       	brne	.+34     	; 0x1196 <Scheduler+0xb8>
				{
					Tasks_Arr[Local_Counter].Pftask();
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	c9 01       	movw	r24, r18
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	fc 01       	movw	r30, r24
    118a:	e4 5d       	subi	r30, 0xD4	; 212
    118c:	fd 4f       	sbci	r31, 0xFD	; 253
    118e:	01 90       	ld	r0, Z+
    1190:	f0 81       	ld	r31, Z
    1192:	e0 2d       	mov	r30, r0
    1194:	09 95       	icall
{
	u8 Local_Counter = 0;
	static u16 Local_Index = 0;
	Local_Index++;

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <Scheduler+0xc6>
    11a2:	ae cf       	rjmp	.-164    	; 0x1100 <Scheduler+0x22>
					Tasks_Arr[Local_Counter].Pftask();
				}
		}
	}
}
}
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <arrayToNum>:
		.KP_Row4_PIN = DIO_u8PIN7 }; 


/* FUNCTION TO CONVERT ARRAY TO NUM */
u16 arrayToNum(u16* arr, u16 length)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <arrayToNum+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <arrayToNum+0x8>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <arrayToNum+0xa>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	7e 83       	std	Y+6, r23	; 0x06
    11c0:	6d 83       	std	Y+5, r22	; 0x05
	u8 num = 0; //u16
    11c2:	1a 82       	std	Y+2, r1	; 0x02
	for (u8 i = 0; i < length; i++)
    11c4:	19 82       	std	Y+1, r1	; 0x01
    11c6:	20 c0       	rjmp	.+64     	; 0x1208 <arrayToNum+0x5c>
	{
		num = num * 10 + arr[i];
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9c 01       	movw	r18, r24
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	c9 01       	movw	r24, r18
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	82 0f       	add	r24, r18
    11e0:	93 1f       	adc	r25, r19
    11e2:	48 2f       	mov	r20, r24
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9c 01       	movw	r18, r24
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	fc 01       	movw	r30, r24
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	84 0f       	add	r24, r20
    1200:	8a 83       	std	Y+2, r24	; 0x02

/* FUNCTION TO CONVERT ARRAY TO NUM */
u16 arrayToNum(u16* arr, u16 length)
{
	u8 num = 0; //u16
	for (u8 i = 0; i < length; i++)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	28 17       	cp	r18, r24
    1214:	39 07       	cpc	r19, r25
    1216:	c0 f2       	brcs	.-80     	; 0x11c8 <arrayToNum+0x1c>
	{
		num = num * 10 + arr[i];
	}
	return num;
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
}
    121e:	26 96       	adiw	r28, 0x06	; 6
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <Pass>:
/* FUNCTION TO SET AND COMPARE PASSWORD */

void Pass(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	ca 56       	subi	r28, 0x6A	; 106
    123a:	d0 40       	sbci	r29, 0x00	; 0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
	u16 Pass;
	LCD_Init();
    1246:	0e 94 a0 2a 	call	0x5540	; 0x5540 <LCD_Init>

	u16 num;
	u8 Flag, i;
	u16 MultiArr[4] =
	{ 1000, 100, 10, 1 };  //ARRAY TO STORE USER PASSWORD
    124a:	ae 01       	movw	r20, r28
    124c:	42 5d       	subi	r20, 0xD2	; 210
    124e:	5f 4f       	sbci	r21, 0xFF	; 255
    1250:	a3 96       	adiw	r28, 0x23	; 35
    1252:	5f af       	std	Y+63, r21	; 0x3f
    1254:	4e af       	std	Y+62, r20	; 0x3e
    1256:	a3 97       	sbiw	r28, 0x23	; 35
    1258:	87 e1       	ldi	r24, 0x17	; 23
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	a5 96       	adiw	r28, 0x25	; 37
    125e:	9f af       	std	Y+63, r25	; 0x3f
    1260:	8e af       	std	Y+62, r24	; 0x3e
    1262:	a5 97       	sbiw	r28, 0x25	; 37
    1264:	98 e0       	ldi	r25, 0x08	; 8
    1266:	a6 96       	adiw	r28, 0x26	; 38
    1268:	9f af       	std	Y+63, r25	; 0x3f
    126a:	a6 97       	sbiw	r28, 0x26	; 38
    126c:	a5 96       	adiw	r28, 0x25	; 37
    126e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1270:	bf ad       	ldd	r27, Y+63	; 0x3f
    1272:	a5 97       	sbiw	r28, 0x25	; 37
    1274:	0c 90       	ld	r0, X
    1276:	a5 96       	adiw	r28, 0x25	; 37
    1278:	ee ad       	ldd	r30, Y+62	; 0x3e
    127a:	ff ad       	ldd	r31, Y+63	; 0x3f
    127c:	a5 97       	sbiw	r28, 0x25	; 37
    127e:	31 96       	adiw	r30, 0x01	; 1
    1280:	a5 96       	adiw	r28, 0x25	; 37
    1282:	ff af       	std	Y+63, r31	; 0x3f
    1284:	ee af       	std	Y+62, r30	; 0x3e
    1286:	a5 97       	sbiw	r28, 0x25	; 37
    1288:	a3 96       	adiw	r28, 0x23	; 35
    128a:	ae ad       	ldd	r26, Y+62	; 0x3e
    128c:	bf ad       	ldd	r27, Y+63	; 0x3f
    128e:	a3 97       	sbiw	r28, 0x23	; 35
    1290:	0c 92       	st	X, r0
    1292:	a3 96       	adiw	r28, 0x23	; 35
    1294:	ee ad       	ldd	r30, Y+62	; 0x3e
    1296:	ff ad       	ldd	r31, Y+63	; 0x3f
    1298:	a3 97       	sbiw	r28, 0x23	; 35
    129a:	31 96       	adiw	r30, 0x01	; 1
    129c:	a3 96       	adiw	r28, 0x23	; 35
    129e:	ff af       	std	Y+63, r31	; 0x3f
    12a0:	ee af       	std	Y+62, r30	; 0x3e
    12a2:	a3 97       	sbiw	r28, 0x23	; 35
    12a4:	a6 96       	adiw	r28, 0x26	; 38
    12a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    12a8:	a6 97       	sbiw	r28, 0x26	; 38
    12aa:	f1 50       	subi	r31, 0x01	; 1
    12ac:	a6 96       	adiw	r28, 0x26	; 38
    12ae:	ff af       	std	Y+63, r31	; 0x3f
    12b0:	a6 97       	sbiw	r28, 0x26	; 38
    12b2:	a6 96       	adiw	r28, 0x26	; 38
    12b4:	4f ad       	ldd	r20, Y+63	; 0x3f
    12b6:	a6 97       	sbiw	r28, 0x26	; 38
    12b8:	44 23       	and	r20, r20
    12ba:	c1 f6       	brne	.-80     	; 0x126c <Pass+0x3c>
	Flag = 0;
    12bc:	19 a6       	std	Y+41, r1	; 0x29
	Init_KP(&KP1);
    12be:	87 ee       	ldi	r24, 0xE7	; 231
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <Init_KP>
//USER SET PASSWORD
	LCD_GoToWriteString(0, 4, "WELCOME");
    12c6:	20 e6       	ldi	r18, 0x60	; 96
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	64 e0       	ldi	r22, 0x04	; 4
    12ce:	a9 01       	movw	r20, r18
    12d0:	0e 94 20 35 	call	0x6a40	; 0x6a40 <LCD_GoToWriteString>
	LCD_GoToWriteString(1, 0, "Set Password:");
    12d4:	28 e6       	ldi	r18, 0x68	; 104
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	0e 94 20 35 	call	0x6a40	; 0x6a40 <LCD_GoToWriteString>
    12e2:	26 c0       	rjmp	.+76     	; 0x1330 <Pass+0x100>
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	8a a3       	std	Y+34, r24	; 0x22
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <Pass+0xc4>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    12ea:	87 ee       	ldi	r24, 0xE7	; 231
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <Read_KP>
    12f2:	8a a3       	std	Y+34, r24	; 0x22
	LCD_GoToWriteString(0, 4, "WELCOME");
	LCD_GoToWriteString(1, 0, "Set Password:");
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    12f4:	8a a1       	ldd	r24, Y+34	; 0x22
    12f6:	8f 3f       	cpi	r24, 0xFF	; 255
    12f8:	c1 f3       	breq	.-16     	; 0x12ea <Pass+0xba>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag] = key_pressed;
    12fa:	89 a5       	ldd	r24, Y+41	; 0x29
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8a a1       	ldd	r24, Y+34	; 0x22
    1302:	48 2f       	mov	r20, r24
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	82 0f       	add	r24, r18
    1310:	93 1f       	adc	r25, r19
    1312:	fc 01       	movw	r30, r24
    1314:	bd 96       	adiw	r30, 0x2d	; 45
    1316:	51 83       	std	Z+1, r21	; 0x01
    1318:	40 83       	st	Z, r20
		num = arrayToNum(MultiArr, 4);
    131a:	ce 01       	movw	r24, r28
    131c:	8e 96       	adiw	r24, 0x2e	; 46
    131e:	64 e0       	ldi	r22, 0x04	; 4
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	0e 94 d6 08 	call	0x11ac	; 0x11ac <arrayToNum>
    1326:	9b a7       	std	Y+43, r25	; 0x2b
    1328:	8a a7       	std	Y+42, r24	; 0x2a

		Flag++;
    132a:	89 a5       	ldd	r24, Y+41	; 0x29
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	89 a7       	std	Y+41, r24	; 0x29
	Flag = 0;
	Init_KP(&KP1);
//USER SET PASSWORD
	LCD_GoToWriteString(0, 4, "WELCOME");
	LCD_GoToWriteString(1, 0, "Set Password:");
	while (Flag < 4) //loop till the user finish inserting the pass
    1330:	89 a5       	ldd	r24, Y+41	; 0x29
    1332:	84 30       	cpi	r24, 0x04	; 4
    1334:	b8 f2       	brcs	.-82     	; 0x12e4 <Pass+0xb4>
		num = arrayToNum(MultiArr, 4);

		Flag++;

	}
	LCD_ClearDisplay();
    1336:	0e 94 1e 32 	call	0x643c	; 0x643c <LCD_ClearDisplay>
	Pass = num;
    133a:	8a a5       	ldd	r24, Y+42	; 0x2a
    133c:	9b a5       	ldd	r25, Y+43	; 0x2b
    133e:	9d a7       	std	Y+45, r25	; 0x2d
    1340:	8c a7       	std	Y+44, r24	; 0x2c
	LCD_GoToWriteString(0, 1, "Password Saved!");
    1342:	26 e7       	ldi	r18, 0x76	; 118
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	a9 01       	movw	r20, r18
    134c:	0e 94 20 35 	call	0x6a40	; 0x6a40 <LCD_GoToWriteString>
//SPLIT PASSWORD INTO TWO PARTS BECAUSE EEPROM CAN ONLY STORE 8 BITS PER ADDRESS
	u8 first4digits = Pass / 100; 
    1350:	8c a5       	ldd	r24, Y+44	; 0x2c
    1352:	9d a5       	ldd	r25, Y+45	; 0x2d
    1354:	24 e6       	ldi	r18, 0x64	; 100
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	b9 01       	movw	r22, r18
    135a:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <__udivmodhi4>
    135e:	cb 01       	movw	r24, r22
    1360:	8e ab       	std	Y+54, r24	; 0x36
	u8 last4digits = Pass % 100;
    1362:	8c a5       	ldd	r24, Y+44	; 0x2c
    1364:	9d a5       	ldd	r25, Y+45	; 0x2d
    1366:	24 e6       	ldi	r18, 0x64	; 100
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <__udivmodhi4>
    1370:	8f a3       	std	Y+39, r24	; 0x27

	TWI_voidMaterInit(0x01);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <TWI_voidMaterInit>
	EEPROM_voidSendData(0x1234, first4digits);
    137a:	2e a9       	ldd	r18, Y+54	; 0x36
    137c:	84 e3       	ldi	r24, 0x34	; 52
    137e:	92 e1       	ldi	r25, 0x12	; 18
    1380:	62 2f       	mov	r22, r18
    1382:	0e 94 da 36 	call	0x6db4	; 0x6db4 <EEPROM_voidSendData>
	EEPROM_voidRecieveData(0x1234, &first4digits);
    1386:	9e 01       	movw	r18, r28
    1388:	2a 5c       	subi	r18, 0xCA	; 202
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	84 e3       	ldi	r24, 0x34	; 52
    138e:	92 e1       	ldi	r25, 0x12	; 18
    1390:	b9 01       	movw	r22, r18
    1392:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <EEPROM_voidRecieveData>
	EEPROM_voidSendData(0x1245, last4digits);
    1396:	85 e4       	ldi	r24, 0x45	; 69
    1398:	92 e1       	ldi	r25, 0x12	; 18
    139a:	6f a1       	ldd	r22, Y+39	; 0x27
    139c:	0e 94 da 36 	call	0x6db4	; 0x6db4 <EEPROM_voidSendData>
	EEPROM_voidRecieveData(0x1245, last4digits);
    13a0:	8f a1       	ldd	r24, Y+39	; 0x27
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9c 01       	movw	r18, r24
    13a8:	85 e4       	ldi	r24, 0x45	; 69
    13aa:	92 e1       	ldi	r25, 0x12	; 18
    13ac:	b9 01       	movw	r22, r18
    13ae:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <EEPROM_voidRecieveData>
//User Compare Password

	LCD_GoToWriteString(0, 0, " Enter Password");
    13b2:	26 e8       	ldi	r18, 0x86	; 134
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	a9 01       	movw	r20, r18
    13bc:	0e 94 20 35 	call	0x6a40	; 0x6a40 <LCD_GoToWriteString>
	Flag = 0;
    13c0:	19 a6       	std	Y+41, r1	; 0x29
	u16 com_num;
	u16 MultiArr2[4] =
	{ 1000, 100, 10, 1 };
    13c2:	ce 01       	movw	r24, r28
    13c4:	c7 96       	adiw	r24, 0x37	; 55
    13c6:	a8 96       	adiw	r28, 0x28	; 40
    13c8:	9f af       	std	Y+63, r25	; 0x3f
    13ca:	8e af       	std	Y+62, r24	; 0x3e
    13cc:	a8 97       	sbiw	r28, 0x28	; 40
    13ce:	af e0       	ldi	r26, 0x0F	; 15
    13d0:	b2 e0       	ldi	r27, 0x02	; 2
    13d2:	aa 96       	adiw	r28, 0x2a	; 42
    13d4:	bf af       	std	Y+63, r27	; 0x3f
    13d6:	ae af       	std	Y+62, r26	; 0x3e
    13d8:	aa 97       	sbiw	r28, 0x2a	; 42
    13da:	b8 e0       	ldi	r27, 0x08	; 8
    13dc:	ab 96       	adiw	r28, 0x2b	; 43
    13de:	bf af       	std	Y+63, r27	; 0x3f
    13e0:	ab 97       	sbiw	r28, 0x2b	; 43
    13e2:	aa 96       	adiw	r28, 0x2a	; 42
    13e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    13e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    13e8:	aa 97       	sbiw	r28, 0x2a	; 42
    13ea:	00 80       	ld	r0, Z
    13ec:	aa 96       	adiw	r28, 0x2a	; 42
    13ee:	4e ad       	ldd	r20, Y+62	; 0x3e
    13f0:	5f ad       	ldd	r21, Y+63	; 0x3f
    13f2:	aa 97       	sbiw	r28, 0x2a	; 42
    13f4:	4f 5f       	subi	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	aa 96       	adiw	r28, 0x2a	; 42
    13fa:	5f af       	std	Y+63, r21	; 0x3f
    13fc:	4e af       	std	Y+62, r20	; 0x3e
    13fe:	aa 97       	sbiw	r28, 0x2a	; 42
    1400:	a8 96       	adiw	r28, 0x28	; 40
    1402:	ae ad       	ldd	r26, Y+62	; 0x3e
    1404:	bf ad       	ldd	r27, Y+63	; 0x3f
    1406:	a8 97       	sbiw	r28, 0x28	; 40
    1408:	0c 92       	st	X, r0
    140a:	a8 96       	adiw	r28, 0x28	; 40
    140c:	ee ad       	ldd	r30, Y+62	; 0x3e
    140e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1410:	a8 97       	sbiw	r28, 0x28	; 40
    1412:	31 96       	adiw	r30, 0x01	; 1
    1414:	a8 96       	adiw	r28, 0x28	; 40
    1416:	ff af       	std	Y+63, r31	; 0x3f
    1418:	ee af       	std	Y+62, r30	; 0x3e
    141a:	a8 97       	sbiw	r28, 0x28	; 40
    141c:	ab 96       	adiw	r28, 0x2b	; 43
    141e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1420:	ab 97       	sbiw	r28, 0x2b	; 43
    1422:	f1 50       	subi	r31, 0x01	; 1
    1424:	ab 96       	adiw	r28, 0x2b	; 43
    1426:	ff af       	std	Y+63, r31	; 0x3f
    1428:	ab 97       	sbiw	r28, 0x2b	; 43
    142a:	ab 96       	adiw	r28, 0x2b	; 43
    142c:	4f ad       	ldd	r20, Y+63	; 0x3f
    142e:	ab 97       	sbiw	r28, 0x2b	; 43
    1430:	44 23       	and	r20, r20
    1432:	b9 f6       	brne	.-82     	; 0x13e2 <Pass+0x1b2>
	u8 Num_of_tries = 0;
    1434:	1c a2       	std	Y+36, r1	; 0x24
	u8 Pass_Correct = 0;
    1436:	1b a2       	std	Y+35, r1	; 0x23
    1438:	26 c0       	rjmp	.+76     	; 0x1486 <Pass+0x256>
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	89 a3       	std	Y+33, r24	; 0x21
    143e:	05 c0       	rjmp	.+10     	; 0x144a <Pass+0x21a>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1440:	87 ee       	ldi	r24, 0xE7	; 231
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <Read_KP>
    1448:	89 a3       	std	Y+33, r24	; 0x21
	u8 Num_of_tries = 0;
	u8 Pass_Correct = 0;
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    144a:	89 a1       	ldd	r24, Y+33	; 0x21
    144c:	8f 3f       	cpi	r24, 0xFF	; 255
    144e:	c1 f3       	breq	.-16     	; 0x1440 <Pass+0x210>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr2[Flag] = key_pressed;
    1450:	89 a5       	ldd	r24, Y+41	; 0x29
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	89 a1       	ldd	r24, Y+33	; 0x21
    1458:	48 2f       	mov	r20, r24
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	fc 01       	movw	r30, r24
    146a:	f6 96       	adiw	r30, 0x36	; 54
    146c:	51 83       	std	Z+1, r21	; 0x01
    146e:	40 83       	st	Z, r20
		com_num = arrayToNum(MultiArr2, 4);
    1470:	ce 01       	movw	r24, r28
    1472:	c7 96       	adiw	r24, 0x37	; 55
    1474:	64 e0       	ldi	r22, 0x04	; 4
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	0e 94 d6 08 	call	0x11ac	; 0x11ac <arrayToNum>
    147c:	9e a3       	std	Y+38, r25	; 0x26
    147e:	8d a3       	std	Y+37, r24	; 0x25

		Flag++;
    1480:	89 a5       	ldd	r24, Y+41	; 0x29
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	89 a7       	std	Y+41, r24	; 0x29
	u16 com_num;
	u16 MultiArr2[4] =
	{ 1000, 100, 10, 1 };
	u8 Num_of_tries = 0;
	u8 Pass_Correct = 0;
	while (Flag < 4) //loop till the user finish inserting the pass
    1486:	89 a5       	ldd	r24, Y+41	; 0x29
    1488:	84 30       	cpi	r24, 0x04	; 4
    148a:	b8 f2       	brcs	.-82     	; 0x143a <Pass+0x20a>
		com_num = arrayToNum(MultiArr2, 4);

		Flag++;

	}
	LCD_ClearDisplay();
    148c:	0e 94 1e 32 	call	0x643c	; 0x643c <LCD_ClearDisplay>

	for (i = 0; i < 3; i++) //USER HAVE 3 TRIES ONLY TO ENTER THE CORRECT PASSWORD
    1490:	18 a6       	std	Y+40, r1	; 0x28
    1492:	ee c1       	rjmp	.+988    	; 0x1870 <Pass+0x640>
	{

		while (Flag < 4) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	8e 8f       	std	Y+30, r24	; 0x1e
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <Pass+0x274>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    149a:	87 ee       	ldi	r24, 0xE7	; 231
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <Read_KP>
    14a2:	8e 8f       	std	Y+30, r24	; 0x1e
	{

		while (Flag < 4) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    14a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14a6:	8f 3f       	cpi	r24, 0xFF	; 255
    14a8:	c1 f3       	breq	.-16     	; 0x149a <Pass+0x26a>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr2[Flag] = key_pressed;
    14aa:	89 a5       	ldd	r24, Y+41	; 0x29
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14b2:	48 2f       	mov	r20, r24
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	82 0f       	add	r24, r18
    14c0:	93 1f       	adc	r25, r19
    14c2:	fc 01       	movw	r30, r24
    14c4:	f6 96       	adiw	r30, 0x36	; 54
    14c6:	51 83       	std	Z+1, r21	; 0x01
    14c8:	40 83       	st	Z, r20
			com_num = arrayToNum(MultiArr2, 4);
    14ca:	ce 01       	movw	r24, r28
    14cc:	c7 96       	adiw	r24, 0x37	; 55
    14ce:	64 e0       	ldi	r22, 0x04	; 4
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <arrayToNum>
    14d6:	9e a3       	std	Y+38, r25	; 0x26
    14d8:	8d a3       	std	Y+37, r24	; 0x25

			Flag++;
    14da:	89 a5       	ldd	r24, Y+41	; 0x29
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	89 a7       	std	Y+41, r24	; 0x29
	LCD_ClearDisplay();

	for (i = 0; i < 3; i++) //USER HAVE 3 TRIES ONLY TO ENTER THE CORRECT PASSWORD
	{

		while (Flag < 4) //loop till the user finish inserting the pass
    14e0:	89 a5       	ldd	r24, Y+41	; 0x29
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	b8 f2       	brcs	.-82     	; 0x1494 <Pass+0x264>
			com_num = arrayToNum(MultiArr2, 4);

			Flag++;

		}
		Flag = 0;
    14e6:	19 a6       	std	Y+41, r1	; 0x29
		LCD_ClearDisplay();
    14e8:	0e 94 1e 32 	call	0x643c	; 0x643c <LCD_ClearDisplay>
		u8 z, y;
		u16 TotPass;

		EEPROM_voidRecieveData(0x1234, &z);
    14ec:	9e 01       	movw	r18, r28
    14ee:	21 5c       	subi	r18, 0xC1	; 193
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	84 e3       	ldi	r24, 0x34	; 52
    14f4:	92 e1       	ldi	r25, 0x12	; 18
    14f6:	b9 01       	movw	r22, r18
    14f8:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <EEPROM_voidRecieveData>
		EEPROM_voidRecieveData(0x1245, &y);
    14fc:	9e 01       	movw	r18, r28
    14fe:	20 5c       	subi	r18, 0xC0	; 192
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	85 e4       	ldi	r24, 0x45	; 69
    1504:	92 e1       	ldi	r25, 0x12	; 18
    1506:	b9 01       	movw	r22, r18
    1508:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <EEPROM_voidRecieveData>
		TotPass = z * 100 + y;  //MERGE LAST TWO AND  FIRST TWO DIGITS OF PASSWORD 
    150c:	8f ad       	ldd	r24, Y+63	; 0x3f
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	84 e6       	ldi	r24, 0x64	; 100
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	d9 01       	movw	r26, r18
    1518:	a8 9f       	mul	r26, r24
    151a:	90 01       	movw	r18, r0
    151c:	a9 9f       	mul	r26, r25
    151e:	30 0d       	add	r19, r0
    1520:	b8 9f       	mul	r27, r24
    1522:	30 0d       	add	r19, r0
    1524:	11 24       	eor	r1, r1
    1526:	fe 01       	movw	r30, r28
    1528:	e0 5c       	subi	r30, 0xC0	; 192
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	98 a3       	std	Y+32, r25	; 0x20
    1538:	8f 8f       	std	Y+31, r24	; 0x1f

		if (com_num == TotPass) //COMPARE BETWEEN SAVED AND USER PASSWORD
    153a:	2d a1       	ldd	r18, Y+37	; 0x25
    153c:	3e a1       	ldd	r19, Y+38	; 0x26
    153e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1540:	98 a1       	ldd	r25, Y+32	; 0x20
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	09 f0       	breq	.+2      	; 0x154a <Pass+0x31a>
    1548:	08 c1       	rjmp	.+528    	; 0x175a <Pass+0x52a>
		{
			LCD_WriteString("PASSWORD CORRECT");
    154a:	86 e9       	ldi	r24, 0x96	; 150
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 40 30 	call	0x6080	; 0x6080 <LCD_WriteString>

			DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_OUTPUT); 
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	62 e0       	ldi	r22, 0x02	; 2
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
			DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_HIGH); //CORRECT PASSWORD GREEN LED ON
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			{ .SM_Port = DIO_u8PORTD, .Blue_Pin = DIO_u8PIN4, .Pink_Pin =
					DIO_u8PIN5, .Yellow_Pin = DIO_u8PIN6, .Orange_Pin =
					DIO_u8PIN7, .Step_Type = Full_Step, .SM_Direction =
					Clock_Wise, .SM_delay = 0, .SM_No_of_Steps = 60

					};
    1566:	80 e1       	ldi	r24, 0x10	; 16
    1568:	fe 01       	movw	r30, r28
    156a:	ef 5b       	subi	r30, 0xBF	; 191
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	df 01       	movw	r26, r30
    1570:	48 2f       	mov	r20, r24
    1572:	1d 92       	st	X+, r1
    1574:	4a 95       	dec	r20
    1576:	e9 f7       	brne	.-6      	; 0x1572 <Pass+0x342>
    1578:	fe 01       	movw	r30, r28
    157a:	ef 5b       	subi	r30, 0xBF	; 191
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	80 83       	st	Z, r24
    1582:	fe 01       	movw	r30, r28
    1584:	ee 5b       	subi	r30, 0xBE	; 190
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	84 e0       	ldi	r24, 0x04	; 4
    158a:	80 83       	st	Z, r24
    158c:	fe 01       	movw	r30, r28
    158e:	ed 5b       	subi	r30, 0xBD	; 189
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	85 e0       	ldi	r24, 0x05	; 5
    1594:	80 83       	st	Z, r24
    1596:	fe 01       	movw	r30, r28
    1598:	ec 5b       	subi	r30, 0xBC	; 188
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	86 e0       	ldi	r24, 0x06	; 6
    159e:	80 83       	st	Z, r24
    15a0:	fe 01       	movw	r30, r28
    15a2:	eb 5b       	subi	r30, 0xBB	; 187
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	87 e0       	ldi	r24, 0x07	; 7
    15a8:	80 83       	st	Z, r24
    15aa:	fe 01       	movw	r30, r28
    15ac:	e9 5b       	subi	r30, 0xB9	; 185
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	80 83       	st	Z, r24
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 5b       	subi	r30, 0xB7	; 183
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	8c e3       	ldi	r24, 0x3C	; 60
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	80 83       	st	Z, r24
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	a2 83       	std	Z+2, r26	; 0x02
    15c8:	b3 83       	std	Z+3, r27	; 0x03

			Init_SM(&St_Motor); //DOOR WORKING WITH A STEPPER MOTOR 1-DOOR OPEN 
    15ca:	ce 01       	movw	r24, r28
    15cc:	8f 5b       	subi	r24, 0xBF	; 191
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <Init_SM>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e8       	ldi	r25, 0x80	; 128
    15d8:	ab e3       	ldi	r26, 0x3B	; 59
    15da:	b5 e4       	ldi	r27, 0x45	; 69
    15dc:	89 8f       	std	Y+25, r24	; 0x19
    15de:	9a 8f       	std	Y+26, r25	; 0x1a
    15e0:	ab 8f       	std	Y+27, r26	; 0x1b
    15e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	69 8d       	ldd	r22, Y+25	; 0x19
    15e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a ef       	ldi	r20, 0xFA	; 250
    15f2:	54 e4       	ldi	r21, 0x44	; 68
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8d 8b       	std	Y+21, r24	; 0x15
    15fe:	9e 8b       	std	Y+22, r25	; 0x16
    1600:	af 8b       	std	Y+23, r26	; 0x17
    1602:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1604:	6d 89       	ldd	r22, Y+21	; 0x15
    1606:	7e 89       	ldd	r23, Y+22	; 0x16
    1608:	8f 89       	ldd	r24, Y+23	; 0x17
    160a:	98 8d       	ldd	r25, Y+24	; 0x18
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f e3       	ldi	r21, 0x3F	; 63
    1614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1618:	88 23       	and	r24, r24
    161a:	2c f4       	brge	.+10     	; 0x1626 <Pass+0x3f6>
		__ticks = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c 8b       	std	Y+20, r25	; 0x14
    1622:	8b 8b       	std	Y+19, r24	; 0x13
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <Pass+0x474>
	else if (__tmp > 65535)
    1626:	6d 89       	ldd	r22, Y+21	; 0x15
    1628:	7e 89       	ldd	r23, Y+22	; 0x16
    162a:	8f 89       	ldd	r24, Y+23	; 0x17
    162c:	98 8d       	ldd	r25, Y+24	; 0x18
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	57 e4       	ldi	r21, 0x47	; 71
    1636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	4c f5       	brge	.+82     	; 0x1690 <Pass+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163e:	69 8d       	ldd	r22, Y+25	; 0x19
    1640:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e2       	ldi	r20, 0x20	; 32
    164c:	51 e4       	ldi	r21, 0x41	; 65
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <Pass+0x456>
    1668:	88 ec       	ldi	r24, 0xC8	; 200
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9a 8b       	std	Y+18, r25	; 0x12
    166e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1670:	89 89       	ldd	r24, Y+17	; 0x11
    1672:	9a 89       	ldd	r25, Y+18	; 0x12
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <Pass+0x444>
    1678:	9a 8b       	std	Y+18, r25	; 0x12
    167a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	8b 89       	ldd	r24, Y+19	; 0x13
    167e:	9c 89       	ldd	r25, Y+20	; 0x14
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	9c 8b       	std	Y+20, r25	; 0x14
    1684:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1686:	8b 89       	ldd	r24, Y+19	; 0x13
    1688:	9c 89       	ldd	r25, Y+20	; 0x14
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f7       	brne	.-38     	; 0x1668 <Pass+0x438>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <Pass+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	6d 89       	ldd	r22, Y+21	; 0x15
    1692:	7e 89       	ldd	r23, Y+22	; 0x16
    1694:	8f 89       	ldd	r24, Y+23	; 0x17
    1696:	98 8d       	ldd	r25, Y+24	; 0x18
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9c 8b       	std	Y+20, r25	; 0x14
    16a2:	8b 8b       	std	Y+19, r24	; 0x13
    16a4:	8b 89       	ldd	r24, Y+19	; 0x13
    16a6:	9c 89       	ldd	r25, Y+20	; 0x14
    16a8:	98 8b       	std	Y+16, r25	; 0x10
    16aa:	8f 87       	std	Y+15, r24	; 0x0f
    16ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ae:	98 89       	ldd	r25, Y+16	; 0x10
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <Pass+0x480>
    16b4:	98 8b       	std	Y+16, r25	; 0x10
    16b6:	8f 87       	std	Y+15, r24	; 0x0f
						{ .SM_Port = DIO_u8PORTD, .Blue_Pin = DIO_u8PIN4, .Pink_Pin =
								DIO_u8PIN5, .Yellow_Pin = DIO_u8PIN6, .Orange_Pin =
								DIO_u8PIN7, .Step_Type = Full_Step, .SM_Direction =
								Counter_Clock_Wise, .SM_delay = 0, .SM_No_of_Steps = 73

								};
    16b8:	ce 01       	movw	r24, r28
    16ba:	8f 5a       	subi	r24, 0xAF	; 175
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	20 e1       	ldi	r18, 0x10	; 16
    16c0:	fc 01       	movw	r30, r24
    16c2:	df 01       	movw	r26, r30
    16c4:	42 2f       	mov	r20, r18
    16c6:	1d 92       	st	X+, r1
    16c8:	4a 95       	dec	r20
    16ca:	e9 f7       	brne	.-6      	; 0x16c6 <Pass+0x496>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ef 5a       	subi	r30, 0xAF	; 175
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	80 83       	st	Z, r24
    16d6:	fe 01       	movw	r30, r28
    16d8:	ef 5a       	subi	r30, 0xAF	; 175
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	84 e0       	ldi	r24, 0x04	; 4
    16de:	81 83       	std	Z+1, r24	; 0x01
    16e0:	fe 01       	movw	r30, r28
    16e2:	ef 5a       	subi	r30, 0xAF	; 175
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	85 e0       	ldi	r24, 0x05	; 5
    16e8:	82 83       	std	Z+2, r24	; 0x02
    16ea:	fe 01       	movw	r30, r28
    16ec:	ef 5a       	subi	r30, 0xAF	; 175
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	86 e0       	ldi	r24, 0x06	; 6
    16f2:	83 83       	std	Z+3, r24	; 0x03
    16f4:	fe 01       	movw	r30, r28
    16f6:	ef 5a       	subi	r30, 0xAF	; 175
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	87 e0       	ldi	r24, 0x07	; 7
    16fc:	84 83       	std	Z+4, r24	; 0x04
    16fe:	fe 01       	movw	r30, r28
    1700:	ef 5a       	subi	r30, 0xAF	; 175
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	86 83       	std	Z+6, r24	; 0x06
    1708:	fe 01       	movw	r30, r28
    170a:	ef 5a       	subi	r30, 0xAF	; 175
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	89 e4       	ldi	r24, 0x49	; 73
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	80 87       	std	Z+8, r24	; 0x08
    1718:	91 87       	std	Z+9, r25	; 0x09
    171a:	a2 87       	std	Z+10, r26	; 0x0a
    171c:	b3 87       	std	Z+11, r27	; 0x0b
			Init_SM(&CL_Motor); //2-DOOR CLOSE
    171e:	ce 01       	movw	r24, r28
    1720:	8f 5a       	subi	r24, 0xAF	; 175
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <Init_SM>
			
		
			u8 Start_U2 = 1; //USART FLAG
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	8d 8f       	std	Y+29, r24	; 0x1d
			
			//INIT USART TO TRANSMIT A FLAG TO INIT MICROCONTROLLER 2
			
				DIO_VoidSetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_OUTPUT);
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
				DIO_VoidSetPinDirection(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_OUTPUT);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
				DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);  
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	62 e0       	ldi	r22, 0x02	; 2
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				USART_voidInit();
    174a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <USART_voidInit>
				USART_voidTransmit(Start_U2);
    174e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1750:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <USART_voidTransmit>

				while(1)
				{
					Void_LDR(); //LDR TO DETECT LIGHT OUTSIDE (LED ON IF DARK)
    1754:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <Void_LDR>
    1758:	fd cf       	rjmp	.-6      	; 0x1754 <Pass+0x524>
			LCD_ClearDisplay();

		}
		else
		{
			LCD_WriteString("PLEASE TRY AGAIN"); //USER ENTER THE PASSWORD 
    175a:	87 ea       	ldi	r24, 0xA7	; 167
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 40 30 	call	0x6080	; 0x6080 <LCD_WriteString>
			Num_of_tries++;
    1762:	8c a1       	ldd	r24, Y+36	; 0x24
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	8c a3       	std	Y+36, r24	; 0x24
			//RED LED TOGGLES WHEN USER ENTER THE PASSWORD WRONG
			DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_OUTPUT);	//RED LED
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
			DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_HIGH);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	63 e0       	ldi	r22, 0x03	; 3
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a8 e4       	ldi	r26, 0x48	; 72
    1782:	b2 e4       	ldi	r27, 0x42	; 66
    1784:	8b 87       	std	Y+11, r24	; 0x0b
    1786:	9c 87       	std	Y+12, r25	; 0x0c
    1788:	ad 87       	std	Y+13, r26	; 0x0d
    178a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6b 85       	ldd	r22, Y+11	; 0x0b
    178e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1790:	8d 85       	ldd	r24, Y+13	; 0x0d
    1792:	9e 85       	ldd	r25, Y+14	; 0x0e
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a ef       	ldi	r20, 0xFA	; 250
    179a:	54 e4       	ldi	r21, 0x44	; 68
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8f 83       	std	Y+7, r24	; 0x07
    17a6:	98 87       	std	Y+8, r25	; 0x08
    17a8:	a9 87       	std	Y+9, r26	; 0x09
    17aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <Pass+0x59e>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <Pass+0x61c>
	else if (__tmp > 65535)
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <Pass+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	0f c0       	rjmp	.+30     	; 0x182e <Pass+0x5fe>
    1810:	88 ec       	ldi	r24, 0xC8	; 200
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <Pass+0x5ec>
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <Pass+0x5e0>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <Pass+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6f 81       	ldd	r22, Y+7	; 0x07
    183a:	78 85       	ldd	r23, Y+8	; 0x08
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <Pass+0x628>
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_LOW);
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	63 e0       	ldi	r22, 0x03	; 3
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
		Flag++;

	}
	LCD_ClearDisplay();

	for (i = 0; i < 3; i++) //USER HAVE 3 TRIES ONLY TO ENTER THE CORRECT PASSWORD
    186a:	88 a5       	ldd	r24, Y+40	; 0x28
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	88 a7       	std	Y+40, r24	; 0x28
    1870:	88 a5       	ldd	r24, Y+40	; 0x28
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	08 f4       	brcc	.+2      	; 0x1878 <Pass+0x648>
    1876:	34 ce       	rjmp	.-920    	; 0x14e0 <Pass+0x2b0>
			_delay_ms(50);
			DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_LOW);
		}

	}
	if (Num_of_tries == 3) //USER ENTERD THE PASSWORD WRONG FOR 3 TIMES (ACCESS DENIED)
    1878:	8c a1       	ldd	r24, Y+36	; 0x24
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	21 f5       	brne	.+72     	; 0x18c6 <Pass+0x696>
	{
		LCD_ClearDisplay();
    187e:	0e 94 1e 32 	call	0x643c	; 0x643c <LCD_ClearDisplay>
		LCD_GoToWriteString(0, 0, "NO MORE TRIES");
    1882:	28 eb       	ldi	r18, 0xB8	; 184
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	a9 01       	movw	r20, r18
    188c:	0e 94 20 35 	call	0x6a40	; 0x6a40 <LCD_GoToWriteString>
		LCD_GoToWriteString(1, 0, "ACCESS DENIED ");
    1890:	26 ec       	ldi	r18, 0xC6	; 198
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	a9 01       	movw	r20, r18
    189a:	0e 94 20 35 	call	0x6a40	; 0x6a40 <LCD_GoToWriteString>

		DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_OUTPUT);	
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	63 e0       	ldi	r22, 0x03	; 3
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
		DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_OUTPUT); 
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	64 e0       	ldi	r22, 0x04	; 4
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_HIGH); //RED LED REMAINS
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	63 e0       	ldi	r22, 0x03	; 3
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH); //BUZZER START
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	64 e0       	ldi	r22, 0x04	; 4
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	}
}
    18c6:	c6 59       	subi	r28, 0x96	; 150
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <Set_Temp>:

u8 Temp; //GLOBAL LM35 TEMPERATURE VALUE
extern u8 Act_temp = 0; //TEMPERATURE ENTERED BY USER

void Set_Temp(u8 *Ptr_Temp)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	67 97       	sbiw	r28, 0x17	; 23
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	9f 8b       	std	Y+23, r25	; 0x17
    18f0:	8e 8b       	std	Y+22, r24	; 0x16
	DIO_u8PORTC, .KP_Colum3_PORT = DIO_u8PORTC, .KP_Row1_PORT = DIO_u8PORTC, .KP_Row2_PORT = DIO_u8PORTC,
			.KP_Row3_PORT = DIO_u8PORTC, .KP_Row4_PORT = DIO_u8PORTC,
			.KP_Colum1_PIN = DIO_u8PIN0, .KP_Colum2_PIN = DIO_u8PIN1,
			.KP_Colum3_PIN = DIO_u8PIN2, .KP_Colum4_PIN = DIO_u8PIN3, .KP_Row1_PIN =
			DIO_u8PIN4, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
			.KP_Row4_PIN = DIO_u8PIN7 };
    18f2:	80 e1       	ldi	r24, 0x10	; 16
    18f4:	fe 01       	movw	r30, r28
    18f6:	34 96       	adiw	r30, 0x04	; 4
    18f8:	df 01       	movw	r26, r30
    18fa:	98 2f       	mov	r25, r24
    18fc:	1d 92       	st	X+, r1
    18fe:	9a 95       	dec	r25
    1900:	e9 f7       	brne	.-6      	; 0x18fc <Set_Temp+0x22>
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	8c 83       	std	Y+4, r24	; 0x04
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	8e 83       	std	Y+6, r24	; 0x06
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	88 87       	std	Y+8, r24	; 0x08
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	89 87       	std	Y+9, r24	; 0x09
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	8a 87       	std	Y+10, r24	; 0x0a
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	8b 87       	std	Y+11, r24	; 0x0b
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	8d 87       	std	Y+13, r24	; 0x0d
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	8e 87       	std	Y+14, r24	; 0x0e
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	8f 87       	std	Y+15, r24	; 0x0f
    192a:	84 e0       	ldi	r24, 0x04	; 4
    192c:	88 8b       	std	Y+16, r24	; 0x10
    192e:	85 e0       	ldi	r24, 0x05	; 5
    1930:	89 8b       	std	Y+17, r24	; 0x11
    1932:	86 e0       	ldi	r24, 0x06	; 6
    1934:	8a 8b       	std	Y+18, r24	; 0x12
    1936:	87 e0       	ldi	r24, 0x07	; 7
    1938:	8b 8b       	std	Y+19, r24	; 0x13
	
	Init_KP(&KP1); //INTI KEYPAD TO SET TEMPERATURE
    193a:	ce 01       	movw	r24, r28
    193c:	04 96       	adiw	r24, 0x04	; 4
    193e:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <Init_KP>
	u8 counter = 0; // COUNTER LOOPS TO SAVE TWO NUMBERS IN ARRAY
    1942:	1b 82       	std	Y+3, r1	; 0x03
	u8 key_pressed;
	u8 arr[2] =
	{ 0, 0 }; // ARRAY TO SAVE TEMPERATURE VALUE
    1944:	1c 8a       	std	Y+20, r1	; 0x14
    1946:	1d 8a       	std	Y+21, r1	; 0x15
	u8 LM35_VAL = 0;
    1948:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteString("Set Temp:");
    194a:	85 ed       	ldi	r24, 0xD5	; 213
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 40 30 	call	0x6080	; 0x6080 <LCD_WriteString>
	LCD_GoToWriteChar(0, 11, 'C');
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	6b e0       	ldi	r22, 0x0B	; 11
    1956:	43 e4       	ldi	r20, 0x43	; 67
    1958:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <LCD_GoToWriteChar>
    195c:	20 c0       	rjmp	.+64     	; 0x199e <Set_Temp+0xc4>
	while (counter < 2)
	{
		key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	05 c0       	rjmp	.+10     	; 0x196e <Set_Temp+0x94>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{
			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1964:	ce 01       	movw	r24, r28
    1966:	04 96       	adiw	r24, 0x04	; 4
    1968:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <Read_KP>
    196c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_WriteString("Set Temp:");
	LCD_GoToWriteChar(0, 11, 'C');
	while (counter < 2)
	{
		key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	8f 3f       	cpi	r24, 0xFF	; 255
    1972:	c1 f3       	breq	.-16     	; 0x1964 <Set_Temp+0x8a>
		{
			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
		}

		arr[counter] = key_pressed;
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	ce 01       	movw	r24, r28
    197c:	44 96       	adiw	r24, 0x14	; 20
    197e:	fc 01       	movw	r30, r24
    1980:	e2 0f       	add	r30, r18
    1982:	f3 1f       	adc	r31, r19
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 83       	st	Z, r24

		LCD_GoToWriteNumber(0, 9 + counter, key_pressed);
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	98 2f       	mov	r25, r24
    198c:	97 5f       	subi	r25, 0xF7	; 247
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	69 2f       	mov	r22, r25
    1992:	4a 81       	ldd	r20, Y+2	; 0x02
    1994:	0e 94 c0 34 	call	0x6980	; 0x6980 <LCD_GoToWriteNumber>

		counter++;
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	8f 5f       	subi	r24, 0xFF	; 255
    199c:	8b 83       	std	Y+3, r24	; 0x03
	u8 arr[2] =
	{ 0, 0 }; // ARRAY TO SAVE TEMPERATURE VALUE
	u8 LM35_VAL = 0;
	LCD_WriteString("Set Temp:");
	LCD_GoToWriteChar(0, 11, 'C');
	while (counter < 2)
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	e8 f2       	brcs	.-70     	; 0x195e <Set_Temp+0x84>
		LCD_GoToWriteNumber(0, 9 + counter, key_pressed);

		counter++;

	}
	*Ptr_Temp = arr[0] * 10 + arr[1]; //MERGE THE TWO NUMBERS OF ARRAY
    19a4:	8c 89       	ldd	r24, Y+20	; 0x14
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 01       	movw	r18, r24
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	c9 01       	movw	r24, r18
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	98 2f       	mov	r25, r24
    19c0:	8d 89       	ldd	r24, Y+21	; 0x15
    19c2:	89 0f       	add	r24, r25
    19c4:	ee 89       	ldd	r30, Y+22	; 0x16
    19c6:	ff 89       	ldd	r31, Y+23	; 0x17
    19c8:	80 83       	st	Z, r24

}
    19ca:	67 96       	adiw	r28, 0x17	; 23
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <Temp_Monitoring>:

void Temp_Monitoring() //MONITOR THE TEMPERATURE BY CONTROL AC / HEATER
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62

	DIO_VoidSetPinDirection(DIO_u8PORTB,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	66 e0       	ldi	r22, 0x06	; 6
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_OUTPUT);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	
	LM35_voidReadValue(DIO_u8PIN0,&Temp);
    19f8:	26 e4       	ldi	r18, 0x46	; 70
    19fa:	32 e0       	ldi	r19, 0x02	; 2
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	b9 01       	movw	r22, r18
    1a00:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <LM35_voidReadValue>
	
	if ( Temp == Act_temp )
    1a04:	90 91 46 02 	lds	r25, 0x0246
    1a08:	80 91 3d 02 	lds	r24, 0x023D
    1a0c:	98 17       	cp	r25, r24
    1a0e:	59 f4       	brne	.+22     	; 0x1a26 <Temp_Monitoring+0x4a>
	{
		DIO_VoidSetPinValue(DIO_u8PORTB,DIO_u8PIN6,DIO_u8PIN_LOW);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	66 e0       	ldi	r22, 0x06	; 6
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_LOW);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	67 e0       	ldi	r22, 0x07	; 7
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <Temp_Monitoring+0x8c>
	}
	else if(Temp < Act_temp)
    1a26:	90 91 46 02 	lds	r25, 0x0246
    1a2a:	80 91 3d 02 	lds	r24, 0x023D
    1a2e:	98 17       	cp	r25, r24
    1a30:	58 f4       	brcc	.+22     	; 0x1a48 <Temp_Monitoring+0x6c>
		{
		DIO_VoidSetPinValue(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_LOW);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	67 e0       	ldi	r22, 0x07	; 7
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTB,DIO_u8PIN6,DIO_u8PIN_HIGH);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	66 e0       	ldi	r22, 0x06	; 6
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    1a46:	10 c0       	rjmp	.+32     	; 0x1a68 <Temp_Monitoring+0x8c>
		}
	else if(Temp > Act_temp)
    1a48:	90 91 46 02 	lds	r25, 0x0246
    1a4c:	80 91 3d 02 	lds	r24, 0x023D
    1a50:	89 17       	cp	r24, r25
    1a52:	50 f4       	brcc	.+20     	; 0x1a68 <Temp_Monitoring+0x8c>
			{
		DIO_VoidSetPinValue(DIO_u8PORTB,DIO_u8PIN6,DIO_u8PIN_LOW);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	66 e0       	ldi	r22, 0x06	; 6
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_HIGH);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	67 e0       	ldi	r22, 0x07	; 7
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			}
	
	
	
}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <Void_LDR>:
void Void_LDR() //MONITOR LED ACCORDING TO LIGHT
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <Void_LDR+0x6>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <Void_LDR+0x8>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    1a7a:	0e 94 a0 2a 	call	0x5540	; 0x5540 <LCD_Init>
	u16 Read_LDR = 0;
    1a7e:	1a 82       	std	Y+2, r1	; 0x02
    1a80:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidInit();
    1a82:	0e 94 80 14 	call	0x2900	; 0x2900 <ADC_voidInit>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8PIN_OUTPUT);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	63 e0       	ldi	r22, 0x03	; 3
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
		ADC_StartConv(ADC_CHANNEL3, &Read_LDR);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	9e 01       	movw	r18, r28
    1a94:	2f 5f       	subi	r18, 0xFF	; 255
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	b9 01       	movw	r22, r18
    1a9a:	0e 94 9c 14 	call	0x2938	; 0x2938 <ADC_StartConv>
		if ((Read_LDR / 204.8) <= 5 && (Read_LDR / 204.8) > 3) {	
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	cc 01       	movw	r24, r24
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	2d ec       	ldi	r18, 0xCD	; 205
    1aba:	3c ec       	ldi	r19, 0xCC	; 204
    1abc:	4c e4       	ldi	r20, 0x4C	; 76
    1abe:	53 e4       	ldi	r21, 0x43	; 67
    1ac0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	1c 82       	std	Y+4, r1	; 0x04
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 ea       	ldi	r20, 0xA0	; 160
    1ad4:	50 e4       	ldi	r21, 0x40	; 64
    1ad6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	14 f0       	brlt	.+4      	; 0x1ae2 <Void_LDR+0x74>
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	89 27       	eor	r24, r25
    1ae8:	88 23       	and	r24, r24
    1aea:	69 f5       	brne	.+90     	; 0x1b46 <Void_LDR+0xd8>
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	cc 01       	movw	r24, r24
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	2d ec       	ldi	r18, 0xCD	; 205
    1b08:	3c ec       	ldi	r19, 0xCC	; 204
    1b0a:	4c e4       	ldi	r20, 0x4C	; 76
    1b0c:	53 e4       	ldi	r21, 0x43	; 67
    1b0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	1b 82       	std	Y+3, r1	; 0x03
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e4       	ldi	r20, 0x40	; 64
    1b22:	50 e4       	ldi	r21, 0x40	; 64
    1b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	14 f4       	brge	.+4      	; 0x1b30 <Void_LDR+0xc2>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	89 27       	eor	r24, r25
    1b36:	88 23       	and	r24, r24
    1b38:	31 f4       	brne	.+12     	; 0x1b46 <Void_LDR+0xd8>

			DIO_VoidSetPinValue(DIO_u8PORTB, DIO_u8PIN3, DIO_u8PIN_HIGH);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    1b44:	43 c0       	rjmp	.+134    	; 0x1bcc <Void_LDR+0x15e>
		}

		else if ((Read_LDR / 204.8) <= 3 && (Read_LDR / 204.8) > 0) {
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	cc 01       	movw	r24, r24
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	2d ec       	ldi	r18, 0xCD	; 205
    1b62:	3c ec       	ldi	r19, 0xCC	; 204
    1b64:	4c e4       	ldi	r20, 0x4C	; 76
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e4       	ldi	r20, 0x40	; 64
    1b7a:	50 e4       	ldi	r21, 0x40	; 64
    1b7c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	24 f1       	brlt	.+72     	; 0x1bcc <Void_LDR+0x15e>
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	cc 01       	movw	r24, r24
    1b8a:	a0 e0       	ldi	r26, 0x00	; 0
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	2d ec       	ldi	r18, 0xCD	; 205
    1ba0:	3c ec       	ldi	r19, 0xCC	; 204
    1ba2:	4c e4       	ldi	r20, 0x4C	; 76
    1ba4:	53 e4       	ldi	r21, 0x43	; 67
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <Void_LDR+0x15e>
		
			DIO_VoidSetPinValue(DIO_u8PORTB, DIO_u8PIN3, DIO_u8PIN_LOW);
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	63 e0       	ldi	r22, 0x03	; 3
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>

		}

}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <USART_voidInit>:
#include "USART_Interface.h"




void USART_voidInit(void){
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	USART_UCSRB_REG |= (1 << USART_UCSRB_RIXEN_BIT) | (1 << USART_UCSRB_TXEN_BIT);
    1be4:	aa e2       	ldi	r26, 0x2A	; 42
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	ea e2       	ldi	r30, 0x2A	; 42
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	88 61       	ori	r24, 0x18	; 24
    1bf0:	8c 93       	st	X, r24

	USART_UCSRC_REG = (1 <<USART_UCSRC_URSEL_BIT) | (0 << USART_UCSRC_UMSEL_BIT) | (0 << USART_UCSRC_UPM0_BIT)
    1bf2:	e0 e4       	ldi	r30, 0x40	; 64
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	86 e8       	ldi	r24, 0x86	; 134
    1bf8:	80 83       	st	Z, r24
			| (0 << USART_UCSRC_UPM1_BIT) | (0 << USART_UCSRC_USBS_BIT) | (1 << USART_UCSRC_UCSZ0_BIT)
			| (1 << USART_UCSRC_UCSZ1_BIT) | (0 << USART_UCSRB_UCSZ2_BIT);

	u8 Baud = 51;
    1bfa:	83 e3       	ldi	r24, 0x33	; 51
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	USART_UBRRL_REG = Baud;
    1bfe:	e9 e2       	ldi	r30, 0x29	; 41
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	80 83       	st	Z, r24
	USART_UBRRH_REG = (Baud >> 8);
    1c06:	e0 e4       	ldi	r30, 0x40	; 64
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	89 2f       	mov	r24, r25
    1c12:	99 0f       	add	r25, r25
    1c14:	99 0b       	sbc	r25, r25
    1c16:	80 83       	st	Z, r24
}
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <USART_voidTransmit>:
void USART_voidTransmit(u8 Copy_u8Data){
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	89 83       	std	Y+1, r24	; 0x01
while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_UDRE_BIT)==0){
    1c2c:	eb e2       	ldi	r30, 0x2B	; 43
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	82 95       	swap	r24
    1c34:	86 95       	lsr	r24
    1c36:	87 70       	andi	r24, 0x07	; 7
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	81 70       	andi	r24, 0x01	; 1
    1c3e:	90 70       	andi	r25, 0x00	; 0
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	a1 f3       	breq	.-24     	; 0x1c2c <USART_voidTransmit+0xc>
};
USART_UDR_REG=Copy_u8Data;
    1c44:	ec e2       	ldi	r30, 0x2C	; 44
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	80 83       	st	Z, r24
}
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <USART_voidRecieve>:
void USART_voidRecieve(u8 *Copy_ptu8DataSent){
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <USART_voidRecieve+0x6>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_RXC_BIT)==0){
    1c62:	eb e2       	ldi	r30, 0x2B	; 43
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 23       	and	r24, r24
    1c6a:	dc f7       	brge	.-10     	; 0x1c62 <USART_voidRecieve+0xe>

	}

	*Copy_ptu8DataSent=USART_UDR_REG;
    1c6c:	ec e2       	ldi	r30, 0x2C	; 44
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	80 83       	st	Z, r24
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <USART_voidSendString>:
void USART_voidSendString(u8* Copy_pu8String)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <USART_voidSendString+0x6>
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	9b 83       	std	Y+3, r25	; 0x03
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <USART_voidSendString+0x30>

	u8 i;
	while (Copy_pu8String[i] != '\0')
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	e2 0f       	add	r30, r18
    1ca2:	f3 1f       	adc	r31, r19
    1ca4:	90 81       	ld	r25, Z
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	89 2f       	mov	r24, r25
    1cae:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <USART_voidTransmit>
}
void USART_voidSendString(u8* Copy_pu8String)
{

	u8 i;
	while (Copy_pu8String[i] != '\0')
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e2 0f       	add	r30, r18
    1cc0:	f3 1f       	adc	r31, r19
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 23       	and	r24, r24
    1cc6:	31 f7       	brne	.-52     	; 0x1c94 <USART_voidSendString+0x12>
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
	    }
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <USART_voidDisable>:




void USART_voidDisable(void)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    // Clear the USART transmitter and receiver enable bits
    USART_UCSRB_REG &= ~((1 << USART_UCSRB_TXEN_BIT) | (1 << USART_UCSRB_RIXEN_BIT));
    1cdc:	aa e2       	ldi	r26, 0x2A	; 42
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ea e2       	ldi	r30, 0x2A	; 42
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	87 7e       	andi	r24, 0xE7	; 231
    1ce8:	8c 93       	st	X, r24
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <TWI_voidMaterInit>:



/*Initialize Master*/
void TWI_voidMaterInit(u8 Copy_u8SlaveAddress)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	0f 92       	push	r0
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	/*1-Choose Prescaler*/
	TWI_TWBR_REG=(u8)(((FCPU/SCL)-16)/2);
    1cfc:	e0 e2       	ldi	r30, 0x20	; 32
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	80 83       	st	Z, r24
	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    1d04:	e2 e2       	ldi	r30, 0x22	; 34
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	88 0f       	add	r24, r24
    1d0c:	80 83       	st	Z, r24
 	 /*3-enable*/
 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1d0e:	a6 e5       	ldi	r26, 0x56	; 86
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e6 e5       	ldi	r30, 0x56	; 86
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	84 60       	ori	r24, 0x04	; 4
    1d1a:	8c 93       	st	X, r24
}
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <TWI_voidSlaveInit>:
/*Initialize Slave*/
void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01

	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    1d30:	e2 e2       	ldi	r30, 0x22	; 34
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 0f       	add	r24, r24
    1d38:	80 83       	st	Z, r24
 	 /*3-enable*/
 	 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1d3a:	a6 e5       	ldi	r26, 0x56	; 86
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e6 e5       	ldi	r30, 0x56	; 86
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	84 60       	ori	r24, 0x04	; 4
    1d46:	8c 93       	st	X, r24
}
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <TWI_voidStartCond>:
/*As Master Start Condition*/
void TWI_voidStartCond(void){
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    1d58:	a6 e5       	ldi	r26, 0x56	; 86
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e6 e5       	ldi	r30, 0x56	; 86
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7e       	andi	r24, 0xEF	; 239
    1d64:	8c 93       	st	X, r24
		/*1-Start Condition*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    1d66:	a6 e5       	ldi	r26, 0x56	; 86
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e6 e5       	ldi	r30, 0x56	; 86
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 62       	ori	r24, 0x20	; 32
    1d72:	8c 93       	st	X, r24
		/*2-CLEAR TWINT FLAG TO START OPERATION*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1d74:	a6 e5       	ldi	r26, 0x56	; 86
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e6 e5       	ldi	r30, 0x56	; 86
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	80 68       	ori	r24, 0x80	; 128
    1d80:	8c 93       	st	X, r24
		/*3-Wait until flag became 1*/
		while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1d82:	e6 e5       	ldi	r30, 0x56	; 86
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	88 23       	and	r24, r24
    1d8a:	dc f7       	brge	.-10     	; 0x1d82 <TWI_voidStartCond+0x32>
}
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <TWI_voidSendSlaveAddressWithRead>:
/*As Master write Address on Bus*/
void TWI_voidSendSlaveAddressWithRead(u8 Copy_u8SlaveAddressToSend){
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=((Copy_u8SlaveAddressToSend<<1) |0x01);
    1d9e:	e3 e2       	ldi	r30, 0x23	; 35
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	81 60       	ori	r24, 0x01	; 1
    1dae:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1db0:	a6 e5       	ldi	r26, 0x56	; 86
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e6 e5       	ldi	r30, 0x56	; 86
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1dbe:	e6 e5       	ldi	r30, 0x56	; 86
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	dc f7       	brge	.-10     	; 0x1dbe <TWI_voidSendSlaveAddressWithRead+0x2c>
}
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <TWI_voidSendSlaveAddressWithWrite>:
void TWI_voidSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddressToSend){
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=(Copy_u8SlaveAddressToSend<<1);
    1ddc:	e3 e2       	ldi	r30, 0x23	; 35
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	88 0f       	add	r24, r24
    1de4:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1de6:	a6 e5       	ldi	r26, 0x56	; 86
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e6 e5       	ldi	r30, 0x56	; 86
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1df4:	e6 e5       	ldi	r30, 0x56	; 86
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 23       	and	r24, r24
    1dfc:	dc f7       	brge	.-10     	; 0x1df4 <TWI_voidSendSlaveAddressWithWrite+0x24>
}
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <TWI_voidMasterWriteData>:
/*As Master Write Data On Bus*/
void TWI_voidMasterWriteData(u8 Copy_u8SentData){
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
	/*Assign Data to bus*/
	TWI_TWDR_REG=Copy_u8SentData;
    1e12:	e3 e2       	ldi	r30, 0x23	; 35
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	80 83       	st	Z, r24
	/*Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1e1a:	a6 e5       	ldi	r26, 0x56	; 86
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e6 e5       	ldi	r30, 0x56	; 86
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	80 68       	ori	r24, 0x80	; 128
    1e26:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1e28:	e6 e5       	ldi	r30, 0x56	; 86
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	88 23       	and	r24, r24
    1e30:	dc f7       	brge	.-10     	; 0x1e28 <TWI_voidMasterWriteData+0x22>
}
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <TWI_voidMasterReadData>:
/*As Master Read Data On Bus*/
void TWI_voidMasterReadData(u8 *Copy_u8ReceivedData){
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <TWI_voidMasterReadData+0x6>
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01

	/*1Enable ACK*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    1e48:	a6 e5       	ldi	r26, 0x56	; 86
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e6 e5       	ldi	r30, 0x56	; 86
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 64       	ori	r24, 0x40	; 64
    1e54:	8c 93       	st	X, r24
	/*2-Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1e56:	a6 e5       	ldi	r26, 0x56	; 86
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e6 e5       	ldi	r30, 0x56	; 86
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 68       	ori	r24, 0x80	; 128
    1e62:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1e64:	e6 e5       	ldi	r30, 0x56	; 86
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 23       	and	r24, r24
    1e6c:	dc f7       	brge	.-10     	; 0x1e64 <TWI_voidMasterReadData+0x2a>
	/*CHECK FOR ACK*/

	*Copy_u8ReceivedData=TWI_TWDR_REG;
    1e6e:	e3 e2       	ldi	r30, 0x23	; 35
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	80 83       	st	Z, r24
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <TWI_voidStopCond>:
/*As Master Stop Condition*/
void TWI_voidStopCond(void){
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    1e8c:	a6 e5       	ldi	r26, 0x56	; 86
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e5       	ldi	r30, 0x56	; 86
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8f 7d       	andi	r24, 0xDF	; 223
    1e98:	8c 93       	st	X, r24
  
	/*1-Stop Condition*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    1e9a:	a6 e5       	ldi	r26, 0x56	; 86
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 61       	ori	r24, 0x10	; 16
    1ea6:	8c 93       	st	X, r24
	/*2-CLEAR TWINT FLAG TO START OPERATION*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1ea8:	a6 e5       	ldi	r26, 0x56	; 86
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e6 e5       	ldi	r30, 0x56	; 86
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 68       	ori	r24, 0x80	; 128
    1eb4:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
//	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
	
}
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <TWI_GetStatus>:
u8   TWI_GetStatus(u8 Copy_u8Status)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    /*Get status*/
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1ec8:	a6 e5       	ldi	r26, 0x56	; 86
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e6 e5       	ldi	r30, 0x56	; 86
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	80 68       	ori	r24, 0x80	; 128
    1ed4:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    1ed6:	a6 e5       	ldi	r26, 0x56	; 86
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e6 e5       	ldi	r30, 0x56	; 86
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 64       	ori	r24, 0x40	; 64
    1ee2:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1ee4:	a6 e5       	ldi	r26, 0x56	; 86
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e6 e5       	ldi	r30, 0x56	; 86
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	84 60       	ori	r24, 0x04	; 4
    1ef0:	8c 93       	st	X, r24
    /*Busy wait for TWINT flag*/
    while(!GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT));
    1ef2:	e6 e5       	ldi	r30, 0x56	; 86
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 23       	and	r24, r24
    1efa:	dc f7       	brge	.-10     	; 0x1ef2 <TWI_GetStatus+0x36>
    while((TWI_TWSR_REG & 0xF8) != Copy_u8Status);
    1efc:	e1 e2       	ldi	r30, 0x21	; 33
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 01       	movw	r18, r24
    1f08:	28 7f       	andi	r18, 0xF8	; 248
    1f0a:	30 70       	andi	r19, 0x00	; 0
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	28 17       	cp	r18, r24
    1f14:	39 07       	cpc	r19, r25
    1f16:	91 f7       	brne	.-28     	; 0x1efc <TWI_GetStatus+0x40>
    return TWI_TWDR_REG;
    1f18:	e3 e2       	ldi	r30, 0x23	; 35
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
}
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <SPI_Init_Master>:
#include"../../MCAL/DIO/DIO_Interface.h"
#include"SPI_private.h"
#include"SPI_interface.h"

void SPI_Init_Master(void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN5, DIO_u8PIN_OUTPUT); //MOSI
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	65 e0       	ldi	r22, 0x05	; 5
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN_INPUT); //MISO
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	66 e0       	ldi	r22, 0x06	; 6
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN7, DIO_u8PIN_OUTPUT); //SCK
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	67 e0       	ldi	r22, 0x07	; 7
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>

	SPCR_REG |= (Data_Order_Mode << SPCR_DORD) | (SPI_Master << SPCR_MSTR)
    1f4c:	ad e2       	ldi	r26, 0x2D	; 45
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ed e2       	ldi	r30, 0x2D	; 45
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	87 67       	ori	r24, 0x77	; 119
    1f58:	8c 93       	st	X, r24
			| (Clock_Polarity_Mode << SPCR_CPOL)
			| (Clock_Phase_Mode << SPCR_CPHA) | (Clock_Rate_Mode << SPCR_SPR0)
			| (SPI_Enable << SPCR_SPE);

	SPSR_REG |= SPI_Double_Speed_Status;
    1f5a:	ae e2       	ldi	r26, 0x2E	; 46
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ee e2       	ldi	r30, 0x2E	; 46
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8c 93       	st	X, r24

}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <SPI_Init_Slave>:
void SPI_Init_Slave(void)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN5, DIO_u8PIN_INPUT); //MOSI
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	65 e0       	ldi	r22, 0x05	; 5
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN_OUTPUT); //MISO
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	66 e0       	ldi	r22, 0x06	; 6
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN7, DIO_u8PIN_INPUT); //SCK
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	67 e0       	ldi	r22, 0x07	; 7
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>

	SPCR_REG |= (Data_Order_Mode << SPCR_DORD) | (SPI_Slave << SPCR_MSTR)
    1f92:	ad e2       	ldi	r26, 0x2D	; 45
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ed e2       	ldi	r30, 0x2D	; 45
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	87 66       	ori	r24, 0x67	; 103
    1f9e:	8c 93       	st	X, r24
			| (Clock_Polarity_Mode << SPCR_CPOL)
			| (Clock_Phase_Mode << SPCR_CPHA) | (Clock_Rate_Mode << SPCR_SPR0)
			| (SPI_Enable << SPCR_SPE);

	SPSR_REG |= SPI_Double_Speed_Status;
    1fa0:	ae e2       	ldi	r26, 0x2E	; 46
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	ee e2       	ldi	r30, 0x2E	; 46
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8c 93       	st	X, r24
}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <SPI_Trancieve>:

void SPI_Trancieve(u8 Copy_Data_Sent, u8 * Copy_Data_Receieved)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <SPI_Trancieve+0x6>
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	7b 83       	std	Y+3, r23	; 0x03
    1fc2:	6a 83       	std	Y+2, r22	; 0x02
	SPDR_REG = Copy_Data_Sent;
    1fc4:	ef e2       	ldi	r30, 0x2F	; 47
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	80 83       	st	Z, r24
	while (GET_BIT(SPSR_REG,SPSR_SPIF) == 0)
    1fcc:	ee e2       	ldi	r30, 0x2E	; 46
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	dc f7       	brge	.-10     	; 0x1fcc <SPI_Trancieve+0x1a>
		; //until receive
	*Copy_Data_Receieved = SPDR_REG;
    1fd6:	ef e2       	ldi	r30, 0x2F	; 47
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1fde:	fb 81       	ldd	r31, Y+3	; 0x03
    1fe0:	80 83       	st	Z, r24
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <G_INT_Enable>:
#include"../../LIB/BIT_MATH.h"
#include"Global_INT_Private.h"
#include"Global_INT_Interface.h"

void G_INT_Enable(void)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_REG_I_BIT);
    1ff6:	af e5       	ldi	r26, 0x5F	; 95
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	ef e5       	ldi	r30, 0x5F	; 95
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	80 68       	ori	r24, 0x80	; 128
    2002:	8c 93       	st	X, r24
}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <G_INT_Disable>:
void G_INT_Disable(void)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,SREG_REG_I_BIT);
    2012:	af e5       	ldi	r26, 0x5F	; 95
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	ef e5       	ldi	r30, 0x5F	; 95
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8f 77       	andi	r24, 0x7F	; 127
    201e:	8c 93       	st	X, r24
}
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <GPT_Init>:

void __vector_10(void)__attribute((signal,used));
void __vector_11(void)__attribute((signal,used));

void GPT_Init(GPT_stConfig *Copy_stConfig)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <GPT_Init+0x6>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_stConfig->GPT_Timer == GPT_Timer0)
    2034:	e9 81       	ldd	r30, Y+1	; 0x01
    2036:	fa 81       	ldd	r31, Y+2	; 0x02
    2038:	80 81       	ld	r24, Z
    203a:	88 23       	and	r24, r24
    203c:	09 f0       	breq	.+2      	; 0x2040 <GPT_Init+0x1a>
    203e:	68 c0       	rjmp	.+208    	; 0x2110 <GPT_Init+0xea>
	{
		if (Copy_stConfig->GPT_WG_Mode == GPT_Normal)
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	81 81       	ldd	r24, Z+1	; 0x01
    2046:	88 23       	and	r24, r24
    2048:	79 f5       	brne	.+94     	; 0x20a8 <GPT_Init+0x82>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    204a:	a3 e5       	ldi	r26, 0x53	; 83
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e3 e5       	ldi	r30, 0x53	; 83
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8f 7b       	andi	r24, 0xBF	; 191
    2056:	8c 93       	st	X, r24
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    2058:	a3 e5       	ldi	r26, 0x53	; 83
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e3 e5       	ldi	r30, 0x53	; 83
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	87 7f       	andi	r24, 0xF7	; 247
    2064:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    2066:	a3 e5       	ldi	r26, 0x53	; 83
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e3 e5       	ldi	r30, 0x53	; 83
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	90 81       	ld	r25, Z
    2070:	e9 81       	ldd	r30, Y+1	; 0x01
    2072:	fa 81       	ldd	r31, Y+2	; 0x02
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	89 2b       	or	r24, r25
    2078:	8c 93       	st	X, r24
			Timer_TCNT0_REG = Copy_stConfig->GPT_Preload;
    207a:	a2 e5       	ldi	r26, 0x52	; 82
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	83 81       	ldd	r24, Z+3	; 0x03
    2084:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    2086:	e9 81       	ldd	r30, Y+1	; 0x01
    2088:	fa 81       	ldd	r31, Y+2	; 0x02
    208a:	85 81       	ldd	r24, Z+5	; 0x05
    208c:	96 81       	ldd	r25, Z+6	; 0x06
    208e:	90 93 3f 02 	sts	0x023F, r25
    2092:	80 93 3e 02 	sts	0x023E, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_TOIE0_BIT);
    2096:	a9 e5       	ldi	r26, 0x59	; 89
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e9 e5       	ldi	r30, 0x59	; 89
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	81 60       	ori	r24, 0x01	; 1
    20a2:	8c 93       	st	X, r24
			G_INT_Enable();
    20a4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <G_INT_Enable>
		}
		if (Copy_stConfig->GPT_WG_Mode == GPT_CTC)
    20a8:	e9 81       	ldd	r30, Y+1	; 0x01
    20aa:	fa 81       	ldd	r31, Y+2	; 0x02
    20ac:	81 81       	ldd	r24, Z+1	; 0x01
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	79 f5       	brne	.+94     	; 0x2110 <GPT_Init+0xea>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    20b2:	a3 e5       	ldi	r26, 0x53	; 83
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e3 e5       	ldi	r30, 0x53	; 83
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8f 7b       	andi	r24, 0xBF	; 191
    20be:	8c 93       	st	X, r24
			SET_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    20c0:	a3 e5       	ldi	r26, 0x53	; 83
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e3 e5       	ldi	r30, 0x53	; 83
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	88 60       	ori	r24, 0x08	; 8
    20cc:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    20ce:	a3 e5       	ldi	r26, 0x53	; 83
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e3 e5       	ldi	r30, 0x53	; 83
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	90 81       	ld	r25, Z
    20d8:	e9 81       	ldd	r30, Y+1	; 0x01
    20da:	fa 81       	ldd	r31, Y+2	; 0x02
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	89 2b       	or	r24, r25
    20e0:	8c 93       	st	X, r24
			Timer_OCR0_REG = Copy_stConfig->GPT_COM_Value;
    20e2:	ac e5       	ldi	r26, 0x5C	; 92
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	84 81       	ldd	r24, Z+4	; 0x04
    20ec:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	85 81       	ldd	r24, Z+5	; 0x05
    20f4:	96 81       	ldd	r25, Z+6	; 0x06
    20f6:	90 93 3f 02 	sts	0x023F, r25
    20fa:	80 93 3e 02 	sts	0x023E, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_OCIE0_BIT);
    20fe:	a9 e5       	ldi	r26, 0x59	; 89
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e9 e5       	ldi	r30, 0x59	; 89
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	82 60       	ori	r24, 0x02	; 2
    210a:	8c 93       	st	X, r24
			G_INT_Enable();
    210c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <G_INT_Enable>
	}
	else
	{

	}
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <GPT_Set_Preload>:

void GPT_Set_Preload(u8 Copy_u8Preload)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	0f 92       	push	r0
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	89 83       	std	Y+1, r24	; 0x01
	Timer_TCNT0_REG = Copy_u8Preload;
    2126:	e2 e5       	ldi	r30, 0x52	; 82
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	80 83       	st	Z, r24
}
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <__vector_10>:


void __vector_10(void)
{
    2136:	1f 92       	push	r1
    2138:	0f 92       	push	r0
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	0f 92       	push	r0
    213e:	11 24       	eor	r1, r1
    2140:	2f 93       	push	r18
    2142:	3f 93       	push	r19
    2144:	4f 93       	push	r20
    2146:	5f 93       	push	r21
    2148:	6f 93       	push	r22
    214a:	7f 93       	push	r23
    214c:	8f 93       	push	r24
    214e:	9f 93       	push	r25
    2150:	af 93       	push	r26
    2152:	bf 93       	push	r27
    2154:	ef 93       	push	r30
    2156:	ff 93       	push	r31
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    2160:	80 91 3e 02 	lds	r24, 0x023E
    2164:	90 91 3f 02 	lds	r25, 0x023F
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	29 f0       	breq	.+10     	; 0x2176 <__vector_10+0x40>
	{
		Global_Timer0_CBF();
    216c:	e0 91 3e 02 	lds	r30, 0x023E
    2170:	f0 91 3f 02 	lds	r31, 0x023F
    2174:	09 95       	icall
	}
}
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30
    217e:	bf 91       	pop	r27
    2180:	af 91       	pop	r26
    2182:	9f 91       	pop	r25
    2184:	8f 91       	pop	r24
    2186:	7f 91       	pop	r23
    2188:	6f 91       	pop	r22
    218a:	5f 91       	pop	r21
    218c:	4f 91       	pop	r20
    218e:	3f 91       	pop	r19
    2190:	2f 91       	pop	r18
    2192:	0f 90       	pop	r0
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	0f 90       	pop	r0
    2198:	1f 90       	pop	r1
    219a:	18 95       	reti

0000219c <__vector_11>:
void __vector_11(void)
{
    219c:	1f 92       	push	r1
    219e:	0f 92       	push	r0
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	0f 92       	push	r0
    21a4:	11 24       	eor	r1, r1
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	ef 93       	push	r30
    21bc:	ff 93       	push	r31
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    21c6:	80 91 3e 02 	lds	r24, 0x023E
    21ca:	90 91 3f 02 	lds	r25, 0x023F
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	29 f0       	breq	.+10     	; 0x21dc <__vector_11+0x40>
	{
		Global_Timer0_CBF();
    21d2:	e0 91 3e 02 	lds	r30, 0x023E
    21d6:	f0 91 3f 02 	lds	r31, 0x023F
    21da:	09 95       	icall
	}
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	ff 91       	pop	r31
    21e2:	ef 91       	pop	r30
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	0f 90       	pop	r0
    21fe:	1f 90       	pop	r1
    2200:	18 95       	reti

00002202 <EXT_INT_Init>:
void __vector_3(void)__attribute((signal,used));



void EXT_INT_Init(EXTI_St *Copy_EXT_INT_st)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <EXT_INT_Init+0x6>
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	9b 83       	std	Y+3, r25	; 0x03
    2210:	8a 83       	std	Y+2, r24	; 0x02
	/*The External Interrupt 1 is activated by if the SREG I-bit and the
	corresponding interrupt mask in the GICR are set.*/
	
	u8 check = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    2216:	ea 81       	ldd	r30, Y+2	; 0x02
    2218:	fb 81       	ldd	r31, Y+3	; 0x03
    221a:	80 81       	ld	r24, Z
    221c:	88 23       	and	r24, r24
    221e:	09 f0       	breq	.+2      	; 0x2222 <EXT_INT_Init+0x20>
    2220:	67 c0       	rjmp	.+206    	; 0x22f0 <EXT_INT_Init+0xee>
	{
		
		
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Low_Level_SC)
    2222:	ea 81       	ldd	r30, Y+2	; 0x02
    2224:	fb 81       	ldd	r31, Y+3	; 0x03
    2226:	81 81       	ldd	r24, Z+1	; 0x01
    2228:	88 23       	and	r24, r24
    222a:	79 f4       	brne	.+30     	; 0x224a <EXT_INT_Init+0x48>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    222c:	a5 e5       	ldi	r26, 0x55	; 85
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e5 e5       	ldi	r30, 0x55	; 85
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8e 7f       	andi	r24, 0xFE	; 254
    2238:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    223a:	a5 e5       	ldi	r26, 0x55	; 85
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e5 e5       	ldi	r30, 0x55	; 85
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8d 7f       	andi	r24, 0xFD	; 253
    2246:	8c 93       	st	X, r24
    2248:	3d c0       	rjmp	.+122    	; 0x22c4 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Any_Change_SC)
    224a:	ea 81       	ldd	r30, Y+2	; 0x02
    224c:	fb 81       	ldd	r31, Y+3	; 0x03
    224e:	81 81       	ldd	r24, Z+1	; 0x01
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	79 f4       	brne	.+30     	; 0x2272 <EXT_INT_Init+0x70>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2254:	a5 e5       	ldi	r26, 0x55	; 85
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e5 e5       	ldi	r30, 0x55	; 85
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	81 60       	ori	r24, 0x01	; 1
    2260:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2262:	a5 e5       	ldi	r26, 0x55	; 85
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e5 e5       	ldi	r30, 0x55	; 85
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	8d 7f       	andi	r24, 0xFD	; 253
    226e:	8c 93       	st	X, r24
    2270:	29 c0       	rjmp	.+82     	; 0x22c4 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Falling_Edge_SC)
    2272:	ea 81       	ldd	r30, Y+2	; 0x02
    2274:	fb 81       	ldd	r31, Y+3	; 0x03
    2276:	81 81       	ldd	r24, Z+1	; 0x01
    2278:	82 30       	cpi	r24, 0x02	; 2
    227a:	79 f4       	brne	.+30     	; 0x229a <EXT_INT_Init+0x98>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    227c:	a5 e5       	ldi	r26, 0x55	; 85
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e5 e5       	ldi	r30, 0x55	; 85
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8e 7f       	andi	r24, 0xFE	; 254
    2288:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    228a:	a5 e5       	ldi	r26, 0x55	; 85
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e5 e5       	ldi	r30, 0x55	; 85
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	82 60       	ori	r24, 0x02	; 2
    2296:	8c 93       	st	X, r24
    2298:	15 c0       	rjmp	.+42     	; 0x22c4 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Rising_Edge_SC)
    229a:	ea 81       	ldd	r30, Y+2	; 0x02
    229c:	fb 81       	ldd	r31, Y+3	; 0x03
    229e:	81 81       	ldd	r24, Z+1	; 0x01
    22a0:	83 30       	cpi	r24, 0x03	; 3
    22a2:	79 f4       	brne	.+30     	; 0x22c2 <EXT_INT_Init+0xc0>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    22a4:	a5 e5       	ldi	r26, 0x55	; 85
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e5 e5       	ldi	r30, 0x55	; 85
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    22b2:	a5 e5       	ldi	r26, 0x55	; 85
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e5 e5       	ldi	r30, 0x55	; 85
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	82 60       	ori	r24, 0x02	; 2
    22be:	8c 93       	st	X, r24
    22c0:	01 c0       	rjmp	.+2      	; 0x22c4 <EXT_INT_Init+0xc2>
		}
		else
		{
			check = 0;
    22c2:	19 82       	std	Y+1, r1	; 0x01
    //Prevent Enable The global interrupt
		}
		if (check == 1)
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	09 f0       	breq	.+2      	; 0x22cc <EXT_INT_Init+0xca>
    22ca:	b3 c0       	rjmp	.+358    	; 0x2432 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    22cc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT0_BIT);
    22d0:	ab e5       	ldi	r26, 0x5B	; 91
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	eb e5       	ldi	r30, 0x5B	; 91
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 64       	ori	r24, 0x40	; 64
    22dc:	8c 93       	st	X, r24
			
			Global_EXTI0_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    22de:	ea 81       	ldd	r30, Y+2	; 0x02
    22e0:	fb 81       	ldd	r31, Y+3	; 0x03
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	90 93 41 02 	sts	0x0241, r25
    22ea:	80 93 40 02 	sts	0x0240, r24
    22ee:	a1 c0       	rjmp	.+322    	; 0x2432 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    22f0:	ea 81       	ldd	r30, Y+2	; 0x02
    22f2:	fb 81       	ldd	r31, Y+3	; 0x03
    22f4:	80 81       	ld	r24, Z
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	09 f0       	breq	.+2      	; 0x22fc <EXT_INT_Init+0xfa>
    22fa:	67 c0       	rjmp	.+206    	; 0x23ca <EXT_INT_Init+0x1c8>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Low_Level_SC)
    22fc:	ea 81       	ldd	r30, Y+2	; 0x02
    22fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2300:	81 81       	ldd	r24, Z+1	; 0x01
    2302:	84 30       	cpi	r24, 0x04	; 4
    2304:	79 f4       	brne	.+30     	; 0x2324 <EXT_INT_Init+0x122>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2306:	a5 e5       	ldi	r26, 0x55	; 85
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e5 e5       	ldi	r30, 0x55	; 85
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8b 7f       	andi	r24, 0xFB	; 251
    2312:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2314:	a5 e5       	ldi	r26, 0x55	; 85
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e5 e5       	ldi	r30, 0x55	; 85
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	87 7f       	andi	r24, 0xF7	; 247
    2320:	8c 93       	st	X, r24
    2322:	3d c0       	rjmp	.+122    	; 0x239e <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Any_Change_SC)
    2324:	ea 81       	ldd	r30, Y+2	; 0x02
    2326:	fb 81       	ldd	r31, Y+3	; 0x03
    2328:	81 81       	ldd	r24, Z+1	; 0x01
    232a:	85 30       	cpi	r24, 0x05	; 5
    232c:	79 f4       	brne	.+30     	; 0x234c <EXT_INT_Init+0x14a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    232e:	a5 e5       	ldi	r26, 0x55	; 85
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e5 e5       	ldi	r30, 0x55	; 85
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	84 60       	ori	r24, 0x04	; 4
    233a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    233c:	a5 e5       	ldi	r26, 0x55	; 85
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e5 e5       	ldi	r30, 0x55	; 85
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	87 7f       	andi	r24, 0xF7	; 247
    2348:	8c 93       	st	X, r24
    234a:	29 c0       	rjmp	.+82     	; 0x239e <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Falling_Edge_SC)
    234c:	ea 81       	ldd	r30, Y+2	; 0x02
    234e:	fb 81       	ldd	r31, Y+3	; 0x03
    2350:	81 81       	ldd	r24, Z+1	; 0x01
    2352:	86 30       	cpi	r24, 0x06	; 6
    2354:	79 f4       	brne	.+30     	; 0x2374 <EXT_INT_Init+0x172>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2356:	a5 e5       	ldi	r26, 0x55	; 85
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e5       	ldi	r30, 0x55	; 85
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8b 7f       	andi	r24, 0xFB	; 251
    2362:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2364:	a5 e5       	ldi	r26, 0x55	; 85
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e5 e5       	ldi	r30, 0x55	; 85
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	88 60       	ori	r24, 0x08	; 8
    2370:	8c 93       	st	X, r24
    2372:	15 c0       	rjmp	.+42     	; 0x239e <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Rising_Edge_SC)
    2374:	ea 81       	ldd	r30, Y+2	; 0x02
    2376:	fb 81       	ldd	r31, Y+3	; 0x03
    2378:	81 81       	ldd	r24, Z+1	; 0x01
    237a:	87 30       	cpi	r24, 0x07	; 7
    237c:	79 f4       	brne	.+30     	; 0x239c <EXT_INT_Init+0x19a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    237e:	a5 e5       	ldi	r26, 0x55	; 85
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 e5       	ldi	r30, 0x55	; 85
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	84 60       	ori	r24, 0x04	; 4
    238a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    238c:	a5 e5       	ldi	r26, 0x55	; 85
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e5 e5       	ldi	r30, 0x55	; 85
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	88 60       	ori	r24, 0x08	; 8
    2398:	8c 93       	st	X, r24
    239a:	01 c0       	rjmp	.+2      	; 0x239e <EXT_INT_Init+0x19c>
		}
		else
		{
			check = 0;
    239c:	19 82       	std	Y+1, r1	; 0x01

		}
		if (check == 1)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <EXT_INT_Init+0x1a4>
    23a4:	46 c0       	rjmp	.+140    	; 0x2432 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    23a6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT1_BIT);
    23aa:	ab e5       	ldi	r26, 0x5B	; 91
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb e5       	ldi	r30, 0x5B	; 91
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	8c 93       	st	X, r24
			
			Global_EXTI1_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    23b8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ba:	fb 81       	ldd	r31, Y+3	; 0x03
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	90 93 43 02 	sts	0x0243, r25
    23c4:	80 93 42 02 	sts	0x0242, r24
    23c8:	34 c0       	rjmp	.+104    	; 0x2432 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    23ca:	ea 81       	ldd	r30, Y+2	; 0x02
    23cc:	fb 81       	ldd	r31, Y+3	; 0x03
    23ce:	80 81       	ld	r24, Z
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	79 f5       	brne	.+94     	; 0x2432 <EXT_INT_Init+0x230>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Falling_Edge_SC)
    23d4:	ea 81       	ldd	r30, Y+2	; 0x02
    23d6:	fb 81       	ldd	r31, Y+3	; 0x03
    23d8:	81 81       	ldd	r24, Z+1	; 0x01
    23da:	88 30       	cpi	r24, 0x08	; 8
    23dc:	41 f4       	brne	.+16     	; 0x23ee <EXT_INT_Init+0x1ec>
		{
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    23de:	a4 e5       	ldi	r26, 0x54	; 84
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e4 e5       	ldi	r30, 0x54	; 84
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8f 7b       	andi	r24, 0xBF	; 191
    23ea:	8c 93       	st	X, r24
    23ec:	0e c0       	rjmp	.+28     	; 0x240a <EXT_INT_Init+0x208>

		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Rising_Edge_SC)
    23ee:	ea 81       	ldd	r30, Y+2	; 0x02
    23f0:	fb 81       	ldd	r31, Y+3	; 0x03
    23f2:	81 81       	ldd	r24, Z+1	; 0x01
    23f4:	89 30       	cpi	r24, 0x09	; 9
    23f6:	41 f4       	brne	.+16     	; 0x2408 <EXT_INT_Init+0x206>
		{
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    23f8:	a4 e5       	ldi	r26, 0x54	; 84
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e4 e5       	ldi	r30, 0x54	; 84
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 64       	ori	r24, 0x40	; 64
    2404:	8c 93       	st	X, r24
    2406:	01 c0       	rjmp	.+2      	; 0x240a <EXT_INT_Init+0x208>

		}
		else
		{
			check = 0;
    2408:	19 82       	std	Y+1, r1	; 0x01
		}
		if (check == 1)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	89 f4       	brne	.+34     	; 0x2432 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    2410:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT2_BIT);
    2414:	ab e5       	ldi	r26, 0x5B	; 91
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	eb e5       	ldi	r30, 0x5B	; 91
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 62       	ori	r24, 0x20	; 32
    2420:	8c 93       	st	X, r24
			
			Global_EXTI2_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    2422:	ea 81       	ldd	r30, Y+2	; 0x02
    2424:	fb 81       	ldd	r31, Y+3	; 0x03
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	90 93 45 02 	sts	0x0245, r25
    242e:	80 93 44 02 	sts	0x0244, r24
	}
	else
	{

	}
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <EXT_INT_Disable>:

void EXT_INT_Disable(EXTI_St *Copy_EXT_INT_st)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <EXT_INT_Disable+0x6>
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    244c:	e9 81       	ldd	r30, Y+1	; 0x01
    244e:	fa 81       	ldd	r31, Y+2	; 0x02
    2450:	80 81       	ld	r24, Z
    2452:	88 23       	and	r24, r24
    2454:	51 f4       	brne	.+20     	; 0x246a <EXT_INT_Disable+0x2c>
	{
		G_INT_Disable();
    2456:	0e 94 05 10 	call	0x200a	; 0x200a <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT0_BIT);
    245a:	ab e5       	ldi	r26, 0x5B	; 91
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	eb e5       	ldi	r30, 0x5B	; 91
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	8f 7b       	andi	r24, 0xBF	; 191
    2466:	8c 93       	st	X, r24
    2468:	1d c0       	rjmp	.+58     	; 0x24a4 <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    246a:	e9 81       	ldd	r30, Y+1	; 0x01
    246c:	fa 81       	ldd	r31, Y+2	; 0x02
    246e:	80 81       	ld	r24, Z
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	51 f4       	brne	.+20     	; 0x2488 <EXT_INT_Disable+0x4a>
	{
		G_INT_Disable();
    2474:	0e 94 05 10 	call	0x200a	; 0x200a <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT1_BIT);
    2478:	ab e5       	ldi	r26, 0x5B	; 91
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	eb e5       	ldi	r30, 0x5B	; 91
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8f 77       	andi	r24, 0x7F	; 127
    2484:	8c 93       	st	X, r24
    2486:	0e c0       	rjmp	.+28     	; 0x24a4 <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    2488:	e9 81       	ldd	r30, Y+1	; 0x01
    248a:	fa 81       	ldd	r31, Y+2	; 0x02
    248c:	80 81       	ld	r24, Z
    248e:	82 30       	cpi	r24, 0x02	; 2
    2490:	49 f4       	brne	.+18     	; 0x24a4 <EXT_INT_Disable+0x66>
	{
		G_INT_Disable();
    2492:	0e 94 05 10 	call	0x200a	; 0x200a <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT2_BIT);
    2496:	ab e5       	ldi	r26, 0x5B	; 91
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	eb e5       	ldi	r30, 0x5B	; 91
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	8f 7d       	andi	r24, 0xDF	; 223
    24a2:	8c 93       	st	X, r24
	else
	{

	}

}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <__vector_1>:

void __vector_1(void)
{
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	2f 93       	push	r18
    24ba:	3f 93       	push	r19
    24bc:	4f 93       	push	r20
    24be:	5f 93       	push	r21
    24c0:	6f 93       	push	r22
    24c2:	7f 93       	push	r23
    24c4:	8f 93       	push	r24
    24c6:	9f 93       	push	r25
    24c8:	af 93       	push	r26
    24ca:	bf 93       	push	r27
    24cc:	ef 93       	push	r30
    24ce:	ff 93       	push	r31
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI0_CPF != NULL)
    24d8:	80 91 40 02 	lds	r24, 0x0240
    24dc:	90 91 41 02 	lds	r25, 0x0241
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	29 f0       	breq	.+10     	; 0x24ee <__vector_1+0x40>
	{
		Global_EXTI0_CPF();
    24e4:	e0 91 40 02 	lds	r30, 0x0240
    24e8:	f0 91 41 02 	lds	r31, 0x0241
    24ec:	09 95       	icall
	}

}
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	ff 91       	pop	r31
    24f4:	ef 91       	pop	r30
    24f6:	bf 91       	pop	r27
    24f8:	af 91       	pop	r26
    24fa:	9f 91       	pop	r25
    24fc:	8f 91       	pop	r24
    24fe:	7f 91       	pop	r23
    2500:	6f 91       	pop	r22
    2502:	5f 91       	pop	r21
    2504:	4f 91       	pop	r20
    2506:	3f 91       	pop	r19
    2508:	2f 91       	pop	r18
    250a:	0f 90       	pop	r0
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	0f 90       	pop	r0
    2510:	1f 90       	pop	r1
    2512:	18 95       	reti

00002514 <__vector_2>:
void __vector_2(void)
{
    2514:	1f 92       	push	r1
    2516:	0f 92       	push	r0
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	0f 92       	push	r0
    251c:	11 24       	eor	r1, r1
    251e:	2f 93       	push	r18
    2520:	3f 93       	push	r19
    2522:	4f 93       	push	r20
    2524:	5f 93       	push	r21
    2526:	6f 93       	push	r22
    2528:	7f 93       	push	r23
    252a:	8f 93       	push	r24
    252c:	9f 93       	push	r25
    252e:	af 93       	push	r26
    2530:	bf 93       	push	r27
    2532:	ef 93       	push	r30
    2534:	ff 93       	push	r31
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI1_CPF != NULL)
    253e:	80 91 42 02 	lds	r24, 0x0242
    2542:	90 91 43 02 	lds	r25, 0x0243
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	29 f0       	breq	.+10     	; 0x2554 <__vector_2+0x40>
		{
		Global_EXTI1_CPF();
    254a:	e0 91 42 02 	lds	r30, 0x0242
    254e:	f0 91 43 02 	lds	r31, 0x0243
    2552:	09 95       	icall
		}

}
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	0f 90       	pop	r0
    2576:	1f 90       	pop	r1
    2578:	18 95       	reti

0000257a <__vector_3>:
void __vector_3(void)
{
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	11 24       	eor	r1, r1
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI2_CPF != NULL)
    25a4:	80 91 44 02 	lds	r24, 0x0244
    25a8:	90 91 45 02 	lds	r25, 0x0245
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	29 f0       	breq	.+10     	; 0x25ba <__vector_3+0x40>
		{
		Global_EXTI2_CPF();
    25b0:	e0 91 44 02 	lds	r30, 0x0244
    25b4:	f0 91 45 02 	lds	r31, 0x0245
    25b8:	09 95       	icall
		}

}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	0f 90       	pop	r0
    25dc:	1f 90       	pop	r1
    25de:	18 95       	reti

000025e0 <DIO_VoidSetPinDirection>:
{ DIO_PORTA_REG, DIO_PORTB_REG, DIO_PORTC_REG, DIO_PORTD_REG };
volatile u8 *DIO_ArrpVu8_PIN[4] =
{ DIO_PINA_REG, DIO_PINB_REG, DIO_PINC_REG, DIO_PIND_REG };

void DIO_VoidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <DIO_VoidSetPinDirection+0x6>
    25e6:	0f 92       	push	r0
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6a 83       	std	Y+2, r22	; 0x02
    25f0:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	84 30       	cpi	r24, 0x04	; 4
    25f6:	08 f0       	brcs	.+2      	; 0x25fa <DIO_VoidSetPinDirection+0x1a>
    25f8:	54 c0       	rjmp	.+168    	; 0x26a2 <DIO_VoidSetPinDirection+0xc2>
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	88 30       	cpi	r24, 0x08	; 8
    25fe:	08 f0       	brcs	.+2      	; 0x2602 <DIO_VoidSetPinDirection+0x22>
    2600:	50 c0       	rjmp	.+160    	; 0x26a2 <DIO_VoidSetPinDirection+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	29 f5       	brne	.+74     	; 0x2652 <DIO_VoidSetPinDirection+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	fc 01       	movw	r30, r24
    2614:	e9 50       	subi	r30, 0x09	; 9
    2616:	fe 4f       	sbci	r31, 0xFE	; 254
    2618:	a0 81       	ld	r26, Z
    261a:	b1 81       	ldd	r27, Z+1	; 0x01
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	fc 01       	movw	r30, r24
    2628:	e9 50       	subi	r30, 0x09	; 9
    262a:	fe 4f       	sbci	r31, 0xFE	; 254
    262c:	01 90       	ld	r0, Z+
    262e:	f0 81       	ld	r31, Z
    2630:	e0 2d       	mov	r30, r0
    2632:	80 81       	ld	r24, Z
    2634:	48 2f       	mov	r20, r24
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 2e       	mov	r0, r18
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <DIO_VoidSetPinDirection+0x68>
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	0a 94       	dec	r0
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <DIO_VoidSetPinDirection+0x64>
    264c:	84 2b       	or	r24, r20
    264e:	8c 93       	st	X, r24
    2650:	28 c0       	rjmp	.+80     	; 0x26a2 <DIO_VoidSetPinDirection+0xc2>
		}
		else if (Copy_u8Direction == DIO_u8PIN_INPUT)
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	88 23       	and	r24, r24
    2656:	29 f5       	brne	.+74     	; 0x26a2 <DIO_VoidSetPinDirection+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	fc 01       	movw	r30, r24
    2664:	e9 50       	subi	r30, 0x09	; 9
    2666:	fe 4f       	sbci	r31, 0xFE	; 254
    2668:	a0 81       	ld	r26, Z
    266a:	b1 81       	ldd	r27, Z+1	; 0x01
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	fc 01       	movw	r30, r24
    2678:	e9 50       	subi	r30, 0x09	; 9
    267a:	fe 4f       	sbci	r31, 0xFE	; 254
    267c:	01 90       	ld	r0, Z+
    267e:	f0 81       	ld	r31, Z
    2680:	e0 2d       	mov	r30, r0
    2682:	80 81       	ld	r24, Z
    2684:	48 2f       	mov	r20, r24
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	02 2e       	mov	r0, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <DIO_VoidSetPinDirection+0xb8>
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	0a 94       	dec	r0
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <DIO_VoidSetPinDirection+0xb4>
    269c:	80 95       	com	r24
    269e:	84 23       	and	r24, r20
    26a0:	8c 93       	st	X, r24
	{
		/*empty */

	}

}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <DIO_VoidSetPinValue+0x6>
    26b4:	0f 92       	push	r0
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	6a 83       	std	Y+2, r22	; 0x02
    26be:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	08 f0       	brcs	.+2      	; 0x26c8 <DIO_VoidSetPinValue+0x1a>
    26c6:	54 c0       	rjmp	.+168    	; 0x2770 <DIO_VoidSetPinValue+0xc2>
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	88 30       	cpi	r24, 0x08	; 8
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <DIO_VoidSetPinValue+0x22>
    26ce:	50 c0       	rjmp	.+160    	; 0x2770 <DIO_VoidSetPinValue+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Value == DIO_u8PIN_HIGH)
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	29 f5       	brne	.+74     	; 0x2720 <DIO_VoidSetPinValue+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	fc 01       	movw	r30, r24
    26e2:	e1 50       	subi	r30, 0x01	; 1
    26e4:	fe 4f       	sbci	r31, 0xFE	; 254
    26e6:	a0 81       	ld	r26, Z
    26e8:	b1 81       	ldd	r27, Z+1	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	fc 01       	movw	r30, r24
    26f6:	e1 50       	subi	r30, 0x01	; 1
    26f8:	fe 4f       	sbci	r31, 0xFE	; 254
    26fa:	01 90       	ld	r0, Z+
    26fc:	f0 81       	ld	r31, Z
    26fe:	e0 2d       	mov	r30, r0
    2700:	80 81       	ld	r24, Z
    2702:	48 2f       	mov	r20, r24
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_VoidSetPinValue+0x68>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_VoidSetPinValue+0x64>
    271a:	84 2b       	or	r24, r20
    271c:	8c 93       	st	X, r24
    271e:	28 c0       	rjmp	.+80     	; 0x2770 <DIO_VoidSetPinValue+0xc2>
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	88 23       	and	r24, r24
    2724:	29 f5       	brne	.+74     	; 0x2770 <DIO_VoidSetPinValue+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	fc 01       	movw	r30, r24
    2732:	e1 50       	subi	r30, 0x01	; 1
    2734:	fe 4f       	sbci	r31, 0xFE	; 254
    2736:	a0 81       	ld	r26, Z
    2738:	b1 81       	ldd	r27, Z+1	; 0x01
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	fc 01       	movw	r30, r24
    2746:	e1 50       	subi	r30, 0x01	; 1
    2748:	fe 4f       	sbci	r31, 0xFE	; 254
    274a:	01 90       	ld	r0, Z+
    274c:	f0 81       	ld	r31, Z
    274e:	e0 2d       	mov	r30, r0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_VoidSetPinValue+0xb8>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <DIO_VoidSetPinValue+0xb4>
    276a:	80 95       	com	r24
    276c:	84 23       	and	r24, r20
    276e:	8c 93       	st	X, r24
	else
	{
		/*empty */

	}
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8Return)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <DIO_VoidGetPinValue+0x6>
    2782:	00 d0       	rcall	.+0      	; 0x2784 <DIO_VoidGetPinValue+0x8>
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	6a 83       	std	Y+2, r22	; 0x02
    278c:	5c 83       	std	Y+4, r21	; 0x04
    278e:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	84 30       	cpi	r24, 0x04	; 4
    2794:	f8 f4       	brcc	.+62     	; 0x27d4 <DIO_VoidGetPinValue+0x58>
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	88 30       	cpi	r24, 0x08	; 8
    279a:	e0 f4       	brcc	.+56     	; 0x27d4 <DIO_VoidGetPinValue+0x58>
     	{

		   *Copy_Pu8Return=GET_BIT(*DIO_ArrpVu8_PIN[Copy_u8Port],Copy_u8Pin);
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	fc 01       	movw	r30, r24
    27a8:	e9 5f       	subi	r30, 0xF9	; 249
    27aa:	fd 4f       	sbci	r31, 0xFD	; 253
    27ac:	01 90       	ld	r0, Z+
    27ae:	f0 81       	ld	r31, Z
    27b0:	e0 2d       	mov	r30, r0
    27b2:	80 81       	ld	r24, Z
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a9 01       	movw	r20, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <DIO_VoidGetPinValue+0x4a>
    27c2:	55 95       	asr	r21
    27c4:	47 95       	ror	r20
    27c6:	8a 95       	dec	r24
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <DIO_VoidGetPinValue+0x46>
    27ca:	ca 01       	movw	r24, r20
    27cc:	81 70       	andi	r24, 0x01	; 1
    27ce:	eb 81       	ldd	r30, Y+3	; 0x03
    27d0:	fc 81       	ldd	r31, Y+4	; 0x04
    27d2:	80 83       	st	Z, r24
		else
		{
			/*empty */

		}
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <DIO_VoidSetPortDirection>:

/*Port Level*/
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <DIO_VoidSetPortDirection+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	84 30       	cpi	r24, 0x04	; 4
    27f4:	68 f4       	brcc	.+26     	; 0x2810 <DIO_VoidSetPortDirection+0x2e>
	{

		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Direction;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	fc 01       	movw	r30, r24
    2802:	e9 50       	subi	r30, 0x09	; 9
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	01 90       	ld	r0, Z+
    2808:	f0 81       	ld	r31, Z
    280a:	e0 2d       	mov	r30, r0
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	80 83       	st	Z, r24
	}
	else
	{
       /*empty*/
	}
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <DIO_VoidSetPortValue>:

/*Port value*/
void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <DIO_VoidSetPortValue+0x6>
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	84 30       	cpi	r24, 0x04	; 4
    282c:	68 f4       	brcc	.+26     	; 0x2848 <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Value;
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	fc 01       	movw	r30, r24
    283a:	e9 50       	subi	r30, 0x09	; 9
    283c:	fe 4f       	sbci	r31, 0xFE	; 254
    283e:	01 90       	ld	r0, Z+
    2840:	f0 81       	ld	r31, Z
    2842:	e0 2d       	mov	r30, r0
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <DIO_VoidGetPortValue>:

void DIO_VoidGetPortValue(u8 Copy_u8Port, u8 *Copy_Pu8Return)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <DIO_VoidGetPortValue+0x6>
    2858:	0f 92       	push	r0
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	7b 83       	std	Y+3, r23	; 0x03
    2862:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	84 30       	cpi	r24, 0x04	; 4
    2868:	78 f4       	brcc	.+30     	; 0x2888 <DIO_VoidGetPortValue+0x36>
	{
		*Copy_Pu8Return = *DIO_ArrpVu8_PIN[Copy_u8Port];
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	fc 01       	movw	r30, r24
    2876:	e9 5f       	subi	r30, 0xF9	; 249
    2878:	fd 4f       	sbci	r31, 0xFD	; 253
    287a:	01 90       	ld	r0, Z+
    287c:	f0 81       	ld	r31, Z
    287e:	e0 2d       	mov	r30, r0
    2880:	80 81       	ld	r24, Z
    2882:	ea 81       	ldd	r30, Y+2	; 0x02
    2884:	fb 81       	ldd	r31, Y+3	; 0x03
    2886:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <DIO_VoidTogglePIN>:

void DIO_VoidTogglePIN(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <DIO_VoidTogglePIN+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	6a 83       	std	Y+2, r22	; 0x02
	  if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	84 30       	cpi	r24, 0x04	; 4
    28a6:	38 f5       	brcc	.+78     	; 0x28f6 <DIO_VoidTogglePIN+0x62>
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	88 30       	cpi	r24, 0x08	; 8
    28ac:	20 f5       	brcc	.+72     	; 0x28f6 <DIO_VoidTogglePIN+0x62>
		{
		  TOG_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port],Copy_u8Pin);
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	fc 01       	movw	r30, r24
    28ba:	e1 50       	subi	r30, 0x01	; 1
    28bc:	fe 4f       	sbci	r31, 0xFE	; 254
    28be:	a0 81       	ld	r26, Z
    28c0:	b1 81       	ldd	r27, Z+1	; 0x01
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	88 2f       	mov	r24, r24
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	fc 01       	movw	r30, r24
    28ce:	e1 50       	subi	r30, 0x01	; 1
    28d0:	fe 4f       	sbci	r31, 0xFE	; 254
    28d2:	01 90       	ld	r0, Z+
    28d4:	f0 81       	ld	r31, Z
    28d6:	e0 2d       	mov	r30, r0
    28d8:	80 81       	ld	r24, Z
    28da:	48 2f       	mov	r20, r24
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	02 2e       	mov	r0, r18
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <DIO_VoidTogglePIN+0x5a>
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	0a 94       	dec	r0
    28f0:	e2 f7       	brpl	.-8      	; 0x28ea <DIO_VoidTogglePIN+0x56>
    28f2:	84 27       	eor	r24, r20
    28f4:	8c 93       	st	X, r24
		}
	  else
	  		  {

	  		  }
}
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <ADC_voidInit>:
#include"ADC_Config.h"
#include"ADC_Interface.h"



void ADC_voidInit(void){
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62

	/*2- Configure Prescaler*/
	ADC_ADCSRA_REG	|=ADC_PRESCALER;
    2908:	a6 e2       	ldi	r26, 0x26	; 38
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e6 e2       	ldi	r30, 0x26	; 38
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	87 60       	ori	r24, 0x07	; 7
    2914:	8c 93       	st	X, r24
	/*1-Configuring Voltage Reference*/
	ADC_ADMUX_REG|=(ADC_VOLTAGE_REFRENCE<<ADC_ADMUX_REFS0_BIT);
    2916:	a7 e2       	ldi	r26, 0x27	; 39
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e7 e2       	ldi	r30, 0x27	; 39
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	80 64       	ori	r24, 0x40	; 64
    2922:	8c 93       	st	X, r24
	/*3-SET ADEN*/
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADEN_BIT);
    2924:	a6 e2       	ldi	r26, 0x26	; 38
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e6 e2       	ldi	r30, 0x26	; 38
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	80 68       	ori	r24, 0x80	; 128
    2930:	8c 93       	st	X, r24




}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <ADC_StartConv>:
void ADC_StartConv(u8 Copy_u8SelectedChannel,u16 *Copy_pu16Return){
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	00 d0       	rcall	.+0      	; 0x293e <ADC_StartConv+0x6>
    293e:	0f 92       	push	r0
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	7b 83       	std	Y+3, r23	; 0x03
    2948:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8SelectedChannel<=ADC_CHANNEL7){
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	88 30       	cpi	r24, 0x08	; 8
    294e:	70 f5       	brcc	.+92     	; 0x29ac <ADC_StartConv+0x74>
		/*1-Select Channel*/
		ADC_ADMUX_REG|=Copy_u8SelectedChannel;
    2950:	a7 e2       	ldi	r26, 0x27	; 39
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e7 e2       	ldi	r30, 0x27	; 39
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	90 81       	ld	r25, Z
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	89 2b       	or	r24, r25
    295e:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT);
    2960:	a6 e2       	ldi	r26, 0x26	; 38
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e6 e2       	ldi	r30, 0x26	; 38
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	80 64       	ori	r24, 0x40	; 64
    296c:	8c 93       	st	X, r24
		while(GET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT)==1);
    296e:	e6 e2       	ldi	r30, 0x26	; 38
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	82 95       	swap	r24
    2976:	86 95       	lsr	r24
    2978:	86 95       	lsr	r24
    297a:	83 70       	andi	r24, 0x03	; 3
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	81 70       	andi	r24, 0x01	; 1
    2982:	90 70       	andi	r25, 0x00	; 0
    2984:	88 23       	and	r24, r24
    2986:	99 f7       	brne	.-26     	; 0x296e <ADC_StartConv+0x36>
		      *Copy_pu16Return=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2988:	e4 e2       	ldi	r30, 0x24	; 36
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	e5 e2       	ldi	r30, 0x25	; 37
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	98 2f       	mov	r25, r24
    299e:	88 27       	eor	r24, r24
    29a0:	82 2b       	or	r24, r18
    29a2:	93 2b       	or	r25, r19
    29a4:	ea 81       	ldd	r30, Y+2	; 0x02
    29a6:	fb 81       	ldd	r31, Y+3	; 0x03
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
		else
		{
			/*NO OPERATION*/
		}

}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <Init_SM>:
#include<util/delay.h>
#include"../../MCAL/DIO/DIO_Interface.h"
#include"SM_Interface.h"

void Init_SM(SM_st *Copy_SM_st)
{
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	c4 55       	subi	r28, 0x54	; 84
    29c6:	d1 40       	sbci	r29, 0x01	; 1
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	fe 01       	movw	r30, r28
    29d4:	ed 5a       	subi	r30, 0xAD	; 173
    29d6:	fe 4f       	sbci	r31, 0xFE	; 254
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    29dc:	fe 01       	movw	r30, r28
    29de:	ed 5a       	subi	r30, 0xAD	; 173
    29e0:	fe 4f       	sbci	r31, 0xFE	; 254
    29e2:	01 90       	ld	r0, Z+
    29e4:	f0 81       	ld	r31, Z
    29e6:	e0 2d       	mov	r30, r0
    29e8:	80 81       	ld	r24, Z
    29ea:	fe 01       	movw	r30, r28
    29ec:	ed 5a       	subi	r30, 0xAD	; 173
    29ee:	fe 4f       	sbci	r31, 0xFE	; 254
    29f0:	01 90       	ld	r0, Z+
    29f2:	f0 81       	ld	r31, Z
    29f4:	e0 2d       	mov	r30, r0
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	69 2f       	mov	r22, r25
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    2a00:	fe 01       	movw	r30, r28
    2a02:	ed 5a       	subi	r30, 0xAD	; 173
    2a04:	fe 4f       	sbci	r31, 0xFE	; 254
    2a06:	01 90       	ld	r0, Z+
    2a08:	f0 81       	ld	r31, Z
    2a0a:	e0 2d       	mov	r30, r0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ed 5a       	subi	r30, 0xAD	; 173
    2a12:	fe 4f       	sbci	r31, 0xFE	; 254
    2a14:	01 90       	ld	r0, Z+
    2a16:	f0 81       	ld	r31, Z
    2a18:	e0 2d       	mov	r30, r0
    2a1a:	92 81       	ldd	r25, Z+2	; 0x02
    2a1c:	69 2f       	mov	r22, r25
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    2a24:	fe 01       	movw	r30, r28
    2a26:	ed 5a       	subi	r30, 0xAD	; 173
    2a28:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2a:	01 90       	ld	r0, Z+
    2a2c:	f0 81       	ld	r31, Z
    2a2e:	e0 2d       	mov	r30, r0
    2a30:	80 81       	ld	r24, Z
    2a32:	fe 01       	movw	r30, r28
    2a34:	ed 5a       	subi	r30, 0xAD	; 173
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	01 90       	ld	r0, Z+
    2a3a:	f0 81       	ld	r31, Z
    2a3c:	e0 2d       	mov	r30, r0
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	69 2f       	mov	r22, r25
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 5a       	subi	r30, 0xAD	; 173
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	01 90       	ld	r0, Z+
    2a50:	f0 81       	ld	r31, Z
    2a52:	e0 2d       	mov	r30, r0
    2a54:	80 81       	ld	r24, Z
    2a56:	fe 01       	movw	r30, r28
    2a58:	ed 5a       	subi	r30, 0xAD	; 173
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	01 90       	ld	r0, Z+
    2a5e:	f0 81       	ld	r31, Z
    2a60:	e0 2d       	mov	r30, r0
    2a62:	94 81       	ldd	r25, Z+4	; 0x04
    2a64:	69 2f       	mov	r22, r25
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	
	u8 i, j;
	DIO_VoidSetPortDirection(Copy_SM_st->SM_Port, DIO_u8PORT_OUTPUT);
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	ed 5a       	subi	r30, 0xAD	; 173
    2a70:	fe 4f       	sbci	r31, 0xFE	; 254
    2a72:	01 90       	ld	r0, Z+
    2a74:	f0 81       	ld	r31, Z
    2a76:	e0 2d       	mov	r30, r0
    2a78:	80 81       	ld	r24, Z
    2a7a:	6f ef       	ldi	r22, 0xFF	; 255
    2a7c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DIO_VoidSetPortDirection>
	if (Copy_SM_st->Step_Type == Full_Step)
    2a80:	fe 01       	movw	r30, r28
    2a82:	ed 5a       	subi	r30, 0xAD	; 173
    2a84:	fe 4f       	sbci	r31, 0xFE	; 254
    2a86:	01 90       	ld	r0, Z+
    2a88:	f0 81       	ld	r31, Z
    2a8a:	e0 2d       	mov	r30, r0
    2a8c:	85 81       	ldd	r24, Z+5	; 0x05
    2a8e:	88 23       	and	r24, r24
    2a90:	11 f0       	breq	.+4      	; 0x2a96 <Init_SM+0xde>
    2a92:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <Init_SM+0x1278>
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
    2a96:	fe 01       	movw	r30, r28
    2a98:	ed 5a       	subi	r30, 0xAD	; 173
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	01 90       	ld	r0, Z+
    2a9e:	f0 81       	ld	r31, Z
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	86 81       	ldd	r24, Z+6	; 0x06
    2aa4:	83 30       	cpi	r24, 0x03	; 3
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <Init_SM+0xf2>
    2aa8:	5c c4       	rjmp	.+2232   	; 0x3362 <Init_SM+0x9aa>
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ef 5a       	subi	r30, 0xAF	; 175
    2aae:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab0:	10 82       	st	Z, r1
    2ab2:	f5 c3       	rjmp	.+2026   	; 0x329e <Init_SM+0x8e6>
			{
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ed 5a       	subi	r30, 0xAD	; 173
    2ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aba:	01 90       	ld	r0, Z+
    2abc:	f0 81       	ld	r31, Z
    2abe:	e0 2d       	mov	r30, r0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ed 5a       	subi	r30, 0xAD	; 173
    2ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac8:	01 90       	ld	r0, Z+
    2aca:	f0 81       	ld	r31, Z
    2acc:	e0 2d       	mov	r30, r0
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	69 2f       	mov	r22, r25
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
    2ad4:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ed 5a       	subi	r30, 0xAD	; 173
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	01 90       	ld	r0, Z+
    2ae0:	f0 81       	ld	r31, Z
    2ae2:	e0 2d       	mov	r30, r0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ed 5a       	subi	r30, 0xAD	; 173
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	01 90       	ld	r0, Z+
    2aee:	f0 81       	ld	r31, Z
    2af0:	e0 2d       	mov	r30, r0
    2af2:	92 81       	ldd	r25, Z+2	; 0x02
    2af4:	69 2f       	mov	r22, r25
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    2afc:	fe 01       	movw	r30, r28
    2afe:	ed 5a       	subi	r30, 0xAD	; 173
    2b00:	fe 4f       	sbci	r31, 0xFE	; 254
    2b02:	01 90       	ld	r0, Z+
    2b04:	f0 81       	ld	r31, Z
    2b06:	e0 2d       	mov	r30, r0
    2b08:	80 81       	ld	r24, Z
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	ed 5a       	subi	r30, 0xAD	; 173
    2b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b10:	01 90       	ld	r0, Z+
    2b12:	f0 81       	ld	r31, Z
    2b14:	e0 2d       	mov	r30, r0
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	69 2f       	mov	r22, r25
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    2b20:	fe 01       	movw	r30, r28
    2b22:	ed 5a       	subi	r30, 0xAD	; 173
    2b24:	fe 4f       	sbci	r31, 0xFE	; 254
    2b26:	01 90       	ld	r0, Z+
    2b28:	f0 81       	ld	r31, Z
    2b2a:	e0 2d       	mov	r30, r0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ed 5a       	subi	r30, 0xAD	; 173
    2b32:	fe 4f       	sbci	r31, 0xFE	; 254
    2b34:	01 90       	ld	r0, Z+
    2b36:	f0 81       	ld	r31, Z
    2b38:	e0 2d       	mov	r30, r0
    2b3a:	94 81       	ldd	r25, Z+4	; 0x04
    2b3c:	69 2f       	mov	r22, r25
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    2b44:	fe 01       	movw	r30, r28
    2b46:	e3 5b       	subi	r30, 0xB3	; 179
    2b48:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 ea       	ldi	r26, 0xA0	; 160
    2b50:	b0 e4       	ldi	r27, 0x40	; 64
    2b52:	80 83       	st	Z, r24
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	a2 83       	std	Z+2, r26	; 0x02
    2b58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5a:	8e 01       	movw	r16, r28
    2b5c:	07 5b       	subi	r16, 0xB7	; 183
    2b5e:	1e 4f       	sbci	r17, 0xFE	; 254
    2b60:	fe 01       	movw	r30, r28
    2b62:	e3 5b       	subi	r30, 0xB3	; 179
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4a ef       	ldi	r20, 0xFA	; 250
    2b74:	54 e4       	ldi	r21, 0x44	; 68
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	f8 01       	movw	r30, r16
    2b80:	80 83       	st	Z, r24
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	a2 83       	std	Z+2, r26	; 0x02
    2b86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e7 5b       	subi	r30, 0xB7	; 183
    2b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8e:	60 81       	ld	r22, Z
    2b90:	71 81       	ldd	r23, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e8       	ldi	r20, 0x80	; 128
    2b9c:	5f e3       	ldi	r21, 0x3F	; 63
    2b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba2:	88 23       	and	r24, r24
    2ba4:	44 f4       	brge	.+16     	; 0x2bb6 <Init_SM+0x1fe>
		__ticks = 1;
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e9 5b       	subi	r30, 0xB9	; 185
    2baa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	64 c0       	rjmp	.+200    	; 0x2c7e <Init_SM+0x2c6>
	else if (__tmp > 65535)
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e7 5b       	subi	r30, 0xB7	; 183
    2bba:	fe 4f       	sbci	r31, 0xFE	; 254
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd0:	18 16       	cp	r1, r24
    2bd2:	0c f0       	brlt	.+2      	; 0x2bd6 <Init_SM+0x21e>
    2bd4:	43 c0       	rjmp	.+134    	; 0x2c5c <Init_SM+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e3 5b       	subi	r30, 0xB3	; 179
    2bda:	fe 4f       	sbci	r31, 0xFE	; 254
    2bdc:	60 81       	ld	r22, Z
    2bde:	71 81       	ldd	r23, Z+1	; 0x01
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	93 81       	ldd	r25, Z+3	; 0x03
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e2       	ldi	r20, 0x20	; 32
    2bea:	51 e4       	ldi	r21, 0x41	; 65
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	8e 01       	movw	r16, r28
    2bf6:	09 5b       	subi	r16, 0xB9	; 185
    2bf8:	1e 4f       	sbci	r17, 0xFE	; 254
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	f8 01       	movw	r30, r16
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
    2c0c:	1f c0       	rjmp	.+62     	; 0x2c4c <Init_SM+0x294>
    2c0e:	fe 01       	movw	r30, r28
    2c10:	eb 5b       	subi	r30, 0xBB	; 187
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	88 ec       	ldi	r24, 0xC8	; 200
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	eb 5b       	subi	r30, 0xBB	; 187
    2c20:	fe 4f       	sbci	r31, 0xFE	; 254
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <Init_SM+0x26e>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	eb 5b       	subi	r30, 0xBB	; 187
    2c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c34:	de 01       	movw	r26, r28
    2c36:	a9 5b       	subi	r26, 0xB9	; 185
    2c38:	be 4f       	sbci	r27, 0xFE	; 254
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e9 5b       	subi	r30, 0xB9	; 185
    2c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	11 96       	adiw	r26, 0x01	; 1
    2c48:	9c 93       	st	X, r25
    2c4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e9 5b       	subi	r30, 0xB9	; 185
    2c50:	fe 4f       	sbci	r31, 0xFE	; 254
    2c52:	80 81       	ld	r24, Z
    2c54:	91 81       	ldd	r25, Z+1	; 0x01
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	d1 f6       	brne	.-76     	; 0x2c0e <Init_SM+0x256>
    2c5a:	27 c0       	rjmp	.+78     	; 0x2caa <Init_SM+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5c:	8e 01       	movw	r16, r28
    2c5e:	09 5b       	subi	r16, 0xB9	; 185
    2c60:	1e 4f       	sbci	r17, 0xFE	; 254
    2c62:	fe 01       	movw	r30, r28
    2c64:	e7 5b       	subi	r30, 0xB7	; 183
    2c66:	fe 4f       	sbci	r31, 0xFE	; 254
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	f8 01       	movw	r30, r16
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
    2c7e:	de 01       	movw	r26, r28
    2c80:	ad 5b       	subi	r26, 0xBD	; 189
    2c82:	be 4f       	sbci	r27, 0xFE	; 254
    2c84:	fe 01       	movw	r30, r28
    2c86:	e9 5b       	subi	r30, 0xB9	; 185
    2c88:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	8d 93       	st	X+, r24
    2c90:	9c 93       	st	X, r25
    2c92:	fe 01       	movw	r30, r28
    2c94:	ed 5b       	subi	r30, 0xBD	; 189
    2c96:	fe 4f       	sbci	r31, 0xFE	; 254
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <Init_SM+0x2e4>
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ed 5b       	subi	r30, 0xBD	; 189
    2ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    2caa:	fe 01       	movw	r30, r28
    2cac:	ed 5a       	subi	r30, 0xAD	; 173
    2cae:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb0:	01 90       	ld	r0, Z+
    2cb2:	f0 81       	ld	r31, Z
    2cb4:	e0 2d       	mov	r30, r0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 5a       	subi	r30, 0xAD	; 173
    2cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbe:	01 90       	ld	r0, Z+
    2cc0:	f0 81       	ld	r31, Z
    2cc2:	e0 2d       	mov	r30, r0
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	69 2f       	mov	r22, r25
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 5a       	subi	r30, 0xAD	; 173
    2cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd4:	01 90       	ld	r0, Z+
    2cd6:	f0 81       	ld	r31, Z
    2cd8:	e0 2d       	mov	r30, r0
    2cda:	80 81       	ld	r24, Z
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ed 5a       	subi	r30, 0xAD	; 173
    2ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce2:	01 90       	ld	r0, Z+
    2ce4:	f0 81       	ld	r31, Z
    2ce6:	e0 2d       	mov	r30, r0
    2ce8:	92 81       	ldd	r25, Z+2	; 0x02
    2cea:	69 2f       	mov	r22, r25
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 5a       	subi	r30, 0xAD	; 173
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	01 90       	ld	r0, Z+
    2cfa:	f0 81       	ld	r31, Z
    2cfc:	e0 2d       	mov	r30, r0
    2cfe:	80 81       	ld	r24, Z
    2d00:	fe 01       	movw	r30, r28
    2d02:	ed 5a       	subi	r30, 0xAD	; 173
    2d04:	fe 4f       	sbci	r31, 0xFE	; 254
    2d06:	01 90       	ld	r0, Z+
    2d08:	f0 81       	ld	r31, Z
    2d0a:	e0 2d       	mov	r30, r0
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	69 2f       	mov	r22, r25
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    2d16:	fe 01       	movw	r30, r28
    2d18:	ed 5a       	subi	r30, 0xAD	; 173
    2d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1c:	01 90       	ld	r0, Z+
    2d1e:	f0 81       	ld	r31, Z
    2d20:	e0 2d       	mov	r30, r0
    2d22:	80 81       	ld	r24, Z
    2d24:	fe 01       	movw	r30, r28
    2d26:	ed 5a       	subi	r30, 0xAD	; 173
    2d28:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2a:	01 90       	ld	r0, Z+
    2d2c:	f0 81       	ld	r31, Z
    2d2e:	e0 2d       	mov	r30, r0
    2d30:	94 81       	ldd	r25, Z+4	; 0x04
    2d32:	69 2f       	mov	r22, r25
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e1 5c       	subi	r30, 0xC1	; 193
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 ea       	ldi	r26, 0xA0	; 160
    2d46:	b0 e4       	ldi	r27, 0x40	; 64
    2d48:	80 83       	st	Z, r24
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	a2 83       	std	Z+2, r26	; 0x02
    2d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d50:	8e 01       	movw	r16, r28
    2d52:	05 5c       	subi	r16, 0xC5	; 197
    2d54:	1e 4f       	sbci	r17, 0xFE	; 254
    2d56:	fe 01       	movw	r30, r28
    2d58:	e1 5c       	subi	r30, 0xC1	; 193
    2d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	4a ef       	ldi	r20, 0xFA	; 250
    2d6a:	54 e4       	ldi	r21, 0x44	; 68
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	f8 01       	movw	r30, r16
    2d76:	80 83       	st	Z, r24
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	a2 83       	std	Z+2, r26	; 0x02
    2d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 5c       	subi	r30, 0xC5	; 197
    2d82:	fe 4f       	sbci	r31, 0xFE	; 254
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	44 f4       	brge	.+16     	; 0x2dac <Init_SM+0x3f4>
		__ticks = 1;
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e7 5c       	subi	r30, 0xC7	; 199
    2da0:	fe 4f       	sbci	r31, 0xFE	; 254
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	80 83       	st	Z, r24
    2daa:	64 c0       	rjmp	.+200    	; 0x2e74 <Init_SM+0x4bc>
	else if (__tmp > 65535)
    2dac:	fe 01       	movw	r30, r28
    2dae:	e5 5c       	subi	r30, 0xC5	; 197
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	57 e4       	ldi	r21, 0x47	; 71
    2dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	0c f0       	brlt	.+2      	; 0x2dcc <Init_SM+0x414>
    2dca:	43 c0       	rjmp	.+134    	; 0x2e52 <Init_SM+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e1 5c       	subi	r30, 0xC1	; 193
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	8e 01       	movw	r16, r28
    2dec:	07 5c       	subi	r16, 0xC7	; 199
    2dee:	1e 4f       	sbci	r17, 0xFE	; 254
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	1f c0       	rjmp	.+62     	; 0x2e42 <Init_SM+0x48a>
    2e04:	fe 01       	movw	r30, r28
    2e06:	e9 5c       	subi	r30, 0xC9	; 201
    2e08:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0a:	88 ec       	ldi	r24, 0xC8	; 200
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	91 83       	std	Z+1, r25	; 0x01
    2e10:	80 83       	st	Z, r24
    2e12:	fe 01       	movw	r30, r28
    2e14:	e9 5c       	subi	r30, 0xC9	; 201
    2e16:	fe 4f       	sbci	r31, 0xFE	; 254
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <Init_SM+0x464>
    2e20:	fe 01       	movw	r30, r28
    2e22:	e9 5c       	subi	r30, 0xC9	; 201
    2e24:	fe 4f       	sbci	r31, 0xFE	; 254
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	de 01       	movw	r26, r28
    2e2c:	a7 5c       	subi	r26, 0xC7	; 199
    2e2e:	be 4f       	sbci	r27, 0xFE	; 254
    2e30:	fe 01       	movw	r30, r28
    2e32:	e7 5c       	subi	r30, 0xC7	; 199
    2e34:	fe 4f       	sbci	r31, 0xFE	; 254
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	11 96       	adiw	r26, 0x01	; 1
    2e3e:	9c 93       	st	X, r25
    2e40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e42:	fe 01       	movw	r30, r28
    2e44:	e7 5c       	subi	r30, 0xC7	; 199
    2e46:	fe 4f       	sbci	r31, 0xFE	; 254
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	d1 f6       	brne	.-76     	; 0x2e04 <Init_SM+0x44c>
    2e50:	27 c0       	rjmp	.+78     	; 0x2ea0 <Init_SM+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	8e 01       	movw	r16, r28
    2e54:	07 5c       	subi	r16, 0xC7	; 199
    2e56:	1e 4f       	sbci	r17, 0xFE	; 254
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e5 5c       	subi	r30, 0xC5	; 197
    2e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	f8 01       	movw	r30, r16
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	de 01       	movw	r26, r28
    2e76:	ab 5c       	subi	r26, 0xCB	; 203
    2e78:	be 4f       	sbci	r27, 0xFE	; 254
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e7 5c       	subi	r30, 0xC7	; 199
    2e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e80:	80 81       	ld	r24, Z
    2e82:	91 81       	ldd	r25, Z+1	; 0x01
    2e84:	8d 93       	st	X+, r24
    2e86:	9c 93       	st	X, r25
    2e88:	fe 01       	movw	r30, r28
    2e8a:	eb 5c       	subi	r30, 0xCB	; 203
    2e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <Init_SM+0x4da>
    2e96:	fe 01       	movw	r30, r28
    2e98:	eb 5c       	subi	r30, 0xCB	; 203
    2e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ed 5a       	subi	r30, 0xAD	; 173
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	01 90       	ld	r0, Z+
    2ea8:	f0 81       	ld	r31, Z
    2eaa:	e0 2d       	mov	r30, r0
    2eac:	80 81       	ld	r24, Z
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ed 5a       	subi	r30, 0xAD	; 173
    2eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb4:	01 90       	ld	r0, Z+
    2eb6:	f0 81       	ld	r31, Z
    2eb8:	e0 2d       	mov	r30, r0
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	69 2f       	mov	r22, r25
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 5a       	subi	r30, 0xAD	; 173
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	01 90       	ld	r0, Z+
    2ecc:	f0 81       	ld	r31, Z
    2ece:	e0 2d       	mov	r30, r0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ed 5a       	subi	r30, 0xAD	; 173
    2ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed8:	01 90       	ld	r0, Z+
    2eda:	f0 81       	ld	r31, Z
    2edc:	e0 2d       	mov	r30, r0
    2ede:	92 81       	ldd	r25, Z+2	; 0x02
    2ee0:	69 2f       	mov	r22, r25
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ed 5a       	subi	r30, 0xAD	; 173
    2eec:	fe 4f       	sbci	r31, 0xFE	; 254
    2eee:	01 90       	ld	r0, Z+
    2ef0:	f0 81       	ld	r31, Z
    2ef2:	e0 2d       	mov	r30, r0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ed 5a       	subi	r30, 0xAD	; 173
    2efa:	fe 4f       	sbci	r31, 0xFE	; 254
    2efc:	01 90       	ld	r0, Z+
    2efe:	f0 81       	ld	r31, Z
    2f00:	e0 2d       	mov	r30, r0
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	69 2f       	mov	r22, r25
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	ed 5a       	subi	r30, 0xAD	; 173
    2f10:	fe 4f       	sbci	r31, 0xFE	; 254
    2f12:	01 90       	ld	r0, Z+
    2f14:	f0 81       	ld	r31, Z
    2f16:	e0 2d       	mov	r30, r0
    2f18:	80 81       	ld	r24, Z
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	ed 5a       	subi	r30, 0xAD	; 173
    2f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f20:	01 90       	ld	r0, Z+
    2f22:	f0 81       	ld	r31, Z
    2f24:	e0 2d       	mov	r30, r0
    2f26:	94 81       	ldd	r25, Z+4	; 0x04
    2f28:	69 2f       	mov	r22, r25
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    2f30:	fe 01       	movw	r30, r28
    2f32:	ef 5c       	subi	r30, 0xCF	; 207
    2f34:	fe 4f       	sbci	r31, 0xFE	; 254
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 ea       	ldi	r26, 0xA0	; 160
    2f3c:	b0 e4       	ldi	r27, 0x40	; 64
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f46:	8e 01       	movw	r16, r28
    2f48:	03 5d       	subi	r16, 0xD3	; 211
    2f4a:	1e 4f       	sbci	r17, 0xFE	; 254
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ef 5c       	subi	r30, 0xCF	; 207
    2f50:	fe 4f       	sbci	r31, 0xFE	; 254
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f74:	fe 01       	movw	r30, r28
    2f76:	e3 5d       	subi	r30, 0xD3	; 211
    2f78:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	44 f4       	brge	.+16     	; 0x2fa2 <Init_SM+0x5ea>
		__ticks = 1;
    2f92:	fe 01       	movw	r30, r28
    2f94:	e5 5d       	subi	r30, 0xD5	; 213
    2f96:	fe 4f       	sbci	r31, 0xFE	; 254
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
    2fa0:	64 c0       	rjmp	.+200    	; 0x306a <Init_SM+0x6b2>
	else if (__tmp > 65535)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e3 5d       	subi	r30, 0xD3	; 211
    2fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	0c f0       	brlt	.+2      	; 0x2fc2 <Init_SM+0x60a>
    2fc0:	43 c0       	rjmp	.+134    	; 0x3048 <Init_SM+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	ef 5c       	subi	r30, 0xCF	; 207
    2fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8e 01       	movw	r16, r28
    2fe2:	05 5d       	subi	r16, 0xD5	; 213
    2fe4:	1e 4f       	sbci	r17, 0xFE	; 254
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	1f c0       	rjmp	.+62     	; 0x3038 <Init_SM+0x680>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e7 5d       	subi	r30, 0xD7	; 215
    2ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    3000:	88 ec       	ldi	r24, 0xC8	; 200
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
    3008:	fe 01       	movw	r30, r28
    300a:	e7 5d       	subi	r30, 0xD7	; 215
    300c:	fe 4f       	sbci	r31, 0xFE	; 254
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <Init_SM+0x65a>
    3016:	fe 01       	movw	r30, r28
    3018:	e7 5d       	subi	r30, 0xD7	; 215
    301a:	fe 4f       	sbci	r31, 0xFE	; 254
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	de 01       	movw	r26, r28
    3022:	a5 5d       	subi	r26, 0xD5	; 213
    3024:	be 4f       	sbci	r27, 0xFE	; 254
    3026:	fe 01       	movw	r30, r28
    3028:	e5 5d       	subi	r30, 0xD5	; 213
    302a:	fe 4f       	sbci	r31, 0xFE	; 254
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	11 96       	adiw	r26, 0x01	; 1
    3034:	9c 93       	st	X, r25
    3036:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3038:	fe 01       	movw	r30, r28
    303a:	e5 5d       	subi	r30, 0xD5	; 213
    303c:	fe 4f       	sbci	r31, 0xFE	; 254
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	d1 f6       	brne	.-76     	; 0x2ffa <Init_SM+0x642>
    3046:	27 c0       	rjmp	.+78     	; 0x3096 <Init_SM+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3048:	8e 01       	movw	r16, r28
    304a:	05 5d       	subi	r16, 0xD5	; 213
    304c:	1e 4f       	sbci	r17, 0xFE	; 254
    304e:	fe 01       	movw	r30, r28
    3050:	e3 5d       	subi	r30, 0xD3	; 211
    3052:	fe 4f       	sbci	r31, 0xFE	; 254
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	de 01       	movw	r26, r28
    306c:	a9 5d       	subi	r26, 0xD9	; 217
    306e:	be 4f       	sbci	r27, 0xFE	; 254
    3070:	fe 01       	movw	r30, r28
    3072:	e5 5d       	subi	r30, 0xD5	; 213
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	8d 93       	st	X+, r24
    307c:	9c 93       	st	X, r25
    307e:	fe 01       	movw	r30, r28
    3080:	e9 5d       	subi	r30, 0xD9	; 217
    3082:	fe 4f       	sbci	r31, 0xFE	; 254
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <Init_SM+0x6d0>
    308c:	fe 01       	movw	r30, r28
    308e:	e9 5d       	subi	r30, 0xD9	; 217
    3090:	fe 4f       	sbci	r31, 0xFE	; 254
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3096:	fe 01       	movw	r30, r28
    3098:	ed 5a       	subi	r30, 0xAD	; 173
    309a:	fe 4f       	sbci	r31, 0xFE	; 254
    309c:	01 90       	ld	r0, Z+
    309e:	f0 81       	ld	r31, Z
    30a0:	e0 2d       	mov	r30, r0
    30a2:	80 81       	ld	r24, Z
    30a4:	fe 01       	movw	r30, r28
    30a6:	ed 5a       	subi	r30, 0xAD	; 173
    30a8:	fe 4f       	sbci	r31, 0xFE	; 254
    30aa:	01 90       	ld	r0, Z+
    30ac:	f0 81       	ld	r31, Z
    30ae:	e0 2d       	mov	r30, r0
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	69 2f       	mov	r22, r25
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    30ba:	fe 01       	movw	r30, r28
    30bc:	ed 5a       	subi	r30, 0xAD	; 173
    30be:	fe 4f       	sbci	r31, 0xFE	; 254
    30c0:	01 90       	ld	r0, Z+
    30c2:	f0 81       	ld	r31, Z
    30c4:	e0 2d       	mov	r30, r0
    30c6:	80 81       	ld	r24, Z
    30c8:	fe 01       	movw	r30, r28
    30ca:	ed 5a       	subi	r30, 0xAD	; 173
    30cc:	fe 4f       	sbci	r31, 0xFE	; 254
    30ce:	01 90       	ld	r0, Z+
    30d0:	f0 81       	ld	r31, Z
    30d2:	e0 2d       	mov	r30, r0
    30d4:	92 81       	ldd	r25, Z+2	; 0x02
    30d6:	69 2f       	mov	r22, r25
    30d8:	40 e0       	ldi	r20, 0x00	; 0
    30da:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    30de:	fe 01       	movw	r30, r28
    30e0:	ed 5a       	subi	r30, 0xAD	; 173
    30e2:	fe 4f       	sbci	r31, 0xFE	; 254
    30e4:	01 90       	ld	r0, Z+
    30e6:	f0 81       	ld	r31, Z
    30e8:	e0 2d       	mov	r30, r0
    30ea:	80 81       	ld	r24, Z
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 5a       	subi	r30, 0xAD	; 173
    30f0:	fe 4f       	sbci	r31, 0xFE	; 254
    30f2:	01 90       	ld	r0, Z+
    30f4:	f0 81       	ld	r31, Z
    30f6:	e0 2d       	mov	r30, r0
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	69 2f       	mov	r22, r25
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    3102:	fe 01       	movw	r30, r28
    3104:	ed 5a       	subi	r30, 0xAD	; 173
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	01 90       	ld	r0, Z+
    310a:	f0 81       	ld	r31, Z
    310c:	e0 2d       	mov	r30, r0
    310e:	80 81       	ld	r24, Z
    3110:	fe 01       	movw	r30, r28
    3112:	ed 5a       	subi	r30, 0xAD	; 173
    3114:	fe 4f       	sbci	r31, 0xFE	; 254
    3116:	01 90       	ld	r0, Z+
    3118:	f0 81       	ld	r31, Z
    311a:	e0 2d       	mov	r30, r0
    311c:	94 81       	ldd	r25, Z+4	; 0x04
    311e:	69 2f       	mov	r22, r25
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3126:	fe 01       	movw	r30, r28
    3128:	ed 5d       	subi	r30, 0xDD	; 221
    312a:	fe 4f       	sbci	r31, 0xFE	; 254
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 ea       	ldi	r26, 0xA0	; 160
    3132:	b0 e4       	ldi	r27, 0x40	; 64
    3134:	80 83       	st	Z, r24
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	a2 83       	std	Z+2, r26	; 0x02
    313a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	8e 01       	movw	r16, r28
    313e:	01 5e       	subi	r16, 0xE1	; 225
    3140:	1e 4f       	sbci	r17, 0xFE	; 254
    3142:	fe 01       	movw	r30, r28
    3144:	ed 5d       	subi	r30, 0xDD	; 221
    3146:	fe 4f       	sbci	r31, 0xFE	; 254
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4a ef       	ldi	r20, 0xFA	; 250
    3156:	54 e4       	ldi	r21, 0x44	; 68
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	f8 01       	movw	r30, r16
    3162:	80 83       	st	Z, r24
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	a2 83       	std	Z+2, r26	; 0x02
    3168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316a:	fe 01       	movw	r30, r28
    316c:	e1 5e       	subi	r30, 0xE1	; 225
    316e:	fe 4f       	sbci	r31, 0xFE	; 254
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	44 f4       	brge	.+16     	; 0x3198 <Init_SM+0x7e0>
		__ticks = 1;
    3188:	fe 01       	movw	r30, r28
    318a:	e3 5e       	subi	r30, 0xE3	; 227
    318c:	fe 4f       	sbci	r31, 0xFE	; 254
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	80 83       	st	Z, r24
    3196:	64 c0       	rjmp	.+200    	; 0x3260 <Init_SM+0x8a8>
	else if (__tmp > 65535)
    3198:	fe 01       	movw	r30, r28
    319a:	e1 5e       	subi	r30, 0xE1	; 225
    319c:	fe 4f       	sbci	r31, 0xFE	; 254
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	93 81       	ldd	r25, Z+3	; 0x03
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	0c f0       	brlt	.+2      	; 0x31b8 <Init_SM+0x800>
    31b6:	43 c0       	rjmp	.+134    	; 0x323e <Init_SM+0x886>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b8:	fe 01       	movw	r30, r28
    31ba:	ed 5d       	subi	r30, 0xDD	; 221
    31bc:	fe 4f       	sbci	r31, 0xFE	; 254
    31be:	60 81       	ld	r22, Z
    31c0:	71 81       	ldd	r23, Z+1	; 0x01
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	8e 01       	movw	r16, r28
    31d8:	03 5e       	subi	r16, 0xE3	; 227
    31da:	1e 4f       	sbci	r17, 0xFE	; 254
    31dc:	bc 01       	movw	r22, r24
    31de:	cd 01       	movw	r24, r26
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	f8 01       	movw	r30, r16
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
    31ee:	1f c0       	rjmp	.+62     	; 0x322e <Init_SM+0x876>
    31f0:	fe 01       	movw	r30, r28
    31f2:	e5 5e       	subi	r30, 0xE5	; 229
    31f4:	fe 4f       	sbci	r31, 0xFE	; 254
    31f6:	88 ec       	ldi	r24, 0xC8	; 200
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
    31fe:	fe 01       	movw	r30, r28
    3200:	e5 5e       	subi	r30, 0xE5	; 229
    3202:	fe 4f       	sbci	r31, 0xFE	; 254
    3204:	80 81       	ld	r24, Z
    3206:	91 81       	ldd	r25, Z+1	; 0x01
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <Init_SM+0x850>
    320c:	fe 01       	movw	r30, r28
    320e:	e5 5e       	subi	r30, 0xE5	; 229
    3210:	fe 4f       	sbci	r31, 0xFE	; 254
    3212:	91 83       	std	Z+1, r25	; 0x01
    3214:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3216:	de 01       	movw	r26, r28
    3218:	a3 5e       	subi	r26, 0xE3	; 227
    321a:	be 4f       	sbci	r27, 0xFE	; 254
    321c:	fe 01       	movw	r30, r28
    321e:	e3 5e       	subi	r30, 0xE3	; 227
    3220:	fe 4f       	sbci	r31, 0xFE	; 254
    3222:	80 81       	ld	r24, Z
    3224:	91 81       	ldd	r25, Z+1	; 0x01
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	11 96       	adiw	r26, 0x01	; 1
    322a:	9c 93       	st	X, r25
    322c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	fe 01       	movw	r30, r28
    3230:	e3 5e       	subi	r30, 0xE3	; 227
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	d1 f6       	brne	.-76     	; 0x31f0 <Init_SM+0x838>
    323c:	27 c0       	rjmp	.+78     	; 0x328c <Init_SM+0x8d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323e:	8e 01       	movw	r16, r28
    3240:	03 5e       	subi	r16, 0xE3	; 227
    3242:	1e 4f       	sbci	r17, 0xFE	; 254
    3244:	fe 01       	movw	r30, r28
    3246:	e1 5e       	subi	r30, 0xE1	; 225
    3248:	fe 4f       	sbci	r31, 0xFE	; 254
    324a:	60 81       	ld	r22, Z
    324c:	71 81       	ldd	r23, Z+1	; 0x01
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	f8 01       	movw	r30, r16
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	de 01       	movw	r26, r28
    3262:	a7 5e       	subi	r26, 0xE7	; 231
    3264:	be 4f       	sbci	r27, 0xFE	; 254
    3266:	fe 01       	movw	r30, r28
    3268:	e3 5e       	subi	r30, 0xE3	; 227
    326a:	fe 4f       	sbci	r31, 0xFE	; 254
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	8d 93       	st	X+, r24
    3272:	9c 93       	st	X, r25
    3274:	fe 01       	movw	r30, r28
    3276:	e7 5e       	subi	r30, 0xE7	; 231
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	f1 f7       	brne	.-4      	; 0x327e <Init_SM+0x8c6>
    3282:	fe 01       	movw	r30, r28
    3284:	e7 5e       	subi	r30, 0xE7	; 231
    3286:	fe 4f       	sbci	r31, 0xFE	; 254
    3288:	91 83       	std	Z+1, r25	; 0x01
    328a:	80 83       	st	Z, r24
	DIO_VoidSetPortDirection(Copy_SM_st->SM_Port, DIO_u8PORT_OUTPUT);
	if (Copy_SM_st->Step_Type == Full_Step)
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    328c:	de 01       	movw	r26, r28
    328e:	af 5a       	subi	r26, 0xAF	; 175
    3290:	be 4f       	sbci	r27, 0xFE	; 254
    3292:	fe 01       	movw	r30, r28
    3294:	ef 5a       	subi	r30, 0xAF	; 175
    3296:	fe 4f       	sbci	r31, 0xFE	; 254
    3298:	80 81       	ld	r24, Z
    329a:	8f 5f       	subi	r24, 0xFF	; 255
    329c:	8c 93       	st	X, r24
    329e:	fe 01       	movw	r30, r28
    32a0:	ef 5a       	subi	r30, 0xAF	; 175
    32a2:	fe 4f       	sbci	r31, 0xFE	; 254
    32a4:	80 81       	ld	r24, Z
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	fe 01       	movw	r30, r28
    32b0:	ed 5a       	subi	r30, 0xAD	; 173
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	01 90       	ld	r0, Z+
    32b6:	f0 81       	ld	r31, Z
    32b8:	e0 2d       	mov	r30, r0
    32ba:	80 85       	ldd	r24, Z+8	; 0x08
    32bc:	91 85       	ldd	r25, Z+9	; 0x09
    32be:	a2 85       	ldd	r26, Z+10	; 0x0a
    32c0:	b3 85       	ldd	r27, Z+11	; 0x0b
    32c2:	28 17       	cp	r18, r24
    32c4:	39 07       	cpc	r19, r25
    32c6:	4a 07       	cpc	r20, r26
    32c8:	5b 07       	cpc	r21, r27
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <Init_SM+0x916>
    32cc:	f3 cb       	rjmp	.-2074   	; 0x2ab4 <Init_SM+0xfc>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
						DIO_u8PIN_HIGH);
				_delay_ms(5);
			}
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    32ce:	fe 01       	movw	r30, r28
    32d0:	ed 5a       	subi	r30, 0xAD	; 173
    32d2:	fe 4f       	sbci	r31, 0xFE	; 254
    32d4:	01 90       	ld	r0, Z+
    32d6:	f0 81       	ld	r31, Z
    32d8:	e0 2d       	mov	r30, r0
    32da:	80 81       	ld	r24, Z
    32dc:	fe 01       	movw	r30, r28
    32de:	ed 5a       	subi	r30, 0xAD	; 173
    32e0:	fe 4f       	sbci	r31, 0xFE	; 254
    32e2:	01 90       	ld	r0, Z+
    32e4:	f0 81       	ld	r31, Z
    32e6:	e0 2d       	mov	r30, r0
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	69 2f       	mov	r22, r25
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    32f2:	fe 01       	movw	r30, r28
    32f4:	ed 5a       	subi	r30, 0xAD	; 173
    32f6:	fe 4f       	sbci	r31, 0xFE	; 254
    32f8:	01 90       	ld	r0, Z+
    32fa:	f0 81       	ld	r31, Z
    32fc:	e0 2d       	mov	r30, r0
    32fe:	80 81       	ld	r24, Z
    3300:	fe 01       	movw	r30, r28
    3302:	ed 5a       	subi	r30, 0xAD	; 173
    3304:	fe 4f       	sbci	r31, 0xFE	; 254
    3306:	01 90       	ld	r0, Z+
    3308:	f0 81       	ld	r31, Z
    330a:	e0 2d       	mov	r30, r0
    330c:	92 81       	ldd	r25, Z+2	; 0x02
    330e:	69 2f       	mov	r22, r25
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    3316:	fe 01       	movw	r30, r28
    3318:	ed 5a       	subi	r30, 0xAD	; 173
    331a:	fe 4f       	sbci	r31, 0xFE	; 254
    331c:	01 90       	ld	r0, Z+
    331e:	f0 81       	ld	r31, Z
    3320:	e0 2d       	mov	r30, r0
    3322:	80 81       	ld	r24, Z
    3324:	fe 01       	movw	r30, r28
    3326:	ed 5a       	subi	r30, 0xAD	; 173
    3328:	fe 4f       	sbci	r31, 0xFE	; 254
    332a:	01 90       	ld	r0, Z+
    332c:	f0 81       	ld	r31, Z
    332e:	e0 2d       	mov	r30, r0
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	69 2f       	mov	r22, r25
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    333a:	fe 01       	movw	r30, r28
    333c:	ed 5a       	subi	r30, 0xAD	; 173
    333e:	fe 4f       	sbci	r31, 0xFE	; 254
    3340:	01 90       	ld	r0, Z+
    3342:	f0 81       	ld	r31, Z
    3344:	e0 2d       	mov	r30, r0
    3346:	80 81       	ld	r24, Z
    3348:	fe 01       	movw	r30, r28
    334a:	ed 5a       	subi	r30, 0xAD	; 173
    334c:	fe 4f       	sbci	r31, 0xFE	; 254
    334e:	01 90       	ld	r0, Z+
    3350:	f0 81       	ld	r31, Z
    3352:	e0 2d       	mov	r30, r0
    3354:	94 81       	ldd	r25, Z+4	; 0x04
    3356:	69 2f       	mov	r22, r25
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    335e:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <Init_SM+0x2af4>

		}

		else if (Copy_SM_st->SM_Direction == Clock_Wise)
    3362:	fe 01       	movw	r30, r28
    3364:	ed 5a       	subi	r30, 0xAD	; 173
    3366:	fe 4f       	sbci	r31, 0xFE	; 254
    3368:	01 90       	ld	r0, Z+
    336a:	f0 81       	ld	r31, Z
    336c:	e0 2d       	mov	r30, r0
    336e:	86 81       	ldd	r24, Z+6	; 0x06
    3370:	82 30       	cpi	r24, 0x02	; 2
    3372:	11 f0       	breq	.+4      	; 0x3378 <Init_SM+0x9c0>
    3374:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <Init_SM+0x2af4>
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    3378:	fe 01       	movw	r30, r28
    337a:	ef 5a       	subi	r30, 0xAF	; 175
    337c:	fe 4f       	sbci	r31, 0xFE	; 254
    337e:	10 82       	st	Z, r1
    3380:	f5 c3       	rjmp	.+2026   	; 0x3b6c <Init_SM+0x11b4>
			{
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3382:	fe 01       	movw	r30, r28
    3384:	ed 5a       	subi	r30, 0xAD	; 173
    3386:	fe 4f       	sbci	r31, 0xFE	; 254
    3388:	01 90       	ld	r0, Z+
    338a:	f0 81       	ld	r31, Z
    338c:	e0 2d       	mov	r30, r0
    338e:	80 81       	ld	r24, Z
    3390:	fe 01       	movw	r30, r28
    3392:	ed 5a       	subi	r30, 0xAD	; 173
    3394:	fe 4f       	sbci	r31, 0xFE	; 254
    3396:	01 90       	ld	r0, Z+
    3398:	f0 81       	ld	r31, Z
    339a:	e0 2d       	mov	r30, r0
    339c:	91 81       	ldd	r25, Z+1	; 0x01
    339e:	69 2f       	mov	r22, r25
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    33a6:	fe 01       	movw	r30, r28
    33a8:	ed 5a       	subi	r30, 0xAD	; 173
    33aa:	fe 4f       	sbci	r31, 0xFE	; 254
    33ac:	01 90       	ld	r0, Z+
    33ae:	f0 81       	ld	r31, Z
    33b0:	e0 2d       	mov	r30, r0
    33b2:	80 81       	ld	r24, Z
    33b4:	fe 01       	movw	r30, r28
    33b6:	ed 5a       	subi	r30, 0xAD	; 173
    33b8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ba:	01 90       	ld	r0, Z+
    33bc:	f0 81       	ld	r31, Z
    33be:	e0 2d       	mov	r30, r0
    33c0:	92 81       	ldd	r25, Z+2	; 0x02
    33c2:	69 2f       	mov	r22, r25
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    33ca:	fe 01       	movw	r30, r28
    33cc:	ed 5a       	subi	r30, 0xAD	; 173
    33ce:	fe 4f       	sbci	r31, 0xFE	; 254
    33d0:	01 90       	ld	r0, Z+
    33d2:	f0 81       	ld	r31, Z
    33d4:	e0 2d       	mov	r30, r0
    33d6:	80 81       	ld	r24, Z
    33d8:	fe 01       	movw	r30, r28
    33da:	ed 5a       	subi	r30, 0xAD	; 173
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	01 90       	ld	r0, Z+
    33e0:	f0 81       	ld	r31, Z
    33e2:	e0 2d       	mov	r30, r0
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	69 2f       	mov	r22, r25
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    33ee:	fe 01       	movw	r30, r28
    33f0:	ed 5a       	subi	r30, 0xAD	; 173
    33f2:	fe 4f       	sbci	r31, 0xFE	; 254
    33f4:	01 90       	ld	r0, Z+
    33f6:	f0 81       	ld	r31, Z
    33f8:	e0 2d       	mov	r30, r0
    33fa:	80 81       	ld	r24, Z
    33fc:	fe 01       	movw	r30, r28
    33fe:	ed 5a       	subi	r30, 0xAD	; 173
    3400:	fe 4f       	sbci	r31, 0xFE	; 254
    3402:	01 90       	ld	r0, Z+
    3404:	f0 81       	ld	r31, Z
    3406:	e0 2d       	mov	r30, r0
    3408:	94 81       	ldd	r25, Z+4	; 0x04
    340a:	69 2f       	mov	r22, r25
    340c:	41 e0       	ldi	r20, 0x01	; 1
    340e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3412:	fe 01       	movw	r30, r28
    3414:	eb 5e       	subi	r30, 0xEB	; 235
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a0 ea       	ldi	r26, 0xA0	; 160
    341e:	b0 e4       	ldi	r27, 0x40	; 64
    3420:	80 83       	st	Z, r24
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	a2 83       	std	Z+2, r26	; 0x02
    3426:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3428:	8e 01       	movw	r16, r28
    342a:	0f 5e       	subi	r16, 0xEF	; 239
    342c:	1e 4f       	sbci	r17, 0xFE	; 254
    342e:	fe 01       	movw	r30, r28
    3430:	eb 5e       	subi	r30, 0xEB	; 235
    3432:	fe 4f       	sbci	r31, 0xFE	; 254
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4a ef       	ldi	r20, 0xFA	; 250
    3442:	54 e4       	ldi	r21, 0x44	; 68
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	f8 01       	movw	r30, r16
    344e:	80 83       	st	Z, r24
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	a2 83       	std	Z+2, r26	; 0x02
    3454:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3456:	fe 01       	movw	r30, r28
    3458:	ef 5e       	subi	r30, 0xEF	; 239
    345a:	fe 4f       	sbci	r31, 0xFE	; 254
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e8       	ldi	r20, 0x80	; 128
    346a:	5f e3       	ldi	r21, 0x3F	; 63
    346c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3470:	88 23       	and	r24, r24
    3472:	44 f4       	brge	.+16     	; 0x3484 <Init_SM+0xacc>
		__ticks = 1;
    3474:	fe 01       	movw	r30, r28
    3476:	e1 5f       	subi	r30, 0xF1	; 241
    3478:	fe 4f       	sbci	r31, 0xFE	; 254
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
    3482:	64 c0       	rjmp	.+200    	; 0x354c <Init_SM+0xb94>
	else if (__tmp > 65535)
    3484:	fe 01       	movw	r30, r28
    3486:	ef 5e       	subi	r30, 0xEF	; 239
    3488:	fe 4f       	sbci	r31, 0xFE	; 254
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	3f ef       	ldi	r19, 0xFF	; 255
    3496:	4f e7       	ldi	r20, 0x7F	; 127
    3498:	57 e4       	ldi	r21, 0x47	; 71
    349a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349e:	18 16       	cp	r1, r24
    34a0:	0c f0       	brlt	.+2      	; 0x34a4 <Init_SM+0xaec>
    34a2:	43 c0       	rjmp	.+134    	; 0x352a <Init_SM+0xb72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a4:	fe 01       	movw	r30, r28
    34a6:	eb 5e       	subi	r30, 0xEB	; 235
    34a8:	fe 4f       	sbci	r31, 0xFE	; 254
    34aa:	60 81       	ld	r22, Z
    34ac:	71 81       	ldd	r23, Z+1	; 0x01
    34ae:	82 81       	ldd	r24, Z+2	; 0x02
    34b0:	93 81       	ldd	r25, Z+3	; 0x03
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	40 e2       	ldi	r20, 0x20	; 32
    34b8:	51 e4       	ldi	r21, 0x41	; 65
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8e 01       	movw	r16, r28
    34c4:	01 5f       	subi	r16, 0xF1	; 241
    34c6:	1e 4f       	sbci	r17, 0xFE	; 254
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	f8 01       	movw	r30, r16
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
    34da:	1f c0       	rjmp	.+62     	; 0x351a <Init_SM+0xb62>
    34dc:	fe 01       	movw	r30, r28
    34de:	e3 5f       	subi	r30, 0xF3	; 243
    34e0:	fe 4f       	sbci	r31, 0xFE	; 254
    34e2:	88 ec       	ldi	r24, 0xC8	; 200
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
    34ea:	fe 01       	movw	r30, r28
    34ec:	e3 5f       	subi	r30, 0xF3	; 243
    34ee:	fe 4f       	sbci	r31, 0xFE	; 254
    34f0:	80 81       	ld	r24, Z
    34f2:	91 81       	ldd	r25, Z+1	; 0x01
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <Init_SM+0xb3c>
    34f8:	fe 01       	movw	r30, r28
    34fa:	e3 5f       	subi	r30, 0xF3	; 243
    34fc:	fe 4f       	sbci	r31, 0xFE	; 254
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3502:	de 01       	movw	r26, r28
    3504:	a1 5f       	subi	r26, 0xF1	; 241
    3506:	be 4f       	sbci	r27, 0xFE	; 254
    3508:	fe 01       	movw	r30, r28
    350a:	e1 5f       	subi	r30, 0xF1	; 241
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	11 96       	adiw	r26, 0x01	; 1
    3516:	9c 93       	st	X, r25
    3518:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351a:	fe 01       	movw	r30, r28
    351c:	e1 5f       	subi	r30, 0xF1	; 241
    351e:	fe 4f       	sbci	r31, 0xFE	; 254
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	d1 f6       	brne	.-76     	; 0x34dc <Init_SM+0xb24>
    3528:	27 c0       	rjmp	.+78     	; 0x3578 <Init_SM+0xbc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352a:	8e 01       	movw	r16, r28
    352c:	01 5f       	subi	r16, 0xF1	; 241
    352e:	1e 4f       	sbci	r17, 0xFE	; 254
    3530:	fe 01       	movw	r30, r28
    3532:	ef 5e       	subi	r30, 0xEF	; 239
    3534:	fe 4f       	sbci	r31, 0xFE	; 254
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	f8 01       	movw	r30, r16
    3548:	91 83       	std	Z+1, r25	; 0x01
    354a:	80 83       	st	Z, r24
    354c:	de 01       	movw	r26, r28
    354e:	a5 5f       	subi	r26, 0xF5	; 245
    3550:	be 4f       	sbci	r27, 0xFE	; 254
    3552:	fe 01       	movw	r30, r28
    3554:	e1 5f       	subi	r30, 0xF1	; 241
    3556:	fe 4f       	sbci	r31, 0xFE	; 254
    3558:	80 81       	ld	r24, Z
    355a:	91 81       	ldd	r25, Z+1	; 0x01
    355c:	8d 93       	st	X+, r24
    355e:	9c 93       	st	X, r25
    3560:	fe 01       	movw	r30, r28
    3562:	e5 5f       	subi	r30, 0xF5	; 245
    3564:	fe 4f       	sbci	r31, 0xFE	; 254
    3566:	80 81       	ld	r24, Z
    3568:	91 81       	ldd	r25, Z+1	; 0x01
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <Init_SM+0xbb2>
    356e:	fe 01       	movw	r30, r28
    3570:	e5 5f       	subi	r30, 0xF5	; 245
    3572:	fe 4f       	sbci	r31, 0xFE	; 254
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3578:	fe 01       	movw	r30, r28
    357a:	ed 5a       	subi	r30, 0xAD	; 173
    357c:	fe 4f       	sbci	r31, 0xFE	; 254
    357e:	01 90       	ld	r0, Z+
    3580:	f0 81       	ld	r31, Z
    3582:	e0 2d       	mov	r30, r0
    3584:	80 81       	ld	r24, Z
    3586:	fe 01       	movw	r30, r28
    3588:	ed 5a       	subi	r30, 0xAD	; 173
    358a:	fe 4f       	sbci	r31, 0xFE	; 254
    358c:	01 90       	ld	r0, Z+
    358e:	f0 81       	ld	r31, Z
    3590:	e0 2d       	mov	r30, r0
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	69 2f       	mov	r22, r25
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    359c:	fe 01       	movw	r30, r28
    359e:	ed 5a       	subi	r30, 0xAD	; 173
    35a0:	fe 4f       	sbci	r31, 0xFE	; 254
    35a2:	01 90       	ld	r0, Z+
    35a4:	f0 81       	ld	r31, Z
    35a6:	e0 2d       	mov	r30, r0
    35a8:	80 81       	ld	r24, Z
    35aa:	fe 01       	movw	r30, r28
    35ac:	ed 5a       	subi	r30, 0xAD	; 173
    35ae:	fe 4f       	sbci	r31, 0xFE	; 254
    35b0:	01 90       	ld	r0, Z+
    35b2:	f0 81       	ld	r31, Z
    35b4:	e0 2d       	mov	r30, r0
    35b6:	92 81       	ldd	r25, Z+2	; 0x02
    35b8:	69 2f       	mov	r22, r25
    35ba:	40 e0       	ldi	r20, 0x00	; 0
    35bc:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    35c0:	fe 01       	movw	r30, r28
    35c2:	ed 5a       	subi	r30, 0xAD	; 173
    35c4:	fe 4f       	sbci	r31, 0xFE	; 254
    35c6:	01 90       	ld	r0, Z+
    35c8:	f0 81       	ld	r31, Z
    35ca:	e0 2d       	mov	r30, r0
    35cc:	80 81       	ld	r24, Z
    35ce:	fe 01       	movw	r30, r28
    35d0:	ed 5a       	subi	r30, 0xAD	; 173
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	01 90       	ld	r0, Z+
    35d6:	f0 81       	ld	r31, Z
    35d8:	e0 2d       	mov	r30, r0
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	69 2f       	mov	r22, r25
    35de:	41 e0       	ldi	r20, 0x01	; 1
    35e0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    35e4:	fe 01       	movw	r30, r28
    35e6:	ed 5a       	subi	r30, 0xAD	; 173
    35e8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ea:	01 90       	ld	r0, Z+
    35ec:	f0 81       	ld	r31, Z
    35ee:	e0 2d       	mov	r30, r0
    35f0:	80 81       	ld	r24, Z
    35f2:	fe 01       	movw	r30, r28
    35f4:	ed 5a       	subi	r30, 0xAD	; 173
    35f6:	fe 4f       	sbci	r31, 0xFE	; 254
    35f8:	01 90       	ld	r0, Z+
    35fa:	f0 81       	ld	r31, Z
    35fc:	e0 2d       	mov	r30, r0
    35fe:	94 81       	ldd	r25, Z+4	; 0x04
    3600:	69 2f       	mov	r22, r25
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3608:	fe 01       	movw	r30, r28
    360a:	e9 5f       	subi	r30, 0xF9	; 249
    360c:	fe 4f       	sbci	r31, 0xFE	; 254
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	a0 ea       	ldi	r26, 0xA0	; 160
    3614:	b0 e4       	ldi	r27, 0x40	; 64
    3616:	80 83       	st	Z, r24
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	a2 83       	std	Z+2, r26	; 0x02
    361c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361e:	8e 01       	movw	r16, r28
    3620:	0d 5f       	subi	r16, 0xFD	; 253
    3622:	1e 4f       	sbci	r17, 0xFE	; 254
    3624:	fe 01       	movw	r30, r28
    3626:	e9 5f       	subi	r30, 0xF9	; 249
    3628:	fe 4f       	sbci	r31, 0xFE	; 254
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a ef       	ldi	r20, 0xFA	; 250
    3638:	54 e4       	ldi	r21, 0x44	; 68
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	f8 01       	movw	r30, r16
    3644:	80 83       	st	Z, r24
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	a2 83       	std	Z+2, r26	; 0x02
    364a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    364c:	fe 01       	movw	r30, r28
    364e:	ed 5f       	subi	r30, 0xFD	; 253
    3650:	fe 4f       	sbci	r31, 0xFE	; 254
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	40 e8       	ldi	r20, 0x80	; 128
    3660:	5f e3       	ldi	r21, 0x3F	; 63
    3662:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3666:	88 23       	and	r24, r24
    3668:	44 f4       	brge	.+16     	; 0x367a <Init_SM+0xcc2>
		__ticks = 1;
    366a:	fe 01       	movw	r30, r28
    366c:	ef 5f       	subi	r30, 0xFF	; 255
    366e:	fe 4f       	sbci	r31, 0xFE	; 254
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
    3678:	64 c0       	rjmp	.+200    	; 0x3742 <Init_SM+0xd8a>
	else if (__tmp > 65535)
    367a:	fe 01       	movw	r30, r28
    367c:	ed 5f       	subi	r30, 0xFD	; 253
    367e:	fe 4f       	sbci	r31, 0xFE	; 254
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	4f e7       	ldi	r20, 0x7F	; 127
    368e:	57 e4       	ldi	r21, 0x47	; 71
    3690:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3694:	18 16       	cp	r1, r24
    3696:	0c f0       	brlt	.+2      	; 0x369a <Init_SM+0xce2>
    3698:	43 c0       	rjmp	.+134    	; 0x3720 <Init_SM+0xd68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369a:	fe 01       	movw	r30, r28
    369c:	e9 5f       	subi	r30, 0xF9	; 249
    369e:	fe 4f       	sbci	r31, 0xFE	; 254
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	51 e4       	ldi	r21, 0x41	; 65
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	8e 01       	movw	r16, r28
    36ba:	0f 5f       	subi	r16, 0xFF	; 255
    36bc:	1e 4f       	sbci	r17, 0xFE	; 254
    36be:	bc 01       	movw	r22, r24
    36c0:	cd 01       	movw	r24, r26
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	f8 01       	movw	r30, r16
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	1f c0       	rjmp	.+62     	; 0x3710 <Init_SM+0xd58>
    36d2:	fe 01       	movw	r30, r28
    36d4:	e1 50       	subi	r30, 0x01	; 1
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	88 ec       	ldi	r24, 0xC8	; 200
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	80 83       	st	Z, r24
    36e0:	fe 01       	movw	r30, r28
    36e2:	e1 50       	subi	r30, 0x01	; 1
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	01 97       	sbiw	r24, 0x01	; 1
    36ec:	f1 f7       	brne	.-4      	; 0x36ea <Init_SM+0xd32>
    36ee:	fe 01       	movw	r30, r28
    36f0:	e1 50       	subi	r30, 0x01	; 1
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	de 01       	movw	r26, r28
    36fa:	af 5f       	subi	r26, 0xFF	; 255
    36fc:	be 4f       	sbci	r27, 0xFE	; 254
    36fe:	fe 01       	movw	r30, r28
    3700:	ef 5f       	subi	r30, 0xFF	; 255
    3702:	fe 4f       	sbci	r31, 0xFE	; 254
    3704:	80 81       	ld	r24, Z
    3706:	91 81       	ldd	r25, Z+1	; 0x01
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	11 96       	adiw	r26, 0x01	; 1
    370c:	9c 93       	st	X, r25
    370e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3710:	fe 01       	movw	r30, r28
    3712:	ef 5f       	subi	r30, 0xFF	; 255
    3714:	fe 4f       	sbci	r31, 0xFE	; 254
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	d1 f6       	brne	.-76     	; 0x36d2 <Init_SM+0xd1a>
    371e:	27 c0       	rjmp	.+78     	; 0x376e <Init_SM+0xdb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3720:	8e 01       	movw	r16, r28
    3722:	0f 5f       	subi	r16, 0xFF	; 255
    3724:	1e 4f       	sbci	r17, 0xFE	; 254
    3726:	fe 01       	movw	r30, r28
    3728:	ed 5f       	subi	r30, 0xFD	; 253
    372a:	fe 4f       	sbci	r31, 0xFE	; 254
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	f8 01       	movw	r30, r16
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
    3742:	de 01       	movw	r26, r28
    3744:	a3 50       	subi	r26, 0x03	; 3
    3746:	bf 4f       	sbci	r27, 0xFF	; 255
    3748:	fe 01       	movw	r30, r28
    374a:	ef 5f       	subi	r30, 0xFF	; 255
    374c:	fe 4f       	sbci	r31, 0xFE	; 254
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	8d 93       	st	X+, r24
    3754:	9c 93       	st	X, r25
    3756:	fe 01       	movw	r30, r28
    3758:	e3 50       	subi	r30, 0x03	; 3
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <Init_SM+0xda8>
    3764:	fe 01       	movw	r30, r28
    3766:	e3 50       	subi	r30, 0x03	; 3
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	91 83       	std	Z+1, r25	; 0x01
    376c:	80 83       	st	Z, r24
						DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    376e:	fe 01       	movw	r30, r28
    3770:	ed 5a       	subi	r30, 0xAD	; 173
    3772:	fe 4f       	sbci	r31, 0xFE	; 254
    3774:	01 90       	ld	r0, Z+
    3776:	f0 81       	ld	r31, Z
    3778:	e0 2d       	mov	r30, r0
    377a:	80 81       	ld	r24, Z
    377c:	fe 01       	movw	r30, r28
    377e:	ed 5a       	subi	r30, 0xAD	; 173
    3780:	fe 4f       	sbci	r31, 0xFE	; 254
    3782:	01 90       	ld	r0, Z+
    3784:	f0 81       	ld	r31, Z
    3786:	e0 2d       	mov	r30, r0
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	69 2f       	mov	r22, r25
    378c:	40 e0       	ldi	r20, 0x00	; 0
    378e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    3792:	fe 01       	movw	r30, r28
    3794:	ed 5a       	subi	r30, 0xAD	; 173
    3796:	fe 4f       	sbci	r31, 0xFE	; 254
    3798:	01 90       	ld	r0, Z+
    379a:	f0 81       	ld	r31, Z
    379c:	e0 2d       	mov	r30, r0
    379e:	80 81       	ld	r24, Z
    37a0:	fe 01       	movw	r30, r28
    37a2:	ed 5a       	subi	r30, 0xAD	; 173
    37a4:	fe 4f       	sbci	r31, 0xFE	; 254
    37a6:	01 90       	ld	r0, Z+
    37a8:	f0 81       	ld	r31, Z
    37aa:	e0 2d       	mov	r30, r0
    37ac:	92 81       	ldd	r25, Z+2	; 0x02
    37ae:	69 2f       	mov	r22, r25
    37b0:	41 e0       	ldi	r20, 0x01	; 1
    37b2:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    37b6:	fe 01       	movw	r30, r28
    37b8:	ed 5a       	subi	r30, 0xAD	; 173
    37ba:	fe 4f       	sbci	r31, 0xFE	; 254
    37bc:	01 90       	ld	r0, Z+
    37be:	f0 81       	ld	r31, Z
    37c0:	e0 2d       	mov	r30, r0
    37c2:	80 81       	ld	r24, Z
    37c4:	fe 01       	movw	r30, r28
    37c6:	ed 5a       	subi	r30, 0xAD	; 173
    37c8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ca:	01 90       	ld	r0, Z+
    37cc:	f0 81       	ld	r31, Z
    37ce:	e0 2d       	mov	r30, r0
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	69 2f       	mov	r22, r25
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    37da:	fe 01       	movw	r30, r28
    37dc:	ed 5a       	subi	r30, 0xAD	; 173
    37de:	fe 4f       	sbci	r31, 0xFE	; 254
    37e0:	01 90       	ld	r0, Z+
    37e2:	f0 81       	ld	r31, Z
    37e4:	e0 2d       	mov	r30, r0
    37e6:	80 81       	ld	r24, Z
    37e8:	fe 01       	movw	r30, r28
    37ea:	ed 5a       	subi	r30, 0xAD	; 173
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	01 90       	ld	r0, Z+
    37f0:	f0 81       	ld	r31, Z
    37f2:	e0 2d       	mov	r30, r0
    37f4:	94 81       	ldd	r25, Z+4	; 0x04
    37f6:	69 2f       	mov	r22, r25
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    37fe:	fe 01       	movw	r30, r28
    3800:	e7 50       	subi	r30, 0x07	; 7
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	a0 ea       	ldi	r26, 0xA0	; 160
    380a:	b0 e4       	ldi	r27, 0x40	; 64
    380c:	80 83       	st	Z, r24
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	a2 83       	std	Z+2, r26	; 0x02
    3812:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	8e 01       	movw	r16, r28
    3816:	0b 50       	subi	r16, 0x0B	; 11
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	fe 01       	movw	r30, r28
    381c:	e7 50       	subi	r30, 0x07	; 7
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	60 81       	ld	r22, Z
    3822:	71 81       	ldd	r23, Z+1	; 0x01
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	4a ef       	ldi	r20, 0xFA	; 250
    382e:	54 e4       	ldi	r21, 0x44	; 68
    3830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	f8 01       	movw	r30, r16
    383a:	80 83       	st	Z, r24
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	a2 83       	std	Z+2, r26	; 0x02
    3840:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3842:	fe 01       	movw	r30, r28
    3844:	eb 50       	subi	r30, 0x0B	; 11
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e8       	ldi	r20, 0x80	; 128
    3856:	5f e3       	ldi	r21, 0x3F	; 63
    3858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    385c:	88 23       	and	r24, r24
    385e:	44 f4       	brge	.+16     	; 0x3870 <Init_SM+0xeb8>
		__ticks = 1;
    3860:	fe 01       	movw	r30, r28
    3862:	ed 50       	subi	r30, 0x0D	; 13
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	80 83       	st	Z, r24
    386e:	64 c0       	rjmp	.+200    	; 0x3938 <Init_SM+0xf80>
	else if (__tmp > 65535)
    3870:	fe 01       	movw	r30, r28
    3872:	eb 50       	subi	r30, 0x0B	; 11
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	3f ef       	ldi	r19, 0xFF	; 255
    3882:	4f e7       	ldi	r20, 0x7F	; 127
    3884:	57 e4       	ldi	r21, 0x47	; 71
    3886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    388a:	18 16       	cp	r1, r24
    388c:	0c f0       	brlt	.+2      	; 0x3890 <Init_SM+0xed8>
    388e:	43 c0       	rjmp	.+134    	; 0x3916 <Init_SM+0xf5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3890:	fe 01       	movw	r30, r28
    3892:	e7 50       	subi	r30, 0x07	; 7
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	60 81       	ld	r22, Z
    3898:	71 81       	ldd	r23, Z+1	; 0x01
    389a:	82 81       	ldd	r24, Z+2	; 0x02
    389c:	93 81       	ldd	r25, Z+3	; 0x03
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	40 e2       	ldi	r20, 0x20	; 32
    38a4:	51 e4       	ldi	r21, 0x41	; 65
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	8e 01       	movw	r16, r28
    38b0:	0d 50       	subi	r16, 0x0D	; 13
    38b2:	1f 4f       	sbci	r17, 0xFF	; 255
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	f8 01       	movw	r30, r16
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	80 83       	st	Z, r24
    38c6:	1f c0       	rjmp	.+62     	; 0x3906 <Init_SM+0xf4e>
    38c8:	fe 01       	movw	r30, r28
    38ca:	ef 50       	subi	r30, 0x0F	; 15
    38cc:	ff 4f       	sbci	r31, 0xFF	; 255
    38ce:	88 ec       	ldi	r24, 0xC8	; 200
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	91 83       	std	Z+1, r25	; 0x01
    38d4:	80 83       	st	Z, r24
    38d6:	fe 01       	movw	r30, r28
    38d8:	ef 50       	subi	r30, 0x0F	; 15
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	80 81       	ld	r24, Z
    38de:	91 81       	ldd	r25, Z+1	; 0x01
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <Init_SM+0xf28>
    38e4:	fe 01       	movw	r30, r28
    38e6:	ef 50       	subi	r30, 0x0F	; 15
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ee:	de 01       	movw	r26, r28
    38f0:	ad 50       	subi	r26, 0x0D	; 13
    38f2:	bf 4f       	sbci	r27, 0xFF	; 255
    38f4:	fe 01       	movw	r30, r28
    38f6:	ed 50       	subi	r30, 0x0D	; 13
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	11 96       	adiw	r26, 0x01	; 1
    3902:	9c 93       	st	X, r25
    3904:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3906:	fe 01       	movw	r30, r28
    3908:	ed 50       	subi	r30, 0x0D	; 13
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	d1 f6       	brne	.-76     	; 0x38c8 <Init_SM+0xf10>
    3914:	27 c0       	rjmp	.+78     	; 0x3964 <Init_SM+0xfac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	8e 01       	movw	r16, r28
    3918:	0d 50       	subi	r16, 0x0D	; 13
    391a:	1f 4f       	sbci	r17, 0xFF	; 255
    391c:	fe 01       	movw	r30, r28
    391e:	eb 50       	subi	r30, 0x0B	; 11
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	60 81       	ld	r22, Z
    3924:	71 81       	ldd	r23, Z+1	; 0x01
    3926:	82 81       	ldd	r24, Z+2	; 0x02
    3928:	93 81       	ldd	r25, Z+3	; 0x03
    392a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	f8 01       	movw	r30, r16
    3934:	91 83       	std	Z+1, r25	; 0x01
    3936:	80 83       	st	Z, r24
    3938:	de 01       	movw	r26, r28
    393a:	a1 51       	subi	r26, 0x11	; 17
    393c:	bf 4f       	sbci	r27, 0xFF	; 255
    393e:	fe 01       	movw	r30, r28
    3940:	ed 50       	subi	r30, 0x0D	; 13
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 81       	ld	r24, Z
    3946:	91 81       	ldd	r25, Z+1	; 0x01
    3948:	8d 93       	st	X+, r24
    394a:	9c 93       	st	X, r25
    394c:	fe 01       	movw	r30, r28
    394e:	e1 51       	subi	r30, 0x11	; 17
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	80 81       	ld	r24, Z
    3954:	91 81       	ldd	r25, Z+1	; 0x01
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	f1 f7       	brne	.-4      	; 0x3956 <Init_SM+0xf9e>
    395a:	fe 01       	movw	r30, r28
    395c:	e1 51       	subi	r30, 0x11	; 17
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	91 83       	std	Z+1, r25	; 0x01
    3962:	80 83       	st	Z, r24
						DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3964:	fe 01       	movw	r30, r28
    3966:	ed 5a       	subi	r30, 0xAD	; 173
    3968:	fe 4f       	sbci	r31, 0xFE	; 254
    396a:	01 90       	ld	r0, Z+
    396c:	f0 81       	ld	r31, Z
    396e:	e0 2d       	mov	r30, r0
    3970:	80 81       	ld	r24, Z
    3972:	fe 01       	movw	r30, r28
    3974:	ed 5a       	subi	r30, 0xAD	; 173
    3976:	fe 4f       	sbci	r31, 0xFE	; 254
    3978:	01 90       	ld	r0, Z+
    397a:	f0 81       	ld	r31, Z
    397c:	e0 2d       	mov	r30, r0
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	69 2f       	mov	r22, r25
    3982:	41 e0       	ldi	r20, 0x01	; 1
    3984:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    3988:	fe 01       	movw	r30, r28
    398a:	ed 5a       	subi	r30, 0xAD	; 173
    398c:	fe 4f       	sbci	r31, 0xFE	; 254
    398e:	01 90       	ld	r0, Z+
    3990:	f0 81       	ld	r31, Z
    3992:	e0 2d       	mov	r30, r0
    3994:	80 81       	ld	r24, Z
    3996:	fe 01       	movw	r30, r28
    3998:	ed 5a       	subi	r30, 0xAD	; 173
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	01 90       	ld	r0, Z+
    399e:	f0 81       	ld	r31, Z
    39a0:	e0 2d       	mov	r30, r0
    39a2:	92 81       	ldd	r25, Z+2	; 0x02
    39a4:	69 2f       	mov	r22, r25
    39a6:	40 e0       	ldi	r20, 0x00	; 0
    39a8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    39ac:	fe 01       	movw	r30, r28
    39ae:	ed 5a       	subi	r30, 0xAD	; 173
    39b0:	fe 4f       	sbci	r31, 0xFE	; 254
    39b2:	01 90       	ld	r0, Z+
    39b4:	f0 81       	ld	r31, Z
    39b6:	e0 2d       	mov	r30, r0
    39b8:	80 81       	ld	r24, Z
    39ba:	fe 01       	movw	r30, r28
    39bc:	ed 5a       	subi	r30, 0xAD	; 173
    39be:	fe 4f       	sbci	r31, 0xFE	; 254
    39c0:	01 90       	ld	r0, Z+
    39c2:	f0 81       	ld	r31, Z
    39c4:	e0 2d       	mov	r30, r0
    39c6:	93 81       	ldd	r25, Z+3	; 0x03
    39c8:	69 2f       	mov	r22, r25
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    39d0:	fe 01       	movw	r30, r28
    39d2:	ed 5a       	subi	r30, 0xAD	; 173
    39d4:	fe 4f       	sbci	r31, 0xFE	; 254
    39d6:	01 90       	ld	r0, Z+
    39d8:	f0 81       	ld	r31, Z
    39da:	e0 2d       	mov	r30, r0
    39dc:	80 81       	ld	r24, Z
    39de:	fe 01       	movw	r30, r28
    39e0:	ed 5a       	subi	r30, 0xAD	; 173
    39e2:	fe 4f       	sbci	r31, 0xFE	; 254
    39e4:	01 90       	ld	r0, Z+
    39e6:	f0 81       	ld	r31, Z
    39e8:	e0 2d       	mov	r30, r0
    39ea:	94 81       	ldd	r25, Z+4	; 0x04
    39ec:	69 2f       	mov	r22, r25
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    39f4:	fe 01       	movw	r30, r28
    39f6:	e5 51       	subi	r30, 0x15	; 21
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3a00:	b0 e4       	ldi	r27, 0x40	; 64
    3a02:	80 83       	st	Z, r24
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	a2 83       	std	Z+2, r26	; 0x02
    3a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0a:	8e 01       	movw	r16, r28
    3a0c:	09 51       	subi	r16, 0x19	; 25
    3a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a10:	fe 01       	movw	r30, r28
    3a12:	e5 51       	subi	r30, 0x15	; 21
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	60 81       	ld	r22, Z
    3a18:	71 81       	ldd	r23, Z+1	; 0x01
    3a1a:	82 81       	ldd	r24, Z+2	; 0x02
    3a1c:	93 81       	ldd	r25, Z+3	; 0x03
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a ef       	ldi	r20, 0xFA	; 250
    3a24:	54 e4       	ldi	r21, 0x44	; 68
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	f8 01       	movw	r30, r16
    3a30:	80 83       	st	Z, r24
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	a2 83       	std	Z+2, r26	; 0x02
    3a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e9 51       	subi	r30, 0x19	; 25
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	60 81       	ld	r22, Z
    3a40:	71 81       	ldd	r23, Z+1	; 0x01
    3a42:	82 81       	ldd	r24, Z+2	; 0x02
    3a44:	93 81       	ldd	r25, Z+3	; 0x03
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e8       	ldi	r20, 0x80	; 128
    3a4c:	5f e3       	ldi	r21, 0x3F	; 63
    3a4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a52:	88 23       	and	r24, r24
    3a54:	44 f4       	brge	.+16     	; 0x3a66 <Init_SM+0x10ae>
		__ticks = 1;
    3a56:	fe 01       	movw	r30, r28
    3a58:	eb 51       	subi	r30, 0x1B	; 27
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	80 83       	st	Z, r24
    3a64:	64 c0       	rjmp	.+200    	; 0x3b2e <Init_SM+0x1176>
	else if (__tmp > 65535)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e9 51       	subi	r30, 0x19	; 25
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	0c f0       	brlt	.+2      	; 0x3a86 <Init_SM+0x10ce>
    3a84:	43 c0       	rjmp	.+134    	; 0x3b0c <Init_SM+0x1154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a86:	fe 01       	movw	r30, r28
    3a88:	e5 51       	subi	r30, 0x15	; 21
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	60 81       	ld	r22, Z
    3a8e:	71 81       	ldd	r23, Z+1	; 0x01
    3a90:	82 81       	ldd	r24, Z+2	; 0x02
    3a92:	93 81       	ldd	r25, Z+3	; 0x03
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	8e 01       	movw	r16, r28
    3aa6:	0b 51       	subi	r16, 0x1B	; 27
    3aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	91 83       	std	Z+1, r25	; 0x01
    3aba:	80 83       	st	Z, r24
    3abc:	1f c0       	rjmp	.+62     	; 0x3afc <Init_SM+0x1144>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	ed 51       	subi	r30, 0x1D	; 29
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	88 ec       	ldi	r24, 0xC8	; 200
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
    3acc:	fe 01       	movw	r30, r28
    3ace:	ed 51       	subi	r30, 0x1D	; 29
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <Init_SM+0x111e>
    3ada:	fe 01       	movw	r30, r28
    3adc:	ed 51       	subi	r30, 0x1D	; 29
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae4:	de 01       	movw	r26, r28
    3ae6:	ab 51       	subi	r26, 0x1B	; 27
    3ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aea:	fe 01       	movw	r30, r28
    3aec:	eb 51       	subi	r30, 0x1B	; 27
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	11 96       	adiw	r26, 0x01	; 1
    3af8:	9c 93       	st	X, r25
    3afa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afc:	fe 01       	movw	r30, r28
    3afe:	eb 51       	subi	r30, 0x1B	; 27
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	00 97       	sbiw	r24, 0x00	; 0
    3b08:	d1 f6       	brne	.-76     	; 0x3abe <Init_SM+0x1106>
    3b0a:	27 c0       	rjmp	.+78     	; 0x3b5a <Init_SM+0x11a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b0c:	8e 01       	movw	r16, r28
    3b0e:	0b 51       	subi	r16, 0x1B	; 27
    3b10:	1f 4f       	sbci	r17, 0xFF	; 255
    3b12:	fe 01       	movw	r30, r28
    3b14:	e9 51       	subi	r30, 0x19	; 25
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	60 81       	ld	r22, Z
    3b1a:	71 81       	ldd	r23, Z+1	; 0x01
    3b1c:	82 81       	ldd	r24, Z+2	; 0x02
    3b1e:	93 81       	ldd	r25, Z+3	; 0x03
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	f8 01       	movw	r30, r16
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	80 83       	st	Z, r24
    3b2e:	de 01       	movw	r26, r28
    3b30:	af 51       	subi	r26, 0x1F	; 31
    3b32:	bf 4f       	sbci	r27, 0xFF	; 255
    3b34:	fe 01       	movw	r30, r28
    3b36:	eb 51       	subi	r30, 0x1B	; 27
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 81       	ld	r24, Z
    3b3c:	91 81       	ldd	r25, Z+1	; 0x01
    3b3e:	8d 93       	st	X+, r24
    3b40:	9c 93       	st	X, r25
    3b42:	fe 01       	movw	r30, r28
    3b44:	ef 51       	subi	r30, 0x1F	; 31
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <Init_SM+0x1194>
    3b50:	fe 01       	movw	r30, r28
    3b52:	ef 51       	subi	r30, 0x1F	; 31
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	91 83       	std	Z+1, r25	; 0x01
    3b58:	80 83       	st	Z, r24

		}

		else if (Copy_SM_st->SM_Direction == Clock_Wise)
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    3b5a:	de 01       	movw	r26, r28
    3b5c:	af 5a       	subi	r26, 0xAF	; 175
    3b5e:	be 4f       	sbci	r27, 0xFE	; 254
    3b60:	fe 01       	movw	r30, r28
    3b62:	ef 5a       	subi	r30, 0xAF	; 175
    3b64:	fe 4f       	sbci	r31, 0xFE	; 254
    3b66:	80 81       	ld	r24, Z
    3b68:	8f 5f       	subi	r24, 0xFF	; 255
    3b6a:	8c 93       	st	X, r24
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	ef 5a       	subi	r30, 0xAF	; 175
    3b70:	fe 4f       	sbci	r31, 0xFE	; 254
    3b72:	80 81       	ld	r24, Z
    3b74:	28 2f       	mov	r18, r24
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	ed 5a       	subi	r30, 0xAD	; 173
    3b80:	fe 4f       	sbci	r31, 0xFE	; 254
    3b82:	01 90       	ld	r0, Z+
    3b84:	f0 81       	ld	r31, Z
    3b86:	e0 2d       	mov	r30, r0
    3b88:	80 85       	ldd	r24, Z+8	; 0x08
    3b8a:	91 85       	ldd	r25, Z+9	; 0x09
    3b8c:	a2 85       	ldd	r26, Z+10	; 0x0a
    3b8e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3b90:	28 17       	cp	r18, r24
    3b92:	39 07       	cpc	r19, r25
    3b94:	4a 07       	cpc	r20, r26
    3b96:	5b 07       	cpc	r21, r27
    3b98:	08 f4       	brcc	.+2      	; 0x3b9c <Init_SM+0x11e4>
    3b9a:	f3 cb       	rjmp	.-2074   	; 0x3382 <Init_SM+0x9ca>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
						DIO_u8PIN_LOW);
				_delay_ms(5);
			
			}
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ed 5a       	subi	r30, 0xAD	; 173
    3ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba2:	01 90       	ld	r0, Z+
    3ba4:	f0 81       	ld	r31, Z
    3ba6:	e0 2d       	mov	r30, r0
    3ba8:	80 81       	ld	r24, Z
    3baa:	fe 01       	movw	r30, r28
    3bac:	ed 5a       	subi	r30, 0xAD	; 173
    3bae:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb0:	01 90       	ld	r0, Z+
    3bb2:	f0 81       	ld	r31, Z
    3bb4:	e0 2d       	mov	r30, r0
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	69 2f       	mov	r22, r25
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	ed 5a       	subi	r30, 0xAD	; 173
    3bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc6:	01 90       	ld	r0, Z+
    3bc8:	f0 81       	ld	r31, Z
    3bca:	e0 2d       	mov	r30, r0
    3bcc:	80 81       	ld	r24, Z
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ed 5a       	subi	r30, 0xAD	; 173
    3bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd4:	01 90       	ld	r0, Z+
    3bd6:	f0 81       	ld	r31, Z
    3bd8:	e0 2d       	mov	r30, r0
    3bda:	92 81       	ldd	r25, Z+2	; 0x02
    3bdc:	69 2f       	mov	r22, r25
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    3be4:	fe 01       	movw	r30, r28
    3be6:	ed 5a       	subi	r30, 0xAD	; 173
    3be8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bea:	01 90       	ld	r0, Z+
    3bec:	f0 81       	ld	r31, Z
    3bee:	e0 2d       	mov	r30, r0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	ed 5a       	subi	r30, 0xAD	; 173
    3bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf8:	01 90       	ld	r0, Z+
    3bfa:	f0 81       	ld	r31, Z
    3bfc:	e0 2d       	mov	r30, r0
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	69 2f       	mov	r22, r25
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    3c08:	fe 01       	movw	r30, r28
    3c0a:	ed 5a       	subi	r30, 0xAD	; 173
    3c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0e:	01 90       	ld	r0, Z+
    3c10:	f0 81       	ld	r31, Z
    3c12:	e0 2d       	mov	r30, r0
    3c14:	80 81       	ld	r24, Z
    3c16:	fe 01       	movw	r30, r28
    3c18:	ed 5a       	subi	r30, 0xAD	; 173
    3c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c1c:	01 90       	ld	r0, Z+
    3c1e:	f0 81       	ld	r31, Z
    3c20:	e0 2d       	mov	r30, r0
    3c22:	94 81       	ldd	r25, Z+4	; 0x04
    3c24:	69 2f       	mov	r22, r25
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3c2c:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <Init_SM+0x2af4>
		}
	}

	else if (Copy_SM_st->Step_Type == Half_Step)
    3c30:	fe 01       	movw	r30, r28
    3c32:	ed 5a       	subi	r30, 0xAD	; 173
    3c34:	fe 4f       	sbci	r31, 0xFE	; 254
    3c36:	01 90       	ld	r0, Z+
    3c38:	f0 81       	ld	r31, Z
    3c3a:	e0 2d       	mov	r30, r0
    3c3c:	85 81       	ldd	r24, Z+5	; 0x05
    3c3e:	81 30       	cpi	r24, 0x01	; 1
    3c40:	11 f0       	breq	.+4      	; 0x3c46 <Init_SM+0x128e>
    3c42:	0c 94 56 2a 	jmp	0x54ac	; 0x54ac <Init_SM+0x2af4>
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
    3c46:	fe 01       	movw	r30, r28
    3c48:	ed 5a       	subi	r30, 0xAD	; 173
    3c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c4c:	01 90       	ld	r0, Z+
    3c4e:	f0 81       	ld	r31, Z
    3c50:	e0 2d       	mov	r30, r0
    3c52:	86 81       	ldd	r24, Z+6	; 0x06
    3c54:	83 30       	cpi	r24, 0x03	; 3
    3c56:	09 f0       	breq	.+2      	; 0x3c5a <Init_SM+0x12a2>
    3c58:	a9 c6       	rjmp	.+3410   	; 0x49ac <Init_SM+0x1ff4>
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	ef 5a       	subi	r30, 0xAF	; 175
    3c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c60:	10 82       	st	Z, r1
    3c62:	43 c6       	rjmp	.+3206   	; 0x48ea <Init_SM+0x1f32>
			{
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    3c64:	fe 01       	movw	r30, r28
    3c66:	ed 5a       	subi	r30, 0xAD	; 173
    3c68:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6a:	01 90       	ld	r0, Z+
    3c6c:	f0 81       	ld	r31, Z
    3c6e:	e0 2d       	mov	r30, r0
    3c70:	80 81       	ld	r24, Z
    3c72:	fe 01       	movw	r30, r28
    3c74:	ed 5a       	subi	r30, 0xAD	; 173
    3c76:	fe 4f       	sbci	r31, 0xFE	; 254
    3c78:	01 90       	ld	r0, Z+
    3c7a:	f0 81       	ld	r31, Z
    3c7c:	e0 2d       	mov	r30, r0
    3c7e:	94 81       	ldd	r25, Z+4	; 0x04
    3c80:	69 2f       	mov	r22, r25
    3c82:	41 e0       	ldi	r20, 0x01	; 1
    3c84:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e3 52       	subi	r30, 0x23	; 35
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	a0 ea       	ldi	r26, 0xA0	; 160
    3c94:	b0 e4       	ldi	r27, 0x40	; 64
    3c96:	80 83       	st	Z, r24
    3c98:	91 83       	std	Z+1, r25	; 0x01
    3c9a:	a2 83       	std	Z+2, r26	; 0x02
    3c9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c9e:	8e 01       	movw	r16, r28
    3ca0:	07 52       	subi	r16, 0x27	; 39
    3ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	e3 52       	subi	r30, 0x23	; 35
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	60 81       	ld	r22, Z
    3cac:	71 81       	ldd	r23, Z+1	; 0x01
    3cae:	82 81       	ldd	r24, Z+2	; 0x02
    3cb0:	93 81       	ldd	r25, Z+3	; 0x03
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	4a ef       	ldi	r20, 0xFA	; 250
    3cb8:	54 e4       	ldi	r21, 0x44	; 68
    3cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	f8 01       	movw	r30, r16
    3cc4:	80 83       	st	Z, r24
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	a2 83       	std	Z+2, r26	; 0x02
    3cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e7 52       	subi	r30, 0x27	; 39
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	60 81       	ld	r22, Z
    3cd4:	71 81       	ldd	r23, Z+1	; 0x01
    3cd6:	82 81       	ldd	r24, Z+2	; 0x02
    3cd8:	93 81       	ldd	r25, Z+3	; 0x03
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e8       	ldi	r20, 0x80	; 128
    3ce0:	5f e3       	ldi	r21, 0x3F	; 63
    3ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce6:	88 23       	and	r24, r24
    3ce8:	44 f4       	brge	.+16     	; 0x3cfa <Init_SM+0x1342>
		__ticks = 1;
    3cea:	fe 01       	movw	r30, r28
    3cec:	e9 52       	subi	r30, 0x29	; 41
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	80 83       	st	Z, r24
    3cf8:	64 c0       	rjmp	.+200    	; 0x3dc2 <Init_SM+0x140a>
	else if (__tmp > 65535)
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e7 52       	subi	r30, 0x27	; 39
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	60 81       	ld	r22, Z
    3d02:	71 81       	ldd	r23, Z+1	; 0x01
    3d04:	82 81       	ldd	r24, Z+2	; 0x02
    3d06:	93 81       	ldd	r25, Z+3	; 0x03
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	3f ef       	ldi	r19, 0xFF	; 255
    3d0c:	4f e7       	ldi	r20, 0x7F	; 127
    3d0e:	57 e4       	ldi	r21, 0x47	; 71
    3d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d14:	18 16       	cp	r1, r24
    3d16:	0c f0       	brlt	.+2      	; 0x3d1a <Init_SM+0x1362>
    3d18:	43 c0       	rjmp	.+134    	; 0x3da0 <Init_SM+0x13e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e3 52       	subi	r30, 0x23	; 35
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	40 e2       	ldi	r20, 0x20	; 32
    3d2e:	51 e4       	ldi	r21, 0x41	; 65
    3d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	8e 01       	movw	r16, r28
    3d3a:	09 52       	subi	r16, 0x29	; 41
    3d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3e:	bc 01       	movw	r22, r24
    3d40:	cd 01       	movw	r24, r26
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	f8 01       	movw	r30, r16
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	80 83       	st	Z, r24
    3d50:	1f c0       	rjmp	.+62     	; 0x3d90 <Init_SM+0x13d8>
    3d52:	fe 01       	movw	r30, r28
    3d54:	eb 52       	subi	r30, 0x2B	; 43
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	88 ec       	ldi	r24, 0xC8	; 200
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	91 83       	std	Z+1, r25	; 0x01
    3d5e:	80 83       	st	Z, r24
    3d60:	fe 01       	movw	r30, r28
    3d62:	eb 52       	subi	r30, 0x2B	; 43
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <Init_SM+0x13b2>
    3d6e:	fe 01       	movw	r30, r28
    3d70:	eb 52       	subi	r30, 0x2B	; 43
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	de 01       	movw	r26, r28
    3d7a:	a9 52       	subi	r26, 0x29	; 41
    3d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e9 52       	subi	r30, 0x29	; 41
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 81       	ld	r24, Z
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	11 96       	adiw	r26, 0x01	; 1
    3d8c:	9c 93       	st	X, r25
    3d8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	fe 01       	movw	r30, r28
    3d92:	e9 52       	subi	r30, 0x29	; 41
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	d1 f6       	brne	.-76     	; 0x3d52 <Init_SM+0x139a>
    3d9e:	27 c0       	rjmp	.+78     	; 0x3dee <Init_SM+0x1436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da0:	8e 01       	movw	r16, r28
    3da2:	09 52       	subi	r16, 0x29	; 41
    3da4:	1f 4f       	sbci	r17, 0xFF	; 255
    3da6:	fe 01       	movw	r30, r28
    3da8:	e7 52       	subi	r30, 0x27	; 39
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	60 81       	ld	r22, Z
    3dae:	71 81       	ldd	r23, Z+1	; 0x01
    3db0:	82 81       	ldd	r24, Z+2	; 0x02
    3db2:	93 81       	ldd	r25, Z+3	; 0x03
    3db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
    3dc2:	de 01       	movw	r26, r28
    3dc4:	ad 52       	subi	r26, 0x2D	; 45
    3dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e9 52       	subi	r30, 0x29	; 41
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	8d 93       	st	X+, r24
    3dd4:	9c 93       	st	X, r25
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ed 52       	subi	r30, 0x2D	; 45
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	80 81       	ld	r24, Z
    3dde:	91 81       	ldd	r25, Z+1	; 0x01
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	f1 f7       	brne	.-4      	; 0x3de0 <Init_SM+0x1428>
    3de4:	fe 01       	movw	r30, r28
    3de6:	ed 52       	subi	r30, 0x2D	; 45
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    3dee:	fe 01       	movw	r30, r28
    3df0:	ed 5a       	subi	r30, 0xAD	; 173
    3df2:	fe 4f       	sbci	r31, 0xFE	; 254
    3df4:	01 90       	ld	r0, Z+
    3df6:	f0 81       	ld	r31, Z
    3df8:	e0 2d       	mov	r30, r0
    3dfa:	80 81       	ld	r24, Z
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	ed 5a       	subi	r30, 0xAD	; 173
    3e00:	fe 4f       	sbci	r31, 0xFE	; 254
    3e02:	01 90       	ld	r0, Z+
    3e04:	f0 81       	ld	r31, Z
    3e06:	e0 2d       	mov	r30, r0
    3e08:	94 81       	ldd	r25, Z+4	; 0x04
    3e0a:	69 2f       	mov	r22, r25
    3e0c:	40 e0       	ldi	r20, 0x00	; 0
    3e0e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3e12:	fe 01       	movw	r30, r28
    3e14:	e1 53       	subi	r30, 0x31	; 49
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	a0 ea       	ldi	r26, 0xA0	; 160
    3e1e:	b0 e4       	ldi	r27, 0x40	; 64
    3e20:	80 83       	st	Z, r24
    3e22:	91 83       	std	Z+1, r25	; 0x01
    3e24:	a2 83       	std	Z+2, r26	; 0x02
    3e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e28:	8e 01       	movw	r16, r28
    3e2a:	05 53       	subi	r16, 0x35	; 53
    3e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e1 53       	subi	r30, 0x31	; 49
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	60 81       	ld	r22, Z
    3e36:	71 81       	ldd	r23, Z+1	; 0x01
    3e38:	82 81       	ldd	r24, Z+2	; 0x02
    3e3a:	93 81       	ldd	r25, Z+3	; 0x03
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	4a ef       	ldi	r20, 0xFA	; 250
    3e42:	54 e4       	ldi	r21, 0x44	; 68
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	80 83       	st	Z, r24
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	a2 83       	std	Z+2, r26	; 0x02
    3e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e56:	fe 01       	movw	r30, r28
    3e58:	e5 53       	subi	r30, 0x35	; 53
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	40 e8       	ldi	r20, 0x80	; 128
    3e6a:	5f e3       	ldi	r21, 0x3F	; 63
    3e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e70:	88 23       	and	r24, r24
    3e72:	44 f4       	brge	.+16     	; 0x3e84 <Init_SM+0x14cc>
		__ticks = 1;
    3e74:	fe 01       	movw	r30, r28
    3e76:	e7 53       	subi	r30, 0x37	; 55
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
    3e82:	64 c0       	rjmp	.+200    	; 0x3f4c <Init_SM+0x1594>
	else if (__tmp > 65535)
    3e84:	fe 01       	movw	r30, r28
    3e86:	e5 53       	subi	r30, 0x35	; 53
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	60 81       	ld	r22, Z
    3e8c:	71 81       	ldd	r23, Z+1	; 0x01
    3e8e:	82 81       	ldd	r24, Z+2	; 0x02
    3e90:	93 81       	ldd	r25, Z+3	; 0x03
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	3f ef       	ldi	r19, 0xFF	; 255
    3e96:	4f e7       	ldi	r20, 0x7F	; 127
    3e98:	57 e4       	ldi	r21, 0x47	; 71
    3e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e9e:	18 16       	cp	r1, r24
    3ea0:	0c f0       	brlt	.+2      	; 0x3ea4 <Init_SM+0x14ec>
    3ea2:	43 c0       	rjmp	.+134    	; 0x3f2a <Init_SM+0x1572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e1 53       	subi	r30, 0x31	; 49
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	60 81       	ld	r22, Z
    3eac:	71 81       	ldd	r23, Z+1	; 0x01
    3eae:	82 81       	ldd	r24, Z+2	; 0x02
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	40 e2       	ldi	r20, 0x20	; 32
    3eb8:	51 e4       	ldi	r21, 0x41	; 65
    3eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	8e 01       	movw	r16, r28
    3ec4:	07 53       	subi	r16, 0x37	; 55
    3ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	80 83       	st	Z, r24
    3eda:	1f c0       	rjmp	.+62     	; 0x3f1a <Init_SM+0x1562>
    3edc:	fe 01       	movw	r30, r28
    3ede:	e9 53       	subi	r30, 0x39	; 57
    3ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee2:	88 ec       	ldi	r24, 0xC8	; 200
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
    3eea:	fe 01       	movw	r30, r28
    3eec:	e9 53       	subi	r30, 0x39	; 57
    3eee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef0:	80 81       	ld	r24, Z
    3ef2:	91 81       	ldd	r25, Z+1	; 0x01
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <Init_SM+0x153c>
    3ef8:	fe 01       	movw	r30, r28
    3efa:	e9 53       	subi	r30, 0x39	; 57
    3efc:	ff 4f       	sbci	r31, 0xFF	; 255
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f02:	de 01       	movw	r26, r28
    3f04:	a7 53       	subi	r26, 0x37	; 55
    3f06:	bf 4f       	sbci	r27, 0xFF	; 255
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e7 53       	subi	r30, 0x37	; 55
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	11 96       	adiw	r26, 0x01	; 1
    3f16:	9c 93       	st	X, r25
    3f18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e7 53       	subi	r30, 0x37	; 55
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	80 81       	ld	r24, Z
    3f22:	91 81       	ldd	r25, Z+1	; 0x01
    3f24:	00 97       	sbiw	r24, 0x00	; 0
    3f26:	d1 f6       	brne	.-76     	; 0x3edc <Init_SM+0x1524>
    3f28:	27 c0       	rjmp	.+78     	; 0x3f78 <Init_SM+0x15c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f2a:	8e 01       	movw	r16, r28
    3f2c:	07 53       	subi	r16, 0x37	; 55
    3f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f30:	fe 01       	movw	r30, r28
    3f32:	e5 53       	subi	r30, 0x35	; 53
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	60 81       	ld	r22, Z
    3f38:	71 81       	ldd	r23, Z+1	; 0x01
    3f3a:	82 81       	ldd	r24, Z+2	; 0x02
    3f3c:	93 81       	ldd	r25, Z+3	; 0x03
    3f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	f8 01       	movw	r30, r16
    3f48:	91 83       	std	Z+1, r25	; 0x01
    3f4a:	80 83       	st	Z, r24
    3f4c:	de 01       	movw	r26, r28
    3f4e:	ab 53       	subi	r26, 0x3B	; 59
    3f50:	bf 4f       	sbci	r27, 0xFF	; 255
    3f52:	fe 01       	movw	r30, r28
    3f54:	e7 53       	subi	r30, 0x37	; 55
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 81       	ld	r24, Z
    3f5a:	91 81       	ldd	r25, Z+1	; 0x01
    3f5c:	8d 93       	st	X+, r24
    3f5e:	9c 93       	st	X, r25
    3f60:	fe 01       	movw	r30, r28
    3f62:	eb 53       	subi	r30, 0x3B	; 59
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	80 81       	ld	r24, Z
    3f68:	91 81       	ldd	r25, Z+1	; 0x01
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <Init_SM+0x15b2>
    3f6e:	fe 01       	movw	r30, r28
    3f70:	eb 53       	subi	r30, 0x3B	; 59
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	91 83       	std	Z+1, r25	; 0x01
    3f76:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    3f78:	fe 01       	movw	r30, r28
    3f7a:	ed 5a       	subi	r30, 0xAD	; 173
    3f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f7e:	01 90       	ld	r0, Z+
    3f80:	f0 81       	ld	r31, Z
    3f82:	e0 2d       	mov	r30, r0
    3f84:	80 81       	ld	r24, Z
    3f86:	fe 01       	movw	r30, r28
    3f88:	ed 5a       	subi	r30, 0xAD	; 173
    3f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8c:	01 90       	ld	r0, Z+
    3f8e:	f0 81       	ld	r31, Z
    3f90:	e0 2d       	mov	r30, r0
    3f92:	92 81       	ldd	r25, Z+2	; 0x02
    3f94:	69 2f       	mov	r22, r25
    3f96:	41 e0       	ldi	r20, 0x01	; 1
    3f98:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ef 53       	subi	r30, 0x3F	; 63
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	a0 ea       	ldi	r26, 0xA0	; 160
    3fa8:	b0 e4       	ldi	r27, 0x40	; 64
    3faa:	80 83       	st	Z, r24
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	a2 83       	std	Z+2, r26	; 0x02
    3fb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb2:	8e 01       	movw	r16, r28
    3fb4:	03 54       	subi	r16, 0x43	; 67
    3fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb8:	fe 01       	movw	r30, r28
    3fba:	ef 53       	subi	r30, 0x3F	; 63
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	60 81       	ld	r22, Z
    3fc0:	71 81       	ldd	r23, Z+1	; 0x01
    3fc2:	82 81       	ldd	r24, Z+2	; 0x02
    3fc4:	93 81       	ldd	r25, Z+3	; 0x03
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	4a ef       	ldi	r20, 0xFA	; 250
    3fcc:	54 e4       	ldi	r21, 0x44	; 68
    3fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	f8 01       	movw	r30, r16
    3fd8:	80 83       	st	Z, r24
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	a2 83       	std	Z+2, r26	; 0x02
    3fde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e3 54       	subi	r30, 0x43	; 67
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	60 81       	ld	r22, Z
    3fe8:	71 81       	ldd	r23, Z+1	; 0x01
    3fea:	82 81       	ldd	r24, Z+2	; 0x02
    3fec:	93 81       	ldd	r25, Z+3	; 0x03
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e8       	ldi	r20, 0x80	; 128
    3ff4:	5f e3       	ldi	r21, 0x3F	; 63
    3ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffa:	88 23       	and	r24, r24
    3ffc:	44 f4       	brge	.+16     	; 0x400e <Init_SM+0x1656>
		__ticks = 1;
    3ffe:	fe 01       	movw	r30, r28
    4000:	e5 54       	subi	r30, 0x45	; 69
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	80 83       	st	Z, r24
    400c:	64 c0       	rjmp	.+200    	; 0x40d6 <Init_SM+0x171e>
	else if (__tmp > 65535)
    400e:	fe 01       	movw	r30, r28
    4010:	e3 54       	subi	r30, 0x43	; 67
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	3f ef       	ldi	r19, 0xFF	; 255
    4020:	4f e7       	ldi	r20, 0x7F	; 127
    4022:	57 e4       	ldi	r21, 0x47	; 71
    4024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4028:	18 16       	cp	r1, r24
    402a:	0c f0       	brlt	.+2      	; 0x402e <Init_SM+0x1676>
    402c:	43 c0       	rjmp	.+134    	; 0x40b4 <Init_SM+0x16fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402e:	fe 01       	movw	r30, r28
    4030:	ef 53       	subi	r30, 0x3F	; 63
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	60 81       	ld	r22, Z
    4036:	71 81       	ldd	r23, Z+1	; 0x01
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	40 e2       	ldi	r20, 0x20	; 32
    4042:	51 e4       	ldi	r21, 0x41	; 65
    4044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	8e 01       	movw	r16, r28
    404e:	05 54       	subi	r16, 0x45	; 69
    4050:	1f 4f       	sbci	r17, 0xFF	; 255
    4052:	bc 01       	movw	r22, r24
    4054:	cd 01       	movw	r24, r26
    4056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	f8 01       	movw	r30, r16
    4060:	91 83       	std	Z+1, r25	; 0x01
    4062:	80 83       	st	Z, r24
    4064:	1f c0       	rjmp	.+62     	; 0x40a4 <Init_SM+0x16ec>
    4066:	fe 01       	movw	r30, r28
    4068:	e7 54       	subi	r30, 0x47	; 71
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	88 ec       	ldi	r24, 0xC8	; 200
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	91 83       	std	Z+1, r25	; 0x01
    4072:	80 83       	st	Z, r24
    4074:	fe 01       	movw	r30, r28
    4076:	e7 54       	subi	r30, 0x47	; 71
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <Init_SM+0x16c6>
    4082:	fe 01       	movw	r30, r28
    4084:	e7 54       	subi	r30, 0x47	; 71
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408c:	de 01       	movw	r26, r28
    408e:	a5 54       	subi	r26, 0x45	; 69
    4090:	bf 4f       	sbci	r27, 0xFF	; 255
    4092:	fe 01       	movw	r30, r28
    4094:	e5 54       	subi	r30, 0x45	; 69
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 81       	ld	r24, Z
    409a:	91 81       	ldd	r25, Z+1	; 0x01
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	11 96       	adiw	r26, 0x01	; 1
    40a0:	9c 93       	st	X, r25
    40a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a4:	fe 01       	movw	r30, r28
    40a6:	e5 54       	subi	r30, 0x45	; 69
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 81       	ld	r24, Z
    40ac:	91 81       	ldd	r25, Z+1	; 0x01
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	d1 f6       	brne	.-76     	; 0x4066 <Init_SM+0x16ae>
    40b2:	27 c0       	rjmp	.+78     	; 0x4102 <Init_SM+0x174a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b4:	8e 01       	movw	r16, r28
    40b6:	05 54       	subi	r16, 0x45	; 69
    40b8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ba:	fe 01       	movw	r30, r28
    40bc:	e3 54       	subi	r30, 0x43	; 67
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	60 81       	ld	r22, Z
    40c2:	71 81       	ldd	r23, Z+1	; 0x01
    40c4:	82 81       	ldd	r24, Z+2	; 0x02
    40c6:	93 81       	ldd	r25, Z+3	; 0x03
    40c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	f8 01       	movw	r30, r16
    40d2:	91 83       	std	Z+1, r25	; 0x01
    40d4:	80 83       	st	Z, r24
    40d6:	de 01       	movw	r26, r28
    40d8:	a9 54       	subi	r26, 0x49	; 73
    40da:	bf 4f       	sbci	r27, 0xFF	; 255
    40dc:	fe 01       	movw	r30, r28
    40de:	e5 54       	subi	r30, 0x45	; 69
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	8d 93       	st	X+, r24
    40e8:	9c 93       	st	X, r25
    40ea:	fe 01       	movw	r30, r28
    40ec:	e9 54       	subi	r30, 0x49	; 73
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	80 81       	ld	r24, Z
    40f2:	91 81       	ldd	r25, Z+1	; 0x01
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <Init_SM+0x173c>
    40f8:	fe 01       	movw	r30, r28
    40fa:	e9 54       	subi	r30, 0x49	; 73
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    4102:	fe 01       	movw	r30, r28
    4104:	ed 5a       	subi	r30, 0xAD	; 173
    4106:	fe 4f       	sbci	r31, 0xFE	; 254
    4108:	01 90       	ld	r0, Z+
    410a:	f0 81       	ld	r31, Z
    410c:	e0 2d       	mov	r30, r0
    410e:	80 81       	ld	r24, Z
    4110:	fe 01       	movw	r30, r28
    4112:	ed 5a       	subi	r30, 0xAD	; 173
    4114:	fe 4f       	sbci	r31, 0xFE	; 254
    4116:	01 90       	ld	r0, Z+
    4118:	f0 81       	ld	r31, Z
    411a:	e0 2d       	mov	r30, r0
    411c:	91 81       	ldd	r25, Z+1	; 0x01
    411e:	69 2f       	mov	r22, r25
    4120:	40 e0       	ldi	r20, 0x00	; 0
    4122:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    4126:	fe 01       	movw	r30, r28
    4128:	ed 54       	subi	r30, 0x4D	; 77
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	a0 ea       	ldi	r26, 0xA0	; 160
    4132:	b0 e4       	ldi	r27, 0x40	; 64
    4134:	80 83       	st	Z, r24
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	a2 83       	std	Z+2, r26	; 0x02
    413a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    413c:	8e 01       	movw	r16, r28
    413e:	01 55       	subi	r16, 0x51	; 81
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	fe 01       	movw	r30, r28
    4144:	ed 54       	subi	r30, 0x4D	; 77
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	60 81       	ld	r22, Z
    414a:	71 81       	ldd	r23, Z+1	; 0x01
    414c:	82 81       	ldd	r24, Z+2	; 0x02
    414e:	93 81       	ldd	r25, Z+3	; 0x03
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	4a ef       	ldi	r20, 0xFA	; 250
    4156:	54 e4       	ldi	r21, 0x44	; 68
    4158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	f8 01       	movw	r30, r16
    4162:	80 83       	st	Z, r24
    4164:	91 83       	std	Z+1, r25	; 0x01
    4166:	a2 83       	std	Z+2, r26	; 0x02
    4168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    416a:	fe 01       	movw	r30, r28
    416c:	e1 55       	subi	r30, 0x51	; 81
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	60 81       	ld	r22, Z
    4172:	71 81       	ldd	r23, Z+1	; 0x01
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	93 81       	ldd	r25, Z+3	; 0x03
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e8       	ldi	r20, 0x80	; 128
    417e:	5f e3       	ldi	r21, 0x3F	; 63
    4180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4184:	88 23       	and	r24, r24
    4186:	44 f4       	brge	.+16     	; 0x4198 <Init_SM+0x17e0>
		__ticks = 1;
    4188:	fe 01       	movw	r30, r28
    418a:	e3 55       	subi	r30, 0x53	; 83
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	91 83       	std	Z+1, r25	; 0x01
    4194:	80 83       	st	Z, r24
    4196:	64 c0       	rjmp	.+200    	; 0x4260 <Init_SM+0x18a8>
	else if (__tmp > 65535)
    4198:	fe 01       	movw	r30, r28
    419a:	e1 55       	subi	r30, 0x51	; 81
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	60 81       	ld	r22, Z
    41a0:	71 81       	ldd	r23, Z+1	; 0x01
    41a2:	82 81       	ldd	r24, Z+2	; 0x02
    41a4:	93 81       	ldd	r25, Z+3	; 0x03
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	3f ef       	ldi	r19, 0xFF	; 255
    41aa:	4f e7       	ldi	r20, 0x7F	; 127
    41ac:	57 e4       	ldi	r21, 0x47	; 71
    41ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b2:	18 16       	cp	r1, r24
    41b4:	0c f0       	brlt	.+2      	; 0x41b8 <Init_SM+0x1800>
    41b6:	43 c0       	rjmp	.+134    	; 0x423e <Init_SM+0x1886>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	fe 01       	movw	r30, r28
    41ba:	ed 54       	subi	r30, 0x4D	; 77
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	60 81       	ld	r22, Z
    41c0:	71 81       	ldd	r23, Z+1	; 0x01
    41c2:	82 81       	ldd	r24, Z+2	; 0x02
    41c4:	93 81       	ldd	r25, Z+3	; 0x03
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e2       	ldi	r20, 0x20	; 32
    41cc:	51 e4       	ldi	r21, 0x41	; 65
    41ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	8e 01       	movw	r16, r28
    41d8:	03 55       	subi	r16, 0x53	; 83
    41da:	1f 4f       	sbci	r17, 0xFF	; 255
    41dc:	bc 01       	movw	r22, r24
    41de:	cd 01       	movw	r24, r26
    41e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	f8 01       	movw	r30, r16
    41ea:	91 83       	std	Z+1, r25	; 0x01
    41ec:	80 83       	st	Z, r24
    41ee:	1f c0       	rjmp	.+62     	; 0x422e <Init_SM+0x1876>
    41f0:	fe 01       	movw	r30, r28
    41f2:	e5 55       	subi	r30, 0x55	; 85
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	88 ec       	ldi	r24, 0xC8	; 200
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	91 83       	std	Z+1, r25	; 0x01
    41fc:	80 83       	st	Z, r24
    41fe:	fe 01       	movw	r30, r28
    4200:	e5 55       	subi	r30, 0x55	; 85
    4202:	ff 4f       	sbci	r31, 0xFF	; 255
    4204:	80 81       	ld	r24, Z
    4206:	91 81       	ldd	r25, Z+1	; 0x01
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	f1 f7       	brne	.-4      	; 0x4208 <Init_SM+0x1850>
    420c:	fe 01       	movw	r30, r28
    420e:	e5 55       	subi	r30, 0x55	; 85
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	91 83       	std	Z+1, r25	; 0x01
    4214:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4216:	de 01       	movw	r26, r28
    4218:	a3 55       	subi	r26, 0x53	; 83
    421a:	bf 4f       	sbci	r27, 0xFF	; 255
    421c:	fe 01       	movw	r30, r28
    421e:	e3 55       	subi	r30, 0x53	; 83
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	80 81       	ld	r24, Z
    4224:	91 81       	ldd	r25, Z+1	; 0x01
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	11 96       	adiw	r26, 0x01	; 1
    422a:	9c 93       	st	X, r25
    422c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    422e:	fe 01       	movw	r30, r28
    4230:	e3 55       	subi	r30, 0x53	; 83
    4232:	ff 4f       	sbci	r31, 0xFF	; 255
    4234:	80 81       	ld	r24, Z
    4236:	91 81       	ldd	r25, Z+1	; 0x01
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	d1 f6       	brne	.-76     	; 0x41f0 <Init_SM+0x1838>
    423c:	27 c0       	rjmp	.+78     	; 0x428c <Init_SM+0x18d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    423e:	8e 01       	movw	r16, r28
    4240:	03 55       	subi	r16, 0x53	; 83
    4242:	1f 4f       	sbci	r17, 0xFF	; 255
    4244:	fe 01       	movw	r30, r28
    4246:	e1 55       	subi	r30, 0x51	; 81
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	60 81       	ld	r22, Z
    424c:	71 81       	ldd	r23, Z+1	; 0x01
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	f8 01       	movw	r30, r16
    425c:	91 83       	std	Z+1, r25	; 0x01
    425e:	80 83       	st	Z, r24
    4260:	de 01       	movw	r26, r28
    4262:	a7 55       	subi	r26, 0x57	; 87
    4264:	bf 4f       	sbci	r27, 0xFF	; 255
    4266:	fe 01       	movw	r30, r28
    4268:	e3 55       	subi	r30, 0x53	; 83
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	80 81       	ld	r24, Z
    426e:	91 81       	ldd	r25, Z+1	; 0x01
    4270:	8d 93       	st	X+, r24
    4272:	9c 93       	st	X, r25
    4274:	fe 01       	movw	r30, r28
    4276:	e7 55       	subi	r30, 0x57	; 87
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	80 81       	ld	r24, Z
    427c:	91 81       	ldd	r25, Z+1	; 0x01
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <Init_SM+0x18c6>
    4282:	fe 01       	movw	r30, r28
    4284:	e7 55       	subi	r30, 0x57	; 87
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    428c:	fe 01       	movw	r30, r28
    428e:	ed 5a       	subi	r30, 0xAD	; 173
    4290:	fe 4f       	sbci	r31, 0xFE	; 254
    4292:	01 90       	ld	r0, Z+
    4294:	f0 81       	ld	r31, Z
    4296:	e0 2d       	mov	r30, r0
    4298:	80 81       	ld	r24, Z
    429a:	fe 01       	movw	r30, r28
    429c:	ed 5a       	subi	r30, 0xAD	; 173
    429e:	fe 4f       	sbci	r31, 0xFE	; 254
    42a0:	01 90       	ld	r0, Z+
    42a2:	f0 81       	ld	r31, Z
    42a4:	e0 2d       	mov	r30, r0
    42a6:	93 81       	ldd	r25, Z+3	; 0x03
    42a8:	69 2f       	mov	r22, r25
    42aa:	41 e0       	ldi	r20, 0x01	; 1
    42ac:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    42b0:	fe 01       	movw	r30, r28
    42b2:	eb 55       	subi	r30, 0x5B	; 91
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	a0 ea       	ldi	r26, 0xA0	; 160
    42bc:	b0 e4       	ldi	r27, 0x40	; 64
    42be:	80 83       	st	Z, r24
    42c0:	91 83       	std	Z+1, r25	; 0x01
    42c2:	a2 83       	std	Z+2, r26	; 0x02
    42c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c6:	8e 01       	movw	r16, r28
    42c8:	0f 55       	subi	r16, 0x5F	; 95
    42ca:	1f 4f       	sbci	r17, 0xFF	; 255
    42cc:	fe 01       	movw	r30, r28
    42ce:	eb 55       	subi	r30, 0x5B	; 91
    42d0:	ff 4f       	sbci	r31, 0xFF	; 255
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	4a ef       	ldi	r20, 0xFA	; 250
    42e0:	54 e4       	ldi	r21, 0x44	; 68
    42e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	f8 01       	movw	r30, r16
    42ec:	80 83       	st	Z, r24
    42ee:	91 83       	std	Z+1, r25	; 0x01
    42f0:	a2 83       	std	Z+2, r26	; 0x02
    42f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42f4:	fe 01       	movw	r30, r28
    42f6:	ef 55       	subi	r30, 0x5F	; 95
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	60 81       	ld	r22, Z
    42fc:	71 81       	ldd	r23, Z+1	; 0x01
    42fe:	82 81       	ldd	r24, Z+2	; 0x02
    4300:	93 81       	ldd	r25, Z+3	; 0x03
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	40 e8       	ldi	r20, 0x80	; 128
    4308:	5f e3       	ldi	r21, 0x3F	; 63
    430a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    430e:	88 23       	and	r24, r24
    4310:	44 f4       	brge	.+16     	; 0x4322 <Init_SM+0x196a>
		__ticks = 1;
    4312:	fe 01       	movw	r30, r28
    4314:	e1 56       	subi	r30, 0x61	; 97
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	91 83       	std	Z+1, r25	; 0x01
    431e:	80 83       	st	Z, r24
    4320:	64 c0       	rjmp	.+200    	; 0x43ea <Init_SM+0x1a32>
	else if (__tmp > 65535)
    4322:	fe 01       	movw	r30, r28
    4324:	ef 55       	subi	r30, 0x5F	; 95
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	60 81       	ld	r22, Z
    432a:	71 81       	ldd	r23, Z+1	; 0x01
    432c:	82 81       	ldd	r24, Z+2	; 0x02
    432e:	93 81       	ldd	r25, Z+3	; 0x03
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	3f ef       	ldi	r19, 0xFF	; 255
    4334:	4f e7       	ldi	r20, 0x7F	; 127
    4336:	57 e4       	ldi	r21, 0x47	; 71
    4338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    433c:	18 16       	cp	r1, r24
    433e:	0c f0       	brlt	.+2      	; 0x4342 <Init_SM+0x198a>
    4340:	43 c0       	rjmp	.+134    	; 0x43c8 <Init_SM+0x1a10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4342:	fe 01       	movw	r30, r28
    4344:	eb 55       	subi	r30, 0x5B	; 91
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	60 81       	ld	r22, Z
    434a:	71 81       	ldd	r23, Z+1	; 0x01
    434c:	82 81       	ldd	r24, Z+2	; 0x02
    434e:	93 81       	ldd	r25, Z+3	; 0x03
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e2       	ldi	r20, 0x20	; 32
    4356:	51 e4       	ldi	r21, 0x41	; 65
    4358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	8e 01       	movw	r16, r28
    4362:	01 56       	subi	r16, 0x61	; 97
    4364:	1f 4f       	sbci	r17, 0xFF	; 255
    4366:	bc 01       	movw	r22, r24
    4368:	cd 01       	movw	r24, r26
    436a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	f8 01       	movw	r30, r16
    4374:	91 83       	std	Z+1, r25	; 0x01
    4376:	80 83       	st	Z, r24
    4378:	1f c0       	rjmp	.+62     	; 0x43b8 <Init_SM+0x1a00>
    437a:	fe 01       	movw	r30, r28
    437c:	e3 56       	subi	r30, 0x63	; 99
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	88 ec       	ldi	r24, 0xC8	; 200
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	91 83       	std	Z+1, r25	; 0x01
    4386:	80 83       	st	Z, r24
    4388:	fe 01       	movw	r30, r28
    438a:	e3 56       	subi	r30, 0x63	; 99
    438c:	ff 4f       	sbci	r31, 0xFF	; 255
    438e:	80 81       	ld	r24, Z
    4390:	91 81       	ldd	r25, Z+1	; 0x01
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	f1 f7       	brne	.-4      	; 0x4392 <Init_SM+0x19da>
    4396:	fe 01       	movw	r30, r28
    4398:	e3 56       	subi	r30, 0x63	; 99
    439a:	ff 4f       	sbci	r31, 0xFF	; 255
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a0:	de 01       	movw	r26, r28
    43a2:	a1 56       	subi	r26, 0x61	; 97
    43a4:	bf 4f       	sbci	r27, 0xFF	; 255
    43a6:	fe 01       	movw	r30, r28
    43a8:	e1 56       	subi	r30, 0x61	; 97
    43aa:	ff 4f       	sbci	r31, 0xFF	; 255
    43ac:	80 81       	ld	r24, Z
    43ae:	91 81       	ldd	r25, Z+1	; 0x01
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	11 96       	adiw	r26, 0x01	; 1
    43b4:	9c 93       	st	X, r25
    43b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b8:	fe 01       	movw	r30, r28
    43ba:	e1 56       	subi	r30, 0x61	; 97
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 81       	ld	r24, Z
    43c0:	91 81       	ldd	r25, Z+1	; 0x01
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	d1 f6       	brne	.-76     	; 0x437a <Init_SM+0x19c2>
    43c6:	27 c0       	rjmp	.+78     	; 0x4416 <Init_SM+0x1a5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c8:	8e 01       	movw	r16, r28
    43ca:	01 56       	subi	r16, 0x61	; 97
    43cc:	1f 4f       	sbci	r17, 0xFF	; 255
    43ce:	fe 01       	movw	r30, r28
    43d0:	ef 55       	subi	r30, 0x5F	; 95
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	60 81       	ld	r22, Z
    43d6:	71 81       	ldd	r23, Z+1	; 0x01
    43d8:	82 81       	ldd	r24, Z+2	; 0x02
    43da:	93 81       	ldd	r25, Z+3	; 0x03
    43dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	f8 01       	movw	r30, r16
    43e6:	91 83       	std	Z+1, r25	; 0x01
    43e8:	80 83       	st	Z, r24
    43ea:	de 01       	movw	r26, r28
    43ec:	a5 56       	subi	r26, 0x65	; 101
    43ee:	bf 4f       	sbci	r27, 0xFF	; 255
    43f0:	fe 01       	movw	r30, r28
    43f2:	e1 56       	subi	r30, 0x61	; 97
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	8d 93       	st	X+, r24
    43fc:	9c 93       	st	X, r25
    43fe:	fe 01       	movw	r30, r28
    4400:	e5 56       	subi	r30, 0x65	; 101
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	80 81       	ld	r24, Z
    4406:	91 81       	ldd	r25, Z+1	; 0x01
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <Init_SM+0x1a50>
    440c:	fe 01       	movw	r30, r28
    440e:	e5 56       	subi	r30, 0x65	; 101
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	91 83       	std	Z+1, r25	; 0x01
    4414:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    4416:	fe 01       	movw	r30, r28
    4418:	ed 5a       	subi	r30, 0xAD	; 173
    441a:	fe 4f       	sbci	r31, 0xFE	; 254
    441c:	01 90       	ld	r0, Z+
    441e:	f0 81       	ld	r31, Z
    4420:	e0 2d       	mov	r30, r0
    4422:	80 81       	ld	r24, Z
    4424:	fe 01       	movw	r30, r28
    4426:	ed 5a       	subi	r30, 0xAD	; 173
    4428:	fe 4f       	sbci	r31, 0xFE	; 254
    442a:	01 90       	ld	r0, Z+
    442c:	f0 81       	ld	r31, Z
    442e:	e0 2d       	mov	r30, r0
    4430:	92 81       	ldd	r25, Z+2	; 0x02
    4432:	69 2f       	mov	r22, r25
    4434:	40 e0       	ldi	r20, 0x00	; 0
    4436:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    443a:	fe 01       	movw	r30, r28
    443c:	e9 56       	subi	r30, 0x69	; 105
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	a0 ea       	ldi	r26, 0xA0	; 160
    4446:	b0 e4       	ldi	r27, 0x40	; 64
    4448:	80 83       	st	Z, r24
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	a2 83       	std	Z+2, r26	; 0x02
    444e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4450:	8e 01       	movw	r16, r28
    4452:	0d 56       	subi	r16, 0x6D	; 109
    4454:	1f 4f       	sbci	r17, 0xFF	; 255
    4456:	fe 01       	movw	r30, r28
    4458:	e9 56       	subi	r30, 0x69	; 105
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	60 81       	ld	r22, Z
    445e:	71 81       	ldd	r23, Z+1	; 0x01
    4460:	82 81       	ldd	r24, Z+2	; 0x02
    4462:	93 81       	ldd	r25, Z+3	; 0x03
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	4a ef       	ldi	r20, 0xFA	; 250
    446a:	54 e4       	ldi	r21, 0x44	; 68
    446c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	f8 01       	movw	r30, r16
    4476:	80 83       	st	Z, r24
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	a2 83       	std	Z+2, r26	; 0x02
    447c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    447e:	fe 01       	movw	r30, r28
    4480:	ed 56       	subi	r30, 0x6D	; 109
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	60 81       	ld	r22, Z
    4486:	71 81       	ldd	r23, Z+1	; 0x01
    4488:	82 81       	ldd	r24, Z+2	; 0x02
    448a:	93 81       	ldd	r25, Z+3	; 0x03
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	40 e8       	ldi	r20, 0x80	; 128
    4492:	5f e3       	ldi	r21, 0x3F	; 63
    4494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4498:	88 23       	and	r24, r24
    449a:	44 f4       	brge	.+16     	; 0x44ac <Init_SM+0x1af4>
		__ticks = 1;
    449c:	fe 01       	movw	r30, r28
    449e:	ef 56       	subi	r30, 0x6F	; 111
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	91 83       	std	Z+1, r25	; 0x01
    44a8:	80 83       	st	Z, r24
    44aa:	64 c0       	rjmp	.+200    	; 0x4574 <Init_SM+0x1bbc>
	else if (__tmp > 65535)
    44ac:	fe 01       	movw	r30, r28
    44ae:	ed 56       	subi	r30, 0x6D	; 109
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	60 81       	ld	r22, Z
    44b4:	71 81       	ldd	r23, Z+1	; 0x01
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	3f ef       	ldi	r19, 0xFF	; 255
    44be:	4f e7       	ldi	r20, 0x7F	; 127
    44c0:	57 e4       	ldi	r21, 0x47	; 71
    44c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44c6:	18 16       	cp	r1, r24
    44c8:	0c f0       	brlt	.+2      	; 0x44cc <Init_SM+0x1b14>
    44ca:	43 c0       	rjmp	.+134    	; 0x4552 <Init_SM+0x1b9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44cc:	fe 01       	movw	r30, r28
    44ce:	e9 56       	subi	r30, 0x69	; 105
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	60 81       	ld	r22, Z
    44d4:	71 81       	ldd	r23, Z+1	; 0x01
    44d6:	82 81       	ldd	r24, Z+2	; 0x02
    44d8:	93 81       	ldd	r25, Z+3	; 0x03
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	40 e2       	ldi	r20, 0x20	; 32
    44e0:	51 e4       	ldi	r21, 0x41	; 65
    44e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	8e 01       	movw	r16, r28
    44ec:	0f 56       	subi	r16, 0x6F	; 111
    44ee:	1f 4f       	sbci	r17, 0xFF	; 255
    44f0:	bc 01       	movw	r22, r24
    44f2:	cd 01       	movw	r24, r26
    44f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	f8 01       	movw	r30, r16
    44fe:	91 83       	std	Z+1, r25	; 0x01
    4500:	80 83       	st	Z, r24
    4502:	1f c0       	rjmp	.+62     	; 0x4542 <Init_SM+0x1b8a>
    4504:	fe 01       	movw	r30, r28
    4506:	e1 57       	subi	r30, 0x71	; 113
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	88 ec       	ldi	r24, 0xC8	; 200
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	91 83       	std	Z+1, r25	; 0x01
    4510:	80 83       	st	Z, r24
    4512:	fe 01       	movw	r30, r28
    4514:	e1 57       	subi	r30, 0x71	; 113
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	80 81       	ld	r24, Z
    451a:	91 81       	ldd	r25, Z+1	; 0x01
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <Init_SM+0x1b64>
    4520:	fe 01       	movw	r30, r28
    4522:	e1 57       	subi	r30, 0x71	; 113
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452a:	de 01       	movw	r26, r28
    452c:	af 56       	subi	r26, 0x6F	; 111
    452e:	bf 4f       	sbci	r27, 0xFF	; 255
    4530:	fe 01       	movw	r30, r28
    4532:	ef 56       	subi	r30, 0x6F	; 111
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	80 81       	ld	r24, Z
    4538:	91 81       	ldd	r25, Z+1	; 0x01
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	11 96       	adiw	r26, 0x01	; 1
    453e:	9c 93       	st	X, r25
    4540:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4542:	fe 01       	movw	r30, r28
    4544:	ef 56       	subi	r30, 0x6F	; 111
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	80 81       	ld	r24, Z
    454a:	91 81       	ldd	r25, Z+1	; 0x01
    454c:	00 97       	sbiw	r24, 0x00	; 0
    454e:	d1 f6       	brne	.-76     	; 0x4504 <Init_SM+0x1b4c>
    4550:	27 c0       	rjmp	.+78     	; 0x45a0 <Init_SM+0x1be8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4552:	8e 01       	movw	r16, r28
    4554:	0f 56       	subi	r16, 0x6F	; 111
    4556:	1f 4f       	sbci	r17, 0xFF	; 255
    4558:	fe 01       	movw	r30, r28
    455a:	ed 56       	subi	r30, 0x6D	; 109
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	60 81       	ld	r22, Z
    4560:	71 81       	ldd	r23, Z+1	; 0x01
    4562:	82 81       	ldd	r24, Z+2	; 0x02
    4564:	93 81       	ldd	r25, Z+3	; 0x03
    4566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	f8 01       	movw	r30, r16
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	80 83       	st	Z, r24
    4574:	de 01       	movw	r26, r28
    4576:	a3 57       	subi	r26, 0x73	; 115
    4578:	bf 4f       	sbci	r27, 0xFF	; 255
    457a:	fe 01       	movw	r30, r28
    457c:	ef 56       	subi	r30, 0x6F	; 111
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	80 81       	ld	r24, Z
    4582:	91 81       	ldd	r25, Z+1	; 0x01
    4584:	8d 93       	st	X+, r24
    4586:	9c 93       	st	X, r25
    4588:	fe 01       	movw	r30, r28
    458a:	e3 57       	subi	r30, 0x73	; 115
    458c:	ff 4f       	sbci	r31, 0xFF	; 255
    458e:	80 81       	ld	r24, Z
    4590:	91 81       	ldd	r25, Z+1	; 0x01
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	f1 f7       	brne	.-4      	; 0x4592 <Init_SM+0x1bda>
    4596:	fe 01       	movw	r30, r28
    4598:	e3 57       	subi	r30, 0x73	; 115
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	91 83       	std	Z+1, r25	; 0x01
    459e:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    45a0:	fe 01       	movw	r30, r28
    45a2:	ed 5a       	subi	r30, 0xAD	; 173
    45a4:	fe 4f       	sbci	r31, 0xFE	; 254
    45a6:	01 90       	ld	r0, Z+
    45a8:	f0 81       	ld	r31, Z
    45aa:	e0 2d       	mov	r30, r0
    45ac:	80 81       	ld	r24, Z
    45ae:	fe 01       	movw	r30, r28
    45b0:	ed 5a       	subi	r30, 0xAD	; 173
    45b2:	fe 4f       	sbci	r31, 0xFE	; 254
    45b4:	01 90       	ld	r0, Z+
    45b6:	f0 81       	ld	r31, Z
    45b8:	e0 2d       	mov	r30, r0
    45ba:	94 81       	ldd	r25, Z+4	; 0x04
    45bc:	69 2f       	mov	r22, r25
    45be:	41 e0       	ldi	r20, 0x01	; 1
    45c0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    45c4:	fe 01       	movw	r30, r28
    45c6:	e7 57       	subi	r30, 0x77	; 119
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	a0 ea       	ldi	r26, 0xA0	; 160
    45d0:	b0 e4       	ldi	r27, 0x40	; 64
    45d2:	80 83       	st	Z, r24
    45d4:	91 83       	std	Z+1, r25	; 0x01
    45d6:	a2 83       	std	Z+2, r26	; 0x02
    45d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45da:	8e 01       	movw	r16, r28
    45dc:	0b 57       	subi	r16, 0x7B	; 123
    45de:	1f 4f       	sbci	r17, 0xFF	; 255
    45e0:	fe 01       	movw	r30, r28
    45e2:	e7 57       	subi	r30, 0x77	; 119
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	60 81       	ld	r22, Z
    45e8:	71 81       	ldd	r23, Z+1	; 0x01
    45ea:	82 81       	ldd	r24, Z+2	; 0x02
    45ec:	93 81       	ldd	r25, Z+3	; 0x03
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	4a ef       	ldi	r20, 0xFA	; 250
    45f4:	54 e4       	ldi	r21, 0x44	; 68
    45f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	f8 01       	movw	r30, r16
    4600:	80 83       	st	Z, r24
    4602:	91 83       	std	Z+1, r25	; 0x01
    4604:	a2 83       	std	Z+2, r26	; 0x02
    4606:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4608:	fe 01       	movw	r30, r28
    460a:	eb 57       	subi	r30, 0x7B	; 123
    460c:	ff 4f       	sbci	r31, 0xFF	; 255
    460e:	60 81       	ld	r22, Z
    4610:	71 81       	ldd	r23, Z+1	; 0x01
    4612:	82 81       	ldd	r24, Z+2	; 0x02
    4614:	93 81       	ldd	r25, Z+3	; 0x03
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	40 e8       	ldi	r20, 0x80	; 128
    461c:	5f e3       	ldi	r21, 0x3F	; 63
    461e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4622:	88 23       	and	r24, r24
    4624:	44 f4       	brge	.+16     	; 0x4636 <Init_SM+0x1c7e>
		__ticks = 1;
    4626:	fe 01       	movw	r30, r28
    4628:	ed 57       	subi	r30, 0x7D	; 125
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
    4634:	64 c0       	rjmp	.+200    	; 0x46fe <Init_SM+0x1d46>
	else if (__tmp > 65535)
    4636:	fe 01       	movw	r30, r28
    4638:	eb 57       	subi	r30, 0x7B	; 123
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	60 81       	ld	r22, Z
    463e:	71 81       	ldd	r23, Z+1	; 0x01
    4640:	82 81       	ldd	r24, Z+2	; 0x02
    4642:	93 81       	ldd	r25, Z+3	; 0x03
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	3f ef       	ldi	r19, 0xFF	; 255
    4648:	4f e7       	ldi	r20, 0x7F	; 127
    464a:	57 e4       	ldi	r21, 0x47	; 71
    464c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4650:	18 16       	cp	r1, r24
    4652:	0c f0       	brlt	.+2      	; 0x4656 <Init_SM+0x1c9e>
    4654:	43 c0       	rjmp	.+134    	; 0x46dc <Init_SM+0x1d24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4656:	fe 01       	movw	r30, r28
    4658:	e7 57       	subi	r30, 0x77	; 119
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	60 81       	ld	r22, Z
    465e:	71 81       	ldd	r23, Z+1	; 0x01
    4660:	82 81       	ldd	r24, Z+2	; 0x02
    4662:	93 81       	ldd	r25, Z+3	; 0x03
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	40 e2       	ldi	r20, 0x20	; 32
    466a:	51 e4       	ldi	r21, 0x41	; 65
    466c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	8e 01       	movw	r16, r28
    4676:	0d 57       	subi	r16, 0x7D	; 125
    4678:	1f 4f       	sbci	r17, 0xFF	; 255
    467a:	bc 01       	movw	r22, r24
    467c:	cd 01       	movw	r24, r26
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	f8 01       	movw	r30, r16
    4688:	91 83       	std	Z+1, r25	; 0x01
    468a:	80 83       	st	Z, r24
    468c:	1f c0       	rjmp	.+62     	; 0x46cc <Init_SM+0x1d14>
    468e:	fe 01       	movw	r30, r28
    4690:	ef 57       	subi	r30, 0x7F	; 127
    4692:	ff 4f       	sbci	r31, 0xFF	; 255
    4694:	88 ec       	ldi	r24, 0xC8	; 200
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	91 83       	std	Z+1, r25	; 0x01
    469a:	80 83       	st	Z, r24
    469c:	fe 01       	movw	r30, r28
    469e:	ef 57       	subi	r30, 0x7F	; 127
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	80 81       	ld	r24, Z
    46a4:	91 81       	ldd	r25, Z+1	; 0x01
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	f1 f7       	brne	.-4      	; 0x46a6 <Init_SM+0x1cee>
    46aa:	fe 01       	movw	r30, r28
    46ac:	ef 57       	subi	r30, 0x7F	; 127
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	91 83       	std	Z+1, r25	; 0x01
    46b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b4:	de 01       	movw	r26, r28
    46b6:	ad 57       	subi	r26, 0x7D	; 125
    46b8:	bf 4f       	sbci	r27, 0xFF	; 255
    46ba:	fe 01       	movw	r30, r28
    46bc:	ed 57       	subi	r30, 0x7D	; 125
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	80 81       	ld	r24, Z
    46c2:	91 81       	ldd	r25, Z+1	; 0x01
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	11 96       	adiw	r26, 0x01	; 1
    46c8:	9c 93       	st	X, r25
    46ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46cc:	fe 01       	movw	r30, r28
    46ce:	ed 57       	subi	r30, 0x7D	; 125
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	80 81       	ld	r24, Z
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	00 97       	sbiw	r24, 0x00	; 0
    46d8:	d1 f6       	brne	.-76     	; 0x468e <Init_SM+0x1cd6>
    46da:	27 c0       	rjmp	.+78     	; 0x472a <Init_SM+0x1d72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46dc:	8e 01       	movw	r16, r28
    46de:	0d 57       	subi	r16, 0x7D	; 125
    46e0:	1f 4f       	sbci	r17, 0xFF	; 255
    46e2:	fe 01       	movw	r30, r28
    46e4:	eb 57       	subi	r30, 0x7B	; 123
    46e6:	ff 4f       	sbci	r31, 0xFF	; 255
    46e8:	60 81       	ld	r22, Z
    46ea:	71 81       	ldd	r23, Z+1	; 0x01
    46ec:	82 81       	ldd	r24, Z+2	; 0x02
    46ee:	93 81       	ldd	r25, Z+3	; 0x03
    46f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f4:	dc 01       	movw	r26, r24
    46f6:	cb 01       	movw	r24, r22
    46f8:	f8 01       	movw	r30, r16
    46fa:	91 83       	std	Z+1, r25	; 0x01
    46fc:	80 83       	st	Z, r24
    46fe:	de 01       	movw	r26, r28
    4700:	a1 58       	subi	r26, 0x81	; 129
    4702:	bf 4f       	sbci	r27, 0xFF	; 255
    4704:	fe 01       	movw	r30, r28
    4706:	ed 57       	subi	r30, 0x7D	; 125
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	80 81       	ld	r24, Z
    470c:	91 81       	ldd	r25, Z+1	; 0x01
    470e:	8d 93       	st	X+, r24
    4710:	9c 93       	st	X, r25
    4712:	fe 01       	movw	r30, r28
    4714:	e1 58       	subi	r30, 0x81	; 129
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	80 81       	ld	r24, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <Init_SM+0x1d64>
    4720:	fe 01       	movw	r30, r28
    4722:	e1 58       	subi	r30, 0x81	; 129
    4724:	ff 4f       	sbci	r31, 0xFF	; 255
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    472a:	fe 01       	movw	r30, r28
    472c:	ed 5a       	subi	r30, 0xAD	; 173
    472e:	fe 4f       	sbci	r31, 0xFE	; 254
    4730:	01 90       	ld	r0, Z+
    4732:	f0 81       	ld	r31, Z
    4734:	e0 2d       	mov	r30, r0
    4736:	80 81       	ld	r24, Z
    4738:	fe 01       	movw	r30, r28
    473a:	ed 5a       	subi	r30, 0xAD	; 173
    473c:	fe 4f       	sbci	r31, 0xFE	; 254
    473e:	01 90       	ld	r0, Z+
    4740:	f0 81       	ld	r31, Z
    4742:	e0 2d       	mov	r30, r0
    4744:	93 81       	ldd	r25, Z+3	; 0x03
    4746:	69 2f       	mov	r22, r25
    4748:	40 e0       	ldi	r20, 0x00	; 0
    474a:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    474e:	fe 01       	movw	r30, r28
    4750:	e5 58       	subi	r30, 0x85	; 133
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	a0 ea       	ldi	r26, 0xA0	; 160
    475a:	b0 e4       	ldi	r27, 0x40	; 64
    475c:	80 83       	st	Z, r24
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	a2 83       	std	Z+2, r26	; 0x02
    4762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4764:	8e 01       	movw	r16, r28
    4766:	09 58       	subi	r16, 0x89	; 137
    4768:	1f 4f       	sbci	r17, 0xFF	; 255
    476a:	fe 01       	movw	r30, r28
    476c:	e5 58       	subi	r30, 0x85	; 133
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	60 81       	ld	r22, Z
    4772:	71 81       	ldd	r23, Z+1	; 0x01
    4774:	82 81       	ldd	r24, Z+2	; 0x02
    4776:	93 81       	ldd	r25, Z+3	; 0x03
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	30 e0       	ldi	r19, 0x00	; 0
    477c:	4a ef       	ldi	r20, 0xFA	; 250
    477e:	54 e4       	ldi	r21, 0x44	; 68
    4780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	f8 01       	movw	r30, r16
    478a:	80 83       	st	Z, r24
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	a2 83       	std	Z+2, r26	; 0x02
    4790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4792:	fe 01       	movw	r30, r28
    4794:	e9 58       	subi	r30, 0x89	; 137
    4796:	ff 4f       	sbci	r31, 0xFF	; 255
    4798:	60 81       	ld	r22, Z
    479a:	71 81       	ldd	r23, Z+1	; 0x01
    479c:	82 81       	ldd	r24, Z+2	; 0x02
    479e:	93 81       	ldd	r25, Z+3	; 0x03
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	40 e8       	ldi	r20, 0x80	; 128
    47a6:	5f e3       	ldi	r21, 0x3F	; 63
    47a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ac:	88 23       	and	r24, r24
    47ae:	44 f4       	brge	.+16     	; 0x47c0 <Init_SM+0x1e08>
		__ticks = 1;
    47b0:	fe 01       	movw	r30, r28
    47b2:	eb 58       	subi	r30, 0x8B	; 139
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	91 83       	std	Z+1, r25	; 0x01
    47bc:	80 83       	st	Z, r24
    47be:	64 c0       	rjmp	.+200    	; 0x4888 <Init_SM+0x1ed0>
	else if (__tmp > 65535)
    47c0:	fe 01       	movw	r30, r28
    47c2:	e9 58       	subi	r30, 0x89	; 137
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	60 81       	ld	r22, Z
    47c8:	71 81       	ldd	r23, Z+1	; 0x01
    47ca:	82 81       	ldd	r24, Z+2	; 0x02
    47cc:	93 81       	ldd	r25, Z+3	; 0x03
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	3f ef       	ldi	r19, 0xFF	; 255
    47d2:	4f e7       	ldi	r20, 0x7F	; 127
    47d4:	57 e4       	ldi	r21, 0x47	; 71
    47d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47da:	18 16       	cp	r1, r24
    47dc:	0c f0       	brlt	.+2      	; 0x47e0 <Init_SM+0x1e28>
    47de:	43 c0       	rjmp	.+134    	; 0x4866 <Init_SM+0x1eae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e0:	fe 01       	movw	r30, r28
    47e2:	e5 58       	subi	r30, 0x85	; 133
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	60 81       	ld	r22, Z
    47e8:	71 81       	ldd	r23, Z+1	; 0x01
    47ea:	82 81       	ldd	r24, Z+2	; 0x02
    47ec:	93 81       	ldd	r25, Z+3	; 0x03
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	40 e2       	ldi	r20, 0x20	; 32
    47f4:	51 e4       	ldi	r21, 0x41	; 65
    47f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	8e 01       	movw	r16, r28
    4800:	0b 58       	subi	r16, 0x8B	; 139
    4802:	1f 4f       	sbci	r17, 0xFF	; 255
    4804:	bc 01       	movw	r22, r24
    4806:	cd 01       	movw	r24, r26
    4808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	f8 01       	movw	r30, r16
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	80 83       	st	Z, r24
    4816:	1f c0       	rjmp	.+62     	; 0x4856 <Init_SM+0x1e9e>
    4818:	fe 01       	movw	r30, r28
    481a:	ed 58       	subi	r30, 0x8D	; 141
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	88 ec       	ldi	r24, 0xC8	; 200
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	80 83       	st	Z, r24
    4826:	fe 01       	movw	r30, r28
    4828:	ed 58       	subi	r30, 0x8D	; 141
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	80 81       	ld	r24, Z
    482e:	91 81       	ldd	r25, Z+1	; 0x01
    4830:	01 97       	sbiw	r24, 0x01	; 1
    4832:	f1 f7       	brne	.-4      	; 0x4830 <Init_SM+0x1e78>
    4834:	fe 01       	movw	r30, r28
    4836:	ed 58       	subi	r30, 0x8D	; 141
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	91 83       	std	Z+1, r25	; 0x01
    483c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483e:	de 01       	movw	r26, r28
    4840:	ab 58       	subi	r26, 0x8B	; 139
    4842:	bf 4f       	sbci	r27, 0xFF	; 255
    4844:	fe 01       	movw	r30, r28
    4846:	eb 58       	subi	r30, 0x8B	; 139
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	11 96       	adiw	r26, 0x01	; 1
    4852:	9c 93       	st	X, r25
    4854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4856:	fe 01       	movw	r30, r28
    4858:	eb 58       	subi	r30, 0x8B	; 139
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	80 81       	ld	r24, Z
    485e:	91 81       	ldd	r25, Z+1	; 0x01
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	d1 f6       	brne	.-76     	; 0x4818 <Init_SM+0x1e60>
    4864:	27 c0       	rjmp	.+78     	; 0x48b4 <Init_SM+0x1efc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4866:	8e 01       	movw	r16, r28
    4868:	0b 58       	subi	r16, 0x8B	; 139
    486a:	1f 4f       	sbci	r17, 0xFF	; 255
    486c:	fe 01       	movw	r30, r28
    486e:	e9 58       	subi	r30, 0x89	; 137
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	60 81       	ld	r22, Z
    4874:	71 81       	ldd	r23, Z+1	; 0x01
    4876:	82 81       	ldd	r24, Z+2	; 0x02
    4878:	93 81       	ldd	r25, Z+3	; 0x03
    487a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487e:	dc 01       	movw	r26, r24
    4880:	cb 01       	movw	r24, r22
    4882:	f8 01       	movw	r30, r16
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	de 01       	movw	r26, r28
    488a:	af 58       	subi	r26, 0x8F	; 143
    488c:	bf 4f       	sbci	r27, 0xFF	; 255
    488e:	fe 01       	movw	r30, r28
    4890:	eb 58       	subi	r30, 0x8B	; 139
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	80 81       	ld	r24, Z
    4896:	91 81       	ldd	r25, Z+1	; 0x01
    4898:	8d 93       	st	X+, r24
    489a:	9c 93       	st	X, r25
    489c:	fe 01       	movw	r30, r28
    489e:	ef 58       	subi	r30, 0x8F	; 143
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	80 81       	ld	r24, Z
    48a4:	91 81       	ldd	r25, Z+1	; 0x01
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <Init_SM+0x1eee>
    48aa:	fe 01       	movw	r30, r28
    48ac:	ef 58       	subi	r30, 0x8F	; 143
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    48b4:	fe 01       	movw	r30, r28
    48b6:	ed 5a       	subi	r30, 0xAD	; 173
    48b8:	fe 4f       	sbci	r31, 0xFE	; 254
    48ba:	01 90       	ld	r0, Z+
    48bc:	f0 81       	ld	r31, Z
    48be:	e0 2d       	mov	r30, r0
    48c0:	80 81       	ld	r24, Z
    48c2:	fe 01       	movw	r30, r28
    48c4:	ed 5a       	subi	r30, 0xAD	; 173
    48c6:	fe 4f       	sbci	r31, 0xFE	; 254
    48c8:	01 90       	ld	r0, Z+
    48ca:	f0 81       	ld	r31, Z
    48cc:	e0 2d       	mov	r30, r0
    48ce:	91 81       	ldd	r25, Z+1	; 0x01
    48d0:	69 2f       	mov	r22, r25
    48d2:	41 e0       	ldi	r20, 0x01	; 1
    48d4:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>

	else if (Copy_SM_st->Step_Type == Half_Step)
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    48d8:	de 01       	movw	r26, r28
    48da:	af 5a       	subi	r26, 0xAF	; 175
    48dc:	be 4f       	sbci	r27, 0xFE	; 254
    48de:	fe 01       	movw	r30, r28
    48e0:	ef 5a       	subi	r30, 0xAF	; 175
    48e2:	fe 4f       	sbci	r31, 0xFE	; 254
    48e4:	80 81       	ld	r24, Z
    48e6:	8f 5f       	subi	r24, 0xFF	; 255
    48e8:	8c 93       	st	X, r24
    48ea:	fe 01       	movw	r30, r28
    48ec:	ef 5a       	subi	r30, 0xAF	; 175
    48ee:	fe 4f       	sbci	r31, 0xFE	; 254
    48f0:	80 81       	ld	r24, Z
    48f2:	28 2f       	mov	r18, r24
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e0       	ldi	r20, 0x00	; 0
    48f8:	50 e0       	ldi	r21, 0x00	; 0
    48fa:	fe 01       	movw	r30, r28
    48fc:	ed 5a       	subi	r30, 0xAD	; 173
    48fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4900:	01 90       	ld	r0, Z+
    4902:	f0 81       	ld	r31, Z
    4904:	e0 2d       	mov	r30, r0
    4906:	84 85       	ldd	r24, Z+12	; 0x0c
    4908:	95 85       	ldd	r25, Z+13	; 0x0d
    490a:	a6 85       	ldd	r26, Z+14	; 0x0e
    490c:	b7 85       	ldd	r27, Z+15	; 0x0f
    490e:	28 17       	cp	r18, r24
    4910:	39 07       	cpc	r19, r25
    4912:	4a 07       	cpc	r20, r26
    4914:	5b 07       	cpc	r21, r27
    4916:	08 f4       	brcc	.+2      	; 0x491a <Init_SM+0x1f62>
    4918:	a5 c9       	rjmp	.-3254   	; 0x3c64 <Init_SM+0x12ac>
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
						DIO_u8PIN_HIGH);
				
			}
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    491a:	fe 01       	movw	r30, r28
    491c:	ed 5a       	subi	r30, 0xAD	; 173
    491e:	fe 4f       	sbci	r31, 0xFE	; 254
    4920:	01 90       	ld	r0, Z+
    4922:	f0 81       	ld	r31, Z
    4924:	e0 2d       	mov	r30, r0
    4926:	80 81       	ld	r24, Z
    4928:	fe 01       	movw	r30, r28
    492a:	ed 5a       	subi	r30, 0xAD	; 173
    492c:	fe 4f       	sbci	r31, 0xFE	; 254
    492e:	01 90       	ld	r0, Z+
    4930:	f0 81       	ld	r31, Z
    4932:	e0 2d       	mov	r30, r0
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	69 2f       	mov	r22, r25
    4938:	40 e0       	ldi	r20, 0x00	; 0
    493a:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    493e:	fe 01       	movw	r30, r28
    4940:	ed 5a       	subi	r30, 0xAD	; 173
    4942:	fe 4f       	sbci	r31, 0xFE	; 254
    4944:	01 90       	ld	r0, Z+
    4946:	f0 81       	ld	r31, Z
    4948:	e0 2d       	mov	r30, r0
    494a:	80 81       	ld	r24, Z
    494c:	fe 01       	movw	r30, r28
    494e:	ed 5a       	subi	r30, 0xAD	; 173
    4950:	fe 4f       	sbci	r31, 0xFE	; 254
    4952:	01 90       	ld	r0, Z+
    4954:	f0 81       	ld	r31, Z
    4956:	e0 2d       	mov	r30, r0
    4958:	92 81       	ldd	r25, Z+2	; 0x02
    495a:	69 2f       	mov	r22, r25
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    4962:	fe 01       	movw	r30, r28
    4964:	ed 5a       	subi	r30, 0xAD	; 173
    4966:	fe 4f       	sbci	r31, 0xFE	; 254
    4968:	01 90       	ld	r0, Z+
    496a:	f0 81       	ld	r31, Z
    496c:	e0 2d       	mov	r30, r0
    496e:	80 81       	ld	r24, Z
    4970:	fe 01       	movw	r30, r28
    4972:	ed 5a       	subi	r30, 0xAD	; 173
    4974:	fe 4f       	sbci	r31, 0xFE	; 254
    4976:	01 90       	ld	r0, Z+
    4978:	f0 81       	ld	r31, Z
    497a:	e0 2d       	mov	r30, r0
    497c:	93 81       	ldd	r25, Z+3	; 0x03
    497e:	69 2f       	mov	r22, r25
    4980:	40 e0       	ldi	r20, 0x00	; 0
    4982:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    4986:	fe 01       	movw	r30, r28
    4988:	ed 5a       	subi	r30, 0xAD	; 173
    498a:	fe 4f       	sbci	r31, 0xFE	; 254
    498c:	01 90       	ld	r0, Z+
    498e:	f0 81       	ld	r31, Z
    4990:	e0 2d       	mov	r30, r0
    4992:	80 81       	ld	r24, Z
    4994:	fe 01       	movw	r30, r28
    4996:	ed 5a       	subi	r30, 0xAD	; 173
    4998:	fe 4f       	sbci	r31, 0xFE	; 254
    499a:	01 90       	ld	r0, Z+
    499c:	f0 81       	ld	r31, Z
    499e:	e0 2d       	mov	r30, r0
    49a0:	94 81       	ldd	r25, Z+4	; 0x04
    49a2:	69 2f       	mov	r22, r25
    49a4:	40 e0       	ldi	r20, 0x00	; 0
    49a6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    49aa:	80 c5       	rjmp	.+2816   	; 0x54ac <Init_SM+0x2af4>
		}
	
	

	
		else if (Copy_SM_st->SM_Direction == Clock_Wise)
    49ac:	fe 01       	movw	r30, r28
    49ae:	ed 5a       	subi	r30, 0xAD	; 173
    49b0:	fe 4f       	sbci	r31, 0xFE	; 254
    49b2:	01 90       	ld	r0, Z+
    49b4:	f0 81       	ld	r31, Z
    49b6:	e0 2d       	mov	r30, r0
    49b8:	86 81       	ldd	r24, Z+6	; 0x06
    49ba:	82 30       	cpi	r24, 0x02	; 2
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <Init_SM+0x2008>
    49be:	76 c5       	rjmp	.+2796   	; 0x54ac <Init_SM+0x2af4>
	
		{
		for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    49c0:	fe 01       	movw	r30, r28
    49c2:	ef 5a       	subi	r30, 0xAF	; 175
    49c4:	fe 4f       	sbci	r31, 0xFE	; 254
    49c6:	10 82       	st	Z, r1
    49c8:	11 c5       	rjmp	.+2594   	; 0x53ec <Init_SM+0x2a34>
		{
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    49ca:	fe 01       	movw	r30, r28
    49cc:	ed 5a       	subi	r30, 0xAD	; 173
    49ce:	fe 4f       	sbci	r31, 0xFE	; 254
    49d0:	01 90       	ld	r0, Z+
    49d2:	f0 81       	ld	r31, Z
    49d4:	e0 2d       	mov	r30, r0
    49d6:	80 81       	ld	r24, Z
    49d8:	fe 01       	movw	r30, r28
    49da:	ed 5a       	subi	r30, 0xAD	; 173
    49dc:	fe 4f       	sbci	r31, 0xFE	; 254
    49de:	01 90       	ld	r0, Z+
    49e0:	f0 81       	ld	r31, Z
    49e2:	e0 2d       	mov	r30, r0
    49e4:	94 81       	ldd	r25, Z+4	; 0x04
    49e6:	69 2f       	mov	r22, r25
    49e8:	41 e0       	ldi	r20, 0x01	; 1
    49ea:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    49ee:	fe 01       	movw	r30, r28
    49f0:	e3 59       	subi	r30, 0x93	; 147
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	a0 ea       	ldi	r26, 0xA0	; 160
    49fa:	b0 e4       	ldi	r27, 0x40	; 64
    49fc:	80 83       	st	Z, r24
    49fe:	91 83       	std	Z+1, r25	; 0x01
    4a00:	a2 83       	std	Z+2, r26	; 0x02
    4a02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a04:	8e 01       	movw	r16, r28
    4a06:	07 59       	subi	r16, 0x97	; 151
    4a08:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e3 59       	subi	r30, 0x93	; 147
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	20 e0       	ldi	r18, 0x00	; 0
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	4a ef       	ldi	r20, 0xFA	; 250
    4a1e:	54 e4       	ldi	r21, 0x44	; 68
    4a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a24:	dc 01       	movw	r26, r24
    4a26:	cb 01       	movw	r24, r22
    4a28:	f8 01       	movw	r30, r16
    4a2a:	80 83       	st	Z, r24
    4a2c:	91 83       	std	Z+1, r25	; 0x01
    4a2e:	a2 83       	std	Z+2, r26	; 0x02
    4a30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a32:	fe 01       	movw	r30, r28
    4a34:	e7 59       	subi	r30, 0x97	; 151
    4a36:	ff 4f       	sbci	r31, 0xFF	; 255
    4a38:	60 81       	ld	r22, Z
    4a3a:	71 81       	ldd	r23, Z+1	; 0x01
    4a3c:	82 81       	ldd	r24, Z+2	; 0x02
    4a3e:	93 81       	ldd	r25, Z+3	; 0x03
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	40 e8       	ldi	r20, 0x80	; 128
    4a46:	5f e3       	ldi	r21, 0x3F	; 63
    4a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a4c:	88 23       	and	r24, r24
    4a4e:	44 f4       	brge	.+16     	; 0x4a60 <Init_SM+0x20a8>
		__ticks = 1;
    4a50:	fe 01       	movw	r30, r28
    4a52:	e9 59       	subi	r30, 0x99	; 153
    4a54:	ff 4f       	sbci	r31, 0xFF	; 255
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	80 83       	st	Z, r24
    4a5e:	64 c0       	rjmp	.+200    	; 0x4b28 <Init_SM+0x2170>
	else if (__tmp > 65535)
    4a60:	fe 01       	movw	r30, r28
    4a62:	e7 59       	subi	r30, 0x97	; 151
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	3f ef       	ldi	r19, 0xFF	; 255
    4a72:	4f e7       	ldi	r20, 0x7F	; 127
    4a74:	57 e4       	ldi	r21, 0x47	; 71
    4a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a7a:	18 16       	cp	r1, r24
    4a7c:	0c f0       	brlt	.+2      	; 0x4a80 <Init_SM+0x20c8>
    4a7e:	43 c0       	rjmp	.+134    	; 0x4b06 <Init_SM+0x214e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a80:	fe 01       	movw	r30, r28
    4a82:	e3 59       	subi	r30, 0x93	; 147
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	60 81       	ld	r22, Z
    4a88:	71 81       	ldd	r23, Z+1	; 0x01
    4a8a:	82 81       	ldd	r24, Z+2	; 0x02
    4a8c:	93 81       	ldd	r25, Z+3	; 0x03
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	40 e2       	ldi	r20, 0x20	; 32
    4a94:	51 e4       	ldi	r21, 0x41	; 65
    4a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	8e 01       	movw	r16, r28
    4aa0:	09 59       	subi	r16, 0x99	; 153
    4aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa4:	bc 01       	movw	r22, r24
    4aa6:	cd 01       	movw	r24, r26
    4aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aac:	dc 01       	movw	r26, r24
    4aae:	cb 01       	movw	r24, r22
    4ab0:	f8 01       	movw	r30, r16
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
    4ab6:	1f c0       	rjmp	.+62     	; 0x4af6 <Init_SM+0x213e>
    4ab8:	fe 01       	movw	r30, r28
    4aba:	eb 59       	subi	r30, 0x9B	; 155
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	88 ec       	ldi	r24, 0xC8	; 200
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	80 83       	st	Z, r24
    4ac6:	fe 01       	movw	r30, r28
    4ac8:	eb 59       	subi	r30, 0x9B	; 155
    4aca:	ff 4f       	sbci	r31, 0xFF	; 255
    4acc:	80 81       	ld	r24, Z
    4ace:	91 81       	ldd	r25, Z+1	; 0x01
    4ad0:	01 97       	sbiw	r24, 0x01	; 1
    4ad2:	f1 f7       	brne	.-4      	; 0x4ad0 <Init_SM+0x2118>
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	eb 59       	subi	r30, 0x9B	; 155
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	91 83       	std	Z+1, r25	; 0x01
    4adc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ade:	de 01       	movw	r26, r28
    4ae0:	a9 59       	subi	r26, 0x99	; 153
    4ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e9 59       	subi	r30, 0x99	; 153
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	80 81       	ld	r24, Z
    4aec:	91 81       	ldd	r25, Z+1	; 0x01
    4aee:	01 97       	sbiw	r24, 0x01	; 1
    4af0:	11 96       	adiw	r26, 0x01	; 1
    4af2:	9c 93       	st	X, r25
    4af4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af6:	fe 01       	movw	r30, r28
    4af8:	e9 59       	subi	r30, 0x99	; 153
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	80 81       	ld	r24, Z
    4afe:	91 81       	ldd	r25, Z+1	; 0x01
    4b00:	00 97       	sbiw	r24, 0x00	; 0
    4b02:	d1 f6       	brne	.-76     	; 0x4ab8 <Init_SM+0x2100>
    4b04:	27 c0       	rjmp	.+78     	; 0x4b54 <Init_SM+0x219c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b06:	8e 01       	movw	r16, r28
    4b08:	09 59       	subi	r16, 0x99	; 153
    4b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0c:	fe 01       	movw	r30, r28
    4b0e:	e7 59       	subi	r30, 0x97	; 151
    4b10:	ff 4f       	sbci	r31, 0xFF	; 255
    4b12:	60 81       	ld	r22, Z
    4b14:	71 81       	ldd	r23, Z+1	; 0x01
    4b16:	82 81       	ldd	r24, Z+2	; 0x02
    4b18:	93 81       	ldd	r25, Z+3	; 0x03
    4b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	f8 01       	movw	r30, r16
    4b24:	91 83       	std	Z+1, r25	; 0x01
    4b26:	80 83       	st	Z, r24
    4b28:	de 01       	movw	r26, r28
    4b2a:	ad 59       	subi	r26, 0x9D	; 157
    4b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b2e:	fe 01       	movw	r30, r28
    4b30:	e9 59       	subi	r30, 0x99	; 153
    4b32:	ff 4f       	sbci	r31, 0xFF	; 255
    4b34:	80 81       	ld	r24, Z
    4b36:	91 81       	ldd	r25, Z+1	; 0x01
    4b38:	8d 93       	st	X+, r24
    4b3a:	9c 93       	st	X, r25
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	ed 59       	subi	r30, 0x9D	; 157
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	80 81       	ld	r24, Z
    4b44:	91 81       	ldd	r25, Z+1	; 0x01
    4b46:	01 97       	sbiw	r24, 0x01	; 1
    4b48:	f1 f7       	brne	.-4      	; 0x4b46 <Init_SM+0x218e>
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	ed 59       	subi	r30, 0x9D	; 157
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	91 83       	std	Z+1, r25	; 0x01
    4b52:	80 83       	st	Z, r24
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    4b54:	fe 01       	movw	r30, r28
    4b56:	ed 5a       	subi	r30, 0xAD	; 173
    4b58:	fe 4f       	sbci	r31, 0xFE	; 254
    4b5a:	01 90       	ld	r0, Z+
    4b5c:	f0 81       	ld	r31, Z
    4b5e:	e0 2d       	mov	r30, r0
    4b60:	80 81       	ld	r24, Z
    4b62:	fe 01       	movw	r30, r28
    4b64:	ed 5a       	subi	r30, 0xAD	; 173
    4b66:	fe 4f       	sbci	r31, 0xFE	; 254
    4b68:	01 90       	ld	r0, Z+
    4b6a:	f0 81       	ld	r31, Z
    4b6c:	e0 2d       	mov	r30, r0
    4b6e:	93 81       	ldd	r25, Z+3	; 0x03
    4b70:	69 2f       	mov	r22, r25
    4b72:	41 e0       	ldi	r20, 0x01	; 1
    4b74:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e1 5a       	subi	r30, 0xA1	; 161
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	a0 ea       	ldi	r26, 0xA0	; 160
    4b84:	b0 e4       	ldi	r27, 0x40	; 64
    4b86:	80 83       	st	Z, r24
    4b88:	91 83       	std	Z+1, r25	; 0x01
    4b8a:	a2 83       	std	Z+2, r26	; 0x02
    4b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8e:	8e 01       	movw	r16, r28
    4b90:	05 5a       	subi	r16, 0xA5	; 165
    4b92:	1f 4f       	sbci	r17, 0xFF	; 255
    4b94:	fe 01       	movw	r30, r28
    4b96:	e1 5a       	subi	r30, 0xA1	; 161
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	60 81       	ld	r22, Z
    4b9c:	71 81       	ldd	r23, Z+1	; 0x01
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	93 81       	ldd	r25, Z+3	; 0x03
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	4a ef       	ldi	r20, 0xFA	; 250
    4ba8:	54 e4       	ldi	r21, 0x44	; 68
    4baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	f8 01       	movw	r30, r16
    4bb4:	80 83       	st	Z, r24
    4bb6:	91 83       	std	Z+1, r25	; 0x01
    4bb8:	a2 83       	std	Z+2, r26	; 0x02
    4bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e5 5a       	subi	r30, 0xA5	; 165
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	60 81       	ld	r22, Z
    4bc4:	71 81       	ldd	r23, Z+1	; 0x01
    4bc6:	82 81       	ldd	r24, Z+2	; 0x02
    4bc8:	93 81       	ldd	r25, Z+3	; 0x03
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	40 e8       	ldi	r20, 0x80	; 128
    4bd0:	5f e3       	ldi	r21, 0x3F	; 63
    4bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bd6:	88 23       	and	r24, r24
    4bd8:	44 f4       	brge	.+16     	; 0x4bea <Init_SM+0x2232>
		__ticks = 1;
    4bda:	fe 01       	movw	r30, r28
    4bdc:	e7 5a       	subi	r30, 0xA7	; 167
    4bde:	ff 4f       	sbci	r31, 0xFF	; 255
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	91 83       	std	Z+1, r25	; 0x01
    4be6:	80 83       	st	Z, r24
    4be8:	64 c0       	rjmp	.+200    	; 0x4cb2 <Init_SM+0x22fa>
	else if (__tmp > 65535)
    4bea:	fe 01       	movw	r30, r28
    4bec:	e5 5a       	subi	r30, 0xA5	; 165
    4bee:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf0:	60 81       	ld	r22, Z
    4bf2:	71 81       	ldd	r23, Z+1	; 0x01
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	93 81       	ldd	r25, Z+3	; 0x03
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	3f ef       	ldi	r19, 0xFF	; 255
    4bfc:	4f e7       	ldi	r20, 0x7F	; 127
    4bfe:	57 e4       	ldi	r21, 0x47	; 71
    4c00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c04:	18 16       	cp	r1, r24
    4c06:	0c f0       	brlt	.+2      	; 0x4c0a <Init_SM+0x2252>
    4c08:	43 c0       	rjmp	.+134    	; 0x4c90 <Init_SM+0x22d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c0a:	fe 01       	movw	r30, r28
    4c0c:	e1 5a       	subi	r30, 0xA1	; 161
    4c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c10:	60 81       	ld	r22, Z
    4c12:	71 81       	ldd	r23, Z+1	; 0x01
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	93 81       	ldd	r25, Z+3	; 0x03
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e2       	ldi	r20, 0x20	; 32
    4c1e:	51 e4       	ldi	r21, 0x41	; 65
    4c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	8e 01       	movw	r16, r28
    4c2a:	07 5a       	subi	r16, 0xA7	; 167
    4c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2e:	bc 01       	movw	r22, r24
    4c30:	cd 01       	movw	r24, r26
    4c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c36:	dc 01       	movw	r26, r24
    4c38:	cb 01       	movw	r24, r22
    4c3a:	f8 01       	movw	r30, r16
    4c3c:	91 83       	std	Z+1, r25	; 0x01
    4c3e:	80 83       	st	Z, r24
    4c40:	1f c0       	rjmp	.+62     	; 0x4c80 <Init_SM+0x22c8>
    4c42:	fe 01       	movw	r30, r28
    4c44:	e9 5a       	subi	r30, 0xA9	; 169
    4c46:	ff 4f       	sbci	r31, 0xFF	; 255
    4c48:	88 ec       	ldi	r24, 0xC8	; 200
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	91 83       	std	Z+1, r25	; 0x01
    4c4e:	80 83       	st	Z, r24
    4c50:	fe 01       	movw	r30, r28
    4c52:	e9 5a       	subi	r30, 0xA9	; 169
    4c54:	ff 4f       	sbci	r31, 0xFF	; 255
    4c56:	80 81       	ld	r24, Z
    4c58:	91 81       	ldd	r25, Z+1	; 0x01
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	f1 f7       	brne	.-4      	; 0x4c5a <Init_SM+0x22a2>
    4c5e:	fe 01       	movw	r30, r28
    4c60:	e9 5a       	subi	r30, 0xA9	; 169
    4c62:	ff 4f       	sbci	r31, 0xFF	; 255
    4c64:	91 83       	std	Z+1, r25	; 0x01
    4c66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c68:	de 01       	movw	r26, r28
    4c6a:	a7 5a       	subi	r26, 0xA7	; 167
    4c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e7 5a       	subi	r30, 0xA7	; 167
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	80 81       	ld	r24, Z
    4c76:	91 81       	ldd	r25, Z+1	; 0x01
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	11 96       	adiw	r26, 0x01	; 1
    4c7c:	9c 93       	st	X, r25
    4c7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c80:	fe 01       	movw	r30, r28
    4c82:	e7 5a       	subi	r30, 0xA7	; 167
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	80 81       	ld	r24, Z
    4c88:	91 81       	ldd	r25, Z+1	; 0x01
    4c8a:	00 97       	sbiw	r24, 0x00	; 0
    4c8c:	d1 f6       	brne	.-76     	; 0x4c42 <Init_SM+0x228a>
    4c8e:	27 c0       	rjmp	.+78     	; 0x4cde <Init_SM+0x2326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c90:	8e 01       	movw	r16, r28
    4c92:	07 5a       	subi	r16, 0xA7	; 167
    4c94:	1f 4f       	sbci	r17, 0xFF	; 255
    4c96:	fe 01       	movw	r30, r28
    4c98:	e5 5a       	subi	r30, 0xA5	; 165
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	60 81       	ld	r22, Z
    4c9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ca0:	82 81       	ldd	r24, Z+2	; 0x02
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	f8 01       	movw	r30, r16
    4cae:	91 83       	std	Z+1, r25	; 0x01
    4cb0:	80 83       	st	Z, r24
    4cb2:	de 01       	movw	r26, r28
    4cb4:	ab 5a       	subi	r26, 0xAB	; 171
    4cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb8:	fe 01       	movw	r30, r28
    4cba:	e7 5a       	subi	r30, 0xA7	; 167
    4cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbe:	80 81       	ld	r24, Z
    4cc0:	91 81       	ldd	r25, Z+1	; 0x01
    4cc2:	8d 93       	st	X+, r24
    4cc4:	9c 93       	st	X, r25
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	eb 5a       	subi	r30, 0xAB	; 171
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	80 81       	ld	r24, Z
    4cce:	91 81       	ldd	r25, Z+1	; 0x01
    4cd0:	01 97       	sbiw	r24, 0x01	; 1
    4cd2:	f1 f7       	brne	.-4      	; 0x4cd0 <Init_SM+0x2318>
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	eb 5a       	subi	r30, 0xAB	; 171
    4cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cda:	91 83       	std	Z+1, r25	; 0x01
    4cdc:	80 83       	st	Z, r24
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    4cde:	fe 01       	movw	r30, r28
    4ce0:	ed 5a       	subi	r30, 0xAD	; 173
    4ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce4:	01 90       	ld	r0, Z+
    4ce6:	f0 81       	ld	r31, Z
    4ce8:	e0 2d       	mov	r30, r0
    4cea:	80 81       	ld	r24, Z
    4cec:	fe 01       	movw	r30, r28
    4cee:	ed 5a       	subi	r30, 0xAD	; 173
    4cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf2:	01 90       	ld	r0, Z+
    4cf4:	f0 81       	ld	r31, Z
    4cf6:	e0 2d       	mov	r30, r0
    4cf8:	94 81       	ldd	r25, Z+4	; 0x04
    4cfa:	69 2f       	mov	r22, r25
    4cfc:	40 e0       	ldi	r20, 0x00	; 0
    4cfe:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    4d02:	fe 01       	movw	r30, r28
    4d04:	ef 5a       	subi	r30, 0xAF	; 175
    4d06:	ff 4f       	sbci	r31, 0xFF	; 255
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	a0 ea       	ldi	r26, 0xA0	; 160
    4d0e:	b0 e4       	ldi	r27, 0x40	; 64
    4d10:	80 83       	st	Z, r24
    4d12:	91 83       	std	Z+1, r25	; 0x01
    4d14:	a2 83       	std	Z+2, r26	; 0x02
    4d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d18:	8e 01       	movw	r16, r28
    4d1a:	03 5b       	subi	r16, 0xB3	; 179
    4d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d1e:	fe 01       	movw	r30, r28
    4d20:	ef 5a       	subi	r30, 0xAF	; 175
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	60 81       	ld	r22, Z
    4d26:	71 81       	ldd	r23, Z+1	; 0x01
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	4a ef       	ldi	r20, 0xFA	; 250
    4d32:	54 e4       	ldi	r21, 0x44	; 68
    4d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d38:	dc 01       	movw	r26, r24
    4d3a:	cb 01       	movw	r24, r22
    4d3c:	f8 01       	movw	r30, r16
    4d3e:	80 83       	st	Z, r24
    4d40:	91 83       	std	Z+1, r25	; 0x01
    4d42:	a2 83       	std	Z+2, r26	; 0x02
    4d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d46:	fe 01       	movw	r30, r28
    4d48:	e3 5b       	subi	r30, 0xB3	; 179
    4d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4c:	60 81       	ld	r22, Z
    4d4e:	71 81       	ldd	r23, Z+1	; 0x01
    4d50:	82 81       	ldd	r24, Z+2	; 0x02
    4d52:	93 81       	ldd	r25, Z+3	; 0x03
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e8       	ldi	r20, 0x80	; 128
    4d5a:	5f e3       	ldi	r21, 0x3F	; 63
    4d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d60:	88 23       	and	r24, r24
    4d62:	44 f4       	brge	.+16     	; 0x4d74 <Init_SM+0x23bc>
		__ticks = 1;
    4d64:	fe 01       	movw	r30, r28
    4d66:	e5 5b       	subi	r30, 0xB5	; 181
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	91 83       	std	Z+1, r25	; 0x01
    4d70:	80 83       	st	Z, r24
    4d72:	64 c0       	rjmp	.+200    	; 0x4e3c <Init_SM+0x2484>
	else if (__tmp > 65535)
    4d74:	fe 01       	movw	r30, r28
    4d76:	e3 5b       	subi	r30, 0xB3	; 179
    4d78:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7a:	60 81       	ld	r22, Z
    4d7c:	71 81       	ldd	r23, Z+1	; 0x01
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	3f ef       	ldi	r19, 0xFF	; 255
    4d86:	4f e7       	ldi	r20, 0x7F	; 127
    4d88:	57 e4       	ldi	r21, 0x47	; 71
    4d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d8e:	18 16       	cp	r1, r24
    4d90:	0c f0       	brlt	.+2      	; 0x4d94 <Init_SM+0x23dc>
    4d92:	43 c0       	rjmp	.+134    	; 0x4e1a <Init_SM+0x2462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d94:	fe 01       	movw	r30, r28
    4d96:	ef 5a       	subi	r30, 0xAF	; 175
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	60 81       	ld	r22, Z
    4d9c:	71 81       	ldd	r23, Z+1	; 0x01
    4d9e:	82 81       	ldd	r24, Z+2	; 0x02
    4da0:	93 81       	ldd	r25, Z+3	; 0x03
    4da2:	20 e0       	ldi	r18, 0x00	; 0
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	40 e2       	ldi	r20, 0x20	; 32
    4da8:	51 e4       	ldi	r21, 0x41	; 65
    4daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	8e 01       	movw	r16, r28
    4db4:	05 5b       	subi	r16, 0xB5	; 181
    4db6:	1f 4f       	sbci	r17, 0xFF	; 255
    4db8:	bc 01       	movw	r22, r24
    4dba:	cd 01       	movw	r24, r26
    4dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	f8 01       	movw	r30, r16
    4dc6:	91 83       	std	Z+1, r25	; 0x01
    4dc8:	80 83       	st	Z, r24
    4dca:	1f c0       	rjmp	.+62     	; 0x4e0a <Init_SM+0x2452>
    4dcc:	fe 01       	movw	r30, r28
    4dce:	e7 5b       	subi	r30, 0xB7	; 183
    4dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd2:	88 ec       	ldi	r24, 0xC8	; 200
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	91 83       	std	Z+1, r25	; 0x01
    4dd8:	80 83       	st	Z, r24
    4dda:	fe 01       	movw	r30, r28
    4ddc:	e7 5b       	subi	r30, 0xB7	; 183
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	80 81       	ld	r24, Z
    4de2:	91 81       	ldd	r25, Z+1	; 0x01
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	f1 f7       	brne	.-4      	; 0x4de4 <Init_SM+0x242c>
    4de8:	fe 01       	movw	r30, r28
    4dea:	e7 5b       	subi	r30, 0xB7	; 183
    4dec:	ff 4f       	sbci	r31, 0xFF	; 255
    4dee:	91 83       	std	Z+1, r25	; 0x01
    4df0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4df2:	de 01       	movw	r26, r28
    4df4:	a5 5b       	subi	r26, 0xB5	; 181
    4df6:	bf 4f       	sbci	r27, 0xFF	; 255
    4df8:	fe 01       	movw	r30, r28
    4dfa:	e5 5b       	subi	r30, 0xB5	; 181
    4dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfe:	80 81       	ld	r24, Z
    4e00:	91 81       	ldd	r25, Z+1	; 0x01
    4e02:	01 97       	sbiw	r24, 0x01	; 1
    4e04:	11 96       	adiw	r26, 0x01	; 1
    4e06:	9c 93       	st	X, r25
    4e08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	e5 5b       	subi	r30, 0xB5	; 181
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	80 81       	ld	r24, Z
    4e12:	91 81       	ldd	r25, Z+1	; 0x01
    4e14:	00 97       	sbiw	r24, 0x00	; 0
    4e16:	d1 f6       	brne	.-76     	; 0x4dcc <Init_SM+0x2414>
    4e18:	27 c0       	rjmp	.+78     	; 0x4e68 <Init_SM+0x24b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e1a:	8e 01       	movw	r16, r28
    4e1c:	05 5b       	subi	r16, 0xB5	; 181
    4e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e20:	fe 01       	movw	r30, r28
    4e22:	e3 5b       	subi	r30, 0xB3	; 179
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	60 81       	ld	r22, Z
    4e28:	71 81       	ldd	r23, Z+1	; 0x01
    4e2a:	82 81       	ldd	r24, Z+2	; 0x02
    4e2c:	93 81       	ldd	r25, Z+3	; 0x03
    4e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e32:	dc 01       	movw	r26, r24
    4e34:	cb 01       	movw	r24, r22
    4e36:	f8 01       	movw	r30, r16
    4e38:	91 83       	std	Z+1, r25	; 0x01
    4e3a:	80 83       	st	Z, r24
    4e3c:	de 01       	movw	r26, r28
    4e3e:	a9 5b       	subi	r26, 0xB9	; 185
    4e40:	bf 4f       	sbci	r27, 0xFF	; 255
    4e42:	fe 01       	movw	r30, r28
    4e44:	e5 5b       	subi	r30, 0xB5	; 181
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	80 81       	ld	r24, Z
    4e4a:	91 81       	ldd	r25, Z+1	; 0x01
    4e4c:	8d 93       	st	X+, r24
    4e4e:	9c 93       	st	X, r25
    4e50:	fe 01       	movw	r30, r28
    4e52:	e9 5b       	subi	r30, 0xB9	; 185
    4e54:	ff 4f       	sbci	r31, 0xFF	; 255
    4e56:	80 81       	ld	r24, Z
    4e58:	91 81       	ldd	r25, Z+1	; 0x01
    4e5a:	01 97       	sbiw	r24, 0x01	; 1
    4e5c:	f1 f7       	brne	.-4      	; 0x4e5a <Init_SM+0x24a2>
    4e5e:	fe 01       	movw	r30, r28
    4e60:	e9 5b       	subi	r30, 0xB9	; 185
    4e62:	ff 4f       	sbci	r31, 0xFF	; 255
    4e64:	91 83       	std	Z+1, r25	; 0x01
    4e66:	80 83       	st	Z, r24
			DIO_u8PIN_LOW);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    4e68:	fe 01       	movw	r30, r28
    4e6a:	ed 5a       	subi	r30, 0xAD	; 173
    4e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4e6e:	01 90       	ld	r0, Z+
    4e70:	f0 81       	ld	r31, Z
    4e72:	e0 2d       	mov	r30, r0
    4e74:	80 81       	ld	r24, Z
    4e76:	fe 01       	movw	r30, r28
    4e78:	ed 5a       	subi	r30, 0xAD	; 173
    4e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e7c:	01 90       	ld	r0, Z+
    4e7e:	f0 81       	ld	r31, Z
    4e80:	e0 2d       	mov	r30, r0
    4e82:	92 81       	ldd	r25, Z+2	; 0x02
    4e84:	69 2f       	mov	r22, r25
    4e86:	41 e0       	ldi	r20, 0x01	; 1
    4e88:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	ed 5b       	subi	r30, 0xBD	; 189
    4e90:	ff 4f       	sbci	r31, 0xFF	; 255
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	a0 ea       	ldi	r26, 0xA0	; 160
    4e98:	b0 e4       	ldi	r27, 0x40	; 64
    4e9a:	80 83       	st	Z, r24
    4e9c:	91 83       	std	Z+1, r25	; 0x01
    4e9e:	a2 83       	std	Z+2, r26	; 0x02
    4ea0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ea2:	8e 01       	movw	r16, r28
    4ea4:	01 5c       	subi	r16, 0xC1	; 193
    4ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	ed 5b       	subi	r30, 0xBD	; 189
    4eac:	ff 4f       	sbci	r31, 0xFF	; 255
    4eae:	60 81       	ld	r22, Z
    4eb0:	71 81       	ldd	r23, Z+1	; 0x01
    4eb2:	82 81       	ldd	r24, Z+2	; 0x02
    4eb4:	93 81       	ldd	r25, Z+3	; 0x03
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	4a ef       	ldi	r20, 0xFA	; 250
    4ebc:	54 e4       	ldi	r21, 0x44	; 68
    4ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	f8 01       	movw	r30, r16
    4ec8:	80 83       	st	Z, r24
    4eca:	91 83       	std	Z+1, r25	; 0x01
    4ecc:	a2 83       	std	Z+2, r26	; 0x02
    4ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	ff 96       	adiw	r30, 0x3f	; 63
    4ed4:	60 81       	ld	r22, Z
    4ed6:	71 81       	ldd	r23, Z+1	; 0x01
    4ed8:	82 81       	ldd	r24, Z+2	; 0x02
    4eda:	93 81       	ldd	r25, Z+3	; 0x03
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	40 e8       	ldi	r20, 0x80	; 128
    4ee2:	5f e3       	ldi	r21, 0x3F	; 63
    4ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ee8:	88 23       	and	r24, r24
    4eea:	2c f4       	brge	.+10     	; 0x4ef6 <Init_SM+0x253e>
		__ticks = 1;
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	9e af       	std	Y+62, r25	; 0x3e
    4ef2:	8d af       	std	Y+61, r24	; 0x3d
    4ef4:	46 c0       	rjmp	.+140    	; 0x4f82 <Init_SM+0x25ca>
	else if (__tmp > 65535)
    4ef6:	fe 01       	movw	r30, r28
    4ef8:	ff 96       	adiw	r30, 0x3f	; 63
    4efa:	60 81       	ld	r22, Z
    4efc:	71 81       	ldd	r23, Z+1	; 0x01
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	93 81       	ldd	r25, Z+3	; 0x03
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	3f ef       	ldi	r19, 0xFF	; 255
    4f06:	4f e7       	ldi	r20, 0x7F	; 127
    4f08:	57 e4       	ldi	r21, 0x47	; 71
    4f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f0e:	18 16       	cp	r1, r24
    4f10:	64 f5       	brge	.+88     	; 0x4f6a <Init_SM+0x25b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f12:	fe 01       	movw	r30, r28
    4f14:	ed 5b       	subi	r30, 0xBD	; 189
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	60 81       	ld	r22, Z
    4f1a:	71 81       	ldd	r23, Z+1	; 0x01
    4f1c:	82 81       	ldd	r24, Z+2	; 0x02
    4f1e:	93 81       	ldd	r25, Z+3	; 0x03
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	40 e2       	ldi	r20, 0x20	; 32
    4f26:	51 e4       	ldi	r21, 0x41	; 65
    4f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	cb 01       	movw	r24, r22
    4f30:	bc 01       	movw	r22, r24
    4f32:	cd 01       	movw	r24, r26
    4f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	9e af       	std	Y+62, r25	; 0x3e
    4f3e:	8d af       	std	Y+61, r24	; 0x3d
    4f40:	0f c0       	rjmp	.+30     	; 0x4f60 <Init_SM+0x25a8>
    4f42:	88 ec       	ldi	r24, 0xC8	; 200
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	9c af       	std	Y+60, r25	; 0x3c
    4f48:	8b af       	std	Y+59, r24	; 0x3b
    4f4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f4e:	01 97       	sbiw	r24, 0x01	; 1
    4f50:	f1 f7       	brne	.-4      	; 0x4f4e <Init_SM+0x2596>
    4f52:	9c af       	std	Y+60, r25	; 0x3c
    4f54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f56:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f58:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f5a:	01 97       	sbiw	r24, 0x01	; 1
    4f5c:	9e af       	std	Y+62, r25	; 0x3e
    4f5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f60:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f62:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f64:	00 97       	sbiw	r24, 0x00	; 0
    4f66:	69 f7       	brne	.-38     	; 0x4f42 <Init_SM+0x258a>
    4f68:	16 c0       	rjmp	.+44     	; 0x4f96 <Init_SM+0x25de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f6a:	fe 01       	movw	r30, r28
    4f6c:	ff 96       	adiw	r30, 0x3f	; 63
    4f6e:	60 81       	ld	r22, Z
    4f70:	71 81       	ldd	r23, Z+1	; 0x01
    4f72:	82 81       	ldd	r24, Z+2	; 0x02
    4f74:	93 81       	ldd	r25, Z+3	; 0x03
    4f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	9e af       	std	Y+62, r25	; 0x3e
    4f80:	8d af       	std	Y+61, r24	; 0x3d
    4f82:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f84:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f86:	9a af       	std	Y+58, r25	; 0x3a
    4f88:	89 af       	std	Y+57, r24	; 0x39
    4f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    4f8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f8e:	01 97       	sbiw	r24, 0x01	; 1
    4f90:	f1 f7       	brne	.-4      	; 0x4f8e <Init_SM+0x25d6>
    4f92:	9a af       	std	Y+58, r25	; 0x3a
    4f94:	89 af       	std	Y+57, r24	; 0x39
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    4f96:	fe 01       	movw	r30, r28
    4f98:	ed 5a       	subi	r30, 0xAD	; 173
    4f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f9c:	01 90       	ld	r0, Z+
    4f9e:	f0 81       	ld	r31, Z
    4fa0:	e0 2d       	mov	r30, r0
    4fa2:	80 81       	ld	r24, Z
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	ed 5a       	subi	r30, 0xAD	; 173
    4fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4faa:	01 90       	ld	r0, Z+
    4fac:	f0 81       	ld	r31, Z
    4fae:	e0 2d       	mov	r30, r0
    4fb0:	93 81       	ldd	r25, Z+3	; 0x03
    4fb2:	69 2f       	mov	r22, r25
    4fb4:	40 e0       	ldi	r20, 0x00	; 0
    4fb6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    4fba:	80 e0       	ldi	r24, 0x00	; 0
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	a0 ea       	ldi	r26, 0xA0	; 160
    4fc0:	b0 e4       	ldi	r27, 0x40	; 64
    4fc2:	8d ab       	std	Y+53, r24	; 0x35
    4fc4:	9e ab       	std	Y+54, r25	; 0x36
    4fc6:	af ab       	std	Y+55, r26	; 0x37
    4fc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fca:	6d a9       	ldd	r22, Y+53	; 0x35
    4fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    4fce:	8f a9       	ldd	r24, Y+55	; 0x37
    4fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	4a ef       	ldi	r20, 0xFA	; 250
    4fd8:	54 e4       	ldi	r21, 0x44	; 68
    4fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	89 ab       	std	Y+49, r24	; 0x31
    4fe4:	9a ab       	std	Y+50, r25	; 0x32
    4fe6:	ab ab       	std	Y+51, r26	; 0x33
    4fe8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4fea:	69 a9       	ldd	r22, Y+49	; 0x31
    4fec:	7a a9       	ldd	r23, Y+50	; 0x32
    4fee:	8b a9       	ldd	r24, Y+51	; 0x33
    4ff0:	9c a9       	ldd	r25, Y+52	; 0x34
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	40 e8       	ldi	r20, 0x80	; 128
    4ff8:	5f e3       	ldi	r21, 0x3F	; 63
    4ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ffe:	88 23       	and	r24, r24
    5000:	2c f4       	brge	.+10     	; 0x500c <Init_SM+0x2654>
		__ticks = 1;
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	98 ab       	std	Y+48, r25	; 0x30
    5008:	8f a7       	std	Y+47, r24	; 0x2f
    500a:	3f c0       	rjmp	.+126    	; 0x508a <Init_SM+0x26d2>
	else if (__tmp > 65535)
    500c:	69 a9       	ldd	r22, Y+49	; 0x31
    500e:	7a a9       	ldd	r23, Y+50	; 0x32
    5010:	8b a9       	ldd	r24, Y+51	; 0x33
    5012:	9c a9       	ldd	r25, Y+52	; 0x34
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	3f ef       	ldi	r19, 0xFF	; 255
    5018:	4f e7       	ldi	r20, 0x7F	; 127
    501a:	57 e4       	ldi	r21, 0x47	; 71
    501c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5020:	18 16       	cp	r1, r24
    5022:	4c f5       	brge	.+82     	; 0x5076 <Init_SM+0x26be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5024:	6d a9       	ldd	r22, Y+53	; 0x35
    5026:	7e a9       	ldd	r23, Y+54	; 0x36
    5028:	8f a9       	ldd	r24, Y+55	; 0x37
    502a:	98 ad       	ldd	r25, Y+56	; 0x38
    502c:	20 e0       	ldi	r18, 0x00	; 0
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	40 e2       	ldi	r20, 0x20	; 32
    5032:	51 e4       	ldi	r21, 0x41	; 65
    5034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5038:	dc 01       	movw	r26, r24
    503a:	cb 01       	movw	r24, r22
    503c:	bc 01       	movw	r22, r24
    503e:	cd 01       	movw	r24, r26
    5040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	98 ab       	std	Y+48, r25	; 0x30
    504a:	8f a7       	std	Y+47, r24	; 0x2f
    504c:	0f c0       	rjmp	.+30     	; 0x506c <Init_SM+0x26b4>
    504e:	88 ec       	ldi	r24, 0xC8	; 200
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	9e a7       	std	Y+46, r25	; 0x2e
    5054:	8d a7       	std	Y+45, r24	; 0x2d
    5056:	8d a5       	ldd	r24, Y+45	; 0x2d
    5058:	9e a5       	ldd	r25, Y+46	; 0x2e
    505a:	01 97       	sbiw	r24, 0x01	; 1
    505c:	f1 f7       	brne	.-4      	; 0x505a <Init_SM+0x26a2>
    505e:	9e a7       	std	Y+46, r25	; 0x2e
    5060:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5062:	8f a5       	ldd	r24, Y+47	; 0x2f
    5064:	98 a9       	ldd	r25, Y+48	; 0x30
    5066:	01 97       	sbiw	r24, 0x01	; 1
    5068:	98 ab       	std	Y+48, r25	; 0x30
    506a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    506c:	8f a5       	ldd	r24, Y+47	; 0x2f
    506e:	98 a9       	ldd	r25, Y+48	; 0x30
    5070:	00 97       	sbiw	r24, 0x00	; 0
    5072:	69 f7       	brne	.-38     	; 0x504e <Init_SM+0x2696>
    5074:	14 c0       	rjmp	.+40     	; 0x509e <Init_SM+0x26e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5076:	69 a9       	ldd	r22, Y+49	; 0x31
    5078:	7a a9       	ldd	r23, Y+50	; 0x32
    507a:	8b a9       	ldd	r24, Y+51	; 0x33
    507c:	9c a9       	ldd	r25, Y+52	; 0x34
    507e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	98 ab       	std	Y+48, r25	; 0x30
    5088:	8f a7       	std	Y+47, r24	; 0x2f
    508a:	8f a5       	ldd	r24, Y+47	; 0x2f
    508c:	98 a9       	ldd	r25, Y+48	; 0x30
    508e:	9c a7       	std	Y+44, r25	; 0x2c
    5090:	8b a7       	std	Y+43, r24	; 0x2b
    5092:	8b a5       	ldd	r24, Y+43	; 0x2b
    5094:	9c a5       	ldd	r25, Y+44	; 0x2c
    5096:	01 97       	sbiw	r24, 0x01	; 1
    5098:	f1 f7       	brne	.-4      	; 0x5096 <Init_SM+0x26de>
    509a:	9c a7       	std	Y+44, r25	; 0x2c
    509c:	8b a7       	std	Y+43, r24	; 0x2b
			DIO_u8PIN_LOW);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    509e:	fe 01       	movw	r30, r28
    50a0:	ed 5a       	subi	r30, 0xAD	; 173
    50a2:	fe 4f       	sbci	r31, 0xFE	; 254
    50a4:	01 90       	ld	r0, Z+
    50a6:	f0 81       	ld	r31, Z
    50a8:	e0 2d       	mov	r30, r0
    50aa:	80 81       	ld	r24, Z
    50ac:	fe 01       	movw	r30, r28
    50ae:	ed 5a       	subi	r30, 0xAD	; 173
    50b0:	fe 4f       	sbci	r31, 0xFE	; 254
    50b2:	01 90       	ld	r0, Z+
    50b4:	f0 81       	ld	r31, Z
    50b6:	e0 2d       	mov	r30, r0
    50b8:	91 81       	ldd	r25, Z+1	; 0x01
    50ba:	69 2f       	mov	r22, r25
    50bc:	41 e0       	ldi	r20, 0x01	; 1
    50be:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	a0 ea       	ldi	r26, 0xA0	; 160
    50c8:	b0 e4       	ldi	r27, 0x40	; 64
    50ca:	8f a3       	std	Y+39, r24	; 0x27
    50cc:	98 a7       	std	Y+40, r25	; 0x28
    50ce:	a9 a7       	std	Y+41, r26	; 0x29
    50d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50d2:	6f a1       	ldd	r22, Y+39	; 0x27
    50d4:	78 a5       	ldd	r23, Y+40	; 0x28
    50d6:	89 a5       	ldd	r24, Y+41	; 0x29
    50d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	4a ef       	ldi	r20, 0xFA	; 250
    50e0:	54 e4       	ldi	r21, 0x44	; 68
    50e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e6:	dc 01       	movw	r26, r24
    50e8:	cb 01       	movw	r24, r22
    50ea:	8b a3       	std	Y+35, r24	; 0x23
    50ec:	9c a3       	std	Y+36, r25	; 0x24
    50ee:	ad a3       	std	Y+37, r26	; 0x25
    50f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50f2:	6b a1       	ldd	r22, Y+35	; 0x23
    50f4:	7c a1       	ldd	r23, Y+36	; 0x24
    50f6:	8d a1       	ldd	r24, Y+37	; 0x25
    50f8:	9e a1       	ldd	r25, Y+38	; 0x26
    50fa:	20 e0       	ldi	r18, 0x00	; 0
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	40 e8       	ldi	r20, 0x80	; 128
    5100:	5f e3       	ldi	r21, 0x3F	; 63
    5102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5106:	88 23       	and	r24, r24
    5108:	2c f4       	brge	.+10     	; 0x5114 <Init_SM+0x275c>
		__ticks = 1;
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	9a a3       	std	Y+34, r25	; 0x22
    5110:	89 a3       	std	Y+33, r24	; 0x21
    5112:	3f c0       	rjmp	.+126    	; 0x5192 <Init_SM+0x27da>
	else if (__tmp > 65535)
    5114:	6b a1       	ldd	r22, Y+35	; 0x23
    5116:	7c a1       	ldd	r23, Y+36	; 0x24
    5118:	8d a1       	ldd	r24, Y+37	; 0x25
    511a:	9e a1       	ldd	r25, Y+38	; 0x26
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	3f ef       	ldi	r19, 0xFF	; 255
    5120:	4f e7       	ldi	r20, 0x7F	; 127
    5122:	57 e4       	ldi	r21, 0x47	; 71
    5124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5128:	18 16       	cp	r1, r24
    512a:	4c f5       	brge	.+82     	; 0x517e <Init_SM+0x27c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    512c:	6f a1       	ldd	r22, Y+39	; 0x27
    512e:	78 a5       	ldd	r23, Y+40	; 0x28
    5130:	89 a5       	ldd	r24, Y+41	; 0x29
    5132:	9a a5       	ldd	r25, Y+42	; 0x2a
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	40 e2       	ldi	r20, 0x20	; 32
    513a:	51 e4       	ldi	r21, 0x41	; 65
    513c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	bc 01       	movw	r22, r24
    5146:	cd 01       	movw	r24, r26
    5148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514c:	dc 01       	movw	r26, r24
    514e:	cb 01       	movw	r24, r22
    5150:	9a a3       	std	Y+34, r25	; 0x22
    5152:	89 a3       	std	Y+33, r24	; 0x21
    5154:	0f c0       	rjmp	.+30     	; 0x5174 <Init_SM+0x27bc>
    5156:	88 ec       	ldi	r24, 0xC8	; 200
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	98 a3       	std	Y+32, r25	; 0x20
    515c:	8f 8f       	std	Y+31, r24	; 0x1f
    515e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5160:	98 a1       	ldd	r25, Y+32	; 0x20
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	f1 f7       	brne	.-4      	; 0x5162 <Init_SM+0x27aa>
    5166:	98 a3       	std	Y+32, r25	; 0x20
    5168:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    516a:	89 a1       	ldd	r24, Y+33	; 0x21
    516c:	9a a1       	ldd	r25, Y+34	; 0x22
    516e:	01 97       	sbiw	r24, 0x01	; 1
    5170:	9a a3       	std	Y+34, r25	; 0x22
    5172:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5174:	89 a1       	ldd	r24, Y+33	; 0x21
    5176:	9a a1       	ldd	r25, Y+34	; 0x22
    5178:	00 97       	sbiw	r24, 0x00	; 0
    517a:	69 f7       	brne	.-38     	; 0x5156 <Init_SM+0x279e>
    517c:	14 c0       	rjmp	.+40     	; 0x51a6 <Init_SM+0x27ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    517e:	6b a1       	ldd	r22, Y+35	; 0x23
    5180:	7c a1       	ldd	r23, Y+36	; 0x24
    5182:	8d a1       	ldd	r24, Y+37	; 0x25
    5184:	9e a1       	ldd	r25, Y+38	; 0x26
    5186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	9a a3       	std	Y+34, r25	; 0x22
    5190:	89 a3       	std	Y+33, r24	; 0x21
    5192:	89 a1       	ldd	r24, Y+33	; 0x21
    5194:	9a a1       	ldd	r25, Y+34	; 0x22
    5196:	9e 8f       	std	Y+30, r25	; 0x1e
    5198:	8d 8f       	std	Y+29, r24	; 0x1d
    519a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    519c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    519e:	01 97       	sbiw	r24, 0x01	; 1
    51a0:	f1 f7       	brne	.-4      	; 0x519e <Init_SM+0x27e6>
    51a2:	9e 8f       	std	Y+30, r25	; 0x1e
    51a4:	8d 8f       	std	Y+29, r24	; 0x1d
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    51a6:	fe 01       	movw	r30, r28
    51a8:	ed 5a       	subi	r30, 0xAD	; 173
    51aa:	fe 4f       	sbci	r31, 0xFE	; 254
    51ac:	01 90       	ld	r0, Z+
    51ae:	f0 81       	ld	r31, Z
    51b0:	e0 2d       	mov	r30, r0
    51b2:	80 81       	ld	r24, Z
    51b4:	fe 01       	movw	r30, r28
    51b6:	ed 5a       	subi	r30, 0xAD	; 173
    51b8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ba:	01 90       	ld	r0, Z+
    51bc:	f0 81       	ld	r31, Z
    51be:	e0 2d       	mov	r30, r0
    51c0:	92 81       	ldd	r25, Z+2	; 0x02
    51c2:	69 2f       	mov	r22, r25
    51c4:	40 e0       	ldi	r20, 0x00	; 0
    51c6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	a0 ea       	ldi	r26, 0xA0	; 160
    51d0:	b0 e4       	ldi	r27, 0x40	; 64
    51d2:	89 8f       	std	Y+25, r24	; 0x19
    51d4:	9a 8f       	std	Y+26, r25	; 0x1a
    51d6:	ab 8f       	std	Y+27, r26	; 0x1b
    51d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51da:	69 8d       	ldd	r22, Y+25	; 0x19
    51dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	4a ef       	ldi	r20, 0xFA	; 250
    51e8:	54 e4       	ldi	r21, 0x44	; 68
    51ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	8d 8b       	std	Y+21, r24	; 0x15
    51f4:	9e 8b       	std	Y+22, r25	; 0x16
    51f6:	af 8b       	std	Y+23, r26	; 0x17
    51f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51fa:	6d 89       	ldd	r22, Y+21	; 0x15
    51fc:	7e 89       	ldd	r23, Y+22	; 0x16
    51fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5200:	98 8d       	ldd	r25, Y+24	; 0x18
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e8       	ldi	r20, 0x80	; 128
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    520e:	88 23       	and	r24, r24
    5210:	2c f4       	brge	.+10     	; 0x521c <Init_SM+0x2864>
		__ticks = 1;
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	9c 8b       	std	Y+20, r25	; 0x14
    5218:	8b 8b       	std	Y+19, r24	; 0x13
    521a:	3f c0       	rjmp	.+126    	; 0x529a <Init_SM+0x28e2>
	else if (__tmp > 65535)
    521c:	6d 89       	ldd	r22, Y+21	; 0x15
    521e:	7e 89       	ldd	r23, Y+22	; 0x16
    5220:	8f 89       	ldd	r24, Y+23	; 0x17
    5222:	98 8d       	ldd	r25, Y+24	; 0x18
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	3f ef       	ldi	r19, 0xFF	; 255
    5228:	4f e7       	ldi	r20, 0x7F	; 127
    522a:	57 e4       	ldi	r21, 0x47	; 71
    522c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5230:	18 16       	cp	r1, r24
    5232:	4c f5       	brge	.+82     	; 0x5286 <Init_SM+0x28ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5234:	69 8d       	ldd	r22, Y+25	; 0x19
    5236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    523a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	40 e2       	ldi	r20, 0x20	; 32
    5242:	51 e4       	ldi	r21, 0x41	; 65
    5244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	bc 01       	movw	r22, r24
    524e:	cd 01       	movw	r24, r26
    5250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5254:	dc 01       	movw	r26, r24
    5256:	cb 01       	movw	r24, r22
    5258:	9c 8b       	std	Y+20, r25	; 0x14
    525a:	8b 8b       	std	Y+19, r24	; 0x13
    525c:	0f c0       	rjmp	.+30     	; 0x527c <Init_SM+0x28c4>
    525e:	88 ec       	ldi	r24, 0xC8	; 200
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	9a 8b       	std	Y+18, r25	; 0x12
    5264:	89 8b       	std	Y+17, r24	; 0x11
    5266:	89 89       	ldd	r24, Y+17	; 0x11
    5268:	9a 89       	ldd	r25, Y+18	; 0x12
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	f1 f7       	brne	.-4      	; 0x526a <Init_SM+0x28b2>
    526e:	9a 8b       	std	Y+18, r25	; 0x12
    5270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5272:	8b 89       	ldd	r24, Y+19	; 0x13
    5274:	9c 89       	ldd	r25, Y+20	; 0x14
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	9c 8b       	std	Y+20, r25	; 0x14
    527a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527c:	8b 89       	ldd	r24, Y+19	; 0x13
    527e:	9c 89       	ldd	r25, Y+20	; 0x14
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	69 f7       	brne	.-38     	; 0x525e <Init_SM+0x28a6>
    5284:	14 c0       	rjmp	.+40     	; 0x52ae <Init_SM+0x28f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5286:	6d 89       	ldd	r22, Y+21	; 0x15
    5288:	7e 89       	ldd	r23, Y+22	; 0x16
    528a:	8f 89       	ldd	r24, Y+23	; 0x17
    528c:	98 8d       	ldd	r25, Y+24	; 0x18
    528e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	9c 8b       	std	Y+20, r25	; 0x14
    5298:	8b 8b       	std	Y+19, r24	; 0x13
    529a:	8b 89       	ldd	r24, Y+19	; 0x13
    529c:	9c 89       	ldd	r25, Y+20	; 0x14
    529e:	98 8b       	std	Y+16, r25	; 0x10
    52a0:	8f 87       	std	Y+15, r24	; 0x0f
    52a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52a4:	98 89       	ldd	r25, Y+16	; 0x10
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <Init_SM+0x28ee>
    52aa:	98 8b       	std	Y+16, r25	; 0x10
    52ac:	8f 87       	std	Y+15, r24	; 0x0f
			DIO_u8PIN_LOW);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    52ae:	fe 01       	movw	r30, r28
    52b0:	ed 5a       	subi	r30, 0xAD	; 173
    52b2:	fe 4f       	sbci	r31, 0xFE	; 254
    52b4:	01 90       	ld	r0, Z+
    52b6:	f0 81       	ld	r31, Z
    52b8:	e0 2d       	mov	r30, r0
    52ba:	80 81       	ld	r24, Z
    52bc:	fe 01       	movw	r30, r28
    52be:	ed 5a       	subi	r30, 0xAD	; 173
    52c0:	fe 4f       	sbci	r31, 0xFE	; 254
    52c2:	01 90       	ld	r0, Z+
    52c4:	f0 81       	ld	r31, Z
    52c6:	e0 2d       	mov	r30, r0
    52c8:	94 81       	ldd	r25, Z+4	; 0x04
    52ca:	69 2f       	mov	r22, r25
    52cc:	41 e0       	ldi	r20, 0x01	; 1
    52ce:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	a0 ea       	ldi	r26, 0xA0	; 160
    52d8:	b0 e4       	ldi	r27, 0x40	; 64
    52da:	8b 87       	std	Y+11, r24	; 0x0b
    52dc:	9c 87       	std	Y+12, r25	; 0x0c
    52de:	ad 87       	std	Y+13, r26	; 0x0d
    52e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    52e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    52e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	4a ef       	ldi	r20, 0xFA	; 250
    52f0:	54 e4       	ldi	r21, 0x44	; 68
    52f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	8f 83       	std	Y+7, r24	; 0x07
    52fc:	98 87       	std	Y+8, r25	; 0x08
    52fe:	a9 87       	std	Y+9, r26	; 0x09
    5300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5302:	6f 81       	ldd	r22, Y+7	; 0x07
    5304:	78 85       	ldd	r23, Y+8	; 0x08
    5306:	89 85       	ldd	r24, Y+9	; 0x09
    5308:	9a 85       	ldd	r25, Y+10	; 0x0a
    530a:	20 e0       	ldi	r18, 0x00	; 0
    530c:	30 e0       	ldi	r19, 0x00	; 0
    530e:	40 e8       	ldi	r20, 0x80	; 128
    5310:	5f e3       	ldi	r21, 0x3F	; 63
    5312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5316:	88 23       	and	r24, r24
    5318:	2c f4       	brge	.+10     	; 0x5324 <Init_SM+0x296c>
		__ticks = 1;
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	9e 83       	std	Y+6, r25	; 0x06
    5320:	8d 83       	std	Y+5, r24	; 0x05
    5322:	3f c0       	rjmp	.+126    	; 0x53a2 <Init_SM+0x29ea>
	else if (__tmp > 65535)
    5324:	6f 81       	ldd	r22, Y+7	; 0x07
    5326:	78 85       	ldd	r23, Y+8	; 0x08
    5328:	89 85       	ldd	r24, Y+9	; 0x09
    532a:	9a 85       	ldd	r25, Y+10	; 0x0a
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	3f ef       	ldi	r19, 0xFF	; 255
    5330:	4f e7       	ldi	r20, 0x7F	; 127
    5332:	57 e4       	ldi	r21, 0x47	; 71
    5334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5338:	18 16       	cp	r1, r24
    533a:	4c f5       	brge	.+82     	; 0x538e <Init_SM+0x29d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    533c:	6b 85       	ldd	r22, Y+11	; 0x0b
    533e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5340:	8d 85       	ldd	r24, Y+13	; 0x0d
    5342:	9e 85       	ldd	r25, Y+14	; 0x0e
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	40 e2       	ldi	r20, 0x20	; 32
    534a:	51 e4       	ldi	r21, 0x41	; 65
    534c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	bc 01       	movw	r22, r24
    5356:	cd 01       	movw	r24, r26
    5358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	9e 83       	std	Y+6, r25	; 0x06
    5362:	8d 83       	std	Y+5, r24	; 0x05
    5364:	0f c0       	rjmp	.+30     	; 0x5384 <Init_SM+0x29cc>
    5366:	88 ec       	ldi	r24, 0xC8	; 200
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	9c 83       	std	Y+4, r25	; 0x04
    536c:	8b 83       	std	Y+3, r24	; 0x03
    536e:	8b 81       	ldd	r24, Y+3	; 0x03
    5370:	9c 81       	ldd	r25, Y+4	; 0x04
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	f1 f7       	brne	.-4      	; 0x5372 <Init_SM+0x29ba>
    5376:	9c 83       	std	Y+4, r25	; 0x04
    5378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    537a:	8d 81       	ldd	r24, Y+5	; 0x05
    537c:	9e 81       	ldd	r25, Y+6	; 0x06
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	9e 83       	std	Y+6, r25	; 0x06
    5382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5384:	8d 81       	ldd	r24, Y+5	; 0x05
    5386:	9e 81       	ldd	r25, Y+6	; 0x06
    5388:	00 97       	sbiw	r24, 0x00	; 0
    538a:	69 f7       	brne	.-38     	; 0x5366 <Init_SM+0x29ae>
    538c:	14 c0       	rjmp	.+40     	; 0x53b6 <Init_SM+0x29fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    538e:	6f 81       	ldd	r22, Y+7	; 0x07
    5390:	78 85       	ldd	r23, Y+8	; 0x08
    5392:	89 85       	ldd	r24, Y+9	; 0x09
    5394:	9a 85       	ldd	r25, Y+10	; 0x0a
    5396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539a:	dc 01       	movw	r26, r24
    539c:	cb 01       	movw	r24, r22
    539e:	9e 83       	std	Y+6, r25	; 0x06
    53a0:	8d 83       	std	Y+5, r24	; 0x05
    53a2:	8d 81       	ldd	r24, Y+5	; 0x05
    53a4:	9e 81       	ldd	r25, Y+6	; 0x06
    53a6:	9a 83       	std	Y+2, r25	; 0x02
    53a8:	89 83       	std	Y+1, r24	; 0x01
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	01 97       	sbiw	r24, 0x01	; 1
    53b0:	f1 f7       	brne	.-4      	; 0x53ae <Init_SM+0x29f6>
    53b2:	9a 83       	std	Y+2, r25	; 0x02
    53b4:	89 83       	std	Y+1, r24	; 0x01
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    53b6:	fe 01       	movw	r30, r28
    53b8:	ed 5a       	subi	r30, 0xAD	; 173
    53ba:	fe 4f       	sbci	r31, 0xFE	; 254
    53bc:	01 90       	ld	r0, Z+
    53be:	f0 81       	ld	r31, Z
    53c0:	e0 2d       	mov	r30, r0
    53c2:	80 81       	ld	r24, Z
    53c4:	fe 01       	movw	r30, r28
    53c6:	ed 5a       	subi	r30, 0xAD	; 173
    53c8:	fe 4f       	sbci	r31, 0xFE	; 254
    53ca:	01 90       	ld	r0, Z+
    53cc:	f0 81       	ld	r31, Z
    53ce:	e0 2d       	mov	r30, r0
    53d0:	91 81       	ldd	r25, Z+1	; 0x01
    53d2:	69 2f       	mov	r22, r25
    53d4:	40 e0       	ldi	r20, 0x00	; 0
    53d6:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>

	
		else if (Copy_SM_st->SM_Direction == Clock_Wise)
	
		{
		for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    53da:	de 01       	movw	r26, r28
    53dc:	af 5a       	subi	r26, 0xAF	; 175
    53de:	be 4f       	sbci	r27, 0xFE	; 254
    53e0:	fe 01       	movw	r30, r28
    53e2:	ef 5a       	subi	r30, 0xAF	; 175
    53e4:	fe 4f       	sbci	r31, 0xFE	; 254
    53e6:	80 81       	ld	r24, Z
    53e8:	8f 5f       	subi	r24, 0xFF	; 255
    53ea:	8c 93       	st	X, r24
    53ec:	fe 01       	movw	r30, r28
    53ee:	ef 5a       	subi	r30, 0xAF	; 175
    53f0:	fe 4f       	sbci	r31, 0xFE	; 254
    53f2:	80 81       	ld	r24, Z
    53f4:	28 2f       	mov	r18, r24
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	40 e0       	ldi	r20, 0x00	; 0
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	fe 01       	movw	r30, r28
    53fe:	ed 5a       	subi	r30, 0xAD	; 173
    5400:	fe 4f       	sbci	r31, 0xFE	; 254
    5402:	01 90       	ld	r0, Z+
    5404:	f0 81       	ld	r31, Z
    5406:	e0 2d       	mov	r30, r0
    5408:	84 85       	ldd	r24, Z+12	; 0x0c
    540a:	95 85       	ldd	r25, Z+13	; 0x0d
    540c:	a6 85       	ldd	r26, Z+14	; 0x0e
    540e:	b7 85       	ldd	r27, Z+15	; 0x0f
    5410:	28 17       	cp	r18, r24
    5412:	39 07       	cpc	r19, r25
    5414:	4a 07       	cpc	r20, r26
    5416:	5b 07       	cpc	r21, r27
    5418:	08 f4       	brcc	.+2      	; 0x541c <Init_SM+0x2a64>
    541a:	d7 ca       	rjmp	.-2642   	; 0x49ca <Init_SM+0x2012>
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
			DIO_u8PIN_LOW);
			
		}
		DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    541c:	fe 01       	movw	r30, r28
    541e:	ed 5a       	subi	r30, 0xAD	; 173
    5420:	fe 4f       	sbci	r31, 0xFE	; 254
    5422:	01 90       	ld	r0, Z+
    5424:	f0 81       	ld	r31, Z
    5426:	e0 2d       	mov	r30, r0
    5428:	80 81       	ld	r24, Z
    542a:	fe 01       	movw	r30, r28
    542c:	ed 5a       	subi	r30, 0xAD	; 173
    542e:	fe 4f       	sbci	r31, 0xFE	; 254
    5430:	01 90       	ld	r0, Z+
    5432:	f0 81       	ld	r31, Z
    5434:	e0 2d       	mov	r30, r0
    5436:	91 81       	ldd	r25, Z+1	; 0x01
    5438:	69 2f       	mov	r22, r25
    543a:	40 e0       	ldi	r20, 0x00	; 0
    543c:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    5440:	fe 01       	movw	r30, r28
    5442:	ed 5a       	subi	r30, 0xAD	; 173
    5444:	fe 4f       	sbci	r31, 0xFE	; 254
    5446:	01 90       	ld	r0, Z+
    5448:	f0 81       	ld	r31, Z
    544a:	e0 2d       	mov	r30, r0
    544c:	80 81       	ld	r24, Z
    544e:	fe 01       	movw	r30, r28
    5450:	ed 5a       	subi	r30, 0xAD	; 173
    5452:	fe 4f       	sbci	r31, 0xFE	; 254
    5454:	01 90       	ld	r0, Z+
    5456:	f0 81       	ld	r31, Z
    5458:	e0 2d       	mov	r30, r0
    545a:	92 81       	ldd	r25, Z+2	; 0x02
    545c:	69 2f       	mov	r22, r25
    545e:	40 e0       	ldi	r20, 0x00	; 0
    5460:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    5464:	fe 01       	movw	r30, r28
    5466:	ed 5a       	subi	r30, 0xAD	; 173
    5468:	fe 4f       	sbci	r31, 0xFE	; 254
    546a:	01 90       	ld	r0, Z+
    546c:	f0 81       	ld	r31, Z
    546e:	e0 2d       	mov	r30, r0
    5470:	80 81       	ld	r24, Z
    5472:	fe 01       	movw	r30, r28
    5474:	ed 5a       	subi	r30, 0xAD	; 173
    5476:	fe 4f       	sbci	r31, 0xFE	; 254
    5478:	01 90       	ld	r0, Z+
    547a:	f0 81       	ld	r31, Z
    547c:	e0 2d       	mov	r30, r0
    547e:	93 81       	ldd	r25, Z+3	; 0x03
    5480:	69 2f       	mov	r22, r25
    5482:	40 e0       	ldi	r20, 0x00	; 0
    5484:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    5488:	fe 01       	movw	r30, r28
    548a:	ed 5a       	subi	r30, 0xAD	; 173
    548c:	fe 4f       	sbci	r31, 0xFE	; 254
    548e:	01 90       	ld	r0, Z+
    5490:	f0 81       	ld	r31, Z
    5492:	e0 2d       	mov	r30, r0
    5494:	80 81       	ld	r24, Z
    5496:	fe 01       	movw	r30, r28
    5498:	ed 5a       	subi	r30, 0xAD	; 173
    549a:	fe 4f       	sbci	r31, 0xFE	; 254
    549c:	01 90       	ld	r0, Z+
    549e:	f0 81       	ld	r31, Z
    54a0:	e0 2d       	mov	r30, r0
    54a2:	94 81       	ldd	r25, Z+4	; 0x04
    54a4:	69 2f       	mov	r22, r25
    54a6:	40 e0       	ldi	r20, 0x00	; 0
    54a8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	}
	}

}
    54ac:	cc 5a       	subi	r28, 0xAC	; 172
    54ae:	de 4f       	sbci	r29, 0xFE	; 254
    54b0:	0f b6       	in	r0, 0x3f	; 63
    54b2:	f8 94       	cli
    54b4:	de bf       	out	0x3e, r29	; 62
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	cd bf       	out	0x3d, r28	; 61
    54ba:	cf 91       	pop	r28
    54bc:	df 91       	pop	r29
    54be:	1f 91       	pop	r17
    54c0:	0f 91       	pop	r16
    54c2:	08 95       	ret

000054c4 <LM35_voidReadValue>:
#include"LM35_Interface.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"../../MCAL/ADC/ADC_Interface.h"


void LM35_voidReadValue(u8 Copy_u8Pin,u8 *Copy_u16value){
    54c4:	df 93       	push	r29
    54c6:	cf 93       	push	r28
    54c8:	00 d0       	rcall	.+0      	; 0x54ca <LM35_voidReadValue+0x6>
    54ca:	0f 92       	push	r0
    54cc:	cd b7       	in	r28, 0x3d	; 61
    54ce:	de b7       	in	r29, 0x3e	; 62
    54d0:	89 83       	std	Y+1, r24	; 0x01
    54d2:	7b 83       	std	Y+3, r23	; 0x03
    54d4:	6a 83       	std	Y+2, r22	; 0x02


	DIO_VoidSetPinDirection(DIO_u8PORTA,Copy_u8Pin,DIO_u8PIN_INPUT);
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	69 81       	ldd	r22, Y+1	; 0x01
    54da:	40 e0       	ldi	r20, 0x00	; 0
    54dc:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	ADC_voidInit();
    54e0:	0e 94 80 14 	call	0x2900	; 0x2900 <ADC_voidInit>
	ADC_StartConv(Copy_u8Pin,Copy_u16value);
    54e4:	2a 81       	ldd	r18, Y+2	; 0x02
    54e6:	3b 81       	ldd	r19, Y+3	; 0x03
    54e8:	89 81       	ldd	r24, Y+1	; 0x01
    54ea:	b9 01       	movw	r22, r18
    54ec:	0e 94 9c 14 	call	0x2938	; 0x2938 <ADC_StartConv>
	*Copy_u16value/=(2.00);
    54f0:	ea 81       	ldd	r30, Y+2	; 0x02
    54f2:	fb 81       	ldd	r31, Y+3	; 0x03
    54f4:	80 81       	ld	r24, Z
    54f6:	88 2f       	mov	r24, r24
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	aa 27       	eor	r26, r26
    54fc:	97 fd       	sbrc	r25, 7
    54fe:	a0 95       	com	r26
    5500:	ba 2f       	mov	r27, r26
    5502:	bc 01       	movw	r22, r24
    5504:	cd 01       	movw	r24, r26
    5506:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    550a:	dc 01       	movw	r26, r24
    550c:	cb 01       	movw	r24, r22
    550e:	bc 01       	movw	r22, r24
    5510:	cd 01       	movw	r24, r26
    5512:	20 e0       	ldi	r18, 0x00	; 0
    5514:	30 e0       	ldi	r19, 0x00	; 0
    5516:	40 e0       	ldi	r20, 0x00	; 0
    5518:	50 e4       	ldi	r21, 0x40	; 64
    551a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    551e:	dc 01       	movw	r26, r24
    5520:	cb 01       	movw	r24, r22
    5522:	bc 01       	movw	r22, r24
    5524:	cd 01       	movw	r24, r26
    5526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    552a:	dc 01       	movw	r26, r24
    552c:	cb 01       	movw	r24, r22
    552e:	ea 81       	ldd	r30, Y+2	; 0x02
    5530:	fb 81       	ldd	r31, Y+3	; 0x03
    5532:	80 83       	st	Z, r24

}
    5534:	0f 90       	pop	r0
    5536:	0f 90       	pop	r0
    5538:	0f 90       	pop	r0
    553a:	cf 91       	pop	r28
    553c:	df 91       	pop	r29
    553e:	08 95       	ret

00005540 <LCD_Init>:

#include <util/delay.h>

/* ====================== Functions Definitions ===================== */
void LCD_Init(void)
{
    5540:	df 93       	push	r29
    5542:	cf 93       	push	r28
    5544:	cd b7       	in	r28, 0x3d	; 61
    5546:	de b7       	in	r29, 0x3e	; 62
    5548:	6c 97       	sbiw	r28, 0x1c	; 28
    554a:	0f b6       	in	r0, 0x3f	; 63
    554c:	f8 94       	cli
    554e:	de bf       	out	0x3e, r29	; 62
    5550:	0f be       	out	0x3f, r0	; 63
    5552:	cd bf       	out	0x3d, r28	; 61
	//Set direction

	DIO_VoidSetPortDirection(LCD_PORT,DIO_u8PORT_OUTPUT);
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	6f ef       	ldi	r22, 0xFF	; 255
    5558:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DIO_VoidSetPortDirection>
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	a8 e4       	ldi	r26, 0x48	; 72
    5562:	b2 e4       	ldi	r27, 0x42	; 66
    5564:	89 8f       	std	Y+25, r24	; 0x19
    5566:	9a 8f       	std	Y+26, r25	; 0x1a
    5568:	ab 8f       	std	Y+27, r26	; 0x1b
    556a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    556c:	69 8d       	ldd	r22, Y+25	; 0x19
    556e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	4a ef       	ldi	r20, 0xFA	; 250
    557a:	54 e4       	ldi	r21, 0x44	; 68
    557c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5580:	dc 01       	movw	r26, r24
    5582:	cb 01       	movw	r24, r22
    5584:	8d 8b       	std	Y+21, r24	; 0x15
    5586:	9e 8b       	std	Y+22, r25	; 0x16
    5588:	af 8b       	std	Y+23, r26	; 0x17
    558a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    558c:	6d 89       	ldd	r22, Y+21	; 0x15
    558e:	7e 89       	ldd	r23, Y+22	; 0x16
    5590:	8f 89       	ldd	r24, Y+23	; 0x17
    5592:	98 8d       	ldd	r25, Y+24	; 0x18
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	40 e8       	ldi	r20, 0x80	; 128
    559a:	5f e3       	ldi	r21, 0x3F	; 63
    559c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55a0:	88 23       	and	r24, r24
    55a2:	2c f4       	brge	.+10     	; 0x55ae <LCD_Init+0x6e>
		__ticks = 1;
    55a4:	81 e0       	ldi	r24, 0x01	; 1
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	9c 8b       	std	Y+20, r25	; 0x14
    55aa:	8b 8b       	std	Y+19, r24	; 0x13
    55ac:	3f c0       	rjmp	.+126    	; 0x562c <LCD_Init+0xec>
	else if (__tmp > 65535)
    55ae:	6d 89       	ldd	r22, Y+21	; 0x15
    55b0:	7e 89       	ldd	r23, Y+22	; 0x16
    55b2:	8f 89       	ldd	r24, Y+23	; 0x17
    55b4:	98 8d       	ldd	r25, Y+24	; 0x18
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	3f ef       	ldi	r19, 0xFF	; 255
    55ba:	4f e7       	ldi	r20, 0x7F	; 127
    55bc:	57 e4       	ldi	r21, 0x47	; 71
    55be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55c2:	18 16       	cp	r1, r24
    55c4:	4c f5       	brge	.+82     	; 0x5618 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c6:	69 8d       	ldd	r22, Y+25	; 0x19
    55c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55ce:	20 e0       	ldi	r18, 0x00	; 0
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	40 e2       	ldi	r20, 0x20	; 32
    55d4:	51 e4       	ldi	r21, 0x41	; 65
    55d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55da:	dc 01       	movw	r26, r24
    55dc:	cb 01       	movw	r24, r22
    55de:	bc 01       	movw	r22, r24
    55e0:	cd 01       	movw	r24, r26
    55e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	9c 8b       	std	Y+20, r25	; 0x14
    55ec:	8b 8b       	std	Y+19, r24	; 0x13
    55ee:	0f c0       	rjmp	.+30     	; 0x560e <LCD_Init+0xce>
    55f0:	88 ec       	ldi	r24, 0xC8	; 200
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	9a 8b       	std	Y+18, r25	; 0x12
    55f6:	89 8b       	std	Y+17, r24	; 0x11
    55f8:	89 89       	ldd	r24, Y+17	; 0x11
    55fa:	9a 89       	ldd	r25, Y+18	; 0x12
    55fc:	01 97       	sbiw	r24, 0x01	; 1
    55fe:	f1 f7       	brne	.-4      	; 0x55fc <LCD_Init+0xbc>
    5600:	9a 8b       	std	Y+18, r25	; 0x12
    5602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5604:	8b 89       	ldd	r24, Y+19	; 0x13
    5606:	9c 89       	ldd	r25, Y+20	; 0x14
    5608:	01 97       	sbiw	r24, 0x01	; 1
    560a:	9c 8b       	std	Y+20, r25	; 0x14
    560c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    560e:	8b 89       	ldd	r24, Y+19	; 0x13
    5610:	9c 89       	ldd	r25, Y+20	; 0x14
    5612:	00 97       	sbiw	r24, 0x00	; 0
    5614:	69 f7       	brne	.-38     	; 0x55f0 <LCD_Init+0xb0>
    5616:	14 c0       	rjmp	.+40     	; 0x5640 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5618:	6d 89       	ldd	r22, Y+21	; 0x15
    561a:	7e 89       	ldd	r23, Y+22	; 0x16
    561c:	8f 89       	ldd	r24, Y+23	; 0x17
    561e:	98 8d       	ldd	r25, Y+24	; 0x18
    5620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5624:	dc 01       	movw	r26, r24
    5626:	cb 01       	movw	r24, r22
    5628:	9c 8b       	std	Y+20, r25	; 0x14
    562a:	8b 8b       	std	Y+19, r24	; 0x13
    562c:	8b 89       	ldd	r24, Y+19	; 0x13
    562e:	9c 89       	ldd	r25, Y+20	; 0x14
    5630:	98 8b       	std	Y+16, r25	; 0x10
    5632:	8f 87       	std	Y+15, r24	; 0x0f
    5634:	8f 85       	ldd	r24, Y+15	; 0x0f
    5636:	98 89       	ldd	r25, Y+16	; 0x10
    5638:	01 97       	sbiw	r24, 0x01	; 1
    563a:	f1 f7       	brne	.-4      	; 0x5638 <LCD_Init+0xf8>
    563c:	98 8b       	std	Y+16, r25	; 0x10
    563e:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(50);
	 /* Send 4Bit mode command */
	 LCD_WriteCommand(_4_BIT_MODE_COMMAND);
    5640:	82 e0       	ldi	r24, 0x02	; 2
    5642:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>

	 /* Set the interface data length , number of lines */
	 LCD_WriteCommand(FUNCTION_SET_MASK);
    5646:	88 e2       	ldi	r24, 0x28	; 40
    5648:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>

	 /* Display ON/OFF Control */
	 LCD_WriteCommand(DISPLAY_ON_OFF_MASK);
    564c:	8c e0       	ldi	r24, 0x0C	; 12
    564e:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>

	 /* Clear the Screen */
	 LCD_WriteCommand(CLEAR_SCREEN);
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	a0 e8       	ldi	r26, 0x80	; 128
    565e:	bf e3       	ldi	r27, 0x3F	; 63
    5660:	8b 87       	std	Y+11, r24	; 0x0b
    5662:	9c 87       	std	Y+12, r25	; 0x0c
    5664:	ad 87       	std	Y+13, r26	; 0x0d
    5666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5668:	6b 85       	ldd	r22, Y+11	; 0x0b
    566a:	7c 85       	ldd	r23, Y+12	; 0x0c
    566c:	8d 85       	ldd	r24, Y+13	; 0x0d
    566e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5670:	20 e0       	ldi	r18, 0x00	; 0
    5672:	30 e0       	ldi	r19, 0x00	; 0
    5674:	4a ef       	ldi	r20, 0xFA	; 250
    5676:	54 e4       	ldi	r21, 0x44	; 68
    5678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    567c:	dc 01       	movw	r26, r24
    567e:	cb 01       	movw	r24, r22
    5680:	8f 83       	std	Y+7, r24	; 0x07
    5682:	98 87       	std	Y+8, r25	; 0x08
    5684:	a9 87       	std	Y+9, r26	; 0x09
    5686:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5688:	6f 81       	ldd	r22, Y+7	; 0x07
    568a:	78 85       	ldd	r23, Y+8	; 0x08
    568c:	89 85       	ldd	r24, Y+9	; 0x09
    568e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5690:	20 e0       	ldi	r18, 0x00	; 0
    5692:	30 e0       	ldi	r19, 0x00	; 0
    5694:	40 e8       	ldi	r20, 0x80	; 128
    5696:	5f e3       	ldi	r21, 0x3F	; 63
    5698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    569c:	88 23       	and	r24, r24
    569e:	2c f4       	brge	.+10     	; 0x56aa <LCD_Init+0x16a>
		__ticks = 1;
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	9e 83       	std	Y+6, r25	; 0x06
    56a6:	8d 83       	std	Y+5, r24	; 0x05
    56a8:	3f c0       	rjmp	.+126    	; 0x5728 <LCD_Init+0x1e8>
	else if (__tmp > 65535)
    56aa:	6f 81       	ldd	r22, Y+7	; 0x07
    56ac:	78 85       	ldd	r23, Y+8	; 0x08
    56ae:	89 85       	ldd	r24, Y+9	; 0x09
    56b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56b2:	20 e0       	ldi	r18, 0x00	; 0
    56b4:	3f ef       	ldi	r19, 0xFF	; 255
    56b6:	4f e7       	ldi	r20, 0x7F	; 127
    56b8:	57 e4       	ldi	r21, 0x47	; 71
    56ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56be:	18 16       	cp	r1, r24
    56c0:	4c f5       	brge	.+82     	; 0x5714 <LCD_Init+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    56c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    56c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    56c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	40 e2       	ldi	r20, 0x20	; 32
    56d0:	51 e4       	ldi	r21, 0x41	; 65
    56d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56d6:	dc 01       	movw	r26, r24
    56d8:	cb 01       	movw	r24, r22
    56da:	bc 01       	movw	r22, r24
    56dc:	cd 01       	movw	r24, r26
    56de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e2:	dc 01       	movw	r26, r24
    56e4:	cb 01       	movw	r24, r22
    56e6:	9e 83       	std	Y+6, r25	; 0x06
    56e8:	8d 83       	std	Y+5, r24	; 0x05
    56ea:	0f c0       	rjmp	.+30     	; 0x570a <LCD_Init+0x1ca>
    56ec:	88 ec       	ldi	r24, 0xC8	; 200
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	9c 83       	std	Y+4, r25	; 0x04
    56f2:	8b 83       	std	Y+3, r24	; 0x03
    56f4:	8b 81       	ldd	r24, Y+3	; 0x03
    56f6:	9c 81       	ldd	r25, Y+4	; 0x04
    56f8:	01 97       	sbiw	r24, 0x01	; 1
    56fa:	f1 f7       	brne	.-4      	; 0x56f8 <LCD_Init+0x1b8>
    56fc:	9c 83       	std	Y+4, r25	; 0x04
    56fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5700:	8d 81       	ldd	r24, Y+5	; 0x05
    5702:	9e 81       	ldd	r25, Y+6	; 0x06
    5704:	01 97       	sbiw	r24, 0x01	; 1
    5706:	9e 83       	std	Y+6, r25	; 0x06
    5708:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    570a:	8d 81       	ldd	r24, Y+5	; 0x05
    570c:	9e 81       	ldd	r25, Y+6	; 0x06
    570e:	00 97       	sbiw	r24, 0x00	; 0
    5710:	69 f7       	brne	.-38     	; 0x56ec <LCD_Init+0x1ac>
    5712:	14 c0       	rjmp	.+40     	; 0x573c <LCD_Init+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5714:	6f 81       	ldd	r22, Y+7	; 0x07
    5716:	78 85       	ldd	r23, Y+8	; 0x08
    5718:	89 85       	ldd	r24, Y+9	; 0x09
    571a:	9a 85       	ldd	r25, Y+10	; 0x0a
    571c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5720:	dc 01       	movw	r26, r24
    5722:	cb 01       	movw	r24, r22
    5724:	9e 83       	std	Y+6, r25	; 0x06
    5726:	8d 83       	std	Y+5, r24	; 0x05
    5728:	8d 81       	ldd	r24, Y+5	; 0x05
    572a:	9e 81       	ldd	r25, Y+6	; 0x06
    572c:	9a 83       	std	Y+2, r25	; 0x02
    572e:	89 83       	std	Y+1, r24	; 0x01
    5730:	89 81       	ldd	r24, Y+1	; 0x01
    5732:	9a 81       	ldd	r25, Y+2	; 0x02
    5734:	01 97       	sbiw	r24, 0x01	; 1
    5736:	f1 f7       	brne	.-4      	; 0x5734 <LCD_Init+0x1f4>
    5738:	9a 83       	std	Y+2, r25	; 0x02
    573a:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);

	 /* Entry Mode Set */
	 LCD_WriteCommand(ENTRY_MODE_SET);
    573c:	86 e0       	ldi	r24, 0x06	; 6
    573e:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>


}
    5742:	6c 96       	adiw	r28, 0x1c	; 28
    5744:	0f b6       	in	r0, 0x3f	; 63
    5746:	f8 94       	cli
    5748:	de bf       	out	0x3e, r29	; 62
    574a:	0f be       	out	0x3f, r0	; 63
    574c:	cd bf       	out	0x3d, r28	; 61
    574e:	cf 91       	pop	r28
    5750:	df 91       	pop	r29
    5752:	08 95       	ret

00005754 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Copy_u8Command)
{
    5754:	df 93       	push	r29
    5756:	cf 93       	push	r28
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
    575c:	e9 97       	sbiw	r28, 0x39	; 57
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	cd bf       	out	0x3d, r28	; 61
    5768:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_LOW); //RS = 0
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	60 e0       	ldi	r22, 0x00	; 0
    576e:	40 e0       	ldi	r20, 0x00	; 0
    5770:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	61 e0       	ldi	r22, 0x01	; 1
    5778:	40 e0       	ldi	r20, 0x00	; 0
    577a:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,4)); //DB4
    577e:	89 ad       	ldd	r24, Y+57	; 0x39
    5780:	82 95       	swap	r24
    5782:	8f 70       	andi	r24, 0x0F	; 15
    5784:	98 2f       	mov	r25, r24
    5786:	91 70       	andi	r25, 0x01	; 1
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	64 e0       	ldi	r22, 0x04	; 4
    578c:	49 2f       	mov	r20, r25
    578e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,5)); //DB5
    5792:	89 ad       	ldd	r24, Y+57	; 0x39
    5794:	82 95       	swap	r24
    5796:	86 95       	lsr	r24
    5798:	87 70       	andi	r24, 0x07	; 7
    579a:	98 2f       	mov	r25, r24
    579c:	91 70       	andi	r25, 0x01	; 1
    579e:	81 e0       	ldi	r24, 0x01	; 1
    57a0:	65 e0       	ldi	r22, 0x05	; 5
    57a2:	49 2f       	mov	r20, r25
    57a4:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,6)); //DB5
    57a8:	89 ad       	ldd	r24, Y+57	; 0x39
    57aa:	82 95       	swap	r24
    57ac:	86 95       	lsr	r24
    57ae:	86 95       	lsr	r24
    57b0:	83 70       	andi	r24, 0x03	; 3
    57b2:	98 2f       	mov	r25, r24
    57b4:	91 70       	andi	r25, 0x01	; 1
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	66 e0       	ldi	r22, 0x06	; 6
    57ba:	49 2f       	mov	r20, r25
    57bc:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,7)); //DB7
    57c0:	89 ad       	ldd	r24, Y+57	; 0x39
    57c2:	98 2f       	mov	r25, r24
    57c4:	99 1f       	adc	r25, r25
    57c6:	99 27       	eor	r25, r25
    57c8:	99 1f       	adc	r25, r25
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	67 e0       	ldi	r22, 0x07	; 7
    57ce:	49 2f       	mov	r20, r25
    57d0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    57d4:	81 e0       	ldi	r24, 0x01	; 1
    57d6:	62 e0       	ldi	r22, 0x02	; 2
    57d8:	41 e0       	ldi	r20, 0x01	; 1
    57da:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    57de:	80 e0       	ldi	r24, 0x00	; 0
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	a0 e8       	ldi	r26, 0x80	; 128
    57e4:	bf e3       	ldi	r27, 0x3F	; 63
    57e6:	8d ab       	std	Y+53, r24	; 0x35
    57e8:	9e ab       	std	Y+54, r25	; 0x36
    57ea:	af ab       	std	Y+55, r26	; 0x37
    57ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ee:	6d a9       	ldd	r22, Y+53	; 0x35
    57f0:	7e a9       	ldd	r23, Y+54	; 0x36
    57f2:	8f a9       	ldd	r24, Y+55	; 0x37
    57f4:	98 ad       	ldd	r25, Y+56	; 0x38
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	30 e0       	ldi	r19, 0x00	; 0
    57fa:	4a ef       	ldi	r20, 0xFA	; 250
    57fc:	54 e4       	ldi	r21, 0x44	; 68
    57fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5802:	dc 01       	movw	r26, r24
    5804:	cb 01       	movw	r24, r22
    5806:	89 ab       	std	Y+49, r24	; 0x31
    5808:	9a ab       	std	Y+50, r25	; 0x32
    580a:	ab ab       	std	Y+51, r26	; 0x33
    580c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    580e:	69 a9       	ldd	r22, Y+49	; 0x31
    5810:	7a a9       	ldd	r23, Y+50	; 0x32
    5812:	8b a9       	ldd	r24, Y+51	; 0x33
    5814:	9c a9       	ldd	r25, Y+52	; 0x34
    5816:	20 e0       	ldi	r18, 0x00	; 0
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	40 e8       	ldi	r20, 0x80	; 128
    581c:	5f e3       	ldi	r21, 0x3F	; 63
    581e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5822:	88 23       	and	r24, r24
    5824:	2c f4       	brge	.+10     	; 0x5830 <LCD_WriteCommand+0xdc>
		__ticks = 1;
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	98 ab       	std	Y+48, r25	; 0x30
    582c:	8f a7       	std	Y+47, r24	; 0x2f
    582e:	3f c0       	rjmp	.+126    	; 0x58ae <LCD_WriteCommand+0x15a>
	else if (__tmp > 65535)
    5830:	69 a9       	ldd	r22, Y+49	; 0x31
    5832:	7a a9       	ldd	r23, Y+50	; 0x32
    5834:	8b a9       	ldd	r24, Y+51	; 0x33
    5836:	9c a9       	ldd	r25, Y+52	; 0x34
    5838:	20 e0       	ldi	r18, 0x00	; 0
    583a:	3f ef       	ldi	r19, 0xFF	; 255
    583c:	4f e7       	ldi	r20, 0x7F	; 127
    583e:	57 e4       	ldi	r21, 0x47	; 71
    5840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5844:	18 16       	cp	r1, r24
    5846:	4c f5       	brge	.+82     	; 0x589a <LCD_WriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5848:	6d a9       	ldd	r22, Y+53	; 0x35
    584a:	7e a9       	ldd	r23, Y+54	; 0x36
    584c:	8f a9       	ldd	r24, Y+55	; 0x37
    584e:	98 ad       	ldd	r25, Y+56	; 0x38
    5850:	20 e0       	ldi	r18, 0x00	; 0
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	40 e2       	ldi	r20, 0x20	; 32
    5856:	51 e4       	ldi	r21, 0x41	; 65
    5858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    585c:	dc 01       	movw	r26, r24
    585e:	cb 01       	movw	r24, r22
    5860:	bc 01       	movw	r22, r24
    5862:	cd 01       	movw	r24, r26
    5864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5868:	dc 01       	movw	r26, r24
    586a:	cb 01       	movw	r24, r22
    586c:	98 ab       	std	Y+48, r25	; 0x30
    586e:	8f a7       	std	Y+47, r24	; 0x2f
    5870:	0f c0       	rjmp	.+30     	; 0x5890 <LCD_WriteCommand+0x13c>
    5872:	88 ec       	ldi	r24, 0xC8	; 200
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	9e a7       	std	Y+46, r25	; 0x2e
    5878:	8d a7       	std	Y+45, r24	; 0x2d
    587a:	8d a5       	ldd	r24, Y+45	; 0x2d
    587c:	9e a5       	ldd	r25, Y+46	; 0x2e
    587e:	01 97       	sbiw	r24, 0x01	; 1
    5880:	f1 f7       	brne	.-4      	; 0x587e <LCD_WriteCommand+0x12a>
    5882:	9e a7       	std	Y+46, r25	; 0x2e
    5884:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5886:	8f a5       	ldd	r24, Y+47	; 0x2f
    5888:	98 a9       	ldd	r25, Y+48	; 0x30
    588a:	01 97       	sbiw	r24, 0x01	; 1
    588c:	98 ab       	std	Y+48, r25	; 0x30
    588e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5890:	8f a5       	ldd	r24, Y+47	; 0x2f
    5892:	98 a9       	ldd	r25, Y+48	; 0x30
    5894:	00 97       	sbiw	r24, 0x00	; 0
    5896:	69 f7       	brne	.-38     	; 0x5872 <LCD_WriteCommand+0x11e>
    5898:	14 c0       	rjmp	.+40     	; 0x58c2 <LCD_WriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    589a:	69 a9       	ldd	r22, Y+49	; 0x31
    589c:	7a a9       	ldd	r23, Y+50	; 0x32
    589e:	8b a9       	ldd	r24, Y+51	; 0x33
    58a0:	9c a9       	ldd	r25, Y+52	; 0x34
    58a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	98 ab       	std	Y+48, r25	; 0x30
    58ac:	8f a7       	std	Y+47, r24	; 0x2f
    58ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    58b0:	98 a9       	ldd	r25, Y+48	; 0x30
    58b2:	9c a7       	std	Y+44, r25	; 0x2c
    58b4:	8b a7       	std	Y+43, r24	; 0x2b
    58b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    58b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    58ba:	01 97       	sbiw	r24, 0x01	; 1
    58bc:	f1 f7       	brne	.-4      	; 0x58ba <LCD_WriteCommand+0x166>
    58be:	9c a7       	std	Y+44, r25	; 0x2c
    58c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	62 e0       	ldi	r22, 0x02	; 2
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	a0 e8       	ldi	r26, 0x80	; 128
    58d2:	bf e3       	ldi	r27, 0x3F	; 63
    58d4:	8f a3       	std	Y+39, r24	; 0x27
    58d6:	98 a7       	std	Y+40, r25	; 0x28
    58d8:	a9 a7       	std	Y+41, r26	; 0x29
    58da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58dc:	6f a1       	ldd	r22, Y+39	; 0x27
    58de:	78 a5       	ldd	r23, Y+40	; 0x28
    58e0:	89 a5       	ldd	r24, Y+41	; 0x29
    58e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	4a ef       	ldi	r20, 0xFA	; 250
    58ea:	54 e4       	ldi	r21, 0x44	; 68
    58ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58f0:	dc 01       	movw	r26, r24
    58f2:	cb 01       	movw	r24, r22
    58f4:	8b a3       	std	Y+35, r24	; 0x23
    58f6:	9c a3       	std	Y+36, r25	; 0x24
    58f8:	ad a3       	std	Y+37, r26	; 0x25
    58fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    58fc:	6b a1       	ldd	r22, Y+35	; 0x23
    58fe:	7c a1       	ldd	r23, Y+36	; 0x24
    5900:	8d a1       	ldd	r24, Y+37	; 0x25
    5902:	9e a1       	ldd	r25, Y+38	; 0x26
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	40 e8       	ldi	r20, 0x80	; 128
    590a:	5f e3       	ldi	r21, 0x3F	; 63
    590c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5910:	88 23       	and	r24, r24
    5912:	2c f4       	brge	.+10     	; 0x591e <LCD_WriteCommand+0x1ca>
		__ticks = 1;
    5914:	81 e0       	ldi	r24, 0x01	; 1
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	9a a3       	std	Y+34, r25	; 0x22
    591a:	89 a3       	std	Y+33, r24	; 0x21
    591c:	3f c0       	rjmp	.+126    	; 0x599c <LCD_WriteCommand+0x248>
	else if (__tmp > 65535)
    591e:	6b a1       	ldd	r22, Y+35	; 0x23
    5920:	7c a1       	ldd	r23, Y+36	; 0x24
    5922:	8d a1       	ldd	r24, Y+37	; 0x25
    5924:	9e a1       	ldd	r25, Y+38	; 0x26
    5926:	20 e0       	ldi	r18, 0x00	; 0
    5928:	3f ef       	ldi	r19, 0xFF	; 255
    592a:	4f e7       	ldi	r20, 0x7F	; 127
    592c:	57 e4       	ldi	r21, 0x47	; 71
    592e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5932:	18 16       	cp	r1, r24
    5934:	4c f5       	brge	.+82     	; 0x5988 <LCD_WriteCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5936:	6f a1       	ldd	r22, Y+39	; 0x27
    5938:	78 a5       	ldd	r23, Y+40	; 0x28
    593a:	89 a5       	ldd	r24, Y+41	; 0x29
    593c:	9a a5       	ldd	r25, Y+42	; 0x2a
    593e:	20 e0       	ldi	r18, 0x00	; 0
    5940:	30 e0       	ldi	r19, 0x00	; 0
    5942:	40 e2       	ldi	r20, 0x20	; 32
    5944:	51 e4       	ldi	r21, 0x41	; 65
    5946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    594a:	dc 01       	movw	r26, r24
    594c:	cb 01       	movw	r24, r22
    594e:	bc 01       	movw	r22, r24
    5950:	cd 01       	movw	r24, r26
    5952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5956:	dc 01       	movw	r26, r24
    5958:	cb 01       	movw	r24, r22
    595a:	9a a3       	std	Y+34, r25	; 0x22
    595c:	89 a3       	std	Y+33, r24	; 0x21
    595e:	0f c0       	rjmp	.+30     	; 0x597e <LCD_WriteCommand+0x22a>
    5960:	88 ec       	ldi	r24, 0xC8	; 200
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	98 a3       	std	Y+32, r25	; 0x20
    5966:	8f 8f       	std	Y+31, r24	; 0x1f
    5968:	8f 8d       	ldd	r24, Y+31	; 0x1f
    596a:	98 a1       	ldd	r25, Y+32	; 0x20
    596c:	01 97       	sbiw	r24, 0x01	; 1
    596e:	f1 f7       	brne	.-4      	; 0x596c <LCD_WriteCommand+0x218>
    5970:	98 a3       	std	Y+32, r25	; 0x20
    5972:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5974:	89 a1       	ldd	r24, Y+33	; 0x21
    5976:	9a a1       	ldd	r25, Y+34	; 0x22
    5978:	01 97       	sbiw	r24, 0x01	; 1
    597a:	9a a3       	std	Y+34, r25	; 0x22
    597c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    597e:	89 a1       	ldd	r24, Y+33	; 0x21
    5980:	9a a1       	ldd	r25, Y+34	; 0x22
    5982:	00 97       	sbiw	r24, 0x00	; 0
    5984:	69 f7       	brne	.-38     	; 0x5960 <LCD_WriteCommand+0x20c>
    5986:	14 c0       	rjmp	.+40     	; 0x59b0 <LCD_WriteCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5988:	6b a1       	ldd	r22, Y+35	; 0x23
    598a:	7c a1       	ldd	r23, Y+36	; 0x24
    598c:	8d a1       	ldd	r24, Y+37	; 0x25
    598e:	9e a1       	ldd	r25, Y+38	; 0x26
    5990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5994:	dc 01       	movw	r26, r24
    5996:	cb 01       	movw	r24, r22
    5998:	9a a3       	std	Y+34, r25	; 0x22
    599a:	89 a3       	std	Y+33, r24	; 0x21
    599c:	89 a1       	ldd	r24, Y+33	; 0x21
    599e:	9a a1       	ldd	r25, Y+34	; 0x22
    59a0:	9e 8f       	std	Y+30, r25	; 0x1e
    59a2:	8d 8f       	std	Y+29, r24	; 0x1d
    59a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59a8:	01 97       	sbiw	r24, 0x01	; 1
    59aa:	f1 f7       	brne	.-4      	; 0x59a8 <LCD_WriteCommand+0x254>
    59ac:	9e 8f       	std	Y+30, r25	; 0x1e
    59ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

		  /* Second Half */
	  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,0)); //DB4
    59b0:	89 ad       	ldd	r24, Y+57	; 0x39
    59b2:	98 2f       	mov	r25, r24
    59b4:	91 70       	andi	r25, 0x01	; 1
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	64 e0       	ldi	r22, 0x04	; 4
    59ba:	49 2f       	mov	r20, r25
    59bc:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,1)); //DB5
    59c0:	89 ad       	ldd	r24, Y+57	; 0x39
    59c2:	86 95       	lsr	r24
    59c4:	98 2f       	mov	r25, r24
    59c6:	91 70       	andi	r25, 0x01	; 1
    59c8:	81 e0       	ldi	r24, 0x01	; 1
    59ca:	65 e0       	ldi	r22, 0x05	; 5
    59cc:	49 2f       	mov	r20, r25
    59ce:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,2)); //DB6
    59d2:	89 ad       	ldd	r24, Y+57	; 0x39
    59d4:	86 95       	lsr	r24
    59d6:	86 95       	lsr	r24
    59d8:	98 2f       	mov	r25, r24
    59da:	91 70       	andi	r25, 0x01	; 1
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	66 e0       	ldi	r22, 0x06	; 6
    59e0:	49 2f       	mov	r20, r25
    59e2:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,3)); //DB7
    59e6:	89 ad       	ldd	r24, Y+57	; 0x39
    59e8:	86 95       	lsr	r24
    59ea:	86 95       	lsr	r24
    59ec:	86 95       	lsr	r24
    59ee:	98 2f       	mov	r25, r24
    59f0:	91 70       	andi	r25, 0x01	; 1
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	67 e0       	ldi	r22, 0x07	; 7
    59f6:	49 2f       	mov	r20, r25
    59f8:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	62 e0       	ldi	r22, 0x02	; 2
    5a00:	41 e0       	ldi	r20, 0x01	; 1
    5a02:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    5a06:	80 e0       	ldi	r24, 0x00	; 0
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	a0 e8       	ldi	r26, 0x80	; 128
    5a0c:	bf e3       	ldi	r27, 0x3F	; 63
    5a0e:	89 8f       	std	Y+25, r24	; 0x19
    5a10:	9a 8f       	std	Y+26, r25	; 0x1a
    5a12:	ab 8f       	std	Y+27, r26	; 0x1b
    5a14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a16:	69 8d       	ldd	r22, Y+25	; 0x19
    5a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a1e:	20 e0       	ldi	r18, 0x00	; 0
    5a20:	30 e0       	ldi	r19, 0x00	; 0
    5a22:	4a ef       	ldi	r20, 0xFA	; 250
    5a24:	54 e4       	ldi	r21, 0x44	; 68
    5a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a2a:	dc 01       	movw	r26, r24
    5a2c:	cb 01       	movw	r24, r22
    5a2e:	8d 8b       	std	Y+21, r24	; 0x15
    5a30:	9e 8b       	std	Y+22, r25	; 0x16
    5a32:	af 8b       	std	Y+23, r26	; 0x17
    5a34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a36:	6d 89       	ldd	r22, Y+21	; 0x15
    5a38:	7e 89       	ldd	r23, Y+22	; 0x16
    5a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a3e:	20 e0       	ldi	r18, 0x00	; 0
    5a40:	30 e0       	ldi	r19, 0x00	; 0
    5a42:	40 e8       	ldi	r20, 0x80	; 128
    5a44:	5f e3       	ldi	r21, 0x3F	; 63
    5a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a4a:	88 23       	and	r24, r24
    5a4c:	2c f4       	brge	.+10     	; 0x5a58 <LCD_WriteCommand+0x304>
		__ticks = 1;
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	9c 8b       	std	Y+20, r25	; 0x14
    5a54:	8b 8b       	std	Y+19, r24	; 0x13
    5a56:	3f c0       	rjmp	.+126    	; 0x5ad6 <LCD_WriteCommand+0x382>
	else if (__tmp > 65535)
    5a58:	6d 89       	ldd	r22, Y+21	; 0x15
    5a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a60:	20 e0       	ldi	r18, 0x00	; 0
    5a62:	3f ef       	ldi	r19, 0xFF	; 255
    5a64:	4f e7       	ldi	r20, 0x7F	; 127
    5a66:	57 e4       	ldi	r21, 0x47	; 71
    5a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a6c:	18 16       	cp	r1, r24
    5a6e:	4c f5       	brge	.+82     	; 0x5ac2 <LCD_WriteCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a70:	69 8d       	ldd	r22, Y+25	; 0x19
    5a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	40 e2       	ldi	r20, 0x20	; 32
    5a7e:	51 e4       	ldi	r21, 0x41	; 65
    5a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	bc 01       	movw	r22, r24
    5a8a:	cd 01       	movw	r24, r26
    5a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	9c 8b       	std	Y+20, r25	; 0x14
    5a96:	8b 8b       	std	Y+19, r24	; 0x13
    5a98:	0f c0       	rjmp	.+30     	; 0x5ab8 <LCD_WriteCommand+0x364>
    5a9a:	88 ec       	ldi	r24, 0xC8	; 200
    5a9c:	90 e0       	ldi	r25, 0x00	; 0
    5a9e:	9a 8b       	std	Y+18, r25	; 0x12
    5aa0:	89 8b       	std	Y+17, r24	; 0x11
    5aa2:	89 89       	ldd	r24, Y+17	; 0x11
    5aa4:	9a 89       	ldd	r25, Y+18	; 0x12
    5aa6:	01 97       	sbiw	r24, 0x01	; 1
    5aa8:	f1 f7       	brne	.-4      	; 0x5aa6 <LCD_WriteCommand+0x352>
    5aaa:	9a 8b       	std	Y+18, r25	; 0x12
    5aac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aae:	8b 89       	ldd	r24, Y+19	; 0x13
    5ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    5ab2:	01 97       	sbiw	r24, 0x01	; 1
    5ab4:	9c 8b       	std	Y+20, r25	; 0x14
    5ab6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    5aba:	9c 89       	ldd	r25, Y+20	; 0x14
    5abc:	00 97       	sbiw	r24, 0x00	; 0
    5abe:	69 f7       	brne	.-38     	; 0x5a9a <LCD_WriteCommand+0x346>
    5ac0:	14 c0       	rjmp	.+40     	; 0x5aea <LCD_WriteCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    5aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	9c 8b       	std	Y+20, r25	; 0x14
    5ad4:	8b 8b       	std	Y+19, r24	; 0x13
    5ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    5ada:	98 8b       	std	Y+16, r25	; 0x10
    5adc:	8f 87       	std	Y+15, r24	; 0x0f
    5ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ae0:	98 89       	ldd	r25, Y+16	; 0x10
    5ae2:	01 97       	sbiw	r24, 0x01	; 1
    5ae4:	f1 f7       	brne	.-4      	; 0x5ae2 <LCD_WriteCommand+0x38e>
    5ae6:	98 8b       	std	Y+16, r25	; 0x10
    5ae8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	62 e0       	ldi	r22, 0x02	; 2
    5aee:	40 e0       	ldi	r20, 0x00	; 0
    5af0:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    5af4:	80 e0       	ldi	r24, 0x00	; 0
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	a0 e8       	ldi	r26, 0x80	; 128
    5afa:	bf e3       	ldi	r27, 0x3F	; 63
    5afc:	8b 87       	std	Y+11, r24	; 0x0b
    5afe:	9c 87       	std	Y+12, r25	; 0x0c
    5b00:	ad 87       	std	Y+13, r26	; 0x0d
    5b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	4a ef       	ldi	r20, 0xFA	; 250
    5b12:	54 e4       	ldi	r21, 0x44	; 68
    5b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	8f 83       	std	Y+7, r24	; 0x07
    5b1e:	98 87       	std	Y+8, r25	; 0x08
    5b20:	a9 87       	std	Y+9, r26	; 0x09
    5b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b24:	6f 81       	ldd	r22, Y+7	; 0x07
    5b26:	78 85       	ldd	r23, Y+8	; 0x08
    5b28:	89 85       	ldd	r24, Y+9	; 0x09
    5b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b2c:	20 e0       	ldi	r18, 0x00	; 0
    5b2e:	30 e0       	ldi	r19, 0x00	; 0
    5b30:	40 e8       	ldi	r20, 0x80	; 128
    5b32:	5f e3       	ldi	r21, 0x3F	; 63
    5b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b38:	88 23       	and	r24, r24
    5b3a:	2c f4       	brge	.+10     	; 0x5b46 <LCD_WriteCommand+0x3f2>
		__ticks = 1;
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	9e 83       	std	Y+6, r25	; 0x06
    5b42:	8d 83       	std	Y+5, r24	; 0x05
    5b44:	3f c0       	rjmp	.+126    	; 0x5bc4 <LCD_WriteCommand+0x470>
	else if (__tmp > 65535)
    5b46:	6f 81       	ldd	r22, Y+7	; 0x07
    5b48:	78 85       	ldd	r23, Y+8	; 0x08
    5b4a:	89 85       	ldd	r24, Y+9	; 0x09
    5b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b4e:	20 e0       	ldi	r18, 0x00	; 0
    5b50:	3f ef       	ldi	r19, 0xFF	; 255
    5b52:	4f e7       	ldi	r20, 0x7F	; 127
    5b54:	57 e4       	ldi	r21, 0x47	; 71
    5b56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b5a:	18 16       	cp	r1, r24
    5b5c:	4c f5       	brge	.+82     	; 0x5bb0 <LCD_WriteCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b66:	20 e0       	ldi	r18, 0x00	; 0
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	40 e2       	ldi	r20, 0x20	; 32
    5b6c:	51 e4       	ldi	r21, 0x41	; 65
    5b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b72:	dc 01       	movw	r26, r24
    5b74:	cb 01       	movw	r24, r22
    5b76:	bc 01       	movw	r22, r24
    5b78:	cd 01       	movw	r24, r26
    5b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b7e:	dc 01       	movw	r26, r24
    5b80:	cb 01       	movw	r24, r22
    5b82:	9e 83       	std	Y+6, r25	; 0x06
    5b84:	8d 83       	std	Y+5, r24	; 0x05
    5b86:	0f c0       	rjmp	.+30     	; 0x5ba6 <LCD_WriteCommand+0x452>
    5b88:	88 ec       	ldi	r24, 0xC8	; 200
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	9c 83       	std	Y+4, r25	; 0x04
    5b8e:	8b 83       	std	Y+3, r24	; 0x03
    5b90:	8b 81       	ldd	r24, Y+3	; 0x03
    5b92:	9c 81       	ldd	r25, Y+4	; 0x04
    5b94:	01 97       	sbiw	r24, 0x01	; 1
    5b96:	f1 f7       	brne	.-4      	; 0x5b94 <LCD_WriteCommand+0x440>
    5b98:	9c 83       	std	Y+4, r25	; 0x04
    5b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba0:	01 97       	sbiw	r24, 0x01	; 1
    5ba2:	9e 83       	std	Y+6, r25	; 0x06
    5ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    5baa:	00 97       	sbiw	r24, 0x00	; 0
    5bac:	69 f7       	brne	.-38     	; 0x5b88 <LCD_WriteCommand+0x434>
    5bae:	14 c0       	rjmp	.+40     	; 0x5bd8 <LCD_WriteCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    5bb2:	78 85       	ldd	r23, Y+8	; 0x08
    5bb4:	89 85       	ldd	r24, Y+9	; 0x09
    5bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	cb 01       	movw	r24, r22
    5bc0:	9e 83       	std	Y+6, r25	; 0x06
    5bc2:	8d 83       	std	Y+5, r24	; 0x05
    5bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc8:	9a 83       	std	Y+2, r25	; 0x02
    5bca:	89 83       	std	Y+1, r24	; 0x01
    5bcc:	89 81       	ldd	r24, Y+1	; 0x01
    5bce:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd0:	01 97       	sbiw	r24, 0x01	; 1
    5bd2:	f1 f7       	brne	.-4      	; 0x5bd0 <LCD_WriteCommand+0x47c>
    5bd4:	9a 83       	std	Y+2, r25	; 0x02
    5bd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    5bd8:	e9 96       	adiw	r28, 0x39	; 57
    5bda:	0f b6       	in	r0, 0x3f	; 63
    5bdc:	f8 94       	cli
    5bde:	de bf       	out	0x3e, r29	; 62
    5be0:	0f be       	out	0x3f, r0	; 63
    5be2:	cd bf       	out	0x3d, r28	; 61
    5be4:	cf 91       	pop	r28
    5be6:	df 91       	pop	r29
    5be8:	08 95       	ret

00005bea <LCD_WriteData>:
void LCD_WriteData(u8 Copy_u8Data)
{
    5bea:	df 93       	push	r29
    5bec:	cf 93       	push	r28
    5bee:	cd b7       	in	r28, 0x3d	; 61
    5bf0:	de b7       	in	r29, 0x3e	; 62
    5bf2:	e9 97       	sbiw	r28, 0x39	; 57
    5bf4:	0f b6       	in	r0, 0x3f	; 63
    5bf6:	f8 94       	cli
    5bf8:	de bf       	out	0x3e, r29	; 62
    5bfa:	0f be       	out	0x3f, r0	; 63
    5bfc:	cd bf       	out	0x3d, r28	; 61
    5bfe:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_HIGH); //RS = 1
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	60 e0       	ldi	r22, 0x00	; 0
    5c04:	41 e0       	ldi	r20, 0x01	; 1
    5c06:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	61 e0       	ldi	r22, 0x01	; 1
    5c0e:	40 e0       	ldi	r20, 0x00	; 0
    5c10:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,4)); //DB4
    5c14:	89 ad       	ldd	r24, Y+57	; 0x39
    5c16:	82 95       	swap	r24
    5c18:	8f 70       	andi	r24, 0x0F	; 15
    5c1a:	98 2f       	mov	r25, r24
    5c1c:	91 70       	andi	r25, 0x01	; 1
    5c1e:	81 e0       	ldi	r24, 0x01	; 1
    5c20:	64 e0       	ldi	r22, 0x04	; 4
    5c22:	49 2f       	mov	r20, r25
    5c24:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,5)); //DB4
    5c28:	89 ad       	ldd	r24, Y+57	; 0x39
    5c2a:	82 95       	swap	r24
    5c2c:	86 95       	lsr	r24
    5c2e:	87 70       	andi	r24, 0x07	; 7
    5c30:	98 2f       	mov	r25, r24
    5c32:	91 70       	andi	r25, 0x01	; 1
    5c34:	81 e0       	ldi	r24, 0x01	; 1
    5c36:	65 e0       	ldi	r22, 0x05	; 5
    5c38:	49 2f       	mov	r20, r25
    5c3a:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,6)); //DB4
    5c3e:	89 ad       	ldd	r24, Y+57	; 0x39
    5c40:	82 95       	swap	r24
    5c42:	86 95       	lsr	r24
    5c44:	86 95       	lsr	r24
    5c46:	83 70       	andi	r24, 0x03	; 3
    5c48:	98 2f       	mov	r25, r24
    5c4a:	91 70       	andi	r25, 0x01	; 1
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	66 e0       	ldi	r22, 0x06	; 6
    5c50:	49 2f       	mov	r20, r25
    5c52:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,7)); //DB4
    5c56:	89 ad       	ldd	r24, Y+57	; 0x39
    5c58:	98 2f       	mov	r25, r24
    5c5a:	99 1f       	adc	r25, r25
    5c5c:	99 27       	eor	r25, r25
    5c5e:	99 1f       	adc	r25, r25
    5c60:	81 e0       	ldi	r24, 0x01	; 1
    5c62:	67 e0       	ldi	r22, 0x07	; 7
    5c64:	49 2f       	mov	r20, r25
    5c66:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	62 e0       	ldi	r22, 0x02	; 2
    5c6e:	41 e0       	ldi	r20, 0x01	; 1
    5c70:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    5c74:	80 e0       	ldi	r24, 0x00	; 0
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	a0 e8       	ldi	r26, 0x80	; 128
    5c7a:	bf e3       	ldi	r27, 0x3F	; 63
    5c7c:	8d ab       	std	Y+53, r24	; 0x35
    5c7e:	9e ab       	std	Y+54, r25	; 0x36
    5c80:	af ab       	std	Y+55, r26	; 0x37
    5c82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c84:	6d a9       	ldd	r22, Y+53	; 0x35
    5c86:	7e a9       	ldd	r23, Y+54	; 0x36
    5c88:	8f a9       	ldd	r24, Y+55	; 0x37
    5c8a:	98 ad       	ldd	r25, Y+56	; 0x38
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	30 e0       	ldi	r19, 0x00	; 0
    5c90:	4a ef       	ldi	r20, 0xFA	; 250
    5c92:	54 e4       	ldi	r21, 0x44	; 68
    5c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c98:	dc 01       	movw	r26, r24
    5c9a:	cb 01       	movw	r24, r22
    5c9c:	89 ab       	std	Y+49, r24	; 0x31
    5c9e:	9a ab       	std	Y+50, r25	; 0x32
    5ca0:	ab ab       	std	Y+51, r26	; 0x33
    5ca2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    5ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    5ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    5caa:	9c a9       	ldd	r25, Y+52	; 0x34
    5cac:	20 e0       	ldi	r18, 0x00	; 0
    5cae:	30 e0       	ldi	r19, 0x00	; 0
    5cb0:	40 e8       	ldi	r20, 0x80	; 128
    5cb2:	5f e3       	ldi	r21, 0x3F	; 63
    5cb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cb8:	88 23       	and	r24, r24
    5cba:	2c f4       	brge	.+10     	; 0x5cc6 <LCD_WriteData+0xdc>
		__ticks = 1;
    5cbc:	81 e0       	ldi	r24, 0x01	; 1
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	98 ab       	std	Y+48, r25	; 0x30
    5cc2:	8f a7       	std	Y+47, r24	; 0x2f
    5cc4:	3f c0       	rjmp	.+126    	; 0x5d44 <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    5cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    5cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    5cca:	8b a9       	ldd	r24, Y+51	; 0x33
    5ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	3f ef       	ldi	r19, 0xFF	; 255
    5cd2:	4f e7       	ldi	r20, 0x7F	; 127
    5cd4:	57 e4       	ldi	r21, 0x47	; 71
    5cd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cda:	18 16       	cp	r1, r24
    5cdc:	4c f5       	brge	.+82     	; 0x5d30 <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cde:	6d a9       	ldd	r22, Y+53	; 0x35
    5ce0:	7e a9       	ldd	r23, Y+54	; 0x36
    5ce2:	8f a9       	ldd	r24, Y+55	; 0x37
    5ce4:	98 ad       	ldd	r25, Y+56	; 0x38
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	30 e0       	ldi	r19, 0x00	; 0
    5cea:	40 e2       	ldi	r20, 0x20	; 32
    5cec:	51 e4       	ldi	r21, 0x41	; 65
    5cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf2:	dc 01       	movw	r26, r24
    5cf4:	cb 01       	movw	r24, r22
    5cf6:	bc 01       	movw	r22, r24
    5cf8:	cd 01       	movw	r24, r26
    5cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cfe:	dc 01       	movw	r26, r24
    5d00:	cb 01       	movw	r24, r22
    5d02:	98 ab       	std	Y+48, r25	; 0x30
    5d04:	8f a7       	std	Y+47, r24	; 0x2f
    5d06:	0f c0       	rjmp	.+30     	; 0x5d26 <LCD_WriteData+0x13c>
    5d08:	88 ec       	ldi	r24, 0xC8	; 200
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	9e a7       	std	Y+46, r25	; 0x2e
    5d0e:	8d a7       	std	Y+45, r24	; 0x2d
    5d10:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d12:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d14:	01 97       	sbiw	r24, 0x01	; 1
    5d16:	f1 f7       	brne	.-4      	; 0x5d14 <LCD_WriteData+0x12a>
    5d18:	9e a7       	std	Y+46, r25	; 0x2e
    5d1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    5d20:	01 97       	sbiw	r24, 0x01	; 1
    5d22:	98 ab       	std	Y+48, r25	; 0x30
    5d24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d28:	98 a9       	ldd	r25, Y+48	; 0x30
    5d2a:	00 97       	sbiw	r24, 0x00	; 0
    5d2c:	69 f7       	brne	.-38     	; 0x5d08 <LCD_WriteData+0x11e>
    5d2e:	14 c0       	rjmp	.+40     	; 0x5d58 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d30:	69 a9       	ldd	r22, Y+49	; 0x31
    5d32:	7a a9       	ldd	r23, Y+50	; 0x32
    5d34:	8b a9       	ldd	r24, Y+51	; 0x33
    5d36:	9c a9       	ldd	r25, Y+52	; 0x34
    5d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d3c:	dc 01       	movw	r26, r24
    5d3e:	cb 01       	movw	r24, r22
    5d40:	98 ab       	std	Y+48, r25	; 0x30
    5d42:	8f a7       	std	Y+47, r24	; 0x2f
    5d44:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d46:	98 a9       	ldd	r25, Y+48	; 0x30
    5d48:	9c a7       	std	Y+44, r25	; 0x2c
    5d4a:	8b a7       	std	Y+43, r24	; 0x2b
    5d4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d50:	01 97       	sbiw	r24, 0x01	; 1
    5d52:	f1 f7       	brne	.-4      	; 0x5d50 <LCD_WriteData+0x166>
    5d54:	9c a7       	std	Y+44, r25	; 0x2c
    5d56:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    5d58:	81 e0       	ldi	r24, 0x01	; 1
    5d5a:	62 e0       	ldi	r22, 0x02	; 2
    5d5c:	40 e0       	ldi	r20, 0x00	; 0
    5d5e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    5d62:	80 e0       	ldi	r24, 0x00	; 0
    5d64:	90 e0       	ldi	r25, 0x00	; 0
    5d66:	a0 e8       	ldi	r26, 0x80	; 128
    5d68:	bf e3       	ldi	r27, 0x3F	; 63
    5d6a:	8f a3       	std	Y+39, r24	; 0x27
    5d6c:	98 a7       	std	Y+40, r25	; 0x28
    5d6e:	a9 a7       	std	Y+41, r26	; 0x29
    5d70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d72:	6f a1       	ldd	r22, Y+39	; 0x27
    5d74:	78 a5       	ldd	r23, Y+40	; 0x28
    5d76:	89 a5       	ldd	r24, Y+41	; 0x29
    5d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d7a:	20 e0       	ldi	r18, 0x00	; 0
    5d7c:	30 e0       	ldi	r19, 0x00	; 0
    5d7e:	4a ef       	ldi	r20, 0xFA	; 250
    5d80:	54 e4       	ldi	r21, 0x44	; 68
    5d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d86:	dc 01       	movw	r26, r24
    5d88:	cb 01       	movw	r24, r22
    5d8a:	8b a3       	std	Y+35, r24	; 0x23
    5d8c:	9c a3       	std	Y+36, r25	; 0x24
    5d8e:	ad a3       	std	Y+37, r26	; 0x25
    5d90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5d92:	6b a1       	ldd	r22, Y+35	; 0x23
    5d94:	7c a1       	ldd	r23, Y+36	; 0x24
    5d96:	8d a1       	ldd	r24, Y+37	; 0x25
    5d98:	9e a1       	ldd	r25, Y+38	; 0x26
    5d9a:	20 e0       	ldi	r18, 0x00	; 0
    5d9c:	30 e0       	ldi	r19, 0x00	; 0
    5d9e:	40 e8       	ldi	r20, 0x80	; 128
    5da0:	5f e3       	ldi	r21, 0x3F	; 63
    5da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5da6:	88 23       	and	r24, r24
    5da8:	2c f4       	brge	.+10     	; 0x5db4 <LCD_WriteData+0x1ca>
		__ticks = 1;
    5daa:	81 e0       	ldi	r24, 0x01	; 1
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	9a a3       	std	Y+34, r25	; 0x22
    5db0:	89 a3       	std	Y+33, r24	; 0x21
    5db2:	3f c0       	rjmp	.+126    	; 0x5e32 <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    5db4:	6b a1       	ldd	r22, Y+35	; 0x23
    5db6:	7c a1       	ldd	r23, Y+36	; 0x24
    5db8:	8d a1       	ldd	r24, Y+37	; 0x25
    5dba:	9e a1       	ldd	r25, Y+38	; 0x26
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	3f ef       	ldi	r19, 0xFF	; 255
    5dc0:	4f e7       	ldi	r20, 0x7F	; 127
    5dc2:	57 e4       	ldi	r21, 0x47	; 71
    5dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5dc8:	18 16       	cp	r1, r24
    5dca:	4c f5       	brge	.+82     	; 0x5e1e <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    5dce:	78 a5       	ldd	r23, Y+40	; 0x28
    5dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    5dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5dd4:	20 e0       	ldi	r18, 0x00	; 0
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	40 e2       	ldi	r20, 0x20	; 32
    5dda:	51 e4       	ldi	r21, 0x41	; 65
    5ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5de0:	dc 01       	movw	r26, r24
    5de2:	cb 01       	movw	r24, r22
    5de4:	bc 01       	movw	r22, r24
    5de6:	cd 01       	movw	r24, r26
    5de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dec:	dc 01       	movw	r26, r24
    5dee:	cb 01       	movw	r24, r22
    5df0:	9a a3       	std	Y+34, r25	; 0x22
    5df2:	89 a3       	std	Y+33, r24	; 0x21
    5df4:	0f c0       	rjmp	.+30     	; 0x5e14 <LCD_WriteData+0x22a>
    5df6:	88 ec       	ldi	r24, 0xC8	; 200
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	98 a3       	std	Y+32, r25	; 0x20
    5dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    5dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e00:	98 a1       	ldd	r25, Y+32	; 0x20
    5e02:	01 97       	sbiw	r24, 0x01	; 1
    5e04:	f1 f7       	brne	.-4      	; 0x5e02 <LCD_WriteData+0x218>
    5e06:	98 a3       	std	Y+32, r25	; 0x20
    5e08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    5e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    5e0e:	01 97       	sbiw	r24, 0x01	; 1
    5e10:	9a a3       	std	Y+34, r25	; 0x22
    5e12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e14:	89 a1       	ldd	r24, Y+33	; 0x21
    5e16:	9a a1       	ldd	r25, Y+34	; 0x22
    5e18:	00 97       	sbiw	r24, 0x00	; 0
    5e1a:	69 f7       	brne	.-38     	; 0x5df6 <LCD_WriteData+0x20c>
    5e1c:	14 c0       	rjmp	.+40     	; 0x5e46 <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    5e20:	7c a1       	ldd	r23, Y+36	; 0x24
    5e22:	8d a1       	ldd	r24, Y+37	; 0x25
    5e24:	9e a1       	ldd	r25, Y+38	; 0x26
    5e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e2a:	dc 01       	movw	r26, r24
    5e2c:	cb 01       	movw	r24, r22
    5e2e:	9a a3       	std	Y+34, r25	; 0x22
    5e30:	89 a3       	std	Y+33, r24	; 0x21
    5e32:	89 a1       	ldd	r24, Y+33	; 0x21
    5e34:	9a a1       	ldd	r25, Y+34	; 0x22
    5e36:	9e 8f       	std	Y+30, r25	; 0x1e
    5e38:	8d 8f       	std	Y+29, r24	; 0x1d
    5e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e3e:	01 97       	sbiw	r24, 0x01	; 1
    5e40:	f1 f7       	brne	.-4      	; 0x5e3e <LCD_WriteData+0x254>
    5e42:	9e 8f       	std	Y+30, r25	; 0x1e
    5e44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
		  /* Second Half */
		  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,0)); //DB4
    5e46:	89 ad       	ldd	r24, Y+57	; 0x39
    5e48:	98 2f       	mov	r25, r24
    5e4a:	91 70       	andi	r25, 0x01	; 1
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	64 e0       	ldi	r22, 0x04	; 4
    5e50:	49 2f       	mov	r20, r25
    5e52:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,1)); //DB4
    5e56:	89 ad       	ldd	r24, Y+57	; 0x39
    5e58:	86 95       	lsr	r24
    5e5a:	98 2f       	mov	r25, r24
    5e5c:	91 70       	andi	r25, 0x01	; 1
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	65 e0       	ldi	r22, 0x05	; 5
    5e62:	49 2f       	mov	r20, r25
    5e64:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,2)); //DB4
    5e68:	89 ad       	ldd	r24, Y+57	; 0x39
    5e6a:	86 95       	lsr	r24
    5e6c:	86 95       	lsr	r24
    5e6e:	98 2f       	mov	r25, r24
    5e70:	91 70       	andi	r25, 0x01	; 1
    5e72:	81 e0       	ldi	r24, 0x01	; 1
    5e74:	66 e0       	ldi	r22, 0x06	; 6
    5e76:	49 2f       	mov	r20, r25
    5e78:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,3)); //DB4
    5e7c:	89 ad       	ldd	r24, Y+57	; 0x39
    5e7e:	86 95       	lsr	r24
    5e80:	86 95       	lsr	r24
    5e82:	86 95       	lsr	r24
    5e84:	98 2f       	mov	r25, r24
    5e86:	91 70       	andi	r25, 0x01	; 1
    5e88:	81 e0       	ldi	r24, 0x01	; 1
    5e8a:	67 e0       	ldi	r22, 0x07	; 7
    5e8c:	49 2f       	mov	r20, r25
    5e8e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    5e92:	81 e0       	ldi	r24, 0x01	; 1
    5e94:	62 e0       	ldi	r22, 0x02	; 2
    5e96:	41 e0       	ldi	r20, 0x01	; 1
    5e98:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    5e9c:	80 e0       	ldi	r24, 0x00	; 0
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	a0 e8       	ldi	r26, 0x80	; 128
    5ea2:	bf e3       	ldi	r27, 0x3F	; 63
    5ea4:	89 8f       	std	Y+25, r24	; 0x19
    5ea6:	9a 8f       	std	Y+26, r25	; 0x1a
    5ea8:	ab 8f       	std	Y+27, r26	; 0x1b
    5eaa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eac:	69 8d       	ldd	r22, Y+25	; 0x19
    5eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5eb4:	20 e0       	ldi	r18, 0x00	; 0
    5eb6:	30 e0       	ldi	r19, 0x00	; 0
    5eb8:	4a ef       	ldi	r20, 0xFA	; 250
    5eba:	54 e4       	ldi	r21, 0x44	; 68
    5ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ec0:	dc 01       	movw	r26, r24
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	8d 8b       	std	Y+21, r24	; 0x15
    5ec6:	9e 8b       	std	Y+22, r25	; 0x16
    5ec8:	af 8b       	std	Y+23, r26	; 0x17
    5eca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    5ece:	7e 89       	ldd	r23, Y+22	; 0x16
    5ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	40 e8       	ldi	r20, 0x80	; 128
    5eda:	5f e3       	ldi	r21, 0x3F	; 63
    5edc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ee0:	88 23       	and	r24, r24
    5ee2:	2c f4       	brge	.+10     	; 0x5eee <LCD_WriteData+0x304>
		__ticks = 1;
    5ee4:	81 e0       	ldi	r24, 0x01	; 1
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	9c 8b       	std	Y+20, r25	; 0x14
    5eea:	8b 8b       	std	Y+19, r24	; 0x13
    5eec:	3f c0       	rjmp	.+126    	; 0x5f6c <LCD_WriteData+0x382>
	else if (__tmp > 65535)
    5eee:	6d 89       	ldd	r22, Y+21	; 0x15
    5ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    5ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ef6:	20 e0       	ldi	r18, 0x00	; 0
    5ef8:	3f ef       	ldi	r19, 0xFF	; 255
    5efa:	4f e7       	ldi	r20, 0x7F	; 127
    5efc:	57 e4       	ldi	r21, 0x47	; 71
    5efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f02:	18 16       	cp	r1, r24
    5f04:	4c f5       	brge	.+82     	; 0x5f58 <LCD_WriteData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f06:	69 8d       	ldd	r22, Y+25	; 0x19
    5f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	30 e0       	ldi	r19, 0x00	; 0
    5f12:	40 e2       	ldi	r20, 0x20	; 32
    5f14:	51 e4       	ldi	r21, 0x41	; 65
    5f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f1a:	dc 01       	movw	r26, r24
    5f1c:	cb 01       	movw	r24, r22
    5f1e:	bc 01       	movw	r22, r24
    5f20:	cd 01       	movw	r24, r26
    5f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	9c 8b       	std	Y+20, r25	; 0x14
    5f2c:	8b 8b       	std	Y+19, r24	; 0x13
    5f2e:	0f c0       	rjmp	.+30     	; 0x5f4e <LCD_WriteData+0x364>
    5f30:	88 ec       	ldi	r24, 0xC8	; 200
    5f32:	90 e0       	ldi	r25, 0x00	; 0
    5f34:	9a 8b       	std	Y+18, r25	; 0x12
    5f36:	89 8b       	std	Y+17, r24	; 0x11
    5f38:	89 89       	ldd	r24, Y+17	; 0x11
    5f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    5f3c:	01 97       	sbiw	r24, 0x01	; 1
    5f3e:	f1 f7       	brne	.-4      	; 0x5f3c <LCD_WriteData+0x352>
    5f40:	9a 8b       	std	Y+18, r25	; 0x12
    5f42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f44:	8b 89       	ldd	r24, Y+19	; 0x13
    5f46:	9c 89       	ldd	r25, Y+20	; 0x14
    5f48:	01 97       	sbiw	r24, 0x01	; 1
    5f4a:	9c 8b       	std	Y+20, r25	; 0x14
    5f4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    5f50:	9c 89       	ldd	r25, Y+20	; 0x14
    5f52:	00 97       	sbiw	r24, 0x00	; 0
    5f54:	69 f7       	brne	.-38     	; 0x5f30 <LCD_WriteData+0x346>
    5f56:	14 c0       	rjmp	.+40     	; 0x5f80 <LCD_WriteData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f58:	6d 89       	ldd	r22, Y+21	; 0x15
    5f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    5f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    5f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    5f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f64:	dc 01       	movw	r26, r24
    5f66:	cb 01       	movw	r24, r22
    5f68:	9c 8b       	std	Y+20, r25	; 0x14
    5f6a:	8b 8b       	std	Y+19, r24	; 0x13
    5f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    5f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    5f70:	98 8b       	std	Y+16, r25	; 0x10
    5f72:	8f 87       	std	Y+15, r24	; 0x0f
    5f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f76:	98 89       	ldd	r25, Y+16	; 0x10
    5f78:	01 97       	sbiw	r24, 0x01	; 1
    5f7a:	f1 f7       	brne	.-4      	; 0x5f78 <LCD_WriteData+0x38e>
    5f7c:	98 8b       	std	Y+16, r25	; 0x10
    5f7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	62 e0       	ldi	r22, 0x02	; 2
    5f84:	40 e0       	ldi	r20, 0x00	; 0
    5f86:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	a0 e8       	ldi	r26, 0x80	; 128
    5f90:	bf e3       	ldi	r27, 0x3F	; 63
    5f92:	8b 87       	std	Y+11, r24	; 0x0b
    5f94:	9c 87       	std	Y+12, r25	; 0x0c
    5f96:	ad 87       	std	Y+13, r26	; 0x0d
    5f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fa2:	20 e0       	ldi	r18, 0x00	; 0
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
    5fa6:	4a ef       	ldi	r20, 0xFA	; 250
    5fa8:	54 e4       	ldi	r21, 0x44	; 68
    5faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fae:	dc 01       	movw	r26, r24
    5fb0:	cb 01       	movw	r24, r22
    5fb2:	8f 83       	std	Y+7, r24	; 0x07
    5fb4:	98 87       	std	Y+8, r25	; 0x08
    5fb6:	a9 87       	std	Y+9, r26	; 0x09
    5fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5fba:	6f 81       	ldd	r22, Y+7	; 0x07
    5fbc:	78 85       	ldd	r23, Y+8	; 0x08
    5fbe:	89 85       	ldd	r24, Y+9	; 0x09
    5fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fc2:	20 e0       	ldi	r18, 0x00	; 0
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	40 e8       	ldi	r20, 0x80	; 128
    5fc8:	5f e3       	ldi	r21, 0x3F	; 63
    5fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fce:	88 23       	and	r24, r24
    5fd0:	2c f4       	brge	.+10     	; 0x5fdc <LCD_WriteData+0x3f2>
		__ticks = 1;
    5fd2:	81 e0       	ldi	r24, 0x01	; 1
    5fd4:	90 e0       	ldi	r25, 0x00	; 0
    5fd6:	9e 83       	std	Y+6, r25	; 0x06
    5fd8:	8d 83       	std	Y+5, r24	; 0x05
    5fda:	3f c0       	rjmp	.+126    	; 0x605a <LCD_WriteData+0x470>
	else if (__tmp > 65535)
    5fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    5fde:	78 85       	ldd	r23, Y+8	; 0x08
    5fe0:	89 85       	ldd	r24, Y+9	; 0x09
    5fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fe4:	20 e0       	ldi	r18, 0x00	; 0
    5fe6:	3f ef       	ldi	r19, 0xFF	; 255
    5fe8:	4f e7       	ldi	r20, 0x7F	; 127
    5fea:	57 e4       	ldi	r21, 0x47	; 71
    5fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ff0:	18 16       	cp	r1, r24
    5ff2:	4c f5       	brge	.+82     	; 0x6046 <LCD_WriteData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ffc:	20 e0       	ldi	r18, 0x00	; 0
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	40 e2       	ldi	r20, 0x20	; 32
    6002:	51 e4       	ldi	r21, 0x41	; 65
    6004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6008:	dc 01       	movw	r26, r24
    600a:	cb 01       	movw	r24, r22
    600c:	bc 01       	movw	r22, r24
    600e:	cd 01       	movw	r24, r26
    6010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6014:	dc 01       	movw	r26, r24
    6016:	cb 01       	movw	r24, r22
    6018:	9e 83       	std	Y+6, r25	; 0x06
    601a:	8d 83       	std	Y+5, r24	; 0x05
    601c:	0f c0       	rjmp	.+30     	; 0x603c <LCD_WriteData+0x452>
    601e:	88 ec       	ldi	r24, 0xC8	; 200
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	9c 83       	std	Y+4, r25	; 0x04
    6024:	8b 83       	std	Y+3, r24	; 0x03
    6026:	8b 81       	ldd	r24, Y+3	; 0x03
    6028:	9c 81       	ldd	r25, Y+4	; 0x04
    602a:	01 97       	sbiw	r24, 0x01	; 1
    602c:	f1 f7       	brne	.-4      	; 0x602a <LCD_WriteData+0x440>
    602e:	9c 83       	std	Y+4, r25	; 0x04
    6030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6032:	8d 81       	ldd	r24, Y+5	; 0x05
    6034:	9e 81       	ldd	r25, Y+6	; 0x06
    6036:	01 97       	sbiw	r24, 0x01	; 1
    6038:	9e 83       	std	Y+6, r25	; 0x06
    603a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    603c:	8d 81       	ldd	r24, Y+5	; 0x05
    603e:	9e 81       	ldd	r25, Y+6	; 0x06
    6040:	00 97       	sbiw	r24, 0x00	; 0
    6042:	69 f7       	brne	.-38     	; 0x601e <LCD_WriteData+0x434>
    6044:	14 c0       	rjmp	.+40     	; 0x606e <LCD_WriteData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6046:	6f 81       	ldd	r22, Y+7	; 0x07
    6048:	78 85       	ldd	r23, Y+8	; 0x08
    604a:	89 85       	ldd	r24, Y+9	; 0x09
    604c:	9a 85       	ldd	r25, Y+10	; 0x0a
    604e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6052:	dc 01       	movw	r26, r24
    6054:	cb 01       	movw	r24, r22
    6056:	9e 83       	std	Y+6, r25	; 0x06
    6058:	8d 83       	std	Y+5, r24	; 0x05
    605a:	8d 81       	ldd	r24, Y+5	; 0x05
    605c:	9e 81       	ldd	r25, Y+6	; 0x06
    605e:	9a 83       	std	Y+2, r25	; 0x02
    6060:	89 83       	std	Y+1, r24	; 0x01
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	9a 81       	ldd	r25, Y+2	; 0x02
    6066:	01 97       	sbiw	r24, 0x01	; 1
    6068:	f1 f7       	brne	.-4      	; 0x6066 <LCD_WriteData+0x47c>
    606a:	9a 83       	std	Y+2, r25	; 0x02
    606c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    606e:	e9 96       	adiw	r28, 0x39	; 57
    6070:	0f b6       	in	r0, 0x3f	; 63
    6072:	f8 94       	cli
    6074:	de bf       	out	0x3e, r29	; 62
    6076:	0f be       	out	0x3f, r0	; 63
    6078:	cd bf       	out	0x3d, r28	; 61
    607a:	cf 91       	pop	r28
    607c:	df 91       	pop	r29
    607e:	08 95       	ret

00006080 <LCD_WriteString>:
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
    6080:	df 93       	push	r29
    6082:	cf 93       	push	r28
    6084:	00 d0       	rcall	.+0      	; 0x6086 <LCD_WriteString+0x6>
    6086:	0f 92       	push	r0
    6088:	cd b7       	in	r28, 0x3d	; 61
    608a:	de b7       	in	r29, 0x3e	; 62
    608c:	9b 83       	std	Y+3, r25	; 0x03
    608e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    6090:	19 82       	std	Y+1, r1	; 0x01
    6092:	0e c0       	rjmp	.+28     	; 0x60b0 <LCD_WriteString+0x30>
	while(Copy_u8PtrString[i] !='\0')
	{
		LCD_WriteData(Copy_u8PtrString[i]);
    6094:	89 81       	ldd	r24, Y+1	; 0x01
    6096:	28 2f       	mov	r18, r24
    6098:	30 e0       	ldi	r19, 0x00	; 0
    609a:	8a 81       	ldd	r24, Y+2	; 0x02
    609c:	9b 81       	ldd	r25, Y+3	; 0x03
    609e:	fc 01       	movw	r30, r24
    60a0:	e2 0f       	add	r30, r18
    60a2:	f3 1f       	adc	r31, r19
    60a4:	80 81       	ld	r24, Z
    60a6:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <LCD_WriteData>
		i++;
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	8f 5f       	subi	r24, 0xFF	; 255
    60ae:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
	u8 i=0;
	while(Copy_u8PtrString[i] !='\0')
    60b0:	89 81       	ldd	r24, Y+1	; 0x01
    60b2:	28 2f       	mov	r18, r24
    60b4:	30 e0       	ldi	r19, 0x00	; 0
    60b6:	8a 81       	ldd	r24, Y+2	; 0x02
    60b8:	9b 81       	ldd	r25, Y+3	; 0x03
    60ba:	fc 01       	movw	r30, r24
    60bc:	e2 0f       	add	r30, r18
    60be:	f3 1f       	adc	r31, r19
    60c0:	80 81       	ld	r24, Z
    60c2:	88 23       	and	r24, r24
    60c4:	39 f7       	brne	.-50     	; 0x6094 <LCD_WriteString+0x14>
	{
		LCD_WriteData(Copy_u8PtrString[i]);
		i++;
	}

}
    60c6:	0f 90       	pop	r0
    60c8:	0f 90       	pop	r0
    60ca:	0f 90       	pop	r0
    60cc:	cf 91       	pop	r28
    60ce:	df 91       	pop	r29
    60d0:	08 95       	ret

000060d2 <LCD_GoTo>:

u8 LCD_GoTo(u8 Copy_u8Line, u8 Copy_u8Cell)
{
    60d2:	df 93       	push	r29
    60d4:	cf 93       	push	r28
    60d6:	cd b7       	in	r28, 0x3d	; 61
    60d8:	de b7       	in	r29, 0x3e	; 62
    60da:	e3 97       	sbiw	r28, 0x33	; 51
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	f8 94       	cli
    60e0:	de bf       	out	0x3e, r29	; 62
    60e2:	0f be       	out	0x3f, r0	; 63
    60e4:	cd bf       	out	0x3d, r28	; 61
    60e6:	8a ab       	std	Y+50, r24	; 0x32
    60e8:	6b ab       	std	Y+51, r22	; 0x33
    u8 Ret = E_OK;
    60ea:	81 e0       	ldi	r24, 0x01	; 1
    60ec:	89 ab       	std	Y+49, r24	; 0x31

    if(Copy_u8Line == 0)
    60ee:	8a a9       	ldd	r24, Y+50	; 0x32
    60f0:	88 23       	and	r24, r24
    60f2:	09 f0       	breq	.+2      	; 0x60f6 <LCD_GoTo+0x24>
    60f4:	c3 c0       	rjmp	.+390    	; 0x627c <LCD_GoTo+0x1aa>
    {
        LCD_WriteCommand(0x80 + Copy_u8Cell);
    60f6:	8b a9       	ldd	r24, Y+51	; 0x33
    60f8:	80 58       	subi	r24, 0x80	; 128
    60fa:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>
    60fe:	80 e0       	ldi	r24, 0x00	; 0
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	a0 e2       	ldi	r26, 0x20	; 32
    6104:	b2 e4       	ldi	r27, 0x42	; 66
    6106:	8d a7       	std	Y+45, r24	; 0x2d
    6108:	9e a7       	std	Y+46, r25	; 0x2e
    610a:	af a7       	std	Y+47, r26	; 0x2f
    610c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    610e:	6d a5       	ldd	r22, Y+45	; 0x2d
    6110:	7e a5       	ldd	r23, Y+46	; 0x2e
    6112:	8f a5       	ldd	r24, Y+47	; 0x2f
    6114:	98 a9       	ldd	r25, Y+48	; 0x30
    6116:	2b ea       	ldi	r18, 0xAB	; 171
    6118:	3a ea       	ldi	r19, 0xAA	; 170
    611a:	4a e2       	ldi	r20, 0x2A	; 42
    611c:	50 e4       	ldi	r21, 0x40	; 64
    611e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6122:	dc 01       	movw	r26, r24
    6124:	cb 01       	movw	r24, r22
    6126:	89 a7       	std	Y+41, r24	; 0x29
    6128:	9a a7       	std	Y+42, r25	; 0x2a
    612a:	ab a7       	std	Y+43, r26	; 0x2b
    612c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    612e:	69 a5       	ldd	r22, Y+41	; 0x29
    6130:	7a a5       	ldd	r23, Y+42	; 0x2a
    6132:	8b a5       	ldd	r24, Y+43	; 0x2b
    6134:	9c a5       	ldd	r25, Y+44	; 0x2c
    6136:	20 e0       	ldi	r18, 0x00	; 0
    6138:	30 e0       	ldi	r19, 0x00	; 0
    613a:	40 e8       	ldi	r20, 0x80	; 128
    613c:	5f e3       	ldi	r21, 0x3F	; 63
    613e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6142:	88 23       	and	r24, r24
    6144:	1c f4       	brge	.+6      	; 0x614c <LCD_GoTo+0x7a>
		__ticks = 1;
    6146:	81 e0       	ldi	r24, 0x01	; 1
    6148:	88 a7       	std	Y+40, r24	; 0x28
    614a:	91 c0       	rjmp	.+290    	; 0x626e <LCD_GoTo+0x19c>
	else if (__tmp > 255)
    614c:	69 a5       	ldd	r22, Y+41	; 0x29
    614e:	7a a5       	ldd	r23, Y+42	; 0x2a
    6150:	8b a5       	ldd	r24, Y+43	; 0x2b
    6152:	9c a5       	ldd	r25, Y+44	; 0x2c
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	4f e7       	ldi	r20, 0x7F	; 127
    615a:	53 e4       	ldi	r21, 0x43	; 67
    615c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6160:	18 16       	cp	r1, r24
    6162:	0c f0       	brlt	.+2      	; 0x6166 <LCD_GoTo+0x94>
    6164:	7b c0       	rjmp	.+246    	; 0x625c <LCD_GoTo+0x18a>
	{
		_delay_ms(__us / 1000.0);
    6166:	6d a5       	ldd	r22, Y+45	; 0x2d
    6168:	7e a5       	ldd	r23, Y+46	; 0x2e
    616a:	8f a5       	ldd	r24, Y+47	; 0x2f
    616c:	98 a9       	ldd	r25, Y+48	; 0x30
    616e:	20 e0       	ldi	r18, 0x00	; 0
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	4a e7       	ldi	r20, 0x7A	; 122
    6174:	54 e4       	ldi	r21, 0x44	; 68
    6176:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    617a:	dc 01       	movw	r26, r24
    617c:	cb 01       	movw	r24, r22
    617e:	8c a3       	std	Y+36, r24	; 0x24
    6180:	9d a3       	std	Y+37, r25	; 0x25
    6182:	ae a3       	std	Y+38, r26	; 0x26
    6184:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6186:	6c a1       	ldd	r22, Y+36	; 0x24
    6188:	7d a1       	ldd	r23, Y+37	; 0x25
    618a:	8e a1       	ldd	r24, Y+38	; 0x26
    618c:	9f a1       	ldd	r25, Y+39	; 0x27
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	4a ef       	ldi	r20, 0xFA	; 250
    6194:	54 e4       	ldi	r21, 0x44	; 68
    6196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    619a:	dc 01       	movw	r26, r24
    619c:	cb 01       	movw	r24, r22
    619e:	88 a3       	std	Y+32, r24	; 0x20
    61a0:	99 a3       	std	Y+33, r25	; 0x21
    61a2:	aa a3       	std	Y+34, r26	; 0x22
    61a4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    61a6:	68 a1       	ldd	r22, Y+32	; 0x20
    61a8:	79 a1       	ldd	r23, Y+33	; 0x21
    61aa:	8a a1       	ldd	r24, Y+34	; 0x22
    61ac:	9b a1       	ldd	r25, Y+35	; 0x23
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	30 e0       	ldi	r19, 0x00	; 0
    61b2:	40 e8       	ldi	r20, 0x80	; 128
    61b4:	5f e3       	ldi	r21, 0x3F	; 63
    61b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61ba:	88 23       	and	r24, r24
    61bc:	2c f4       	brge	.+10     	; 0x61c8 <LCD_GoTo+0xf6>
		__ticks = 1;
    61be:	81 e0       	ldi	r24, 0x01	; 1
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	9f 8f       	std	Y+31, r25	; 0x1f
    61c4:	8e 8f       	std	Y+30, r24	; 0x1e
    61c6:	3f c0       	rjmp	.+126    	; 0x6246 <LCD_GoTo+0x174>
	else if (__tmp > 65535)
    61c8:	68 a1       	ldd	r22, Y+32	; 0x20
    61ca:	79 a1       	ldd	r23, Y+33	; 0x21
    61cc:	8a a1       	ldd	r24, Y+34	; 0x22
    61ce:	9b a1       	ldd	r25, Y+35	; 0x23
    61d0:	20 e0       	ldi	r18, 0x00	; 0
    61d2:	3f ef       	ldi	r19, 0xFF	; 255
    61d4:	4f e7       	ldi	r20, 0x7F	; 127
    61d6:	57 e4       	ldi	r21, 0x47	; 71
    61d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61dc:	18 16       	cp	r1, r24
    61de:	4c f5       	brge	.+82     	; 0x6232 <LCD_GoTo+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61e0:	6c a1       	ldd	r22, Y+36	; 0x24
    61e2:	7d a1       	ldd	r23, Y+37	; 0x25
    61e4:	8e a1       	ldd	r24, Y+38	; 0x26
    61e6:	9f a1       	ldd	r25, Y+39	; 0x27
    61e8:	20 e0       	ldi	r18, 0x00	; 0
    61ea:	30 e0       	ldi	r19, 0x00	; 0
    61ec:	40 e2       	ldi	r20, 0x20	; 32
    61ee:	51 e4       	ldi	r21, 0x41	; 65
    61f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61f4:	dc 01       	movw	r26, r24
    61f6:	cb 01       	movw	r24, r22
    61f8:	bc 01       	movw	r22, r24
    61fa:	cd 01       	movw	r24, r26
    61fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6200:	dc 01       	movw	r26, r24
    6202:	cb 01       	movw	r24, r22
    6204:	9f 8f       	std	Y+31, r25	; 0x1f
    6206:	8e 8f       	std	Y+30, r24	; 0x1e
    6208:	0f c0       	rjmp	.+30     	; 0x6228 <LCD_GoTo+0x156>
    620a:	88 ec       	ldi	r24, 0xC8	; 200
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	9d 8f       	std	Y+29, r25	; 0x1d
    6210:	8c 8f       	std	Y+28, r24	; 0x1c
    6212:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6214:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6216:	01 97       	sbiw	r24, 0x01	; 1
    6218:	f1 f7       	brne	.-4      	; 0x6216 <LCD_GoTo+0x144>
    621a:	9d 8f       	std	Y+29, r25	; 0x1d
    621c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    621e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6220:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6222:	01 97       	sbiw	r24, 0x01	; 1
    6224:	9f 8f       	std	Y+31, r25	; 0x1f
    6226:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6228:	8e 8d       	ldd	r24, Y+30	; 0x1e
    622a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    622c:	00 97       	sbiw	r24, 0x00	; 0
    622e:	69 f7       	brne	.-38     	; 0x620a <LCD_GoTo+0x138>
    6230:	fb c0       	rjmp	.+502    	; 0x6428 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6232:	68 a1       	ldd	r22, Y+32	; 0x20
    6234:	79 a1       	ldd	r23, Y+33	; 0x21
    6236:	8a a1       	ldd	r24, Y+34	; 0x22
    6238:	9b a1       	ldd	r25, Y+35	; 0x23
    623a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    623e:	dc 01       	movw	r26, r24
    6240:	cb 01       	movw	r24, r22
    6242:	9f 8f       	std	Y+31, r25	; 0x1f
    6244:	8e 8f       	std	Y+30, r24	; 0x1e
    6246:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6248:	9f 8d       	ldd	r25, Y+31	; 0x1f
    624a:	9b 8f       	std	Y+27, r25	; 0x1b
    624c:	8a 8f       	std	Y+26, r24	; 0x1a
    624e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6250:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6252:	01 97       	sbiw	r24, 0x01	; 1
    6254:	f1 f7       	brne	.-4      	; 0x6252 <LCD_GoTo+0x180>
    6256:	9b 8f       	std	Y+27, r25	; 0x1b
    6258:	8a 8f       	std	Y+26, r24	; 0x1a
    625a:	e6 c0       	rjmp	.+460    	; 0x6428 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    625c:	69 a5       	ldd	r22, Y+41	; 0x29
    625e:	7a a5       	ldd	r23, Y+42	; 0x2a
    6260:	8b a5       	ldd	r24, Y+43	; 0x2b
    6262:	9c a5       	ldd	r25, Y+44	; 0x2c
    6264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6268:	dc 01       	movw	r26, r24
    626a:	cb 01       	movw	r24, r22
    626c:	88 a7       	std	Y+40, r24	; 0x28
    626e:	88 a5       	ldd	r24, Y+40	; 0x28
    6270:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6272:	89 8d       	ldd	r24, Y+25	; 0x19
    6274:	8a 95       	dec	r24
    6276:	f1 f7       	brne	.-4      	; 0x6274 <LCD_GoTo+0x1a2>
    6278:	89 8f       	std	Y+25, r24	; 0x19
    627a:	d6 c0       	rjmp	.+428    	; 0x6428 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 1)
    627c:	8a a9       	ldd	r24, Y+50	; 0x32
    627e:	81 30       	cpi	r24, 0x01	; 1
    6280:	09 f0       	breq	.+2      	; 0x6284 <LCD_GoTo+0x1b2>
    6282:	c3 c0       	rjmp	.+390    	; 0x640a <LCD_GoTo+0x338>
    {
        LCD_WriteCommand(0xC0 + Copy_u8Cell);
    6284:	8b a9       	ldd	r24, Y+51	; 0x33
    6286:	80 54       	subi	r24, 0x40	; 64
    6288:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>
    628c:	80 e0       	ldi	r24, 0x00	; 0
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	a0 e2       	ldi	r26, 0x20	; 32
    6292:	b2 e4       	ldi	r27, 0x42	; 66
    6294:	8d 8b       	std	Y+21, r24	; 0x15
    6296:	9e 8b       	std	Y+22, r25	; 0x16
    6298:	af 8b       	std	Y+23, r26	; 0x17
    629a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    629c:	6d 89       	ldd	r22, Y+21	; 0x15
    629e:	7e 89       	ldd	r23, Y+22	; 0x16
    62a0:	8f 89       	ldd	r24, Y+23	; 0x17
    62a2:	98 8d       	ldd	r25, Y+24	; 0x18
    62a4:	2b ea       	ldi	r18, 0xAB	; 171
    62a6:	3a ea       	ldi	r19, 0xAA	; 170
    62a8:	4a e2       	ldi	r20, 0x2A	; 42
    62aa:	50 e4       	ldi	r21, 0x40	; 64
    62ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62b0:	dc 01       	movw	r26, r24
    62b2:	cb 01       	movw	r24, r22
    62b4:	89 8b       	std	Y+17, r24	; 0x11
    62b6:	9a 8b       	std	Y+18, r25	; 0x12
    62b8:	ab 8b       	std	Y+19, r26	; 0x13
    62ba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    62bc:	69 89       	ldd	r22, Y+17	; 0x11
    62be:	7a 89       	ldd	r23, Y+18	; 0x12
    62c0:	8b 89       	ldd	r24, Y+19	; 0x13
    62c2:	9c 89       	ldd	r25, Y+20	; 0x14
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	40 e8       	ldi	r20, 0x80	; 128
    62ca:	5f e3       	ldi	r21, 0x3F	; 63
    62cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62d0:	88 23       	and	r24, r24
    62d2:	1c f4       	brge	.+6      	; 0x62da <LCD_GoTo+0x208>
		__ticks = 1;
    62d4:	81 e0       	ldi	r24, 0x01	; 1
    62d6:	88 8b       	std	Y+16, r24	; 0x10
    62d8:	91 c0       	rjmp	.+290    	; 0x63fc <LCD_GoTo+0x32a>
	else if (__tmp > 255)
    62da:	69 89       	ldd	r22, Y+17	; 0x11
    62dc:	7a 89       	ldd	r23, Y+18	; 0x12
    62de:	8b 89       	ldd	r24, Y+19	; 0x13
    62e0:	9c 89       	ldd	r25, Y+20	; 0x14
    62e2:	20 e0       	ldi	r18, 0x00	; 0
    62e4:	30 e0       	ldi	r19, 0x00	; 0
    62e6:	4f e7       	ldi	r20, 0x7F	; 127
    62e8:	53 e4       	ldi	r21, 0x43	; 67
    62ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62ee:	18 16       	cp	r1, r24
    62f0:	0c f0       	brlt	.+2      	; 0x62f4 <LCD_GoTo+0x222>
    62f2:	7b c0       	rjmp	.+246    	; 0x63ea <LCD_GoTo+0x318>
	{
		_delay_ms(__us / 1000.0);
    62f4:	6d 89       	ldd	r22, Y+21	; 0x15
    62f6:	7e 89       	ldd	r23, Y+22	; 0x16
    62f8:	8f 89       	ldd	r24, Y+23	; 0x17
    62fa:	98 8d       	ldd	r25, Y+24	; 0x18
    62fc:	20 e0       	ldi	r18, 0x00	; 0
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	4a e7       	ldi	r20, 0x7A	; 122
    6302:	54 e4       	ldi	r21, 0x44	; 68
    6304:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6308:	dc 01       	movw	r26, r24
    630a:	cb 01       	movw	r24, r22
    630c:	8c 87       	std	Y+12, r24	; 0x0c
    630e:	9d 87       	std	Y+13, r25	; 0x0d
    6310:	ae 87       	std	Y+14, r26	; 0x0e
    6312:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6314:	6c 85       	ldd	r22, Y+12	; 0x0c
    6316:	7d 85       	ldd	r23, Y+13	; 0x0d
    6318:	8e 85       	ldd	r24, Y+14	; 0x0e
    631a:	9f 85       	ldd	r25, Y+15	; 0x0f
    631c:	20 e0       	ldi	r18, 0x00	; 0
    631e:	30 e0       	ldi	r19, 0x00	; 0
    6320:	4a ef       	ldi	r20, 0xFA	; 250
    6322:	54 e4       	ldi	r21, 0x44	; 68
    6324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6328:	dc 01       	movw	r26, r24
    632a:	cb 01       	movw	r24, r22
    632c:	88 87       	std	Y+8, r24	; 0x08
    632e:	99 87       	std	Y+9, r25	; 0x09
    6330:	aa 87       	std	Y+10, r26	; 0x0a
    6332:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6334:	68 85       	ldd	r22, Y+8	; 0x08
    6336:	79 85       	ldd	r23, Y+9	; 0x09
    6338:	8a 85       	ldd	r24, Y+10	; 0x0a
    633a:	9b 85       	ldd	r25, Y+11	; 0x0b
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	40 e8       	ldi	r20, 0x80	; 128
    6342:	5f e3       	ldi	r21, 0x3F	; 63
    6344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6348:	88 23       	and	r24, r24
    634a:	2c f4       	brge	.+10     	; 0x6356 <LCD_GoTo+0x284>
		__ticks = 1;
    634c:	81 e0       	ldi	r24, 0x01	; 1
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	9f 83       	std	Y+7, r25	; 0x07
    6352:	8e 83       	std	Y+6, r24	; 0x06
    6354:	3f c0       	rjmp	.+126    	; 0x63d4 <LCD_GoTo+0x302>
	else if (__tmp > 65535)
    6356:	68 85       	ldd	r22, Y+8	; 0x08
    6358:	79 85       	ldd	r23, Y+9	; 0x09
    635a:	8a 85       	ldd	r24, Y+10	; 0x0a
    635c:	9b 85       	ldd	r25, Y+11	; 0x0b
    635e:	20 e0       	ldi	r18, 0x00	; 0
    6360:	3f ef       	ldi	r19, 0xFF	; 255
    6362:	4f e7       	ldi	r20, 0x7F	; 127
    6364:	57 e4       	ldi	r21, 0x47	; 71
    6366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    636a:	18 16       	cp	r1, r24
    636c:	4c f5       	brge	.+82     	; 0x63c0 <LCD_GoTo+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    636e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6370:	7d 85       	ldd	r23, Y+13	; 0x0d
    6372:	8e 85       	ldd	r24, Y+14	; 0x0e
    6374:	9f 85       	ldd	r25, Y+15	; 0x0f
    6376:	20 e0       	ldi	r18, 0x00	; 0
    6378:	30 e0       	ldi	r19, 0x00	; 0
    637a:	40 e2       	ldi	r20, 0x20	; 32
    637c:	51 e4       	ldi	r21, 0x41	; 65
    637e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6382:	dc 01       	movw	r26, r24
    6384:	cb 01       	movw	r24, r22
    6386:	bc 01       	movw	r22, r24
    6388:	cd 01       	movw	r24, r26
    638a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    638e:	dc 01       	movw	r26, r24
    6390:	cb 01       	movw	r24, r22
    6392:	9f 83       	std	Y+7, r25	; 0x07
    6394:	8e 83       	std	Y+6, r24	; 0x06
    6396:	0f c0       	rjmp	.+30     	; 0x63b6 <LCD_GoTo+0x2e4>
    6398:	88 ec       	ldi	r24, 0xC8	; 200
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	9d 83       	std	Y+5, r25	; 0x05
    639e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    63a0:	8c 81       	ldd	r24, Y+4	; 0x04
    63a2:	9d 81       	ldd	r25, Y+5	; 0x05
    63a4:	01 97       	sbiw	r24, 0x01	; 1
    63a6:	f1 f7       	brne	.-4      	; 0x63a4 <LCD_GoTo+0x2d2>
    63a8:	9d 83       	std	Y+5, r25	; 0x05
    63aa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63ac:	8e 81       	ldd	r24, Y+6	; 0x06
    63ae:	9f 81       	ldd	r25, Y+7	; 0x07
    63b0:	01 97       	sbiw	r24, 0x01	; 1
    63b2:	9f 83       	std	Y+7, r25	; 0x07
    63b4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63b6:	8e 81       	ldd	r24, Y+6	; 0x06
    63b8:	9f 81       	ldd	r25, Y+7	; 0x07
    63ba:	00 97       	sbiw	r24, 0x00	; 0
    63bc:	69 f7       	brne	.-38     	; 0x6398 <LCD_GoTo+0x2c6>
    63be:	34 c0       	rjmp	.+104    	; 0x6428 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63c0:	68 85       	ldd	r22, Y+8	; 0x08
    63c2:	79 85       	ldd	r23, Y+9	; 0x09
    63c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    63c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    63c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63cc:	dc 01       	movw	r26, r24
    63ce:	cb 01       	movw	r24, r22
    63d0:	9f 83       	std	Y+7, r25	; 0x07
    63d2:	8e 83       	std	Y+6, r24	; 0x06
    63d4:	8e 81       	ldd	r24, Y+6	; 0x06
    63d6:	9f 81       	ldd	r25, Y+7	; 0x07
    63d8:	9b 83       	std	Y+3, r25	; 0x03
    63da:	8a 83       	std	Y+2, r24	; 0x02
    63dc:	8a 81       	ldd	r24, Y+2	; 0x02
    63de:	9b 81       	ldd	r25, Y+3	; 0x03
    63e0:	01 97       	sbiw	r24, 0x01	; 1
    63e2:	f1 f7       	brne	.-4      	; 0x63e0 <LCD_GoTo+0x30e>
    63e4:	9b 83       	std	Y+3, r25	; 0x03
    63e6:	8a 83       	std	Y+2, r24	; 0x02
    63e8:	1f c0       	rjmp	.+62     	; 0x6428 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    63ea:	69 89       	ldd	r22, Y+17	; 0x11
    63ec:	7a 89       	ldd	r23, Y+18	; 0x12
    63ee:	8b 89       	ldd	r24, Y+19	; 0x13
    63f0:	9c 89       	ldd	r25, Y+20	; 0x14
    63f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63f6:	dc 01       	movw	r26, r24
    63f8:	cb 01       	movw	r24, r22
    63fa:	88 8b       	std	Y+16, r24	; 0x10
    63fc:	88 89       	ldd	r24, Y+16	; 0x10
    63fe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6400:	89 81       	ldd	r24, Y+1	; 0x01
    6402:	8a 95       	dec	r24
    6404:	f1 f7       	brne	.-4      	; 0x6402 <LCD_GoTo+0x330>
    6406:	89 83       	std	Y+1, r24	; 0x01
    6408:	0f c0       	rjmp	.+30     	; 0x6428 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 2)
    640a:	8a a9       	ldd	r24, Y+50	; 0x32
    640c:	82 30       	cpi	r24, 0x02	; 2
    640e:	29 f4       	brne	.+10     	; 0x641a <LCD_GoTo+0x348>
    {
        LCD_WriteCommand(0x94 + Copy_u8Cell);
    6410:	8b a9       	ldd	r24, Y+51	; 0x33
    6412:	8c 56       	subi	r24, 0x6C	; 108
    6414:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>
    6418:	07 c0       	rjmp	.+14     	; 0x6428 <LCD_GoTo+0x356>
    }
    else if(Copy_u8Line == 3)
    641a:	8a a9       	ldd	r24, Y+50	; 0x32
    641c:	83 30       	cpi	r24, 0x03	; 3
    641e:	21 f4       	brne	.+8      	; 0x6428 <LCD_GoTo+0x356>
    {
        LCD_WriteCommand(0xD4 + Copy_u8Cell);
    6420:	8b a9       	ldd	r24, Y+51	; 0x33
    6422:	8c 52       	subi	r24, 0x2C	; 44
    6424:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>
    }

    return Ret;
    6428:	89 a9       	ldd	r24, Y+49	; 0x31
}
    642a:	e3 96       	adiw	r28, 0x33	; 51
    642c:	0f b6       	in	r0, 0x3f	; 63
    642e:	f8 94       	cli
    6430:	de bf       	out	0x3e, r29	; 62
    6432:	0f be       	out	0x3f, r0	; 63
    6434:	cd bf       	out	0x3d, r28	; 61
    6436:	cf 91       	pop	r28
    6438:	df 91       	pop	r29
    643a:	08 95       	ret

0000643c <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    643c:	df 93       	push	r29
    643e:	cf 93       	push	r28
    6440:	cd b7       	in	r28, 0x3d	; 61
    6442:	de b7       	in	r29, 0x3e	; 62
    6444:	2e 97       	sbiw	r28, 0x0e	; 14
    6446:	0f b6       	in	r0, 0x3f	; 63
    6448:	f8 94       	cli
    644a:	de bf       	out	0x3e, r29	; 62
    644c:	0f be       	out	0x3f, r0	; 63
    644e:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(CLEAR_SCREEN);
    6450:	81 e0       	ldi	r24, 0x01	; 1
    6452:	0e 94 aa 2b 	call	0x5754	; 0x5754 <LCD_WriteCommand>
    6456:	80 e0       	ldi	r24, 0x00	; 0
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	a0 e8       	ldi	r26, 0x80	; 128
    645c:	bf e3       	ldi	r27, 0x3F	; 63
    645e:	8b 87       	std	Y+11, r24	; 0x0b
    6460:	9c 87       	std	Y+12, r25	; 0x0c
    6462:	ad 87       	std	Y+13, r26	; 0x0d
    6464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6466:	6b 85       	ldd	r22, Y+11	; 0x0b
    6468:	7c 85       	ldd	r23, Y+12	; 0x0c
    646a:	8d 85       	ldd	r24, Y+13	; 0x0d
    646c:	9e 85       	ldd	r25, Y+14	; 0x0e
    646e:	20 e0       	ldi	r18, 0x00	; 0
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	4a ef       	ldi	r20, 0xFA	; 250
    6474:	54 e4       	ldi	r21, 0x44	; 68
    6476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    647a:	dc 01       	movw	r26, r24
    647c:	cb 01       	movw	r24, r22
    647e:	8f 83       	std	Y+7, r24	; 0x07
    6480:	98 87       	std	Y+8, r25	; 0x08
    6482:	a9 87       	std	Y+9, r26	; 0x09
    6484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6486:	6f 81       	ldd	r22, Y+7	; 0x07
    6488:	78 85       	ldd	r23, Y+8	; 0x08
    648a:	89 85       	ldd	r24, Y+9	; 0x09
    648c:	9a 85       	ldd	r25, Y+10	; 0x0a
    648e:	20 e0       	ldi	r18, 0x00	; 0
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	40 e8       	ldi	r20, 0x80	; 128
    6494:	5f e3       	ldi	r21, 0x3F	; 63
    6496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    649a:	88 23       	and	r24, r24
    649c:	2c f4       	brge	.+10     	; 0x64a8 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    649e:	81 e0       	ldi	r24, 0x01	; 1
    64a0:	90 e0       	ldi	r25, 0x00	; 0
    64a2:	9e 83       	std	Y+6, r25	; 0x06
    64a4:	8d 83       	std	Y+5, r24	; 0x05
    64a6:	3f c0       	rjmp	.+126    	; 0x6526 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    64a8:	6f 81       	ldd	r22, Y+7	; 0x07
    64aa:	78 85       	ldd	r23, Y+8	; 0x08
    64ac:	89 85       	ldd	r24, Y+9	; 0x09
    64ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    64b0:	20 e0       	ldi	r18, 0x00	; 0
    64b2:	3f ef       	ldi	r19, 0xFF	; 255
    64b4:	4f e7       	ldi	r20, 0x7F	; 127
    64b6:	57 e4       	ldi	r21, 0x47	; 71
    64b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    64bc:	18 16       	cp	r1, r24
    64be:	4c f5       	brge	.+82     	; 0x6512 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    64c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    64c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    64c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    64c8:	20 e0       	ldi	r18, 0x00	; 0
    64ca:	30 e0       	ldi	r19, 0x00	; 0
    64cc:	40 e2       	ldi	r20, 0x20	; 32
    64ce:	51 e4       	ldi	r21, 0x41	; 65
    64d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64d4:	dc 01       	movw	r26, r24
    64d6:	cb 01       	movw	r24, r22
    64d8:	bc 01       	movw	r22, r24
    64da:	cd 01       	movw	r24, r26
    64dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64e0:	dc 01       	movw	r26, r24
    64e2:	cb 01       	movw	r24, r22
    64e4:	9e 83       	std	Y+6, r25	; 0x06
    64e6:	8d 83       	std	Y+5, r24	; 0x05
    64e8:	0f c0       	rjmp	.+30     	; 0x6508 <LCD_ClearDisplay+0xcc>
    64ea:	88 ec       	ldi	r24, 0xC8	; 200
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	9c 83       	std	Y+4, r25	; 0x04
    64f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    64f2:	8b 81       	ldd	r24, Y+3	; 0x03
    64f4:	9c 81       	ldd	r25, Y+4	; 0x04
    64f6:	01 97       	sbiw	r24, 0x01	; 1
    64f8:	f1 f7       	brne	.-4      	; 0x64f6 <LCD_ClearDisplay+0xba>
    64fa:	9c 83       	std	Y+4, r25	; 0x04
    64fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6500:	9e 81       	ldd	r25, Y+6	; 0x06
    6502:	01 97       	sbiw	r24, 0x01	; 1
    6504:	9e 83       	std	Y+6, r25	; 0x06
    6506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6508:	8d 81       	ldd	r24, Y+5	; 0x05
    650a:	9e 81       	ldd	r25, Y+6	; 0x06
    650c:	00 97       	sbiw	r24, 0x00	; 0
    650e:	69 f7       	brne	.-38     	; 0x64ea <LCD_ClearDisplay+0xae>
    6510:	14 c0       	rjmp	.+40     	; 0x653a <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6512:	6f 81       	ldd	r22, Y+7	; 0x07
    6514:	78 85       	ldd	r23, Y+8	; 0x08
    6516:	89 85       	ldd	r24, Y+9	; 0x09
    6518:	9a 85       	ldd	r25, Y+10	; 0x0a
    651a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    651e:	dc 01       	movw	r26, r24
    6520:	cb 01       	movw	r24, r22
    6522:	9e 83       	std	Y+6, r25	; 0x06
    6524:	8d 83       	std	Y+5, r24	; 0x05
    6526:	8d 81       	ldd	r24, Y+5	; 0x05
    6528:	9e 81       	ldd	r25, Y+6	; 0x06
    652a:	9a 83       	std	Y+2, r25	; 0x02
    652c:	89 83       	std	Y+1, r24	; 0x01
    652e:	89 81       	ldd	r24, Y+1	; 0x01
    6530:	9a 81       	ldd	r25, Y+2	; 0x02
    6532:	01 97       	sbiw	r24, 0x01	; 1
    6534:	f1 f7       	brne	.-4      	; 0x6532 <LCD_ClearDisplay+0xf6>
    6536:	9a 83       	std	Y+2, r25	; 0x02
    6538:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    653a:	2e 96       	adiw	r28, 0x0e	; 14
    653c:	0f b6       	in	r0, 0x3f	; 63
    653e:	f8 94       	cli
    6540:	de bf       	out	0x3e, r29	; 62
    6542:	0f be       	out	0x3f, r0	; 63
    6544:	cd bf       	out	0x3d, r28	; 61
    6546:	cf 91       	pop	r28
    6548:	df 91       	pop	r29
    654a:	08 95       	ret

0000654c <LCD_WriteChar>:
u8	LCD_WriteChar(u8 Copy_u8Char)
{
    654c:	df 93       	push	r29
    654e:	cf 93       	push	r28
    6550:	00 d0       	rcall	.+0      	; 0x6552 <LCD_WriteChar+0x6>
    6552:	cd b7       	in	r28, 0x3d	; 61
    6554:	de b7       	in	r29, 0x3e	; 62
    6556:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = E_OK;
    6558:	81 e0       	ldi	r24, 0x01	; 1
    655a:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(Copy_u8Char);
    655c:	8a 81       	ldd	r24, Y+2	; 0x02
    655e:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <LCD_WriteData>
	return Ret;
    6562:	89 81       	ldd	r24, Y+1	; 0x01
}
    6564:	0f 90       	pop	r0
    6566:	0f 90       	pop	r0
    6568:	cf 91       	pop	r28
    656a:	df 91       	pop	r29
    656c:	08 95       	ret

0000656e <LCD_WriteNumber>:
s32 LCD_WriteNumber(s32 Copy_s32Num)
{
    656e:	0f 93       	push	r16
    6570:	1f 93       	push	r17
    6572:	df 93       	push	r29
    6574:	cf 93       	push	r28
    6576:	cd b7       	in	r28, 0x3d	; 61
    6578:	de b7       	in	r29, 0x3e	; 62
    657a:	c5 59       	subi	r28, 0x95	; 149
    657c:	d0 40       	sbci	r29, 0x00	; 0
    657e:	0f b6       	in	r0, 0x3f	; 63
    6580:	f8 94       	cli
    6582:	de bf       	out	0x3e, r29	; 62
    6584:	0f be       	out	0x3f, r0	; 63
    6586:	cd bf       	out	0x3d, r28	; 61
    6588:	fe 01       	movw	r30, r28
    658a:	e2 57       	subi	r30, 0x72	; 114
    658c:	ff 4f       	sbci	r31, 0xFF	; 255
    658e:	60 83       	st	Z, r22
    6590:	71 83       	std	Z+1, r23	; 0x01
    6592:	82 83       	std	Z+2, r24	; 0x02
    6594:	93 83       	std	Z+3, r25	; 0x03
	u8 Ret = E_OK;
    6596:	81 e0       	ldi	r24, 0x01	; 1
    6598:	89 a7       	std	Y+41, r24	; 0x29

	u8 iterator = 0 ,Rem = 0;
    659a:	18 a6       	std	Y+40, r1	; 0x28
    659c:	1f a2       	std	Y+39, r1	; 0x27
	u8 Str[100];

	/* if the user send 0 */
	if(Copy_s32Num == 0)
    659e:	fe 01       	movw	r30, r28
    65a0:	e2 57       	subi	r30, 0x72	; 114
    65a2:	ff 4f       	sbci	r31, 0xFF	; 255
    65a4:	80 81       	ld	r24, Z
    65a6:	91 81       	ldd	r25, Z+1	; 0x01
    65a8:	a2 81       	ldd	r26, Z+2	; 0x02
    65aa:	b3 81       	ldd	r27, Z+3	; 0x03
    65ac:	00 97       	sbiw	r24, 0x00	; 0
    65ae:	a1 05       	cpc	r26, r1
    65b0:	b1 05       	cpc	r27, r1
    65b2:	09 f0       	breq	.+2      	; 0x65b6 <LCD_WriteNumber+0x48>
    65b4:	83 c0       	rjmp	.+262    	; 0x66bc <LCD_WriteNumber+0x14e>
	{
		LCD_WriteChar('0');
    65b6:	80 e3       	ldi	r24, 0x30	; 48
    65b8:	0e 94 a6 32 	call	0x654c	; 0x654c <LCD_WriteChar>
    65bc:	80 e0       	ldi	r24, 0x00	; 0
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	a0 e8       	ldi	r26, 0x80	; 128
    65c2:	bf e3       	ldi	r27, 0x3F	; 63
    65c4:	8b a3       	std	Y+35, r24	; 0x23
    65c6:	9c a3       	std	Y+36, r25	; 0x24
    65c8:	ad a3       	std	Y+37, r26	; 0x25
    65ca:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65cc:	6b a1       	ldd	r22, Y+35	; 0x23
    65ce:	7c a1       	ldd	r23, Y+36	; 0x24
    65d0:	8d a1       	ldd	r24, Y+37	; 0x25
    65d2:	9e a1       	ldd	r25, Y+38	; 0x26
    65d4:	20 e0       	ldi	r18, 0x00	; 0
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	4a ef       	ldi	r20, 0xFA	; 250
    65da:	54 e4       	ldi	r21, 0x44	; 68
    65dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65e0:	dc 01       	movw	r26, r24
    65e2:	cb 01       	movw	r24, r22
    65e4:	8f 8f       	std	Y+31, r24	; 0x1f
    65e6:	98 a3       	std	Y+32, r25	; 0x20
    65e8:	a9 a3       	std	Y+33, r26	; 0x21
    65ea:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    65ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    65ee:	78 a1       	ldd	r23, Y+32	; 0x20
    65f0:	89 a1       	ldd	r24, Y+33	; 0x21
    65f2:	9a a1       	ldd	r25, Y+34	; 0x22
    65f4:	20 e0       	ldi	r18, 0x00	; 0
    65f6:	30 e0       	ldi	r19, 0x00	; 0
    65f8:	40 e8       	ldi	r20, 0x80	; 128
    65fa:	5f e3       	ldi	r21, 0x3F	; 63
    65fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6600:	88 23       	and	r24, r24
    6602:	2c f4       	brge	.+10     	; 0x660e <LCD_WriteNumber+0xa0>
		__ticks = 1;
    6604:	81 e0       	ldi	r24, 0x01	; 1
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	9e 8f       	std	Y+30, r25	; 0x1e
    660a:	8d 8f       	std	Y+29, r24	; 0x1d
    660c:	3f c0       	rjmp	.+126    	; 0x668c <LCD_WriteNumber+0x11e>
	else if (__tmp > 65535)
    660e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6610:	78 a1       	ldd	r23, Y+32	; 0x20
    6612:	89 a1       	ldd	r24, Y+33	; 0x21
    6614:	9a a1       	ldd	r25, Y+34	; 0x22
    6616:	20 e0       	ldi	r18, 0x00	; 0
    6618:	3f ef       	ldi	r19, 0xFF	; 255
    661a:	4f e7       	ldi	r20, 0x7F	; 127
    661c:	57 e4       	ldi	r21, 0x47	; 71
    661e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6622:	18 16       	cp	r1, r24
    6624:	4c f5       	brge	.+82     	; 0x6678 <LCD_WriteNumber+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6626:	6b a1       	ldd	r22, Y+35	; 0x23
    6628:	7c a1       	ldd	r23, Y+36	; 0x24
    662a:	8d a1       	ldd	r24, Y+37	; 0x25
    662c:	9e a1       	ldd	r25, Y+38	; 0x26
    662e:	20 e0       	ldi	r18, 0x00	; 0
    6630:	30 e0       	ldi	r19, 0x00	; 0
    6632:	40 e2       	ldi	r20, 0x20	; 32
    6634:	51 e4       	ldi	r21, 0x41	; 65
    6636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    663a:	dc 01       	movw	r26, r24
    663c:	cb 01       	movw	r24, r22
    663e:	bc 01       	movw	r22, r24
    6640:	cd 01       	movw	r24, r26
    6642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6646:	dc 01       	movw	r26, r24
    6648:	cb 01       	movw	r24, r22
    664a:	9e 8f       	std	Y+30, r25	; 0x1e
    664c:	8d 8f       	std	Y+29, r24	; 0x1d
    664e:	0f c0       	rjmp	.+30     	; 0x666e <LCD_WriteNumber+0x100>
    6650:	88 ec       	ldi	r24, 0xC8	; 200
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	9c 8f       	std	Y+28, r25	; 0x1c
    6656:	8b 8f       	std	Y+27, r24	; 0x1b
    6658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    665a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    665c:	01 97       	sbiw	r24, 0x01	; 1
    665e:	f1 f7       	brne	.-4      	; 0x665c <LCD_WriteNumber+0xee>
    6660:	9c 8f       	std	Y+28, r25	; 0x1c
    6662:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6666:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6668:	01 97       	sbiw	r24, 0x01	; 1
    666a:	9e 8f       	std	Y+30, r25	; 0x1e
    666c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    666e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6670:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6672:	00 97       	sbiw	r24, 0x00	; 0
    6674:	69 f7       	brne	.-38     	; 0x6650 <LCD_WriteNumber+0xe2>
    6676:	14 c0       	rjmp	.+40     	; 0x66a0 <LCD_WriteNumber+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6678:	6f 8d       	ldd	r22, Y+31	; 0x1f
    667a:	78 a1       	ldd	r23, Y+32	; 0x20
    667c:	89 a1       	ldd	r24, Y+33	; 0x21
    667e:	9a a1       	ldd	r25, Y+34	; 0x22
    6680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6684:	dc 01       	movw	r26, r24
    6686:	cb 01       	movw	r24, r22
    6688:	9e 8f       	std	Y+30, r25	; 0x1e
    668a:	8d 8f       	std	Y+29, r24	; 0x1d
    668c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    668e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6690:	9a 8f       	std	Y+26, r25	; 0x1a
    6692:	89 8f       	std	Y+25, r24	; 0x19
    6694:	89 8d       	ldd	r24, Y+25	; 0x19
    6696:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6698:	01 97       	sbiw	r24, 0x01	; 1
    669a:	f1 f7       	brne	.-4      	; 0x6698 <LCD_WriteNumber+0x12a>
    669c:	9a 8f       	std	Y+26, r25	; 0x1a
    669e:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(1);
		return Ret;
    66a0:	89 a5       	ldd	r24, Y+41	; 0x29
    66a2:	28 2f       	mov	r18, r24
    66a4:	30 e0       	ldi	r19, 0x00	; 0
    66a6:	40 e0       	ldi	r20, 0x00	; 0
    66a8:	50 e0       	ldi	r21, 0x00	; 0
    66aa:	ce 56       	subi	r28, 0x6E	; 110
    66ac:	df 4f       	sbci	r29, 0xFF	; 255
    66ae:	28 83       	st	Y, r18
    66b0:	39 83       	std	Y+1, r19	; 0x01
    66b2:	4a 83       	std	Y+2, r20	; 0x02
    66b4:	5b 83       	std	Y+3, r21	; 0x03
    66b6:	c2 59       	subi	r28, 0x92	; 146
    66b8:	d0 40       	sbci	r29, 0x00	; 0
    66ba:	4c c1       	rjmp	.+664    	; 0x6954 <LCD_WriteNumber+0x3e6>
	}

	/* if the user send negative number */
	if(Copy_s32Num < 0)
    66bc:	fe 01       	movw	r30, r28
    66be:	e2 57       	subi	r30, 0x72	; 114
    66c0:	ff 4f       	sbci	r31, 0xFF	; 255
    66c2:	80 81       	ld	r24, Z
    66c4:	91 81       	ldd	r25, Z+1	; 0x01
    66c6:	a2 81       	ldd	r26, Z+2	; 0x02
    66c8:	b3 81       	ldd	r27, Z+3	; 0x03
    66ca:	bb 23       	and	r27, r27
    66cc:	0c f0       	brlt	.+2      	; 0x66d0 <LCD_WriteNumber+0x162>
    66ce:	54 c0       	rjmp	.+168    	; 0x6778 <LCD_WriteNumber+0x20a>
	{
		Copy_s32Num *= -1;
    66d0:	9e 01       	movw	r18, r28
    66d2:	22 57       	subi	r18, 0x72	; 114
    66d4:	3f 4f       	sbci	r19, 0xFF	; 255
    66d6:	fe 01       	movw	r30, r28
    66d8:	e2 57       	subi	r30, 0x72	; 114
    66da:	ff 4f       	sbci	r31, 0xFF	; 255
    66dc:	80 81       	ld	r24, Z
    66de:	91 81       	ldd	r25, Z+1	; 0x01
    66e0:	a2 81       	ldd	r26, Z+2	; 0x02
    66e2:	b3 81       	ldd	r27, Z+3	; 0x03
    66e4:	b0 95       	com	r27
    66e6:	a0 95       	com	r26
    66e8:	90 95       	com	r25
    66ea:	81 95       	neg	r24
    66ec:	9f 4f       	sbci	r25, 0xFF	; 255
    66ee:	af 4f       	sbci	r26, 0xFF	; 255
    66f0:	bf 4f       	sbci	r27, 0xFF	; 255
    66f2:	f9 01       	movw	r30, r18
    66f4:	80 83       	st	Z, r24
    66f6:	91 83       	std	Z+1, r25	; 0x01
    66f8:	a2 83       	std	Z+2, r26	; 0x02
    66fa:	b3 83       	std	Z+3, r27	; 0x03
		LCD_WriteChar('-');
    66fc:	8d e2       	ldi	r24, 0x2D	; 45
    66fe:	0e 94 a6 32 	call	0x654c	; 0x654c <LCD_WriteChar>
    6702:	3a c0       	rjmp	.+116    	; 0x6778 <LCD_WriteNumber+0x20a>

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
	{
		/* Getting Remainder "Last Digit" */
		Rem = Copy_s32Num % 10;
    6704:	fe 01       	movw	r30, r28
    6706:	e2 57       	subi	r30, 0x72	; 114
    6708:	ff 4f       	sbci	r31, 0xFF	; 255
    670a:	80 81       	ld	r24, Z
    670c:	91 81       	ldd	r25, Z+1	; 0x01
    670e:	a2 81       	ldd	r26, Z+2	; 0x02
    6710:	b3 81       	ldd	r27, Z+3	; 0x03
    6712:	2a e0       	ldi	r18, 0x0A	; 10
    6714:	30 e0       	ldi	r19, 0x00	; 0
    6716:	40 e0       	ldi	r20, 0x00	; 0
    6718:	50 e0       	ldi	r21, 0x00	; 0
    671a:	bc 01       	movw	r22, r24
    671c:	cd 01       	movw	r24, r26
    671e:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <__divmodsi4>
    6722:	dc 01       	movw	r26, r24
    6724:	cb 01       	movw	r24, r22
    6726:	8f a3       	std	Y+39, r24	; 0x27

		/* Assigning the Last Digit to the String */
		Str[iterator] = Rem + '0';
    6728:	88 a5       	ldd	r24, Y+40	; 0x28
    672a:	28 2f       	mov	r18, r24
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	8f a1       	ldd	r24, Y+39	; 0x27
    6730:	48 2f       	mov	r20, r24
    6732:	40 5d       	subi	r20, 0xD0	; 208
    6734:	ce 01       	movw	r24, r28
    6736:	8a 96       	adiw	r24, 0x2a	; 42
    6738:	fc 01       	movw	r30, r24
    673a:	e2 0f       	add	r30, r18
    673c:	f3 1f       	adc	r31, r19
    673e:	40 83       	st	Z, r20
		/* Increasing the iterator of the string */
		iterator++;
    6740:	88 a5       	ldd	r24, Y+40	; 0x28
    6742:	8f 5f       	subi	r24, 0xFF	; 255
    6744:	88 a7       	std	Y+40, r24	; 0x28

		/* Deleting the last digit from the number */
		Copy_s32Num /= 10;
    6746:	8e 01       	movw	r16, r28
    6748:	02 57       	subi	r16, 0x72	; 114
    674a:	1f 4f       	sbci	r17, 0xFF	; 255
    674c:	fe 01       	movw	r30, r28
    674e:	e2 57       	subi	r30, 0x72	; 114
    6750:	ff 4f       	sbci	r31, 0xFF	; 255
    6752:	80 81       	ld	r24, Z
    6754:	91 81       	ldd	r25, Z+1	; 0x01
    6756:	a2 81       	ldd	r26, Z+2	; 0x02
    6758:	b3 81       	ldd	r27, Z+3	; 0x03
    675a:	2a e0       	ldi	r18, 0x0A	; 10
    675c:	30 e0       	ldi	r19, 0x00	; 0
    675e:	40 e0       	ldi	r20, 0x00	; 0
    6760:	50 e0       	ldi	r21, 0x00	; 0
    6762:	bc 01       	movw	r22, r24
    6764:	cd 01       	movw	r24, r26
    6766:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <__divmodsi4>
    676a:	da 01       	movw	r26, r20
    676c:	c9 01       	movw	r24, r18
    676e:	f8 01       	movw	r30, r16
    6770:	80 83       	st	Z, r24
    6772:	91 83       	std	Z+1, r25	; 0x01
    6774:	a2 83       	std	Z+2, r26	; 0x02
    6776:	b3 83       	std	Z+3, r27	; 0x03
		Copy_s32Num *= -1;
		LCD_WriteChar('-');
	}

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
    6778:	fe 01       	movw	r30, r28
    677a:	e2 57       	subi	r30, 0x72	; 114
    677c:	ff 4f       	sbci	r31, 0xFF	; 255
    677e:	80 81       	ld	r24, Z
    6780:	91 81       	ldd	r25, Z+1	; 0x01
    6782:	a2 81       	ldd	r26, Z+2	; 0x02
    6784:	b3 81       	ldd	r27, Z+3	; 0x03
    6786:	18 16       	cp	r1, r24
    6788:	19 06       	cpc	r1, r25
    678a:	1a 06       	cpc	r1, r26
    678c:	1b 06       	cpc	r1, r27
    678e:	0c f4       	brge	.+2      	; 0x6792 <LCD_WriteNumber+0x224>
    6790:	b9 cf       	rjmp	.-142    	; 0x6704 <LCD_WriteNumber+0x196>
    6792:	cf c0       	rjmp	.+414    	; 0x6932 <LCD_WriteNumber+0x3c4>

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
	{
		LCD_WriteChar(Str[iterator-1]);
    6794:	88 a5       	ldd	r24, Y+40	; 0x28
    6796:	88 2f       	mov	r24, r24
    6798:	90 e0       	ldi	r25, 0x00	; 0
    679a:	9c 01       	movw	r18, r24
    679c:	21 50       	subi	r18, 0x01	; 1
    679e:	30 40       	sbci	r19, 0x00	; 0
    67a0:	ce 01       	movw	r24, r28
    67a2:	8a 96       	adiw	r24, 0x2a	; 42
    67a4:	fc 01       	movw	r30, r24
    67a6:	e2 0f       	add	r30, r18
    67a8:	f3 1f       	adc	r31, r19
    67aa:	80 81       	ld	r24, Z
    67ac:	0e 94 a6 32 	call	0x654c	; 0x654c <LCD_WriteChar>
    67b0:	80 e0       	ldi	r24, 0x00	; 0
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	a0 e8       	ldi	r26, 0x80	; 128
    67b6:	bf e3       	ldi	r27, 0x3F	; 63
    67b8:	8d 8b       	std	Y+21, r24	; 0x15
    67ba:	9e 8b       	std	Y+22, r25	; 0x16
    67bc:	af 8b       	std	Y+23, r26	; 0x17
    67be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    67c0:	6d 89       	ldd	r22, Y+21	; 0x15
    67c2:	7e 89       	ldd	r23, Y+22	; 0x16
    67c4:	8f 89       	ldd	r24, Y+23	; 0x17
    67c6:	98 8d       	ldd	r25, Y+24	; 0x18
    67c8:	2b ea       	ldi	r18, 0xAB	; 171
    67ca:	3a ea       	ldi	r19, 0xAA	; 170
    67cc:	4a e2       	ldi	r20, 0x2A	; 42
    67ce:	50 e4       	ldi	r21, 0x40	; 64
    67d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67d4:	dc 01       	movw	r26, r24
    67d6:	cb 01       	movw	r24, r22
    67d8:	89 8b       	std	Y+17, r24	; 0x11
    67da:	9a 8b       	std	Y+18, r25	; 0x12
    67dc:	ab 8b       	std	Y+19, r26	; 0x13
    67de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    67e0:	69 89       	ldd	r22, Y+17	; 0x11
    67e2:	7a 89       	ldd	r23, Y+18	; 0x12
    67e4:	8b 89       	ldd	r24, Y+19	; 0x13
    67e6:	9c 89       	ldd	r25, Y+20	; 0x14
    67e8:	20 e0       	ldi	r18, 0x00	; 0
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	40 e8       	ldi	r20, 0x80	; 128
    67ee:	5f e3       	ldi	r21, 0x3F	; 63
    67f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67f4:	88 23       	and	r24, r24
    67f6:	1c f4       	brge	.+6      	; 0x67fe <LCD_WriteNumber+0x290>
		__ticks = 1;
    67f8:	81 e0       	ldi	r24, 0x01	; 1
    67fa:	88 8b       	std	Y+16, r24	; 0x10
    67fc:	91 c0       	rjmp	.+290    	; 0x6920 <LCD_WriteNumber+0x3b2>
	else if (__tmp > 255)
    67fe:	69 89       	ldd	r22, Y+17	; 0x11
    6800:	7a 89       	ldd	r23, Y+18	; 0x12
    6802:	8b 89       	ldd	r24, Y+19	; 0x13
    6804:	9c 89       	ldd	r25, Y+20	; 0x14
    6806:	20 e0       	ldi	r18, 0x00	; 0
    6808:	30 e0       	ldi	r19, 0x00	; 0
    680a:	4f e7       	ldi	r20, 0x7F	; 127
    680c:	53 e4       	ldi	r21, 0x43	; 67
    680e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6812:	18 16       	cp	r1, r24
    6814:	0c f0       	brlt	.+2      	; 0x6818 <LCD_WriteNumber+0x2aa>
    6816:	7b c0       	rjmp	.+246    	; 0x690e <LCD_WriteNumber+0x3a0>
	{
		_delay_ms(__us / 1000.0);
    6818:	6d 89       	ldd	r22, Y+21	; 0x15
    681a:	7e 89       	ldd	r23, Y+22	; 0x16
    681c:	8f 89       	ldd	r24, Y+23	; 0x17
    681e:	98 8d       	ldd	r25, Y+24	; 0x18
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	30 e0       	ldi	r19, 0x00	; 0
    6824:	4a e7       	ldi	r20, 0x7A	; 122
    6826:	54 e4       	ldi	r21, 0x44	; 68
    6828:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    682c:	dc 01       	movw	r26, r24
    682e:	cb 01       	movw	r24, r22
    6830:	8c 87       	std	Y+12, r24	; 0x0c
    6832:	9d 87       	std	Y+13, r25	; 0x0d
    6834:	ae 87       	std	Y+14, r26	; 0x0e
    6836:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6838:	6c 85       	ldd	r22, Y+12	; 0x0c
    683a:	7d 85       	ldd	r23, Y+13	; 0x0d
    683c:	8e 85       	ldd	r24, Y+14	; 0x0e
    683e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6840:	20 e0       	ldi	r18, 0x00	; 0
    6842:	30 e0       	ldi	r19, 0x00	; 0
    6844:	4a ef       	ldi	r20, 0xFA	; 250
    6846:	54 e4       	ldi	r21, 0x44	; 68
    6848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    684c:	dc 01       	movw	r26, r24
    684e:	cb 01       	movw	r24, r22
    6850:	88 87       	std	Y+8, r24	; 0x08
    6852:	99 87       	std	Y+9, r25	; 0x09
    6854:	aa 87       	std	Y+10, r26	; 0x0a
    6856:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6858:	68 85       	ldd	r22, Y+8	; 0x08
    685a:	79 85       	ldd	r23, Y+9	; 0x09
    685c:	8a 85       	ldd	r24, Y+10	; 0x0a
    685e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6860:	20 e0       	ldi	r18, 0x00	; 0
    6862:	30 e0       	ldi	r19, 0x00	; 0
    6864:	40 e8       	ldi	r20, 0x80	; 128
    6866:	5f e3       	ldi	r21, 0x3F	; 63
    6868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    686c:	88 23       	and	r24, r24
    686e:	2c f4       	brge	.+10     	; 0x687a <LCD_WriteNumber+0x30c>
		__ticks = 1;
    6870:	81 e0       	ldi	r24, 0x01	; 1
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	9f 83       	std	Y+7, r25	; 0x07
    6876:	8e 83       	std	Y+6, r24	; 0x06
    6878:	3f c0       	rjmp	.+126    	; 0x68f8 <LCD_WriteNumber+0x38a>
	else if (__tmp > 65535)
    687a:	68 85       	ldd	r22, Y+8	; 0x08
    687c:	79 85       	ldd	r23, Y+9	; 0x09
    687e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6880:	9b 85       	ldd	r25, Y+11	; 0x0b
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	3f ef       	ldi	r19, 0xFF	; 255
    6886:	4f e7       	ldi	r20, 0x7F	; 127
    6888:	57 e4       	ldi	r21, 0x47	; 71
    688a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    688e:	18 16       	cp	r1, r24
    6890:	4c f5       	brge	.+82     	; 0x68e4 <LCD_WriteNumber+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6892:	6c 85       	ldd	r22, Y+12	; 0x0c
    6894:	7d 85       	ldd	r23, Y+13	; 0x0d
    6896:	8e 85       	ldd	r24, Y+14	; 0x0e
    6898:	9f 85       	ldd	r25, Y+15	; 0x0f
    689a:	20 e0       	ldi	r18, 0x00	; 0
    689c:	30 e0       	ldi	r19, 0x00	; 0
    689e:	40 e2       	ldi	r20, 0x20	; 32
    68a0:	51 e4       	ldi	r21, 0x41	; 65
    68a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68a6:	dc 01       	movw	r26, r24
    68a8:	cb 01       	movw	r24, r22
    68aa:	bc 01       	movw	r22, r24
    68ac:	cd 01       	movw	r24, r26
    68ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68b2:	dc 01       	movw	r26, r24
    68b4:	cb 01       	movw	r24, r22
    68b6:	9f 83       	std	Y+7, r25	; 0x07
    68b8:	8e 83       	std	Y+6, r24	; 0x06
    68ba:	0f c0       	rjmp	.+30     	; 0x68da <LCD_WriteNumber+0x36c>
    68bc:	88 ec       	ldi	r24, 0xC8	; 200
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	9d 83       	std	Y+5, r25	; 0x05
    68c2:	8c 83       	std	Y+4, r24	; 0x04
    68c4:	8c 81       	ldd	r24, Y+4	; 0x04
    68c6:	9d 81       	ldd	r25, Y+5	; 0x05
    68c8:	01 97       	sbiw	r24, 0x01	; 1
    68ca:	f1 f7       	brne	.-4      	; 0x68c8 <LCD_WriteNumber+0x35a>
    68cc:	9d 83       	std	Y+5, r25	; 0x05
    68ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68d0:	8e 81       	ldd	r24, Y+6	; 0x06
    68d2:	9f 81       	ldd	r25, Y+7	; 0x07
    68d4:	01 97       	sbiw	r24, 0x01	; 1
    68d6:	9f 83       	std	Y+7, r25	; 0x07
    68d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68da:	8e 81       	ldd	r24, Y+6	; 0x06
    68dc:	9f 81       	ldd	r25, Y+7	; 0x07
    68de:	00 97       	sbiw	r24, 0x00	; 0
    68e0:	69 f7       	brne	.-38     	; 0x68bc <LCD_WriteNumber+0x34e>
    68e2:	24 c0       	rjmp	.+72     	; 0x692c <LCD_WriteNumber+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68e4:	68 85       	ldd	r22, Y+8	; 0x08
    68e6:	79 85       	ldd	r23, Y+9	; 0x09
    68e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    68ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    68ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68f0:	dc 01       	movw	r26, r24
    68f2:	cb 01       	movw	r24, r22
    68f4:	9f 83       	std	Y+7, r25	; 0x07
    68f6:	8e 83       	std	Y+6, r24	; 0x06
    68f8:	8e 81       	ldd	r24, Y+6	; 0x06
    68fa:	9f 81       	ldd	r25, Y+7	; 0x07
    68fc:	9b 83       	std	Y+3, r25	; 0x03
    68fe:	8a 83       	std	Y+2, r24	; 0x02
    6900:	8a 81       	ldd	r24, Y+2	; 0x02
    6902:	9b 81       	ldd	r25, Y+3	; 0x03
    6904:	01 97       	sbiw	r24, 0x01	; 1
    6906:	f1 f7       	brne	.-4      	; 0x6904 <LCD_WriteNumber+0x396>
    6908:	9b 83       	std	Y+3, r25	; 0x03
    690a:	8a 83       	std	Y+2, r24	; 0x02
    690c:	0f c0       	rjmp	.+30     	; 0x692c <LCD_WriteNumber+0x3be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    690e:	69 89       	ldd	r22, Y+17	; 0x11
    6910:	7a 89       	ldd	r23, Y+18	; 0x12
    6912:	8b 89       	ldd	r24, Y+19	; 0x13
    6914:	9c 89       	ldd	r25, Y+20	; 0x14
    6916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    691a:	dc 01       	movw	r26, r24
    691c:	cb 01       	movw	r24, r22
    691e:	88 8b       	std	Y+16, r24	; 0x10
    6920:	88 89       	ldd	r24, Y+16	; 0x10
    6922:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6924:	89 81       	ldd	r24, Y+1	; 0x01
    6926:	8a 95       	dec	r24
    6928:	f1 f7       	brne	.-4      	; 0x6926 <LCD_WriteNumber+0x3b8>
    692a:	89 83       	std	Y+1, r24	; 0x01
		Copy_s32Num /= 10;
	}

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
    692c:	88 a5       	ldd	r24, Y+40	; 0x28
    692e:	81 50       	subi	r24, 0x01	; 1
    6930:	88 a7       	std	Y+40, r24	; 0x28
    6932:	88 a5       	ldd	r24, Y+40	; 0x28
    6934:	88 23       	and	r24, r24
    6936:	09 f0       	breq	.+2      	; 0x693a <LCD_WriteNumber+0x3cc>
    6938:	2d cf       	rjmp	.-422    	; 0x6794 <LCD_WriteNumber+0x226>
	{
		LCD_WriteChar(Str[iterator-1]);
		_delay_us(1);
	}

	return Ret;
    693a:	89 a5       	ldd	r24, Y+41	; 0x29
    693c:	28 2f       	mov	r18, r24
    693e:	30 e0       	ldi	r19, 0x00	; 0
    6940:	40 e0       	ldi	r20, 0x00	; 0
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	ce 56       	subi	r28, 0x6E	; 110
    6946:	df 4f       	sbci	r29, 0xFF	; 255
    6948:	28 83       	st	Y, r18
    694a:	39 83       	std	Y+1, r19	; 0x01
    694c:	4a 83       	std	Y+2, r20	; 0x02
    694e:	5b 83       	std	Y+3, r21	; 0x03
    6950:	c2 59       	subi	r28, 0x92	; 146
    6952:	d0 40       	sbci	r29, 0x00	; 0
    6954:	ce 56       	subi	r28, 0x6E	; 110
    6956:	df 4f       	sbci	r29, 0xFF	; 255
    6958:	88 81       	ld	r24, Y
    695a:	99 81       	ldd	r25, Y+1	; 0x01
    695c:	aa 81       	ldd	r26, Y+2	; 0x02
    695e:	bb 81       	ldd	r27, Y+3	; 0x03
    6960:	c2 59       	subi	r28, 0x92	; 146
    6962:	d0 40       	sbci	r29, 0x00	; 0
}
    6964:	bc 01       	movw	r22, r24
    6966:	cd 01       	movw	r24, r26
    6968:	cb 56       	subi	r28, 0x6B	; 107
    696a:	df 4f       	sbci	r29, 0xFF	; 255
    696c:	0f b6       	in	r0, 0x3f	; 63
    696e:	f8 94       	cli
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	0f be       	out	0x3f, r0	; 63
    6974:	cd bf       	out	0x3d, r28	; 61
    6976:	cf 91       	pop	r28
    6978:	df 91       	pop	r29
    697a:	1f 91       	pop	r17
    697c:	0f 91       	pop	r16
    697e:	08 95       	ret

00006980 <LCD_GoToWriteNumber>:


u8 LCD_GoToWriteNumber(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_s32Num)
{
    6980:	df 93       	push	r29
    6982:	cf 93       	push	r28
    6984:	00 d0       	rcall	.+0      	; 0x6986 <LCD_GoToWriteNumber+0x6>
    6986:	00 d0       	rcall	.+0      	; 0x6988 <LCD_GoToWriteNumber+0x8>
    6988:	cd b7       	in	r28, 0x3d	; 61
    698a:	de b7       	in	r29, 0x3e	; 62
    698c:	8a 83       	std	Y+2, r24	; 0x02
    698e:	6b 83       	std	Y+3, r22	; 0x03
    6990:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    6992:	81 e0       	ldi	r24, 0x01	; 1
    6994:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    6996:	8a 81       	ldd	r24, Y+2	; 0x02
    6998:	6b 81       	ldd	r22, Y+3	; 0x03
    699a:	0e 94 69 30 	call	0x60d2	; 0x60d2 <LCD_GoTo>
	LCD_WriteNumber(Copy_s32Num);
    699e:	8c 81       	ldd	r24, Y+4	; 0x04
    69a0:	88 2f       	mov	r24, r24
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	a0 e0       	ldi	r26, 0x00	; 0
    69a6:	b0 e0       	ldi	r27, 0x00	; 0
    69a8:	bc 01       	movw	r22, r24
    69aa:	cd 01       	movw	r24, r26
    69ac:	0e 94 b7 32 	call	0x656e	; 0x656e <LCD_WriteNumber>

	return Ret;
    69b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    69b2:	0f 90       	pop	r0
    69b4:	0f 90       	pop	r0
    69b6:	0f 90       	pop	r0
    69b8:	0f 90       	pop	r0
    69ba:	cf 91       	pop	r28
    69bc:	df 91       	pop	r29
    69be:	08 95       	ret

000069c0 <LCD_GoToClear>:
u8 LCD_GoToClear(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8NumCells)
{
    69c0:	df 93       	push	r29
    69c2:	cf 93       	push	r28
    69c4:	00 d0       	rcall	.+0      	; 0x69c6 <LCD_GoToClear+0x6>
    69c6:	00 d0       	rcall	.+0      	; 0x69c8 <LCD_GoToClear+0x8>
    69c8:	0f 92       	push	r0
    69ca:	cd b7       	in	r28, 0x3d	; 61
    69cc:	de b7       	in	r29, 0x3e	; 62
    69ce:	8b 83       	std	Y+3, r24	; 0x03
    69d0:	6c 83       	std	Y+4, r22	; 0x04
    69d2:	4d 83       	std	Y+5, r20	; 0x05
	u8 Ret = E_OK;
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator = 0;
    69d8:	19 82       	std	Y+1, r1	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    69da:	8b 81       	ldd	r24, Y+3	; 0x03
    69dc:	6c 81       	ldd	r22, Y+4	; 0x04
    69de:	0e 94 69 30 	call	0x60d2	; 0x60d2 <LCD_GoTo>
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    69e2:	19 82       	std	Y+1, r1	; 0x01
    69e4:	06 c0       	rjmp	.+12     	; 0x69f2 <LCD_GoToClear+0x32>
	{
		LCD_WriteChar(' ');
    69e6:	80 e2       	ldi	r24, 0x20	; 32
    69e8:	0e 94 a6 32 	call	0x654c	; 0x654c <LCD_WriteChar>
{
	u8 Ret = E_OK;
	u8 iterator = 0;

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    69ec:	89 81       	ldd	r24, Y+1	; 0x01
    69ee:	8f 5f       	subi	r24, 0xFF	; 255
    69f0:	89 83       	std	Y+1, r24	; 0x01
    69f2:	99 81       	ldd	r25, Y+1	; 0x01
    69f4:	8d 81       	ldd	r24, Y+5	; 0x05
    69f6:	98 17       	cp	r25, r24
    69f8:	b0 f3       	brcs	.-20     	; 0x69e6 <LCD_GoToClear+0x26>
	{
		LCD_WriteChar(' ');
	}

	return Ret;
    69fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    69fc:	0f 90       	pop	r0
    69fe:	0f 90       	pop	r0
    6a00:	0f 90       	pop	r0
    6a02:	0f 90       	pop	r0
    6a04:	0f 90       	pop	r0
    6a06:	cf 91       	pop	r28
    6a08:	df 91       	pop	r29
    6a0a:	08 95       	ret

00006a0c <LCD_GoToWriteChar>:

u8 LCD_GoToWriteChar(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8Char)
{
    6a0c:	df 93       	push	r29
    6a0e:	cf 93       	push	r28
    6a10:	00 d0       	rcall	.+0      	; 0x6a12 <LCD_GoToWriteChar+0x6>
    6a12:	00 d0       	rcall	.+0      	; 0x6a14 <LCD_GoToWriteChar+0x8>
    6a14:	cd b7       	in	r28, 0x3d	; 61
    6a16:	de b7       	in	r29, 0x3e	; 62
    6a18:	8a 83       	std	Y+2, r24	; 0x02
    6a1a:	6b 83       	std	Y+3, r22	; 0x03
    6a1c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    6a1e:	81 e0       	ldi	r24, 0x01	; 1
    6a20:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    6a22:	8a 81       	ldd	r24, Y+2	; 0x02
    6a24:	6b 81       	ldd	r22, Y+3	; 0x03
    6a26:	0e 94 69 30 	call	0x60d2	; 0x60d2 <LCD_GoTo>
	LCD_WriteChar(Copy_u8Char);
    6a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a2c:	0e 94 a6 32 	call	0x654c	; 0x654c <LCD_WriteChar>

	return Ret;
    6a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a32:	0f 90       	pop	r0
    6a34:	0f 90       	pop	r0
    6a36:	0f 90       	pop	r0
    6a38:	0f 90       	pop	r0
    6a3a:	cf 91       	pop	r28
    6a3c:	df 91       	pop	r29
    6a3e:	08 95       	ret

00006a40 <LCD_GoToWriteString>:


u8 LCD_GoToWriteString(u8 Copy_u8Line, u8 Copy_u8Cell, const u8 *Copy_u8PtrString)
{
    6a40:	df 93       	push	r29
    6a42:	cf 93       	push	r28
    6a44:	00 d0       	rcall	.+0      	; 0x6a46 <LCD_GoToWriteString+0x6>
    6a46:	00 d0       	rcall	.+0      	; 0x6a48 <LCD_GoToWriteString+0x8>
    6a48:	0f 92       	push	r0
    6a4a:	cd b7       	in	r28, 0x3d	; 61
    6a4c:	de b7       	in	r29, 0x3e	; 62
    6a4e:	8a 83       	std	Y+2, r24	; 0x02
    6a50:	6b 83       	std	Y+3, r22	; 0x03
    6a52:	5d 83       	std	Y+5, r21	; 0x05
    6a54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    6a56:	81 e0       	ldi	r24, 0x01	; 1
    6a58:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    6a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a5c:	6b 81       	ldd	r22, Y+3	; 0x03
    6a5e:	0e 94 69 30 	call	0x60d2	; 0x60d2 <LCD_GoTo>
	LCD_WriteString(Copy_u8PtrString);
    6a62:	8c 81       	ldd	r24, Y+4	; 0x04
    6a64:	9d 81       	ldd	r25, Y+5	; 0x05
    6a66:	0e 94 40 30 	call	0x6080	; 0x6080 <LCD_WriteString>

	return Ret;
    6a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a6c:	0f 90       	pop	r0
    6a6e:	0f 90       	pop	r0
    6a70:	0f 90       	pop	r0
    6a72:	0f 90       	pop	r0
    6a74:	0f 90       	pop	r0
    6a76:	cf 91       	pop	r28
    6a78:	df 91       	pop	r29
    6a7a:	08 95       	ret

00006a7c <Init_KP>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"KP_Config.h"
#include"KP_Interface.h"
void Init_KP(KP_stConfiguration *Copy_pstConfig)
{
    6a7c:	df 93       	push	r29
    6a7e:	cf 93       	push	r28
    6a80:	00 d0       	rcall	.+0      	; 0x6a82 <Init_KP+0x6>
    6a82:	cd b7       	in	r28, 0x3d	; 61
    6a84:	de b7       	in	r29, 0x3e	; 62
    6a86:	9a 83       	std	Y+2, r25	; 0x02
    6a88:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum1_PIN,DIO_u8PIN_OUTPUT);
    6a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    6a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    6a8e:	80 81       	ld	r24, Z
    6a90:	e9 81       	ldd	r30, Y+1	; 0x01
    6a92:	fa 81       	ldd	r31, Y+2	; 0x02
    6a94:	90 85       	ldd	r25, Z+8	; 0x08
    6a96:	69 2f       	mov	r22, r25
    6a98:	41 e0       	ldi	r20, 0x01	; 1
    6a9a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum2_PIN,DIO_u8PIN_OUTPUT);
    6a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    6aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    6aa2:	81 81       	ldd	r24, Z+1	; 0x01
    6aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    6aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    6aa8:	91 85       	ldd	r25, Z+9	; 0x09
    6aaa:	69 2f       	mov	r22, r25
    6aac:	41 e0       	ldi	r20, 0x01	; 1
    6aae:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum3_PIN,DIO_u8PIN_OUTPUT);
    6ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    6ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    6ab6:	82 81       	ldd	r24, Z+2	; 0x02
    6ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    6aba:	fa 81       	ldd	r31, Y+2	; 0x02
    6abc:	92 85       	ldd	r25, Z+10	; 0x0a
    6abe:	69 2f       	mov	r22, r25
    6ac0:	41 e0       	ldi	r20, 0x01	; 1
    6ac2:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum4_PORT,Copy_pstConfig->KP_Colum4_PIN,DIO_u8PIN_OUTPUT);
    6ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    6ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    6aca:	83 81       	ldd	r24, Z+3	; 0x03
    6acc:	e9 81       	ldd	r30, Y+1	; 0x01
    6ace:	fa 81       	ldd	r31, Y+2	; 0x02
    6ad0:	93 85       	ldd	r25, Z+11	; 0x0b
    6ad2:	69 2f       	mov	r22, r25
    6ad4:	41 e0       	ldi	r20, 0x01	; 1
    6ad6:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row1_PIN,DIO_u8PIN_INPUT);
    6ada:	e9 81       	ldd	r30, Y+1	; 0x01
    6adc:	fa 81       	ldd	r31, Y+2	; 0x02
    6ade:	84 81       	ldd	r24, Z+4	; 0x04
    6ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    6ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    6ae4:	94 85       	ldd	r25, Z+12	; 0x0c
    6ae6:	69 2f       	mov	r22, r25
    6ae8:	40 e0       	ldi	r20, 0x00	; 0
    6aea:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row2_PIN,DIO_u8PIN_INPUT);
    6aee:	e9 81       	ldd	r30, Y+1	; 0x01
    6af0:	fa 81       	ldd	r31, Y+2	; 0x02
    6af2:	85 81       	ldd	r24, Z+5	; 0x05
    6af4:	e9 81       	ldd	r30, Y+1	; 0x01
    6af6:	fa 81       	ldd	r31, Y+2	; 0x02
    6af8:	95 85       	ldd	r25, Z+13	; 0x0d
    6afa:	69 2f       	mov	r22, r25
    6afc:	40 e0       	ldi	r20, 0x00	; 0
    6afe:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row3_PIN,DIO_u8PIN_INPUT);
    6b02:	e9 81       	ldd	r30, Y+1	; 0x01
    6b04:	fa 81       	ldd	r31, Y+2	; 0x02
    6b06:	86 81       	ldd	r24, Z+6	; 0x06
    6b08:	e9 81       	ldd	r30, Y+1	; 0x01
    6b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    6b0c:	96 85       	ldd	r25, Z+14	; 0x0e
    6b0e:	69 2f       	mov	r22, r25
    6b10:	40 e0       	ldi	r20, 0x00	; 0
    6b12:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row4_PORT,Copy_pstConfig->KP_Row4_PIN,DIO_u8PIN_INPUT);
    6b16:	e9 81       	ldd	r30, Y+1	; 0x01
    6b18:	fa 81       	ldd	r31, Y+2	; 0x02
    6b1a:	87 81       	ldd	r24, Z+7	; 0x07
    6b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    6b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    6b20:	97 85       	ldd	r25, Z+15	; 0x0f
    6b22:	69 2f       	mov	r22, r25
    6b24:	40 e0       	ldi	r20, 0x00	; 0
    6b26:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <DIO_VoidSetPinDirection>
	
}
    6b2a:	0f 90       	pop	r0
    6b2c:	0f 90       	pop	r0
    6b2e:	cf 91       	pop	r28
    6b30:	df 91       	pop	r29
    6b32:	08 95       	ret

00006b34 <Read_KP>:
u8 Read_KP(KP_stConfiguration *Copy_pstConfig)
{
    6b34:	df 93       	push	r29
    6b36:	cf 93       	push	r28
    6b38:	cd b7       	in	r28, 0x3d	; 61
    6b3a:	de b7       	in	r29, 0x3e	; 62
    6b3c:	a5 97       	sbiw	r28, 0x25	; 37
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	de bf       	out	0x3e, r29	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	cd bf       	out	0x3d, r28	; 61
    6b48:	98 a3       	std	Y+32, r25	; 0x20
    6b4a:	8f 8f       	std	Y+31, r24	; 0x1f
    u8 Pressed_key = KP_Not_Pressed;
    6b4c:	8f ef       	ldi	r24, 0xFF	; 255
    6b4e:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_KP_Arr[Rows_NUM][Columns_NUM] = KP_Arr; // Transpose KP_Arr
    6b50:	ce 01       	movw	r24, r28
    6b52:	04 96       	adiw	r24, 0x04	; 4
    6b54:	9a a3       	std	Y+34, r25	; 0x22
    6b56:	89 a3       	std	Y+33, r24	; 0x21
    6b58:	ef e1       	ldi	r30, 0x1F	; 31
    6b5a:	f2 e0       	ldi	r31, 0x02	; 2
    6b5c:	fc a3       	std	Y+36, r31	; 0x24
    6b5e:	eb a3       	std	Y+35, r30	; 0x23
    6b60:	fc e0       	ldi	r31, 0x0C	; 12
    6b62:	fd a3       	std	Y+37, r31	; 0x25
    6b64:	eb a1       	ldd	r30, Y+35	; 0x23
    6b66:	fc a1       	ldd	r31, Y+36	; 0x24
    6b68:	00 80       	ld	r0, Z
    6b6a:	8b a1       	ldd	r24, Y+35	; 0x23
    6b6c:	9c a1       	ldd	r25, Y+36	; 0x24
    6b6e:	01 96       	adiw	r24, 0x01	; 1
    6b70:	9c a3       	std	Y+36, r25	; 0x24
    6b72:	8b a3       	std	Y+35, r24	; 0x23
    6b74:	e9 a1       	ldd	r30, Y+33	; 0x21
    6b76:	fa a1       	ldd	r31, Y+34	; 0x22
    6b78:	00 82       	st	Z, r0
    6b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    6b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    6b7e:	01 96       	adiw	r24, 0x01	; 1
    6b80:	9a a3       	std	Y+34, r25	; 0x22
    6b82:	89 a3       	std	Y+33, r24	; 0x21
    6b84:	9d a1       	ldd	r25, Y+37	; 0x25
    6b86:	91 50       	subi	r25, 0x01	; 1
    6b88:	9d a3       	std	Y+37, r25	; 0x25
    6b8a:	ed a1       	ldd	r30, Y+37	; 0x25
    6b8c:	ee 23       	and	r30, r30
    6b8e:	51 f7       	brne	.-44     	; 0x6b64 <Read_KP+0x30>
    
	u8 Colum_Index ,Row_Index ;
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
    6b90:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6b92:	f8 a1       	ldd	r31, Y+32	; 0x20
    6b94:	90 81       	ld	r25, Z
    6b96:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6b98:	f8 a1       	ldd	r31, Y+32	; 0x20
    6b9a:	21 81       	ldd	r18, Z+1	; 0x01
    6b9c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6b9e:	f8 a1       	ldd	r31, Y+32	; 0x20
    6ba0:	82 81       	ldd	r24, Z+2	; 0x02
    6ba2:	98 8b       	std	Y+16, r25	; 0x10
    6ba4:	29 8b       	std	Y+17, r18	; 0x11
    6ba6:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
    6ba8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6baa:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bac:	24 81       	ldd	r18, Z+4	; 0x04
    6bae:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bb0:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bb2:	35 81       	ldd	r19, Z+5	; 0x05
    6bb4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bb6:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bb8:	86 81       	ldd	r24, Z+6	; 0x06
    6bba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bbc:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bbe:	97 81       	ldd	r25, Z+7	; 0x07
    6bc0:	2b 8b       	std	Y+19, r18	; 0x13
    6bc2:	3c 8b       	std	Y+20, r19	; 0x14
    6bc4:	8d 8b       	std	Y+21, r24	; 0x15
    6bc6:	9e 8b       	std	Y+22, r25	; 0x16
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
    6bc8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bca:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bcc:	90 85       	ldd	r25, Z+8	; 0x08
    6bce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bd0:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bd2:	21 85       	ldd	r18, Z+9	; 0x09
    6bd4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bd6:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bd8:	82 85       	ldd	r24, Z+10	; 0x0a
    6bda:	9f 8b       	std	Y+23, r25	; 0x17
    6bdc:	28 8f       	std	Y+24, r18	; 0x18
    6bde:	89 8f       	std	Y+25, r24	; 0x19
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
    6be0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6be2:	f8 a1       	ldd	r31, Y+32	; 0x20
    6be4:	24 85       	ldd	r18, Z+12	; 0x0c
    6be6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6be8:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bea:	35 85       	ldd	r19, Z+13	; 0x0d
    6bec:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bee:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bf0:	86 85       	ldd	r24, Z+14	; 0x0e
    6bf2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6bf4:	f8 a1       	ldd	r31, Y+32	; 0x20
    6bf6:	97 85       	ldd	r25, Z+15	; 0x0f
    6bf8:	2a 8f       	std	Y+26, r18	; 0x1a
    6bfa:	3b 8f       	std	Y+27, r19	; 0x1b
    6bfc:	8c 8f       	std	Y+28, r24	; 0x1c
    6bfe:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 State = 0;
    6c00:	1e 8e       	std	Y+30, r1	; 0x1e
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    6c02:	1a 82       	std	Y+2, r1	; 0x02
    6c04:	1a c0       	rjmp	.+52     	; 0x6c3a <Read_KP+0x106>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
    6c06:	8a 81       	ldd	r24, Y+2	; 0x02
    6c08:	28 2f       	mov	r18, r24
    6c0a:	30 e0       	ldi	r19, 0x00	; 0
    6c0c:	ce 01       	movw	r24, r28
    6c0e:	40 96       	adiw	r24, 0x10	; 16
    6c10:	fc 01       	movw	r30, r24
    6c12:	e2 0f       	add	r30, r18
    6c14:	f3 1f       	adc	r31, r19
    6c16:	40 81       	ld	r20, Z
    6c18:	8a 81       	ldd	r24, Y+2	; 0x02
    6c1a:	28 2f       	mov	r18, r24
    6c1c:	30 e0       	ldi	r19, 0x00	; 0
    6c1e:	ce 01       	movw	r24, r28
    6c20:	47 96       	adiw	r24, 0x17	; 23
    6c22:	fc 01       	movw	r30, r24
    6c24:	e2 0f       	add	r30, r18
    6c26:	f3 1f       	adc	r31, r19
    6c28:	90 81       	ld	r25, Z
    6c2a:	84 2f       	mov	r24, r20
    6c2c:	69 2f       	mov	r22, r25
    6c2e:	41 e0       	ldi	r20, 0x01	; 1
    6c30:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    6c34:	8a 81       	ldd	r24, Y+2	; 0x02
    6c36:	8f 5f       	subi	r24, 0xFF	; 255
    6c38:	8a 83       	std	Y+2, r24	; 0x02
    6c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c3c:	83 30       	cpi	r24, 0x03	; 3
    6c3e:	18 f3       	brcs	.-58     	; 0x6c06 <Read_KP+0xd2>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    6c40:	19 82       	std	Y+1, r1	; 0x01
    6c42:	1a c0       	rjmp	.+52     	; 0x6c78 <Read_KP+0x144>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
    6c44:	89 81       	ldd	r24, Y+1	; 0x01
    6c46:	28 2f       	mov	r18, r24
    6c48:	30 e0       	ldi	r19, 0x00	; 0
    6c4a:	ce 01       	movw	r24, r28
    6c4c:	43 96       	adiw	r24, 0x13	; 19
    6c4e:	fc 01       	movw	r30, r24
    6c50:	e2 0f       	add	r30, r18
    6c52:	f3 1f       	adc	r31, r19
    6c54:	40 81       	ld	r20, Z
    6c56:	89 81       	ldd	r24, Y+1	; 0x01
    6c58:	28 2f       	mov	r18, r24
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	ce 01       	movw	r24, r28
    6c5e:	4a 96       	adiw	r24, 0x1a	; 26
    6c60:	fc 01       	movw	r30, r24
    6c62:	e2 0f       	add	r30, r18
    6c64:	f3 1f       	adc	r31, r19
    6c66:	90 81       	ld	r25, Z
    6c68:	84 2f       	mov	r24, r20
    6c6a:	69 2f       	mov	r22, r25
    6c6c:	41 e0       	ldi	r20, 0x01	; 1
    6c6e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    6c72:	89 81       	ldd	r24, Y+1	; 0x01
    6c74:	8f 5f       	subi	r24, 0xFF	; 255
    6c76:	89 83       	std	Y+1, r24	; 0x01
    6c78:	89 81       	ldd	r24, Y+1	; 0x01
    6c7a:	84 30       	cpi	r24, 0x04	; 4
    6c7c:	18 f3       	brcs	.-58     	; 0x6c44 <Read_KP+0x110>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    6c7e:	1a 82       	std	Y+2, r1	; 0x02
    6c80:	8b c0       	rjmp	.+278    	; 0x6d98 <Read_KP+0x264>
    {
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_LOW);
    6c82:	8a 81       	ldd	r24, Y+2	; 0x02
    6c84:	28 2f       	mov	r18, r24
    6c86:	30 e0       	ldi	r19, 0x00	; 0
    6c88:	ce 01       	movw	r24, r28
    6c8a:	40 96       	adiw	r24, 0x10	; 16
    6c8c:	fc 01       	movw	r30, r24
    6c8e:	e2 0f       	add	r30, r18
    6c90:	f3 1f       	adc	r31, r19
    6c92:	40 81       	ld	r20, Z
    6c94:	8a 81       	ldd	r24, Y+2	; 0x02
    6c96:	28 2f       	mov	r18, r24
    6c98:	30 e0       	ldi	r19, 0x00	; 0
    6c9a:	ce 01       	movw	r24, r28
    6c9c:	47 96       	adiw	r24, 0x17	; 23
    6c9e:	fc 01       	movw	r30, r24
    6ca0:	e2 0f       	add	r30, r18
    6ca2:	f3 1f       	adc	r31, r19
    6ca4:	90 81       	ld	r25, Z
    6ca6:	84 2f       	mov	r24, r20
    6ca8:	69 2f       	mov	r22, r25
    6caa:	40 e0       	ldi	r20, 0x00	; 0
    6cac:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
    6cb0:	19 82       	std	Y+1, r1	; 0x01
    6cb2:	54 c0       	rjmp	.+168    	; 0x6d5c <Read_KP+0x228>
        {
            DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
    6cb4:	89 81       	ldd	r24, Y+1	; 0x01
    6cb6:	28 2f       	mov	r18, r24
    6cb8:	30 e0       	ldi	r19, 0x00	; 0
    6cba:	ce 01       	movw	r24, r28
    6cbc:	43 96       	adiw	r24, 0x13	; 19
    6cbe:	fc 01       	movw	r30, r24
    6cc0:	e2 0f       	add	r30, r18
    6cc2:	f3 1f       	adc	r31, r19
    6cc4:	40 81       	ld	r20, Z
    6cc6:	89 81       	ldd	r24, Y+1	; 0x01
    6cc8:	28 2f       	mov	r18, r24
    6cca:	30 e0       	ldi	r19, 0x00	; 0
    6ccc:	ce 01       	movw	r24, r28
    6cce:	4a 96       	adiw	r24, 0x1a	; 26
    6cd0:	fc 01       	movw	r30, r24
    6cd2:	e2 0f       	add	r30, r18
    6cd4:	f3 1f       	adc	r31, r19
    6cd6:	90 81       	ld	r25, Z
    6cd8:	9e 01       	movw	r18, r28
    6cda:	22 5e       	subi	r18, 0xE2	; 226
    6cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    6cde:	84 2f       	mov	r24, r20
    6ce0:	69 2f       	mov	r22, r25
    6ce2:	a9 01       	movw	r20, r18
    6ce4:	0e 94 be 13 	call	0x277c	; 0x277c <DIO_VoidGetPinValue>
            if (State == DIO_u8PIN_LOW)
    6ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6cea:	88 23       	and	r24, r24
    6cec:	a1 f5       	brne	.+104    	; 0x6d56 <Read_KP+0x222>
    6cee:	1a c0       	rjmp	.+52     	; 0x6d24 <Read_KP+0x1f0>
            {
                while (State == DIO_u8PIN_LOW)
                {
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
    6cf0:	89 81       	ldd	r24, Y+1	; 0x01
    6cf2:	28 2f       	mov	r18, r24
    6cf4:	30 e0       	ldi	r19, 0x00	; 0
    6cf6:	ce 01       	movw	r24, r28
    6cf8:	43 96       	adiw	r24, 0x13	; 19
    6cfa:	fc 01       	movw	r30, r24
    6cfc:	e2 0f       	add	r30, r18
    6cfe:	f3 1f       	adc	r31, r19
    6d00:	40 81       	ld	r20, Z
    6d02:	89 81       	ldd	r24, Y+1	; 0x01
    6d04:	28 2f       	mov	r18, r24
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	ce 01       	movw	r24, r28
    6d0a:	4a 96       	adiw	r24, 0x1a	; 26
    6d0c:	fc 01       	movw	r30, r24
    6d0e:	e2 0f       	add	r30, r18
    6d10:	f3 1f       	adc	r31, r19
    6d12:	90 81       	ld	r25, Z
    6d14:	9e 01       	movw	r18, r28
    6d16:	22 5e       	subi	r18, 0xE2	; 226
    6d18:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1a:	84 2f       	mov	r24, r20
    6d1c:	69 2f       	mov	r22, r25
    6d1e:	a9 01       	movw	r20, r18
    6d20:	0e 94 be 13 	call	0x277c	; 0x277c <DIO_VoidGetPinValue>
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
        {
            DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
            if (State == DIO_u8PIN_LOW)
            {
                while (State == DIO_u8PIN_LOW)
    6d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d26:	88 23       	and	r24, r24
    6d28:	19 f3       	breq	.-58     	; 0x6cf0 <Read_KP+0x1bc>
                {
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
                }
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
    6d2a:	89 81       	ldd	r24, Y+1	; 0x01
    6d2c:	28 2f       	mov	r18, r24
    6d2e:	30 e0       	ldi	r19, 0x00	; 0
    6d30:	8a 81       	ldd	r24, Y+2	; 0x02
    6d32:	48 2f       	mov	r20, r24
    6d34:	50 e0       	ldi	r21, 0x00	; 0
    6d36:	c9 01       	movw	r24, r18
    6d38:	88 0f       	add	r24, r24
    6d3a:	99 1f       	adc	r25, r25
    6d3c:	82 0f       	add	r24, r18
    6d3e:	93 1f       	adc	r25, r19
    6d40:	9e 01       	movw	r18, r28
    6d42:	2f 5f       	subi	r18, 0xFF	; 255
    6d44:	3f 4f       	sbci	r19, 0xFF	; 255
    6d46:	82 0f       	add	r24, r18
    6d48:	93 1f       	adc	r25, r19
    6d4a:	84 0f       	add	r24, r20
    6d4c:	95 1f       	adc	r25, r21
    6d4e:	fc 01       	movw	r30, r24
    6d50:	33 96       	adiw	r30, 0x03	; 3
    6d52:	80 81       	ld	r24, Z
    6d54:	8b 83       	std	Y+3, r24	; 0x03
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    {
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_LOW);
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
    6d56:	89 81       	ldd	r24, Y+1	; 0x01
    6d58:	8f 5f       	subi	r24, 0xFF	; 255
    6d5a:	89 83       	std	Y+1, r24	; 0x01
    6d5c:	89 81       	ldd	r24, Y+1	; 0x01
    6d5e:	84 30       	cpi	r24, 0x04	; 4
    6d60:	08 f4       	brcc	.+2      	; 0x6d64 <Read_KP+0x230>
    6d62:	a8 cf       	rjmp	.-176    	; 0x6cb4 <Read_KP+0x180>
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
                }
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
            }
        }
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_HIGH);
    6d64:	8a 81       	ldd	r24, Y+2	; 0x02
    6d66:	28 2f       	mov	r18, r24
    6d68:	30 e0       	ldi	r19, 0x00	; 0
    6d6a:	ce 01       	movw	r24, r28
    6d6c:	40 96       	adiw	r24, 0x10	; 16
    6d6e:	fc 01       	movw	r30, r24
    6d70:	e2 0f       	add	r30, r18
    6d72:	f3 1f       	adc	r31, r19
    6d74:	40 81       	ld	r20, Z
    6d76:	8a 81       	ldd	r24, Y+2	; 0x02
    6d78:	28 2f       	mov	r18, r24
    6d7a:	30 e0       	ldi	r19, 0x00	; 0
    6d7c:	ce 01       	movw	r24, r28
    6d7e:	47 96       	adiw	r24, 0x17	; 23
    6d80:	fc 01       	movw	r30, r24
    6d82:	e2 0f       	add	r30, r18
    6d84:	f3 1f       	adc	r31, r19
    6d86:	90 81       	ld	r25, Z
    6d88:	84 2f       	mov	r24, r20
    6d8a:	69 2f       	mov	r22, r25
    6d8c:	41 e0       	ldi	r20, 0x01	; 1
    6d8e:	0e 94 57 13 	call	0x26ae	; 0x26ae <DIO_VoidSetPinValue>
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    6d92:	8a 81       	ldd	r24, Y+2	; 0x02
    6d94:	8f 5f       	subi	r24, 0xFF	; 255
    6d96:	8a 83       	std	Y+2, r24	; 0x02
    6d98:	8a 81       	ldd	r24, Y+2	; 0x02
    6d9a:	83 30       	cpi	r24, 0x03	; 3
    6d9c:	08 f4       	brcc	.+2      	; 0x6da0 <Read_KP+0x26c>
    6d9e:	71 cf       	rjmp	.-286    	; 0x6c82 <Read_KP+0x14e>
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
            }
        }
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_HIGH);
    }
    return Pressed_key;
    6da0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6da2:	a5 96       	adiw	r28, 0x25	; 37
    6da4:	0f b6       	in	r0, 0x3f	; 63
    6da6:	f8 94       	cli
    6da8:	de bf       	out	0x3e, r29	; 62
    6daa:	0f be       	out	0x3f, r0	; 63
    6dac:	cd bf       	out	0x3d, r28	; 61
    6dae:	cf 91       	pop	r28
    6db0:	df 91       	pop	r29
    6db2:	08 95       	ret

00006db4 <EEPROM_voidSendData>:
#include"EEPROM_Interface.h"
#include<util/delay.h>



void EEPROM_voidSendData(u16 Copy_u16Address,u8 Copy_u8Data){
    6db4:	df 93       	push	r29
    6db6:	cf 93       	push	r28
    6db8:	cd b7       	in	r28, 0x3d	; 61
    6dba:	de b7       	in	r29, 0x3e	; 62
    6dbc:	61 97       	sbiw	r28, 0x11	; 17
    6dbe:	0f b6       	in	r0, 0x3f	; 63
    6dc0:	f8 94       	cli
    6dc2:	de bf       	out	0x3e, r29	; 62
    6dc4:	0f be       	out	0x3f, r0	; 63
    6dc6:	cd bf       	out	0x3d, r28	; 61
    6dc8:	98 8b       	std	Y+16, r25	; 0x10
    6dca:	8f 87       	std	Y+15, r24	; 0x0f
    6dcc:	69 8b       	std	Y+17, r22	; 0x11
	/*1-Send Start Condition*/
	TWI_voidStartCond();
    6dce:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    6dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dd4:	98 89       	ldd	r25, Y+16	; 0x10
    6dd6:	89 2f       	mov	r24, r25
    6dd8:	99 27       	eor	r25, r25
    6dda:	80 65       	ori	r24, 0x50	; 80
    6ddc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    6de0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6de2:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TWI_voidMasterWriteData>
	/*4-Send Data*/
	TWI_voidMasterWriteData(Copy_u8Data);
    6de6:	89 89       	ldd	r24, Y+17	; 0x11
    6de8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TWI_voidMasterWriteData>
	/*5-Send Stop Condition*/
	TWI_voidStopCond();
    6dec:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TWI_voidStopCond>
    6df0:	80 e0       	ldi	r24, 0x00	; 0
    6df2:	90 e0       	ldi	r25, 0x00	; 0
    6df4:	a8 e4       	ldi	r26, 0x48	; 72
    6df6:	b3 e4       	ldi	r27, 0x43	; 67
    6df8:	8b 87       	std	Y+11, r24	; 0x0b
    6dfa:	9c 87       	std	Y+12, r25	; 0x0c
    6dfc:	ad 87       	std	Y+13, r26	; 0x0d
    6dfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e08:	20 e0       	ldi	r18, 0x00	; 0
    6e0a:	30 e0       	ldi	r19, 0x00	; 0
    6e0c:	4a ef       	ldi	r20, 0xFA	; 250
    6e0e:	54 e4       	ldi	r21, 0x44	; 68
    6e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e14:	dc 01       	movw	r26, r24
    6e16:	cb 01       	movw	r24, r22
    6e18:	8f 83       	std	Y+7, r24	; 0x07
    6e1a:	98 87       	std	Y+8, r25	; 0x08
    6e1c:	a9 87       	std	Y+9, r26	; 0x09
    6e1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e20:	6f 81       	ldd	r22, Y+7	; 0x07
    6e22:	78 85       	ldd	r23, Y+8	; 0x08
    6e24:	89 85       	ldd	r24, Y+9	; 0x09
    6e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e28:	20 e0       	ldi	r18, 0x00	; 0
    6e2a:	30 e0       	ldi	r19, 0x00	; 0
    6e2c:	40 e8       	ldi	r20, 0x80	; 128
    6e2e:	5f e3       	ldi	r21, 0x3F	; 63
    6e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e34:	88 23       	and	r24, r24
    6e36:	2c f4       	brge	.+10     	; 0x6e42 <EEPROM_voidSendData+0x8e>
		__ticks = 1;
    6e38:	81 e0       	ldi	r24, 0x01	; 1
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	9e 83       	std	Y+6, r25	; 0x06
    6e3e:	8d 83       	std	Y+5, r24	; 0x05
    6e40:	3f c0       	rjmp	.+126    	; 0x6ec0 <EEPROM_voidSendData+0x10c>
	else if (__tmp > 65535)
    6e42:	6f 81       	ldd	r22, Y+7	; 0x07
    6e44:	78 85       	ldd	r23, Y+8	; 0x08
    6e46:	89 85       	ldd	r24, Y+9	; 0x09
    6e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e4a:	20 e0       	ldi	r18, 0x00	; 0
    6e4c:	3f ef       	ldi	r19, 0xFF	; 255
    6e4e:	4f e7       	ldi	r20, 0x7F	; 127
    6e50:	57 e4       	ldi	r21, 0x47	; 71
    6e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e56:	18 16       	cp	r1, r24
    6e58:	4c f5       	brge	.+82     	; 0x6eac <EEPROM_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e62:	20 e0       	ldi	r18, 0x00	; 0
    6e64:	30 e0       	ldi	r19, 0x00	; 0
    6e66:	40 e2       	ldi	r20, 0x20	; 32
    6e68:	51 e4       	ldi	r21, 0x41	; 65
    6e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e6e:	dc 01       	movw	r26, r24
    6e70:	cb 01       	movw	r24, r22
    6e72:	bc 01       	movw	r22, r24
    6e74:	cd 01       	movw	r24, r26
    6e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e7a:	dc 01       	movw	r26, r24
    6e7c:	cb 01       	movw	r24, r22
    6e7e:	9e 83       	std	Y+6, r25	; 0x06
    6e80:	8d 83       	std	Y+5, r24	; 0x05
    6e82:	0f c0       	rjmp	.+30     	; 0x6ea2 <EEPROM_voidSendData+0xee>
    6e84:	88 ec       	ldi	r24, 0xC8	; 200
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	9c 83       	std	Y+4, r25	; 0x04
    6e8a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    6e90:	01 97       	sbiw	r24, 0x01	; 1
    6e92:	f1 f7       	brne	.-4      	; 0x6e90 <EEPROM_voidSendData+0xdc>
    6e94:	9c 83       	std	Y+4, r25	; 0x04
    6e96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e98:	8d 81       	ldd	r24, Y+5	; 0x05
    6e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e9c:	01 97       	sbiw	r24, 0x01	; 1
    6e9e:	9e 83       	std	Y+6, r25	; 0x06
    6ea0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ea6:	00 97       	sbiw	r24, 0x00	; 0
    6ea8:	69 f7       	brne	.-38     	; 0x6e84 <EEPROM_voidSendData+0xd0>
    6eaa:	14 c0       	rjmp	.+40     	; 0x6ed4 <EEPROM_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6eac:	6f 81       	ldd	r22, Y+7	; 0x07
    6eae:	78 85       	ldd	r23, Y+8	; 0x08
    6eb0:	89 85       	ldd	r24, Y+9	; 0x09
    6eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6eb8:	dc 01       	movw	r26, r24
    6eba:	cb 01       	movw	r24, r22
    6ebc:	9e 83       	std	Y+6, r25	; 0x06
    6ebe:	8d 83       	std	Y+5, r24	; 0x05
    6ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ec4:	9a 83       	std	Y+2, r25	; 0x02
    6ec6:	89 83       	std	Y+1, r24	; 0x01
    6ec8:	89 81       	ldd	r24, Y+1	; 0x01
    6eca:	9a 81       	ldd	r25, Y+2	; 0x02
    6ecc:	01 97       	sbiw	r24, 0x01	; 1
    6ece:	f1 f7       	brne	.-4      	; 0x6ecc <EEPROM_voidSendData+0x118>
    6ed0:	9a 83       	std	Y+2, r25	; 0x02
    6ed2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    6ed4:	61 96       	adiw	r28, 0x11	; 17
    6ed6:	0f b6       	in	r0, 0x3f	; 63
    6ed8:	f8 94       	cli
    6eda:	de bf       	out	0x3e, r29	; 62
    6edc:	0f be       	out	0x3f, r0	; 63
    6ede:	cd bf       	out	0x3d, r28	; 61
    6ee0:	cf 91       	pop	r28
    6ee2:	df 91       	pop	r29
    6ee4:	08 95       	ret

00006ee6 <EEPROM_voidRecieveData>:
void EEPROM_voidRecieveData(u16 Copy_u16Address,u8 *Copy_u8ReceivedData)
{
    6ee6:	df 93       	push	r29
    6ee8:	cf 93       	push	r28
    6eea:	00 d0       	rcall	.+0      	; 0x6eec <EEPROM_voidRecieveData+0x6>
    6eec:	00 d0       	rcall	.+0      	; 0x6eee <EEPROM_voidRecieveData+0x8>
    6eee:	cd b7       	in	r28, 0x3d	; 61
    6ef0:	de b7       	in	r29, 0x3e	; 62
    6ef2:	9a 83       	std	Y+2, r25	; 0x02
    6ef4:	89 83       	std	Y+1, r24	; 0x01
    6ef6:	7c 83       	std	Y+4, r23	; 0x04
    6ef8:	6b 83       	std	Y+3, r22	; 0x03


	/*1-Send Start Condition*/
	TWI_voidStartCond();
    6efa:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    6efe:	89 81       	ldd	r24, Y+1	; 0x01
    6f00:	9a 81       	ldd	r25, Y+2	; 0x02
    6f02:	89 2f       	mov	r24, r25
    6f04:	99 27       	eor	r25, r25
    6f06:	80 65       	ori	r24, 0x50	; 80
    6f08:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    6f0c:	89 81       	ldd	r24, Y+1	; 0x01
    6f0e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <TWI_voidMasterWriteData>
	/*4-Send repeated start Condition*/
	TWI_voidStopCond();
    6f12:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TWI_voidStopCond>
	TWI_voidStartCond();
    6f16:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TWI_voidStartCond>
	/*5-Send Slave Address with read*/
	TWI_voidSendSlaveAddressWithRead((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    6f1a:	89 81       	ldd	r24, Y+1	; 0x01
    6f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f1e:	89 2f       	mov	r24, r25
    6f20:	99 27       	eor	r25, r25
    6f22:	80 65       	ori	r24, 0x50	; 80
    6f24:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <TWI_voidSendSlaveAddressWithRead>
	TWI_voidMasterReadData(Copy_u8ReceivedData);
    6f28:	8b 81       	ldd	r24, Y+3	; 0x03
    6f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    6f2c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <TWI_voidMasterReadData>
	TWI_voidStopCond();
    6f30:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TWI_voidStopCond>

}
    6f34:	0f 90       	pop	r0
    6f36:	0f 90       	pop	r0
    6f38:	0f 90       	pop	r0
    6f3a:	0f 90       	pop	r0
    6f3c:	cf 91       	pop	r28
    6f3e:	df 91       	pop	r29
    6f40:	08 95       	ret

00006f42 <main>:
#include"TMU/TMU_Interface.h"

//APP LAYER OF MICROCONTROLLER 1

void main()
{
    6f42:	df 93       	push	r29
    6f44:	cf 93       	push	r28
    6f46:	cd b7       	in	r28, 0x3d	; 61
    6f48:	de b7       	in	r29, 0x3e	; 62

	Pass();
    6f4a:	0e 94 18 09 	call	0x1230	; 0x1230 <Pass>
    6f4e:	ff cf       	rjmp	.-2      	; 0x6f4e <main+0xc>

00006f50 <__udivmodhi4>:
    6f50:	aa 1b       	sub	r26, r26
    6f52:	bb 1b       	sub	r27, r27
    6f54:	51 e1       	ldi	r21, 0x11	; 17
    6f56:	07 c0       	rjmp	.+14     	; 0x6f66 <__udivmodhi4_ep>

00006f58 <__udivmodhi4_loop>:
    6f58:	aa 1f       	adc	r26, r26
    6f5a:	bb 1f       	adc	r27, r27
    6f5c:	a6 17       	cp	r26, r22
    6f5e:	b7 07       	cpc	r27, r23
    6f60:	10 f0       	brcs	.+4      	; 0x6f66 <__udivmodhi4_ep>
    6f62:	a6 1b       	sub	r26, r22
    6f64:	b7 0b       	sbc	r27, r23

00006f66 <__udivmodhi4_ep>:
    6f66:	88 1f       	adc	r24, r24
    6f68:	99 1f       	adc	r25, r25
    6f6a:	5a 95       	dec	r21
    6f6c:	a9 f7       	brne	.-22     	; 0x6f58 <__udivmodhi4_loop>
    6f6e:	80 95       	com	r24
    6f70:	90 95       	com	r25
    6f72:	bc 01       	movw	r22, r24
    6f74:	cd 01       	movw	r24, r26
    6f76:	08 95       	ret

00006f78 <__divmodsi4>:
    6f78:	97 fb       	bst	r25, 7
    6f7a:	09 2e       	mov	r0, r25
    6f7c:	05 26       	eor	r0, r21
    6f7e:	0e d0       	rcall	.+28     	; 0x6f9c <__divmodsi4_neg1>
    6f80:	57 fd       	sbrc	r21, 7
    6f82:	04 d0       	rcall	.+8      	; 0x6f8c <__divmodsi4_neg2>
    6f84:	14 d0       	rcall	.+40     	; 0x6fae <__udivmodsi4>
    6f86:	0a d0       	rcall	.+20     	; 0x6f9c <__divmodsi4_neg1>
    6f88:	00 1c       	adc	r0, r0
    6f8a:	38 f4       	brcc	.+14     	; 0x6f9a <__divmodsi4_exit>

00006f8c <__divmodsi4_neg2>:
    6f8c:	50 95       	com	r21
    6f8e:	40 95       	com	r20
    6f90:	30 95       	com	r19
    6f92:	21 95       	neg	r18
    6f94:	3f 4f       	sbci	r19, 0xFF	; 255
    6f96:	4f 4f       	sbci	r20, 0xFF	; 255
    6f98:	5f 4f       	sbci	r21, 0xFF	; 255

00006f9a <__divmodsi4_exit>:
    6f9a:	08 95       	ret

00006f9c <__divmodsi4_neg1>:
    6f9c:	f6 f7       	brtc	.-4      	; 0x6f9a <__divmodsi4_exit>
    6f9e:	90 95       	com	r25
    6fa0:	80 95       	com	r24
    6fa2:	70 95       	com	r23
    6fa4:	61 95       	neg	r22
    6fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    6fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    6faa:	9f 4f       	sbci	r25, 0xFF	; 255
    6fac:	08 95       	ret

00006fae <__udivmodsi4>:
    6fae:	a1 e2       	ldi	r26, 0x21	; 33
    6fb0:	1a 2e       	mov	r1, r26
    6fb2:	aa 1b       	sub	r26, r26
    6fb4:	bb 1b       	sub	r27, r27
    6fb6:	fd 01       	movw	r30, r26
    6fb8:	0d c0       	rjmp	.+26     	; 0x6fd4 <__udivmodsi4_ep>

00006fba <__udivmodsi4_loop>:
    6fba:	aa 1f       	adc	r26, r26
    6fbc:	bb 1f       	adc	r27, r27
    6fbe:	ee 1f       	adc	r30, r30
    6fc0:	ff 1f       	adc	r31, r31
    6fc2:	a2 17       	cp	r26, r18
    6fc4:	b3 07       	cpc	r27, r19
    6fc6:	e4 07       	cpc	r30, r20
    6fc8:	f5 07       	cpc	r31, r21
    6fca:	20 f0       	brcs	.+8      	; 0x6fd4 <__udivmodsi4_ep>
    6fcc:	a2 1b       	sub	r26, r18
    6fce:	b3 0b       	sbc	r27, r19
    6fd0:	e4 0b       	sbc	r30, r20
    6fd2:	f5 0b       	sbc	r31, r21

00006fd4 <__udivmodsi4_ep>:
    6fd4:	66 1f       	adc	r22, r22
    6fd6:	77 1f       	adc	r23, r23
    6fd8:	88 1f       	adc	r24, r24
    6fda:	99 1f       	adc	r25, r25
    6fdc:	1a 94       	dec	r1
    6fde:	69 f7       	brne	.-38     	; 0x6fba <__udivmodsi4_loop>
    6fe0:	60 95       	com	r22
    6fe2:	70 95       	com	r23
    6fe4:	80 95       	com	r24
    6fe6:	90 95       	com	r25
    6fe8:	9b 01       	movw	r18, r22
    6fea:	ac 01       	movw	r20, r24
    6fec:	bd 01       	movw	r22, r26
    6fee:	cf 01       	movw	r24, r30
    6ff0:	08 95       	ret

00006ff2 <__prologue_saves__>:
    6ff2:	2f 92       	push	r2
    6ff4:	3f 92       	push	r3
    6ff6:	4f 92       	push	r4
    6ff8:	5f 92       	push	r5
    6ffa:	6f 92       	push	r6
    6ffc:	7f 92       	push	r7
    6ffe:	8f 92       	push	r8
    7000:	9f 92       	push	r9
    7002:	af 92       	push	r10
    7004:	bf 92       	push	r11
    7006:	cf 92       	push	r12
    7008:	df 92       	push	r13
    700a:	ef 92       	push	r14
    700c:	ff 92       	push	r15
    700e:	0f 93       	push	r16
    7010:	1f 93       	push	r17
    7012:	cf 93       	push	r28
    7014:	df 93       	push	r29
    7016:	cd b7       	in	r28, 0x3d	; 61
    7018:	de b7       	in	r29, 0x3e	; 62
    701a:	ca 1b       	sub	r28, r26
    701c:	db 0b       	sbc	r29, r27
    701e:	0f b6       	in	r0, 0x3f	; 63
    7020:	f8 94       	cli
    7022:	de bf       	out	0x3e, r29	; 62
    7024:	0f be       	out	0x3f, r0	; 63
    7026:	cd bf       	out	0x3d, r28	; 61
    7028:	09 94       	ijmp

0000702a <__epilogue_restores__>:
    702a:	2a 88       	ldd	r2, Y+18	; 0x12
    702c:	39 88       	ldd	r3, Y+17	; 0x11
    702e:	48 88       	ldd	r4, Y+16	; 0x10
    7030:	5f 84       	ldd	r5, Y+15	; 0x0f
    7032:	6e 84       	ldd	r6, Y+14	; 0x0e
    7034:	7d 84       	ldd	r7, Y+13	; 0x0d
    7036:	8c 84       	ldd	r8, Y+12	; 0x0c
    7038:	9b 84       	ldd	r9, Y+11	; 0x0b
    703a:	aa 84       	ldd	r10, Y+10	; 0x0a
    703c:	b9 84       	ldd	r11, Y+9	; 0x09
    703e:	c8 84       	ldd	r12, Y+8	; 0x08
    7040:	df 80       	ldd	r13, Y+7	; 0x07
    7042:	ee 80       	ldd	r14, Y+6	; 0x06
    7044:	fd 80       	ldd	r15, Y+5	; 0x05
    7046:	0c 81       	ldd	r16, Y+4	; 0x04
    7048:	1b 81       	ldd	r17, Y+3	; 0x03
    704a:	aa 81       	ldd	r26, Y+2	; 0x02
    704c:	b9 81       	ldd	r27, Y+1	; 0x01
    704e:	ce 0f       	add	r28, r30
    7050:	d1 1d       	adc	r29, r1
    7052:	0f b6       	in	r0, 0x3f	; 63
    7054:	f8 94       	cli
    7056:	de bf       	out	0x3e, r29	; 62
    7058:	0f be       	out	0x3f, r0	; 63
    705a:	cd bf       	out	0x3d, r28	; 61
    705c:	ed 01       	movw	r28, r26
    705e:	08 95       	ret

00007060 <_exit>:
    7060:	f8 94       	cli

00007062 <__stop_program>:
    7062:	ff cf       	rjmp	.-2      	; 0x7062 <__stop_program>
