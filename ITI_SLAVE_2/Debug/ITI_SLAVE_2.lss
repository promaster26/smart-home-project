
ITI_SLAVE_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00003cf4  00003d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  0080019c  0080019c  00003ec4  2**0
                  ALLOC
  3 .stab         00004548  00000000  00000000  00003ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e61  00000000  00000000  0000840c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a26d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000a40d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000ca09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ef58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000f118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000f40b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fdd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__vector_1>
       8:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_2>
       c:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_10>
      2c:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <main>
      8a:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e9 58       	subi	r30, 0x89	; 137
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TMU_CreateTask>:
static TCB_t Tasks_Arr[TMU_Tasks_Num] =
{
{ NULL } };

void TMU_CreateTask(void (*Copy_ptr_Func), u16 Copy_Periodicity,u8 Copy_Priority)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <TMU_CreateTask+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <TMU_CreateTask+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	7c 83       	std	Y+4, r23	; 0x04
     e0c:	6b 83       	std	Y+3, r22	; 0x03
     e0e:	4d 83       	std	Y+5, r20	; 0x05
	if (Tasks_Arr[Copy_Priority].Pftask == NULL)
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	c9 01       	movw	r24, r18
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	fc 01       	movw	r30, r24
     e26:	e4 56       	subi	r30, 0x64	; 100
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	81 f5       	brne	.+96     	; 0xe92 <TMU_CreateTask+0x9a>
	{
		Tasks_Arr[Copy_Priority].Pftask = Copy_ptr_Func;
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	49 81       	ldd	r20, Y+1	; 0x01
     e3a:	5a 81       	ldd	r21, Y+2	; 0x02
     e3c:	c9 01       	movw	r24, r18
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	fc 01       	movw	r30, r24
     e4c:	e4 56       	subi	r30, 0x64	; 100
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	51 83       	std	Z+1, r21	; 0x01
     e52:	40 83       	st	Z, r20
		Tasks_Arr[Copy_Priority].Periodicity = Copy_Periodicity;
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	c9 01       	movw	r24, r18
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 56       	subi	r30, 0x62	; 98
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
		Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	82 0f       	add	r24, r18
     e88:	93 1f       	adc	r25, r19
     e8a:	fc 01       	movw	r30, r24
     e8c:	e0 56       	subi	r30, 0x60	; 96
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
     e90:	10 82       	st	Z, r1
		
	}
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <TMU_Delete_Task>:

void TMU_Delete_Task(u8 Copy_Priority)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Pftask = NULL;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	c9 01       	movw	r24, r18
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	fc 01       	movw	r30, r24
     ec4:	e4 56       	subi	r30, 0x64	; 100
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	11 82       	std	Z+1, r1	; 0x01
     eca:	10 82       	st	Z, r1
}
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <TMU_Suspend_Task>:

void TMU_Suspend_Task(u8 Copy_Priority)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Suspended;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	c9 01       	movw	r24, r18
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	fc 01       	movw	r30, r24
     ef6:	e0 56       	subi	r30, 0x60	; 96
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 83       	st	Z, r24
}
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TMU_Resume_Task>:

void TMU_Resume_Task(u8 Copy_Priority)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	c9 01       	movw	r24, r18
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	fc 01       	movw	r30, r24
     f28:	e0 56       	subi	r30, 0x60	; 96
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	10 82       	st	Z, r1
}
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <TMU_Start_Scheduler>:

void TMU_Start_Scheduler(void)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	27 97       	sbiw	r28, 0x07	; 7
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
			.GPT_Timer = GPT_Timer0, 
			.GPT_WG_Mode = GPT_CTC,
			.GPT_Prescaler = GPT_Prescaler_64 ,
			.GPT_COM_Value = 125, 
			.GPT_OVF_CBF = Scheduler
		};
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	fe 01       	movw	r30, r28
     f4e:	31 96       	adiw	r30, 0x01	; 1
     f50:	df 01       	movw	r26, r30
     f52:	98 2f       	mov	r25, r24
     f54:	1d 92       	st	X+, r1
     f56:	9a 95       	dec	r25
     f58:	e9 f7       	brne	.-6      	; 0xf54 <TMU_Start_Scheduler+0x1e>
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	8d e7       	ldi	r24, 0x7D	; 125
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	86 ec       	ldi	r24, 0xC6	; 198
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	9f 83       	std	Y+7, r25	; 0x07
     f6c:	8e 83       	std	Y+6, r24	; 0x06
		
	  GPT_Init(&Timer0);
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <GPT_Init>


	G_INT_Enable();
     f76:	0e 94 36 0b 	call	0x166c	; 0x166c <G_INT_Enable>
}
     f7a:	27 96       	adiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <Scheduler>:

void Scheduler(void)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Counter = 0;
     f96:	19 82       	std	Y+1, r1	; 0x01
	static u16 Local_Index = 0;
	Local_Index++;
     f98:	80 91 ab 01 	lds	r24, 0x01AB
     f9c:	90 91 ac 01 	lds	r25, 0x01AC
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	90 93 ac 01 	sts	0x01AC, r25
     fa6:	80 93 ab 01 	sts	0x01AB, r24

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	4e c0       	rjmp	.+156    	; 0x104a <Scheduler+0xbe>
	{

		if (Tasks_Arr[Local_Counter].Pftask != NULL)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	fc 01       	movw	r30, r24
     fc4:	e4 56       	subi	r30, 0x64	; 100
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	d1 f1       	breq	.+116    	; 0x1044 <Scheduler+0xb8>
		{
			if (Tasks_Arr[Local_Counter].Task_State == Task_Resumed)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	c9 01       	movw	r24, r18
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	fc 01       	movw	r30, r24
     fe6:	e0 56       	subi	r30, 0x60	; 96
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	51 f5       	brne	.+84     	; 0x1044 <Scheduler+0xb8>
			{	
				if (Local_Index % Tasks_Arr[Local_Counter].Periodicity == 0)
     ff0:	40 91 ab 01 	lds	r20, 0x01AB
     ff4:	50 91 ac 01 	lds	r21, 0x01AC
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	c9 01       	movw	r24, r18
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	fc 01       	movw	r30, r24
    100e:	e2 56       	subi	r30, 0x62	; 98
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	ca 01       	movw	r24, r20
    1018:	b9 01       	movw	r22, r18
    101a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__udivmodhi4>
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	89 f4       	brne	.+34     	; 0x1044 <Scheduler+0xb8>
				{
					Tasks_Arr[Local_Counter].Pftask();
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	c9 01       	movw	r24, r18
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	fc 01       	movw	r30, r24
    1038:	e4 56       	subi	r30, 0x64	; 100
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	01 90       	ld	r0, Z+
    103e:	f0 81       	ld	r31, Z
    1040:	e0 2d       	mov	r30, r0
    1042:	09 95       	icall
{
	u8 Local_Counter = 0;
	static u16 Local_Index = 0;
	Local_Index++;

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	08 f4       	brcc	.+2      	; 0x1052 <Scheduler+0xc6>
    1050:	ae cf       	rjmp	.-164    	; 0xfae <Scheduler+0x22>
					Tasks_Arr[Local_Counter].Pftask();
				}
		}
	}
}
}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <SystemState_Setter>:
u8 SmokeRead = 0;



void SystemState_Setter(void)  //CHECK THE TEMPERATURE AND ACT ACCORDING TO THE STATE -> (FIRE ALARM)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    LM35_voidReadValue(DIO_u8PIN1, &TempRead);
    1062:	26 eb       	ldi	r18, 0xB6	; 182
    1064:	31 e0       	ldi	r19, 0x01	; 1
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	b9 01       	movw	r22, r18
    106a:	0e 94 56 10 	call	0x20ac	; 0x20ac <LM35_voidReadValue>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN1, DIO_u8PIN_OUTPUT);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_OUTPUT);
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	62 e0       	ldi	r22, 0x02	; 2
    107c:	41 e0       	ldi	r20, 0x01	; 1
    107e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_OUTPUT);
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	63 e0       	ldi	r22, 0x03	; 3
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_OUTPUT);
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	64 e0       	ldi	r22, 0x04	; 4
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	
	if (TempRead < 45 ) //WHITE LED AND FINE STATE
    1096:	80 91 b6 01 	lds	r24, 0x01B6
    109a:	8d 32       	cpi	r24, 0x2D	; 45
    109c:	a8 f4       	brcc	.+42     	; 0x10c8 <SystemState_Setter+0x6e>
			{
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN1, DIO_u8PIN_HIGH);
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	62 e0       	ldi	r22, 0x02	; 2
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_LOW);
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	64 e0       	ldi	r22, 0x04	; 4
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    10c6:	35 c0       	rjmp	.+106    	; 0x1132 <SystemState_Setter+0xd8>
	}

	else if ( TempRead < 70 && TempRead > 45) //YELLOW LED AND HEAT ZONE
    10c8:	80 91 b6 01 	lds	r24, 0x01B6
    10cc:	86 34       	cpi	r24, 0x46	; 70
    10ce:	c8 f4       	brcc	.+50     	; 0x1102 <SystemState_Setter+0xa8>
    10d0:	80 91 b6 01 	lds	r24, 0x01B6
    10d4:	8e 32       	cpi	r24, 0x2E	; 46
    10d6:	a8 f0       	brcs	.+42     	; 0x1102 <SystemState_Setter+0xa8>
			{
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN1, DIO_u8PIN_LOW);
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_HIGH);
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_LOW);
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	63 e0       	ldi	r22, 0x03	; 3
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	64 e0       	ldi	r22, 0x04	; 4
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    1100:	18 c0       	rjmp	.+48     	; 0x1132 <SystemState_Setter+0xd8>
	}

	else if (TempRead >= 70 ) //RED LED, BUZZER AND DANGER ZONE 
    1102:	80 91 b6 01 	lds	r24, 0x01B6
    1106:	86 34       	cpi	r24, 0x46	; 70
    1108:	a0 f0       	brcs	.+40     	; 0x1132 <SystemState_Setter+0xd8>
			{
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN1, DIO_u8PIN_LOW);
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	62 e0       	ldi	r22, 0x02	; 2
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_HIGH);
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	63 e0       	ldi	r22, 0x03	; 3
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH);
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	64 e0       	ldi	r22, 0x04	; 4
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		
	}

}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <TIMER>:


void TIMER() //SET AND DISPLAY CLOCK
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	63 97       	sbiw	r28, 0x13	; 19
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61

		u8 x = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	8b 83       	std	Y+3, r24	; 0x03
		DIO_VoidGetPinValue(DIO_u8PORTC,DIO_u8PIN0,&x);
    1150:	9e 01       	movw	r18, r28
    1152:	2d 5f       	subi	r18, 0xFD	; 253
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <DIO_VoidGetPinValue>
		
		if(x == 0)	{
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 23       	and	r24, r24
    1164:	09 f0       	breq	.+2      	; 0x1168 <TIMER+0x30>
    1166:	8f c0       	rjmp	.+286    	; 0x1286 <TIMER+0x14e>
					.KP_Row2_PORT = DIO_u8PORTD, .KP_Row3_PORT = DIO_u8PORTD,
					.KP_Row4_PORT = DIO_u8PORTD, .KP_Colum1_PIN = DIO_u8PIN0,
					.KP_Colum2_PIN = DIO_u8PIN1, .KP_Colum3_PIN = DIO_u8PIN2,
					.KP_Row1_PIN =
					DIO_u8PIN4, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
					.KP_Row4_PIN = DIO_u8PIN7 };
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	fe 01       	movw	r30, r28
    116c:	34 96       	adiw	r30, 0x04	; 4
    116e:	df 01       	movw	r26, r30
    1170:	98 2f       	mov	r25, r24
    1172:	1d 92       	st	X+, r1
    1174:	9a 95       	dec	r25
    1176:	e9 f7       	brne	.-6      	; 0x1172 <TIMER+0x3a>
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	8e 83       	std	Y+6, r24	; 0x06
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	88 87       	std	Y+8, r24	; 0x08
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	89 87       	std	Y+9, r24	; 0x09
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	8a 87       	std	Y+10, r24	; 0x0a
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	8b 87       	std	Y+11, r24	; 0x0b
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	8d 87       	std	Y+13, r24	; 0x0d
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	8e 87       	std	Y+14, r24	; 0x0e
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	88 8b       	std	Y+16, r24	; 0x10
    11a0:	85 e0       	ldi	r24, 0x05	; 5
    11a2:	89 8b       	std	Y+17, r24	; 0x11
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	8a 8b       	std	Y+18, r24	; 0x12
    11a8:	87 e0       	ldi	r24, 0x07	; 7
    11aa:	8b 8b       	std	Y+19, r24	; 0x13
		
			u8 Flag = 0;
    11ac:	1a 82       	std	Y+2, r1	; 0x02
			Init_KP(&KP1);
    11ae:	ce 01       	movw	r24, r28
    11b0:	04 96       	adiw	r24, 0x04	; 4
    11b2:	0e 94 4b 1b 	call	0x3696	; 0x3696 <Init_KP>
			LCD_GoToWriteString(1, 0, "ENTER HH:MM:SS");
    11b6:	20 e6       	ldi	r18, 0x60	; 96
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	0e 94 14 1b 	call	0x3628	; 0x3628 <LCD_GoToWriteString>
    11c4:	5c c0       	rjmp	.+184    	; 0x127e <TIMER+0x146>
		//USER ENTER CLOCK VALUES
			while (Flag < 6)
			{
				u8 key_pressed = 0xFF;
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <TIMER+0x9e>
				while (key_pressed == 0xFF)
				{
					key_pressed = Read_KP(&KP1);
    11cc:	ce 01       	movw	r24, r28
    11ce:	04 96       	adiw	r24, 0x04	; 4
    11d0:	0e 94 a7 1b 	call	0x374e	; 0x374e <Read_KP>
    11d4:	89 83       	std	Y+1, r24	; 0x01
			LCD_GoToWriteString(1, 0, "ENTER HH:MM:SS");
		//USER ENTER CLOCK VALUES
			while (Flag < 6)
			{
				u8 key_pressed = 0xFF;
				while (key_pressed == 0xFF)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	8f 3f       	cpi	r24, 0xFF	; 255
    11da:	c1 f3       	breq	.-16     	; 0x11cc <TIMER+0x94>
				{
					key_pressed = Read_KP(&KP1);
				}
		
				Clock_Num[Flag] = key_pressed;
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	e0 55       	subi	r30, 0x50	; 80
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	80 83       	st	Z, r24
				LCD_GoToClear(2, Flag, 1);
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	6a 81       	ldd	r22, Y+2	; 0x02
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <LCD_GoToClear>
				LCD_GoToWriteNumber(2, Flag, key_pressed);
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	6a 81       	ldd	r22, Y+2	; 0x02
    11fa:	49 81       	ldd	r20, Y+1	; 0x01
    11fc:	0e 94 b4 1a 	call	0x3568	; 0x3568 <LCD_GoToWriteNumber>
				Flag++;
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	8a 83       	std	Y+2, r24	; 0x02
				 SEC = Clock_Num[4] * 10 + Clock_Num[5];
    1206:	80 91 b4 01 	lds	r24, 0x01B4
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9c 01       	movw	r18, r24
    1210:	22 0f       	add	r18, r18
    1212:	33 1f       	adc	r19, r19
    1214:	c9 01       	movw	r24, r18
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	98 2f       	mov	r25, r24
    1224:	80 91 b5 01 	lds	r24, 0x01B5
    1228:	89 0f       	add	r24, r25
    122a:	80 93 ad 01 	sts	0x01AD, r24
				 MIN = Clock_Num[2] * 10 + Clock_Num[3];
    122e:	80 91 b2 01 	lds	r24, 0x01B2
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 01       	movw	r18, r24
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	c9 01       	movw	r24, r18
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	82 0f       	add	r24, r18
    1248:	93 1f       	adc	r25, r19
    124a:	98 2f       	mov	r25, r24
    124c:	80 91 b3 01 	lds	r24, 0x01B3
    1250:	89 0f       	add	r24, r25
    1252:	80 93 ae 01 	sts	0x01AE, r24
				 HOUR = Clock_Num[0] * 10 + Clock_Num[1];
    1256:	80 91 b0 01 	lds	r24, 0x01B0
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 01       	movw	r18, r24
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	c9 01       	movw	r24, r18
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	98 2f       	mov	r25, r24
    1274:	80 91 b1 01 	lds	r24, 0x01B1
    1278:	89 0f       	add	r24, r25
    127a:	80 93 af 01 	sts	0x01AF, r24
		
			u8 Flag = 0;
			Init_KP(&KP1);
			LCD_GoToWriteString(1, 0, "ENTER HH:MM:SS");
		//USER ENTER CLOCK VALUES
			while (Flag < 6)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	86 30       	cpi	r24, 0x06	; 6
    1282:	08 f4       	brcc	.+2      	; 0x1286 <TIMER+0x14e>
    1284:	a0 cf       	rjmp	.-192    	; 0x11c6 <TIMER+0x8e>
				 SEC = Clock_Num[4] * 10 + Clock_Num[5];
				 MIN = Clock_Num[2] * 10 + Clock_Num[3];
				 HOUR = Clock_Num[0] * 10 + Clock_Num[1];
			}}
	
	SEC++;
    1286:	80 91 ad 01 	lds	r24, 0x01AD
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 93 ad 01 	sts	0x01AD, r24

	LCD_ClearDisplay();
    1290:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_ClearDisplay>
	if (SEC >= 60)
    1294:	80 91 ad 01 	lds	r24, 0x01AD
    1298:	8c 33       	cpi	r24, 0x3C	; 60
    129a:	f0 f0       	brcs	.+60     	; 0x12d8 <TIMER+0x1a0>
	{
		SEC = 0;
    129c:	10 92 ad 01 	sts	0x01AD, r1
		MIN++;
    12a0:	80 91 ae 01 	lds	r24, 0x01AE
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	80 93 ae 01 	sts	0x01AE, r24
		LCD_ClearDisplay();
    12aa:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_ClearDisplay>

		if (MIN >= 60)
    12ae:	80 91 ae 01 	lds	r24, 0x01AE
    12b2:	8c 33       	cpi	r24, 0x3C	; 60
    12b4:	88 f0       	brcs	.+34     	; 0x12d8 <TIMER+0x1a0>
		{
			MIN = 0;
    12b6:	10 92 ae 01 	sts	0x01AE, r1
			HOUR++;
    12ba:	80 91 af 01 	lds	r24, 0x01AF
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 af 01 	sts	0x01AF, r24
			LCD_ClearDisplay();
    12c4:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_ClearDisplay>

			if (HOUR >= 24)
    12c8:	80 91 af 01 	lds	r24, 0x01AF
    12cc:	88 31       	cpi	r24, 0x18	; 24
    12ce:	20 f0       	brcs	.+8      	; 0x12d8 <TIMER+0x1a0>
			{
				HOUR = 0;
    12d0:	10 92 af 01 	sts	0x01AF, r1
				LCD_ClearDisplay();
    12d4:	0e 94 12 18 	call	0x3024	; 0x3024 <LCD_ClearDisplay>

		}

	}
	//DISPLAY CLOCK
	LCD_GoToWriteNumber(0,0,HOUR);
    12d8:	90 91 af 01 	lds	r25, 0x01AF
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	49 2f       	mov	r20, r25
    12e2:	0e 94 b4 1a 	call	0x3568	; 0x3568 <LCD_GoToWriteNumber>
	LCD_WriteChar(':');
    12e6:	8a e3       	ldi	r24, 0x3A	; 58
    12e8:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>
	LCD_GoToWriteNumber(0,3,MIN);
    12ec:	90 91 ae 01 	lds	r25, 0x01AE
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	49 2f       	mov	r20, r25
    12f6:	0e 94 b4 1a 	call	0x3568	; 0x3568 <LCD_GoToWriteNumber>
	LCD_WriteChar(':');
    12fa:	8a e3       	ldi	r24, 0x3A	; 58
    12fc:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>
	LCD_GoToWriteNumber(0,6,SEC);
    1300:	90 91 ad 01 	lds	r25, 0x01AD
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	66 e0       	ldi	r22, 0x06	; 6
    1308:	49 2f       	mov	r20, r25
    130a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <LCD_GoToWriteNumber>

}
    130e:	63 96       	adiw	r28, 0x13	; 19
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <USART_voidInit>:
#include "USART_Interface.h"




void USART_voidInit(void){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	USART_UCSRB_REG |= (1 << USART_UCSRB_RIXEN_BIT) | (1 << USART_UCSRB_TXEN_BIT);
    132a:	aa e2       	ldi	r26, 0x2A	; 42
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ea e2       	ldi	r30, 0x2A	; 42
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	88 61       	ori	r24, 0x18	; 24
    1336:	8c 93       	st	X, r24

	USART_UCSRC_REG = (1 <<USART_UCSRC_URSEL_BIT) | (0 << USART_UCSRC_UMSEL_BIT) | (0 << USART_UCSRC_UPM0_BIT)
    1338:	e0 e4       	ldi	r30, 0x40	; 64
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	86 e8       	ldi	r24, 0x86	; 134
    133e:	80 83       	st	Z, r24
			| (0 << USART_UCSRC_UPM1_BIT) | (0 << USART_UCSRC_USBS_BIT) | (1 << USART_UCSRC_UCSZ0_BIT)
			| (1 << USART_UCSRC_UCSZ1_BIT) | (0 << USART_UCSRB_UCSZ2_BIT);

	u8 Baud = 51;
    1340:	83 e3       	ldi	r24, 0x33	; 51
    1342:	89 83       	std	Y+1, r24	; 0x01
	USART_UBRRL_REG = Baud;
    1344:	e9 e2       	ldi	r30, 0x29	; 41
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	80 83       	st	Z, r24
	USART_UBRRH_REG = (Baud >> 8);
    134c:	e0 e4       	ldi	r30, 0x40	; 64
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	89 2f       	mov	r24, r25
    1358:	99 0f       	add	r25, r25
    135a:	99 0b       	sbc	r25, r25
    135c:	80 83       	st	Z, r24
}
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <USART_voidTransmit>:
void USART_voidTransmit(u8 Copy_u8Data){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	89 83       	std	Y+1, r24	; 0x01
while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_UDRE_BIT)==0){
    1372:	eb e2       	ldi	r30, 0x2B	; 43
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	82 95       	swap	r24
    137a:	86 95       	lsr	r24
    137c:	87 70       	andi	r24, 0x07	; 7
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	90 70       	andi	r25, 0x00	; 0
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	a1 f3       	breq	.-24     	; 0x1372 <USART_voidTransmit+0xc>
};
USART_UDR_REG=Copy_u8Data;
    138a:	ec e2       	ldi	r30, 0x2C	; 44
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	80 83       	st	Z, r24
}
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <USART_voidRecieve>:
void USART_voidRecieve(u8 *Copy_ptu8DataSent){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <USART_voidRecieve+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_RXC_BIT)==0){
    13a8:	eb e2       	ldi	r30, 0x2B	; 43
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	88 23       	and	r24, r24
    13b0:	dc f7       	brge	.-10     	; 0x13a8 <USART_voidRecieve+0xe>

	}

	*Copy_ptu8DataSent=USART_UDR_REG;
    13b2:	ec e2       	ldi	r30, 0x2C	; 44
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ba:	fa 81       	ldd	r31, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <USART_voidSendString>:
void USART_voidSendString(u8* Copy_pu8String)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <USART_voidSendString+0x6>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9b 83       	std	Y+3, r25	; 0x03
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <USART_voidSendString+0x30>

	u8 i;
	while (Copy_pu8String[i] != '\0')
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	fc 01       	movw	r30, r24
    13e6:	e2 0f       	add	r30, r18
    13e8:	f3 1f       	adc	r31, r19
    13ea:	90 81       	ld	r25, Z
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	89 2f       	mov	r24, r25
    13f4:	0e 94 b3 09 	call	0x1366	; 0x1366 <USART_voidTransmit>
}
void USART_voidSendString(u8* Copy_pu8String)
{

	u8 i;
	while (Copy_pu8String[i] != '\0')
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	fc 01       	movw	r30, r24
    1404:	e2 0f       	add	r30, r18
    1406:	f3 1f       	adc	r31, r19
    1408:	80 81       	ld	r24, Z
    140a:	88 23       	and	r24, r24
    140c:	31 f7       	brne	.-52     	; 0x13da <USART_voidSendString+0x12>
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
	    }
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <USART_voidDisable>:


void USART_voidDisable(void)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    // Clear the USART transmitter and receiver enable bits
    USART_UCSRB_REG &= ~((1 << USART_UCSRB_TXEN_BIT) | (1 << USART_UCSRB_RIXEN_BIT));
    1422:	aa e2       	ldi	r26, 0x2A	; 42
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ea e2       	ldi	r30, 0x2A	; 42
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	87 7e       	andi	r24, 0xE7	; 231
    142e:	8c 93       	st	X, r24
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <TWI_voidMaterInit>:



/*Initialize Master*/
void TWI_voidMaterInit(u8 Copy_u8SlaveAddress)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	89 83       	std	Y+1, r24	; 0x01
	/*1-Choose Prescaler*/
	TWI_TWBR_REG=(u8)(((FCPU/SCL)-16)/2);
    1442:	e0 e2       	ldi	r30, 0x20	; 32
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	80 83       	st	Z, r24
	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    144a:	e2 e2       	ldi	r30, 0x22	; 34
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	88 0f       	add	r24, r24
    1452:	80 83       	st	Z, r24
 	 /*3-enable*/
 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1454:	a6 e5       	ldi	r26, 0x56	; 86
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e6 e5       	ldi	r30, 0x56	; 86
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	8c 93       	st	X, r24
}
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <TWI_voidSlaveInit>:
/*Initialize Slave*/
void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01

	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    1476:	e2 e2       	ldi	r30, 0x22	; 34
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	88 0f       	add	r24, r24
    147e:	80 83       	st	Z, r24
 	 /*3-enable*/
 	 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1480:	a6 e5       	ldi	r26, 0x56	; 86
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e6 e5       	ldi	r30, 0x56	; 86
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	8c 93       	st	X, r24
}
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <TWI_voidStartCond>:
/*As Master Start Condition*/
void TWI_voidStartCond(void){
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    149e:	a6 e5       	ldi	r26, 0x56	; 86
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e6 e5       	ldi	r30, 0x56	; 86
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 7e       	andi	r24, 0xEF	; 239
    14aa:	8c 93       	st	X, r24
		/*1-Start Condition*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    14ac:	a6 e5       	ldi	r26, 0x56	; 86
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e6 e5       	ldi	r30, 0x56	; 86
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 62       	ori	r24, 0x20	; 32
    14b8:	8c 93       	st	X, r24
		/*2-CLEAR TWINT FLAG TO START OPERATION*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    14ba:	a6 e5       	ldi	r26, 0x56	; 86
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e6 e5       	ldi	r30, 0x56	; 86
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	8c 93       	st	X, r24
		/*3-Wait until flag became 1*/
		while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    14c8:	e6 e5       	ldi	r30, 0x56	; 86
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 23       	and	r24, r24
    14d0:	dc f7       	brge	.-10     	; 0x14c8 <TWI_voidStartCond+0x32>
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <TWI_voidSendSlaveAddressWithRead>:
/*As Master write Address on Bus*/
void TWI_voidSendSlaveAddressWithRead(u8 Copy_u8SlaveAddressToSend){
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	0f 92       	push	r0
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=((Copy_u8SlaveAddressToSend<<1) |0x01);
    14e4:	e3 e2       	ldi	r30, 0x23	; 35
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	81 60       	ori	r24, 0x01	; 1
    14f4:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    14f6:	a6 e5       	ldi	r26, 0x56	; 86
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e6 e5       	ldi	r30, 0x56	; 86
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 68       	ori	r24, 0x80	; 128
    1502:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1504:	e6 e5       	ldi	r30, 0x56	; 86
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	88 23       	and	r24, r24
    150c:	dc f7       	brge	.-10     	; 0x1504 <TWI_voidSendSlaveAddressWithRead+0x2c>
}
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <TWI_voidSendSlaveAddressWithWrite>:
void TWI_voidSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddressToSend){
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=(Copy_u8SlaveAddressToSend<<1);
    1522:	e3 e2       	ldi	r30, 0x23	; 35
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	88 0f       	add	r24, r24
    152a:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    152c:	a6 e5       	ldi	r26, 0x56	; 86
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e6 e5       	ldi	r30, 0x56	; 86
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 68       	ori	r24, 0x80	; 128
    1538:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    153a:	e6 e5       	ldi	r30, 0x56	; 86
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 23       	and	r24, r24
    1542:	dc f7       	brge	.-10     	; 0x153a <TWI_voidSendSlaveAddressWithWrite+0x24>
}
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <TWI_voidMasterWriteData>:
/*As Master Write Data On Bus*/
void TWI_voidMasterWriteData(u8 Copy_u8SentData){
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	89 83       	std	Y+1, r24	; 0x01
	/*Assign Data to bus*/
	TWI_TWDR_REG=Copy_u8SentData;
    1558:	e3 e2       	ldi	r30, 0x23	; 35
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	80 83       	st	Z, r24
	/*Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1560:	a6 e5       	ldi	r26, 0x56	; 86
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 e5       	ldi	r30, 0x56	; 86
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    156e:	e6 e5       	ldi	r30, 0x56	; 86
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	88 23       	and	r24, r24
    1576:	dc f7       	brge	.-10     	; 0x156e <TWI_voidMasterWriteData+0x22>
}
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <TWI_voidMasterReadData>:
/*As Master Read Data On Bus*/
void TWI_voidMasterReadData(u8 *Copy_u8ReceivedData){
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <TWI_voidMasterReadData+0x6>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01

	/*1Enable ACK*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    158e:	a6 e5       	ldi	r26, 0x56	; 86
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e6 e5       	ldi	r30, 0x56	; 86
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 64       	ori	r24, 0x40	; 64
    159a:	8c 93       	st	X, r24
	/*2-Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    159c:	a6 e5       	ldi	r26, 0x56	; 86
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e6 e5       	ldi	r30, 0x56	; 86
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 68       	ori	r24, 0x80	; 128
    15a8:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    15aa:	e6 e5       	ldi	r30, 0x56	; 86
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 23       	and	r24, r24
    15b2:	dc f7       	brge	.-10     	; 0x15aa <TWI_voidMasterReadData+0x2a>
	/*CHECK FOR ACK*/

	*Copy_u8ReceivedData=TWI_TWDR_REG;
    15b4:	e3 e2       	ldi	r30, 0x23	; 35
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	e9 81       	ldd	r30, Y+1	; 0x01
    15bc:	fa 81       	ldd	r31, Y+2	; 0x02
    15be:	80 83       	st	Z, r24
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <TWI_voidStopCond>:
/*As Master Stop Condition*/
void TWI_voidStopCond(void){
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    15d2:	a6 e5       	ldi	r26, 0x56	; 86
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e6 e5       	ldi	r30, 0x56	; 86
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 7d       	andi	r24, 0xDF	; 223
    15de:	8c 93       	st	X, r24
  
	/*1-Stop Condition*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    15e0:	a6 e5       	ldi	r26, 0x56	; 86
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 e5       	ldi	r30, 0x56	; 86
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	80 61       	ori	r24, 0x10	; 16
    15ec:	8c 93       	st	X, r24
	/*2-CLEAR TWINT FLAG TO START OPERATION*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    15ee:	a6 e5       	ldi	r26, 0x56	; 86
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e6 e5       	ldi	r30, 0x56	; 86
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 68       	ori	r24, 0x80	; 128
    15fa:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
//	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
	
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <TWI_GetStatus>:
u8   TWI_GetStatus(u8 Copy_u8Status)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
    /*Get status*/
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    160e:	a6 e5       	ldi	r26, 0x56	; 86
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e6 e5       	ldi	r30, 0x56	; 86
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    161c:	a6 e5       	ldi	r26, 0x56	; 86
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e6 e5       	ldi	r30, 0x56	; 86
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 64       	ori	r24, 0x40	; 64
    1628:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    162a:	a6 e5       	ldi	r26, 0x56	; 86
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e6 e5       	ldi	r30, 0x56	; 86
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	84 60       	ori	r24, 0x04	; 4
    1636:	8c 93       	st	X, r24
    /*Busy wait for TWINT flag*/
    while(!GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT));
    1638:	e6 e5       	ldi	r30, 0x56	; 86
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 23       	and	r24, r24
    1640:	dc f7       	brge	.-10     	; 0x1638 <TWI_GetStatus+0x36>
    while((TWI_TWSR_REG & 0xF8) != Copy_u8Status);
    1642:	e1 e2       	ldi	r30, 0x21	; 33
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 01       	movw	r18, r24
    164e:	28 7f       	andi	r18, 0xF8	; 248
    1650:	30 70       	andi	r19, 0x00	; 0
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	28 17       	cp	r18, r24
    165a:	39 07       	cpc	r19, r25
    165c:	91 f7       	brne	.-28     	; 0x1642 <TWI_GetStatus+0x40>
    return TWI_TWDR_REG;
    165e:	e3 e2       	ldi	r30, 0x23	; 35
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
}
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <G_INT_Enable>:
#include"../../LIB/BIT_MATH.h"
#include"Global_INT_Private.h"
#include"Global_INT_Interface.h"

void G_INT_Enable(void)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_REG_I_BIT);
    1674:	af e5       	ldi	r26, 0x5F	; 95
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ef e5       	ldi	r30, 0x5F	; 95
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 68       	ori	r24, 0x80	; 128
    1680:	8c 93       	st	X, r24
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <G_INT_Disable>:
void G_INT_Disable(void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,SREG_REG_I_BIT);
    1690:	af e5       	ldi	r26, 0x5F	; 95
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ef e5       	ldi	r30, 0x5F	; 95
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8f 77       	andi	r24, 0x7F	; 127
    169c:	8c 93       	st	X, r24
}
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <GPT_Init>:

void __vector_10(void)__attribute((signal,used));
void __vector_11(void)__attribute((signal,used));

void GPT_Init(GPT_stConfig *Copy_stConfig)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <GPT_Init+0x6>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_stConfig->GPT_Timer == GPT_Timer0)
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	80 81       	ld	r24, Z
    16b8:	88 23       	and	r24, r24
    16ba:	09 f0       	breq	.+2      	; 0x16be <GPT_Init+0x1a>
    16bc:	68 c0       	rjmp	.+208    	; 0x178e <GPT_Init+0xea>
	{
		if (Copy_stConfig->GPT_WG_Mode == GPT_Normal)
    16be:	e9 81       	ldd	r30, Y+1	; 0x01
    16c0:	fa 81       	ldd	r31, Y+2	; 0x02
    16c2:	81 81       	ldd	r24, Z+1	; 0x01
    16c4:	88 23       	and	r24, r24
    16c6:	79 f5       	brne	.+94     	; 0x1726 <GPT_Init+0x82>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    16c8:	a3 e5       	ldi	r26, 0x53	; 83
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e3 e5       	ldi	r30, 0x53	; 83
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8f 7b       	andi	r24, 0xBF	; 191
    16d4:	8c 93       	st	X, r24
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	87 7f       	andi	r24, 0xF7	; 247
    16e2:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    16e4:	a3 e5       	ldi	r26, 0x53	; 83
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e3 e5       	ldi	r30, 0x53	; 83
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	90 81       	ld	r25, Z
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	89 2b       	or	r24, r25
    16f6:	8c 93       	st	X, r24
			Timer_TCNT0_REG = Copy_stConfig->GPT_Preload;
    16f8:	a2 e5       	ldi	r26, 0x52	; 82
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e9 81       	ldd	r30, Y+1	; 0x01
    16fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1700:	83 81       	ldd	r24, Z+3	; 0x03
    1702:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	85 81       	ldd	r24, Z+5	; 0x05
    170a:	96 81       	ldd	r25, Z+6	; 0x06
    170c:	90 93 b9 01 	sts	0x01B9, r25
    1710:	80 93 b8 01 	sts	0x01B8, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_TOIE0_BIT);
    1714:	a9 e5       	ldi	r26, 0x59	; 89
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e9 e5       	ldi	r30, 0x59	; 89
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	8c 93       	st	X, r24
			G_INT_Enable();
    1722:	0e 94 36 0b 	call	0x166c	; 0x166c <G_INT_Enable>
		}
		if (Copy_stConfig->GPT_WG_Mode == GPT_CTC)
    1726:	e9 81       	ldd	r30, Y+1	; 0x01
    1728:	fa 81       	ldd	r31, Y+2	; 0x02
    172a:	81 81       	ldd	r24, Z+1	; 0x01
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	79 f5       	brne	.+94     	; 0x178e <GPT_Init+0xea>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    1730:	a3 e5       	ldi	r26, 0x53	; 83
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e3 e5       	ldi	r30, 0x53	; 83
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 7b       	andi	r24, 0xBF	; 191
    173c:	8c 93       	st	X, r24
			SET_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    173e:	a3 e5       	ldi	r26, 0x53	; 83
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e3 e5       	ldi	r30, 0x53	; 83
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	88 60       	ori	r24, 0x08	; 8
    174a:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    174c:	a3 e5       	ldi	r26, 0x53	; 83
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e3 e5       	ldi	r30, 0x53	; 83
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	90 81       	ld	r25, Z
    1756:	e9 81       	ldd	r30, Y+1	; 0x01
    1758:	fa 81       	ldd	r31, Y+2	; 0x02
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	89 2b       	or	r24, r25
    175e:	8c 93       	st	X, r24
			Timer_OCR0_REG = Copy_stConfig->GPT_COM_Value;
    1760:	ac e5       	ldi	r26, 0x5C	; 92
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e9 81       	ldd	r30, Y+1	; 0x01
    1766:	fa 81       	ldd	r31, Y+2	; 0x02
    1768:	84 81       	ldd	r24, Z+4	; 0x04
    176a:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    176c:	e9 81       	ldd	r30, Y+1	; 0x01
    176e:	fa 81       	ldd	r31, Y+2	; 0x02
    1770:	85 81       	ldd	r24, Z+5	; 0x05
    1772:	96 81       	ldd	r25, Z+6	; 0x06
    1774:	90 93 b9 01 	sts	0x01B9, r25
    1778:	80 93 b8 01 	sts	0x01B8, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_OCIE0_BIT);
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	8c 93       	st	X, r24
			G_INT_Enable();
    178a:	0e 94 36 0b 	call	0x166c	; 0x166c <G_INT_Enable>
	}
	else
	{

	}
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <GPT_Set_Preload>:

void GPT_Set_Preload(u8 Copy_u8Preload)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
	Timer_TCNT0_REG = Copy_u8Preload;
    17a4:	e2 e5       	ldi	r30, 0x52	; 82
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	80 83       	st	Z, r24
}
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <__vector_10>:


void __vector_10(void)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    17de:	80 91 b8 01 	lds	r24, 0x01B8
    17e2:	90 91 b9 01 	lds	r25, 0x01B9
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <__vector_10+0x40>
	{
		Global_Timer0_CBF();
    17ea:	e0 91 b8 01 	lds	r30, 0x01B8
    17ee:	f0 91 b9 01 	lds	r31, 0x01B9
    17f2:	09 95       	icall
	}
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_11>:
void __vector_11(void)
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    1844:	80 91 b8 01 	lds	r24, 0x01B8
    1848:	90 91 b9 01 	lds	r25, 0x01B9
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	29 f0       	breq	.+10     	; 0x185a <__vector_11+0x40>
	{
		Global_Timer0_CBF();
    1850:	e0 91 b8 01 	lds	r30, 0x01B8
    1854:	f0 91 b9 01 	lds	r31, 0x01B9
    1858:	09 95       	icall
	}
}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <EXT_INT_Init>:
void __vector_3(void)__attribute((signal,used));



void EXT_INT_Init(EXTI_St *Copy_EXT_INT_st)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <EXT_INT_Init+0x6>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	9b 83       	std	Y+3, r25	; 0x03
    188e:	8a 83       	std	Y+2, r24	; 0x02
	/*The External Interrupt 1 is activated by if the SREG I-bit and the
	corresponding interrupt mask in the GICR are set.*/
	
	u8 check = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    1894:	ea 81       	ldd	r30, Y+2	; 0x02
    1896:	fb 81       	ldd	r31, Y+3	; 0x03
    1898:	80 81       	ld	r24, Z
    189a:	88 23       	and	r24, r24
    189c:	09 f0       	breq	.+2      	; 0x18a0 <EXT_INT_Init+0x20>
    189e:	67 c0       	rjmp	.+206    	; 0x196e <EXT_INT_Init+0xee>
	{
		
		
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Low_Level_SC)
    18a0:	ea 81       	ldd	r30, Y+2	; 0x02
    18a2:	fb 81       	ldd	r31, Y+3	; 0x03
    18a4:	81 81       	ldd	r24, Z+1	; 0x01
    18a6:	88 23       	and	r24, r24
    18a8:	79 f4       	brne	.+30     	; 0x18c8 <EXT_INT_Init+0x48>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    18aa:	a5 e5       	ldi	r26, 0x55	; 85
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e5 e5       	ldi	r30, 0x55	; 85
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8e 7f       	andi	r24, 0xFE	; 254
    18b6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    18b8:	a5 e5       	ldi	r26, 0x55	; 85
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e5 e5       	ldi	r30, 0x55	; 85
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8d 7f       	andi	r24, 0xFD	; 253
    18c4:	8c 93       	st	X, r24
    18c6:	3d c0       	rjmp	.+122    	; 0x1942 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Any_Change_SC)
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	81 81       	ldd	r24, Z+1	; 0x01
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	79 f4       	brne	.+30     	; 0x18f0 <EXT_INT_Init+0x70>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    18d2:	a5 e5       	ldi	r26, 0x55	; 85
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e5 e5       	ldi	r30, 0x55	; 85
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    18e0:	a5 e5       	ldi	r26, 0x55	; 85
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e5 e5       	ldi	r30, 0x55	; 85
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8d 7f       	andi	r24, 0xFD	; 253
    18ec:	8c 93       	st	X, r24
    18ee:	29 c0       	rjmp	.+82     	; 0x1942 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Falling_Edge_SC)
    18f0:	ea 81       	ldd	r30, Y+2	; 0x02
    18f2:	fb 81       	ldd	r31, Y+3	; 0x03
    18f4:	81 81       	ldd	r24, Z+1	; 0x01
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	79 f4       	brne	.+30     	; 0x1918 <EXT_INT_Init+0x98>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8e 7f       	andi	r24, 0xFE	; 254
    1906:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    1908:	a5 e5       	ldi	r26, 0x55	; 85
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e5       	ldi	r30, 0x55	; 85
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	82 60       	ori	r24, 0x02	; 2
    1914:	8c 93       	st	X, r24
    1916:	15 c0       	rjmp	.+42     	; 0x1942 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Rising_Edge_SC)
    1918:	ea 81       	ldd	r30, Y+2	; 0x02
    191a:	fb 81       	ldd	r31, Y+3	; 0x03
    191c:	81 81       	ldd	r24, Z+1	; 0x01
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	79 f4       	brne	.+30     	; 0x1940 <EXT_INT_Init+0xc0>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    1922:	a5 e5       	ldi	r26, 0x55	; 85
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e5       	ldi	r30, 0x55	; 85
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	81 60       	ori	r24, 0x01	; 1
    192e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    1930:	a5 e5       	ldi	r26, 0x55	; 85
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e5 e5       	ldi	r30, 0x55	; 85
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	8c 93       	st	X, r24
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <EXT_INT_Init+0xc2>
		}
		else
		{
			check = 0;
    1940:	19 82       	std	Y+1, r1	; 0x01
    //Prevent Enable The global interrupt
		}
		if (check == 1)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	09 f0       	breq	.+2      	; 0x194a <EXT_INT_Init+0xca>
    1948:	b3 c0       	rjmp	.+358    	; 0x1ab0 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    194a:	0e 94 36 0b 	call	0x166c	; 0x166c <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT0_BIT);
    194e:	ab e5       	ldi	r26, 0x5B	; 91
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	eb e5       	ldi	r30, 0x5B	; 91
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	80 64       	ori	r24, 0x40	; 64
    195a:	8c 93       	st	X, r24
			
			Global_EXTI0_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    195c:	ea 81       	ldd	r30, Y+2	; 0x02
    195e:	fb 81       	ldd	r31, Y+3	; 0x03
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	90 93 bb 01 	sts	0x01BB, r25
    1968:	80 93 ba 01 	sts	0x01BA, r24
    196c:	a1 c0       	rjmp	.+322    	; 0x1ab0 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    196e:	ea 81       	ldd	r30, Y+2	; 0x02
    1970:	fb 81       	ldd	r31, Y+3	; 0x03
    1972:	80 81       	ld	r24, Z
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	09 f0       	breq	.+2      	; 0x197a <EXT_INT_Init+0xfa>
    1978:	67 c0       	rjmp	.+206    	; 0x1a48 <EXT_INT_Init+0x1c8>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Low_Level_SC)
    197a:	ea 81       	ldd	r30, Y+2	; 0x02
    197c:	fb 81       	ldd	r31, Y+3	; 0x03
    197e:	81 81       	ldd	r24, Z+1	; 0x01
    1980:	84 30       	cpi	r24, 0x04	; 4
    1982:	79 f4       	brne	.+30     	; 0x19a2 <EXT_INT_Init+0x122>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    1984:	a5 e5       	ldi	r26, 0x55	; 85
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e5       	ldi	r30, 0x55	; 85
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8b 7f       	andi	r24, 0xFB	; 251
    1990:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    1992:	a5 e5       	ldi	r26, 0x55	; 85
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e5 e5       	ldi	r30, 0x55	; 85
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	87 7f       	andi	r24, 0xF7	; 247
    199e:	8c 93       	st	X, r24
    19a0:	3d c0       	rjmp	.+122    	; 0x1a1c <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Any_Change_SC)
    19a2:	ea 81       	ldd	r30, Y+2	; 0x02
    19a4:	fb 81       	ldd	r31, Y+3	; 0x03
    19a6:	81 81       	ldd	r24, Z+1	; 0x01
    19a8:	85 30       	cpi	r24, 0x05	; 5
    19aa:	79 f4       	brne	.+30     	; 0x19ca <EXT_INT_Init+0x14a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    19ac:	a5 e5       	ldi	r26, 0x55	; 85
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e5       	ldi	r30, 0x55	; 85
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	84 60       	ori	r24, 0x04	; 4
    19b8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    19ba:	a5 e5       	ldi	r26, 0x55	; 85
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e5       	ldi	r30, 0x55	; 85
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	87 7f       	andi	r24, 0xF7	; 247
    19c6:	8c 93       	st	X, r24
    19c8:	29 c0       	rjmp	.+82     	; 0x1a1c <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Falling_Edge_SC)
    19ca:	ea 81       	ldd	r30, Y+2	; 0x02
    19cc:	fb 81       	ldd	r31, Y+3	; 0x03
    19ce:	81 81       	ldd	r24, Z+1	; 0x01
    19d0:	86 30       	cpi	r24, 0x06	; 6
    19d2:	79 f4       	brne	.+30     	; 0x19f2 <EXT_INT_Init+0x172>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    19d4:	a5 e5       	ldi	r26, 0x55	; 85
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e5       	ldi	r30, 0x55	; 85
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8b 7f       	andi	r24, 0xFB	; 251
    19e0:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    19e2:	a5 e5       	ldi	r26, 0x55	; 85
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e5 e5       	ldi	r30, 0x55	; 85
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	88 60       	ori	r24, 0x08	; 8
    19ee:	8c 93       	st	X, r24
    19f0:	15 c0       	rjmp	.+42     	; 0x1a1c <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Rising_Edge_SC)
    19f2:	ea 81       	ldd	r30, Y+2	; 0x02
    19f4:	fb 81       	ldd	r31, Y+3	; 0x03
    19f6:	81 81       	ldd	r24, Z+1	; 0x01
    19f8:	87 30       	cpi	r24, 0x07	; 7
    19fa:	79 f4       	brne	.+30     	; 0x1a1a <EXT_INT_Init+0x19a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    19fc:	a5 e5       	ldi	r26, 0x55	; 85
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e5 e5       	ldi	r30, 0x55	; 85
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	84 60       	ori	r24, 0x04	; 4
    1a08:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    1a0a:	a5 e5       	ldi	r26, 0x55	; 85
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e5 e5       	ldi	r30, 0x55	; 85
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 60       	ori	r24, 0x08	; 8
    1a16:	8c 93       	st	X, r24
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <EXT_INT_Init+0x19c>
		}
		else
		{
			check = 0;
    1a1a:	19 82       	std	Y+1, r1	; 0x01

		}
		if (check == 1)
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <EXT_INT_Init+0x1a4>
    1a22:	46 c0       	rjmp	.+140    	; 0x1ab0 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    1a24:	0e 94 36 0b 	call	0x166c	; 0x166c <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT1_BIT);
    1a28:	ab e5       	ldi	r26, 0x5B	; 91
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	eb e5       	ldi	r30, 0x5B	; 91
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 68       	ori	r24, 0x80	; 128
    1a34:	8c 93       	st	X, r24
			
			Global_EXTI1_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    1a36:	ea 81       	ldd	r30, Y+2	; 0x02
    1a38:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	90 93 bd 01 	sts	0x01BD, r25
    1a42:	80 93 bc 01 	sts	0x01BC, r24
    1a46:	34 c0       	rjmp	.+104    	; 0x1ab0 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    1a48:	ea 81       	ldd	r30, Y+2	; 0x02
    1a4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a4c:	80 81       	ld	r24, Z
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	79 f5       	brne	.+94     	; 0x1ab0 <EXT_INT_Init+0x230>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Falling_Edge_SC)
    1a52:	ea 81       	ldd	r30, Y+2	; 0x02
    1a54:	fb 81       	ldd	r31, Y+3	; 0x03
    1a56:	81 81       	ldd	r24, Z+1	; 0x01
    1a58:	88 30       	cpi	r24, 0x08	; 8
    1a5a:	41 f4       	brne	.+16     	; 0x1a6c <EXT_INT_Init+0x1ec>
		{
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    1a5c:	a4 e5       	ldi	r26, 0x54	; 84
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e5       	ldi	r30, 0x54	; 84
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 7b       	andi	r24, 0xBF	; 191
    1a68:	8c 93       	st	X, r24
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <EXT_INT_Init+0x208>

		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Rising_Edge_SC)
    1a6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a70:	81 81       	ldd	r24, Z+1	; 0x01
    1a72:	89 30       	cpi	r24, 0x09	; 9
    1a74:	41 f4       	brne	.+16     	; 0x1a86 <EXT_INT_Init+0x206>
		{
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    1a76:	a4 e5       	ldi	r26, 0x54	; 84
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e4 e5       	ldi	r30, 0x54	; 84
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 64       	ori	r24, 0x40	; 64
    1a82:	8c 93       	st	X, r24
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <EXT_INT_Init+0x208>

		}
		else
		{
			check = 0;
    1a86:	19 82       	std	Y+1, r1	; 0x01
		}
		if (check == 1)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	89 f4       	brne	.+34     	; 0x1ab0 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    1a8e:	0e 94 36 0b 	call	0x166c	; 0x166c <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT2_BIT);
    1a92:	ab e5       	ldi	r26, 0x5B	; 91
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e5       	ldi	r30, 0x5B	; 91
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 62       	ori	r24, 0x20	; 32
    1a9e:	8c 93       	st	X, r24
			
			Global_EXTI2_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	90 93 bf 01 	sts	0x01BF, r25
    1aac:	80 93 be 01 	sts	0x01BE, r24
	}
	else
	{

	}
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <EXT_INT_Disable>:

void EXT_INT_Disable(EXTI_St *Copy_EXT_INT_st)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <EXT_INT_Disable+0x6>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 23       	and	r24, r24
    1ad2:	51 f4       	brne	.+20     	; 0x1ae8 <EXT_INT_Disable+0x2c>
	{
		G_INT_Disable();
    1ad4:	0e 94 44 0b 	call	0x1688	; 0x1688 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT0_BIT);
    1ad8:	ab e5       	ldi	r26, 0x5B	; 91
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	eb e5       	ldi	r30, 0x5B	; 91
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	8c 93       	st	X, r24
    1ae6:	1d c0       	rjmp	.+58     	; 0x1b22 <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    1ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aea:	fa 81       	ldd	r31, Y+2	; 0x02
    1aec:	80 81       	ld	r24, Z
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	51 f4       	brne	.+20     	; 0x1b06 <EXT_INT_Disable+0x4a>
	{
		G_INT_Disable();
    1af2:	0e 94 44 0b 	call	0x1688	; 0x1688 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT1_BIT);
    1af6:	ab e5       	ldi	r26, 0x5B	; 91
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	eb e5       	ldi	r30, 0x5B	; 91
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 77       	andi	r24, 0x7F	; 127
    1b02:	8c 93       	st	X, r24
    1b04:	0e c0       	rjmp	.+28     	; 0x1b22 <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    1b06:	e9 81       	ldd	r30, Y+1	; 0x01
    1b08:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0a:	80 81       	ld	r24, Z
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	49 f4       	brne	.+18     	; 0x1b22 <EXT_INT_Disable+0x66>
	{
		G_INT_Disable();
    1b10:	0e 94 44 0b 	call	0x1688	; 0x1688 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT2_BIT);
    1b14:	ab e5       	ldi	r26, 0x5B	; 91
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	eb e5       	ldi	r30, 0x5B	; 91
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8f 7d       	andi	r24, 0xDF	; 223
    1b20:	8c 93       	st	X, r24
	else
	{

	}

}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <__vector_1>:

void __vector_1(void)
{
    1b2c:	1f 92       	push	r1
    1b2e:	0f 92       	push	r0
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	0f 92       	push	r0
    1b34:	11 24       	eor	r1, r1
    1b36:	2f 93       	push	r18
    1b38:	3f 93       	push	r19
    1b3a:	4f 93       	push	r20
    1b3c:	5f 93       	push	r21
    1b3e:	6f 93       	push	r22
    1b40:	7f 93       	push	r23
    1b42:	8f 93       	push	r24
    1b44:	9f 93       	push	r25
    1b46:	af 93       	push	r26
    1b48:	bf 93       	push	r27
    1b4a:	ef 93       	push	r30
    1b4c:	ff 93       	push	r31
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI0_CPF != NULL)
    1b56:	80 91 ba 01 	lds	r24, 0x01BA
    1b5a:	90 91 bb 01 	lds	r25, 0x01BB
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	29 f0       	breq	.+10     	; 0x1b6c <__vector_1+0x40>
	{
		Global_EXTI0_CPF();
    1b62:	e0 91 ba 01 	lds	r30, 0x01BA
    1b66:	f0 91 bb 01 	lds	r31, 0x01BB
    1b6a:	09 95       	icall
	}

}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <__vector_2>:
void __vector_2(void)
{
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI1_CPF != NULL)
    1bbc:	80 91 bc 01 	lds	r24, 0x01BC
    1bc0:	90 91 bd 01 	lds	r25, 0x01BD
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <__vector_2+0x40>
		{
		Global_EXTI1_CPF();
    1bc8:	e0 91 bc 01 	lds	r30, 0x01BC
    1bcc:	f0 91 bd 01 	lds	r31, 0x01BD
    1bd0:	09 95       	icall
		}

}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	ff 91       	pop	r31
    1bd8:	ef 91       	pop	r30
    1bda:	bf 91       	pop	r27
    1bdc:	af 91       	pop	r26
    1bde:	9f 91       	pop	r25
    1be0:	8f 91       	pop	r24
    1be2:	7f 91       	pop	r23
    1be4:	6f 91       	pop	r22
    1be6:	5f 91       	pop	r21
    1be8:	4f 91       	pop	r20
    1bea:	3f 91       	pop	r19
    1bec:	2f 91       	pop	r18
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <__vector_3>:
void __vector_3(void)
{
    1bf8:	1f 92       	push	r1
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	4f 93       	push	r20
    1c08:	5f 93       	push	r21
    1c0a:	6f 93       	push	r22
    1c0c:	7f 93       	push	r23
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
    1c12:	af 93       	push	r26
    1c14:	bf 93       	push	r27
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI2_CPF != NULL)
    1c22:	80 91 be 01 	lds	r24, 0x01BE
    1c26:	90 91 bf 01 	lds	r25, 0x01BF
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	29 f0       	breq	.+10     	; 0x1c38 <__vector_3+0x40>
		{
		Global_EXTI2_CPF();
    1c2e:	e0 91 be 01 	lds	r30, 0x01BE
    1c32:	f0 91 bf 01 	lds	r31, 0x01BF
    1c36:	09 95       	icall
		}

}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	ff 91       	pop	r31
    1c3e:	ef 91       	pop	r30
    1c40:	bf 91       	pop	r27
    1c42:	af 91       	pop	r26
    1c44:	9f 91       	pop	r25
    1c46:	8f 91       	pop	r24
    1c48:	7f 91       	pop	r23
    1c4a:	6f 91       	pop	r22
    1c4c:	5f 91       	pop	r21
    1c4e:	4f 91       	pop	r20
    1c50:	3f 91       	pop	r19
    1c52:	2f 91       	pop	r18
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <DIO_VoidSetPinDirection>:
{ DIO_PORTA_REG, DIO_PORTB_REG, DIO_PORTC_REG, DIO_PORTD_REG };
volatile u8 *DIO_ArrpVu8_PIN[4] =
{ DIO_PINA_REG, DIO_PINB_REG, DIO_PINC_REG, DIO_PIND_REG };

void DIO_VoidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <DIO_VoidSetPinDirection+0x6>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	6a 83       	std	Y+2, r22	; 0x02
    1c6e:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <DIO_VoidSetPinDirection+0x1a>
    1c76:	54 c0       	rjmp	.+168    	; 0x1d20 <DIO_VoidSetPinDirection+0xc2>
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	88 30       	cpi	r24, 0x08	; 8
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <DIO_VoidSetPinDirection+0x22>
    1c7e:	50 c0       	rjmp	.+160    	; 0x1d20 <DIO_VoidSetPinDirection+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	29 f5       	brne	.+74     	; 0x1cd0 <DIO_VoidSetPinDirection+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	e9 58       	subi	r30, 0x89	; 137
    1c94:	fe 4f       	sbci	r31, 0xFE	; 254
    1c96:	a0 81       	ld	r26, Z
    1c98:	b1 81       	ldd	r27, Z+1	; 0x01
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e9 58       	subi	r30, 0x89	; 137
    1ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    1caa:	01 90       	ld	r0, Z+
    1cac:	f0 81       	ld	r31, Z
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_VoidSetPinDirection+0x68>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_VoidSetPinDirection+0x64>
    1cca:	84 2b       	or	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	28 c0       	rjmp	.+80     	; 0x1d20 <DIO_VoidSetPinDirection+0xc2>
		}
		else if (Copy_u8Direction == DIO_u8PIN_INPUT)
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 23       	and	r24, r24
    1cd4:	29 f5       	brne	.+74     	; 0x1d20 <DIO_VoidSetPinDirection+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	e9 58       	subi	r30, 0x89	; 137
    1ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce6:	a0 81       	ld	r26, Z
    1ce8:	b1 81       	ldd	r27, Z+1	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	e9 58       	subi	r30, 0x89	; 137
    1cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	f0 81       	ld	r31, Z
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_VoidSetPinDirection+0xb8>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_VoidSetPinDirection+0xb4>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24
	{
		/*empty */

	}

}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <DIO_VoidSetPinValue+0x6>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	6a 83       	std	Y+2, r22	; 0x02
    1d3c:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <DIO_VoidSetPinValue+0x1a>
    1d44:	54 c0       	rjmp	.+168    	; 0x1dee <DIO_VoidSetPinValue+0xc2>
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	88 30       	cpi	r24, 0x08	; 8
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <DIO_VoidSetPinValue+0x22>
    1d4c:	50 c0       	rjmp	.+160    	; 0x1dee <DIO_VoidSetPinValue+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Value == DIO_u8PIN_HIGH)
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	29 f5       	brne	.+74     	; 0x1d9e <DIO_VoidSetPinValue+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e1 58       	subi	r30, 0x81	; 129
    1d62:	fe 4f       	sbci	r31, 0xFE	; 254
    1d64:	a0 81       	ld	r26, Z
    1d66:	b1 81       	ldd	r27, Z+1	; 0x01
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	fc 01       	movw	r30, r24
    1d74:	e1 58       	subi	r30, 0x81	; 129
    1d76:	fe 4f       	sbci	r31, 0xFE	; 254
    1d78:	01 90       	ld	r0, Z+
    1d7a:	f0 81       	ld	r31, Z
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_VoidSetPinValue+0x68>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_VoidSetPinValue+0x64>
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	28 c0       	rjmp	.+80     	; 0x1dee <DIO_VoidSetPinValue+0xc2>
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	88 23       	and	r24, r24
    1da2:	29 f5       	brne	.+74     	; 0x1dee <DIO_VoidSetPinValue+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	fc 01       	movw	r30, r24
    1db0:	e1 58       	subi	r30, 0x81	; 129
    1db2:	fe 4f       	sbci	r31, 0xFE	; 254
    1db4:	a0 81       	ld	r26, Z
    1db6:	b1 81       	ldd	r27, Z+1	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e1 58       	subi	r30, 0x81	; 129
    1dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc8:	01 90       	ld	r0, Z+
    1dca:	f0 81       	ld	r31, Z
    1dcc:	e0 2d       	mov	r30, r0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_VoidSetPinValue+0xb8>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_VoidSetPinValue+0xb4>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
	else
	{
		/*empty */

	}
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8Return)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <DIO_VoidGetPinValue+0x6>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <DIO_VoidGetPinValue+0x8>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	6a 83       	std	Y+2, r22	; 0x02
    1e0a:	5c 83       	std	Y+4, r21	; 0x04
    1e0c:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	84 30       	cpi	r24, 0x04	; 4
    1e12:	f8 f4       	brcc	.+62     	; 0x1e52 <DIO_VoidGetPinValue+0x58>
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	88 30       	cpi	r24, 0x08	; 8
    1e18:	e0 f4       	brcc	.+56     	; 0x1e52 <DIO_VoidGetPinValue+0x58>
     	{

		   *Copy_Pu8Return=GET_BIT(*DIO_ArrpVu8_PIN[Copy_u8Port],Copy_u8Pin);
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	fc 01       	movw	r30, r24
    1e26:	e9 57       	subi	r30, 0x79	; 121
    1e28:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2a:	01 90       	ld	r0, Z+
    1e2c:	f0 81       	ld	r31, Z
    1e2e:	e0 2d       	mov	r30, r0
    1e30:	80 81       	ld	r24, Z
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a9 01       	movw	r20, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_VoidGetPinValue+0x4a>
    1e40:	55 95       	asr	r21
    1e42:	47 95       	ror	r20
    1e44:	8a 95       	dec	r24
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_VoidGetPinValue+0x46>
    1e48:	ca 01       	movw	r24, r20
    1e4a:	81 70       	andi	r24, 0x01	; 1
    1e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e50:	80 83       	st	Z, r24
		else
		{
			/*empty */

		}
}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <DIO_VoidSetPortDirection>:

/*Port Level*/
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <DIO_VoidSetPortDirection+0x6>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	68 f4       	brcc	.+26     	; 0x1e8e <DIO_VoidSetPortDirection+0x2e>
	{

		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Direction;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e9 58       	subi	r30, 0x89	; 137
    1e82:	fe 4f       	sbci	r31, 0xFE	; 254
    1e84:	01 90       	ld	r0, Z+
    1e86:	f0 81       	ld	r31, Z
    1e88:	e0 2d       	mov	r30, r0
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	80 83       	st	Z, r24
	}
	else
	{
       /*empty*/
	}
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <DIO_VoidSetPortValue>:

/*Port value*/
void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <DIO_VoidSetPortValue+0x6>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	68 f4       	brcc	.+26     	; 0x1ec6 <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Value;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e9 58       	subi	r30, 0x89	; 137
    1eba:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	f0 81       	ld	r31, Z
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <DIO_VoidGetPortValue>:

void DIO_VoidGetPortValue(u8 Copy_u8Port, u8 *Copy_Pu8Return)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <DIO_VoidGetPortValue+0x6>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	7b 83       	std	Y+3, r23	; 0x03
    1ee0:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	84 30       	cpi	r24, 0x04	; 4
    1ee6:	78 f4       	brcc	.+30     	; 0x1f06 <DIO_VoidGetPortValue+0x36>
	{
		*Copy_Pu8Return = *DIO_ArrpVu8_PIN[Copy_u8Port];
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	e9 57       	subi	r30, 0x79	; 121
    1ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef8:	01 90       	ld	r0, Z+
    1efa:	f0 81       	ld	r31, Z
    1efc:	e0 2d       	mov	r30, r0
    1efe:	80 81       	ld	r24, Z
    1f00:	ea 81       	ldd	r30, Y+2	; 0x02
    1f02:	fb 81       	ldd	r31, Y+3	; 0x03
    1f04:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <DIO_VoidTogglePIN>:

void DIO_VoidTogglePIN(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <DIO_VoidTogglePIN+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6a 83       	std	Y+2, r22	; 0x02
	  if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	38 f5       	brcc	.+78     	; 0x1f74 <DIO_VoidTogglePIN+0x62>
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	88 30       	cpi	r24, 0x08	; 8
    1f2a:	20 f5       	brcc	.+72     	; 0x1f74 <DIO_VoidTogglePIN+0x62>
		{
		  TOG_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port],Copy_u8Pin);
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	fc 01       	movw	r30, r24
    1f38:	e1 58       	subi	r30, 0x81	; 129
    1f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3c:	a0 81       	ld	r26, Z
    1f3e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e1 58       	subi	r30, 0x81	; 129
    1f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f50:	01 90       	ld	r0, Z+
    1f52:	f0 81       	ld	r31, Z
    1f54:	e0 2d       	mov	r30, r0
    1f56:	80 81       	ld	r24, Z
    1f58:	48 2f       	mov	r20, r24
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	02 2e       	mov	r0, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <DIO_VoidTogglePIN+0x5a>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	0a 94       	dec	r0
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <DIO_VoidTogglePIN+0x56>
    1f70:	84 27       	eor	r24, r20
    1f72:	8c 93       	st	X, r24
		}
	  else
	  		  {

	  		  }
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <ADC_voidInit>:
#include"ADC_Config.h"
#include"ADC_Interface.h"



void ADC_voidInit(void){
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62

	/*2- Configure Prescaler*/
	ADC_ADCSRA_REG	|=ADC_PRESCALER;
    1f86:	a6 e2       	ldi	r26, 0x26	; 38
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e6 e2       	ldi	r30, 0x26	; 38
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	87 60       	ori	r24, 0x07	; 7
    1f92:	8c 93       	st	X, r24
	/*1-Configuring Voltage Reference*/
	ADC_ADMUX_REG|=(ADC_VOLTAGE_REFRENCE<<ADC_ADMUX_REFS0_BIT);
    1f94:	a7 e2       	ldi	r26, 0x27	; 39
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e7 e2       	ldi	r30, 0x27	; 39
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	80 64       	ori	r24, 0x40	; 64
    1fa0:	8c 93       	st	X, r24
	/*3-SET ADEN*/
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADEN_BIT);
    1fa2:	a6 e2       	ldi	r26, 0x26	; 38
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e6 e2       	ldi	r30, 0x26	; 38
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	8c 93       	st	X, r24




}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <ADC_StartConv>:
void ADC_StartConv(u8 Copy_u8SelectedChannel,u16 *Copy_pu16Return){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <ADC_StartConv+0x6>
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	7b 83       	std	Y+3, r23	; 0x03
    1fc6:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8SelectedChannel<=ADC_CHANNEL7){
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	88 30       	cpi	r24, 0x08	; 8
    1fcc:	70 f5       	brcc	.+92     	; 0x202a <ADC_StartConv+0x74>
		/*1-Select Channel*/
		ADC_ADMUX_REG|=Copy_u8SelectedChannel;
    1fce:	a7 e2       	ldi	r26, 0x27	; 39
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e7 e2       	ldi	r30, 0x27	; 39
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	90 81       	ld	r25, Z
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	89 2b       	or	r24, r25
    1fdc:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT);
    1fde:	a6 e2       	ldi	r26, 0x26	; 38
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e6 e2       	ldi	r30, 0x26	; 38
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	80 64       	ori	r24, 0x40	; 64
    1fea:	8c 93       	st	X, r24
		while(GET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT)==1);
    1fec:	e6 e2       	ldi	r30, 0x26	; 38
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	82 95       	swap	r24
    1ff4:	86 95       	lsr	r24
    1ff6:	86 95       	lsr	r24
    1ff8:	83 70       	andi	r24, 0x03	; 3
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	81 70       	andi	r24, 0x01	; 1
    2000:	90 70       	andi	r25, 0x00	; 0
    2002:	88 23       	and	r24, r24
    2004:	99 f7       	brne	.-26     	; 0x1fec <ADC_StartConv+0x36>
		      *Copy_pu16Return=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2006:	e4 e2       	ldi	r30, 0x24	; 36
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	e5 e2       	ldi	r30, 0x25	; 37
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 2f       	mov	r25, r24
    201c:	88 27       	eor	r24, r24
    201e:	82 2b       	or	r24, r18
    2020:	93 2b       	or	r25, r19
    2022:	ea 81       	ldd	r30, Y+2	; 0x02
    2024:	fb 81       	ldd	r31, Y+3	; 0x03
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
		else
		{
			/*NO OPERATION*/
		}

}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <ADC_READ_PER>:

void ADC_READ_PER(u8 Copy_u8Pin,u8 *Copy_u16value)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <ADC_READ_PER+0x6>
    203c:	00 d0       	rcall	.+0      	; 0x203e <ADC_READ_PER+0x8>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	8b 83       	std	Y+3, r24	; 0x03
    2046:	7d 83       	std	Y+5, r23	; 0x05
    2048:	6c 83       	std	Y+4, r22	; 0x04
	DIO_VoidSetPinDirection(DIO_u8PORTA,Copy_u8Pin,DIO_u8PIN_INPUT);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	6b 81       	ldd	r22, Y+3	; 0x03
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	ADC_voidInit();
    2054:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <ADC_voidInit>
	ADC_StartConv(Copy_u8Pin,Copy_u16value);
    2058:	2c 81       	ldd	r18, Y+4	; 0x04
    205a:	3d 81       	ldd	r19, Y+5	; 0x05
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	b9 01       	movw	r22, r18
    2060:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <ADC_StartConv>

    u16 MilliVolt = ( ((u32)Copy_u16value * 5000UL) / 1023 ) ;
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	aa 27       	eor	r26, r26
    206a:	97 fd       	sbrc	r25, 7
    206c:	a0 95       	com	r26
    206e:	ba 2f       	mov	r27, r26
    2070:	28 e8       	ldi	r18, 0x88	; 136
    2072:	33 e1       	ldi	r19, 0x13	; 19
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__mulsi3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	2f ef       	ldi	r18, 0xFF	; 255
    2086:	33 e0       	ldi	r19, 0x03	; 3
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__udivmodsi4>
    2094:	da 01       	movw	r26, r20
    2096:	c9 01       	movw	r24, r18
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01

    
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LM35_voidReadValue>:
#include"LM35_Interface.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"../../MCAL/ADC/ADC_Interface.h"


void LM35_voidReadValue(u8 Copy_u8Pin,u8 *Copy_u16value){
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LM35_voidReadValue+0x6>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	7b 83       	std	Y+3, r23	; 0x03
    20bc:	6a 83       	std	Y+2, r22	; 0x02


	DIO_VoidSetPinDirection(DIO_u8PORTA,Copy_u8Pin,DIO_u8PIN_INPUT);
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	69 81       	ldd	r22, Y+1	; 0x01
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	ADC_voidInit();
    20c8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <ADC_voidInit>
	ADC_StartConv(Copy_u8Pin,Copy_u16value);
    20cc:	2a 81       	ldd	r18, Y+2	; 0x02
    20ce:	3b 81       	ldd	r19, Y+3	; 0x03
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	b9 01       	movw	r22, r18
    20d4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <ADC_StartConv>
	*Copy_u16value/=(2.00);
    20d8:	ea 81       	ldd	r30, Y+2	; 0x02
    20da:	fb 81       	ldd	r31, Y+3	; 0x03
    20dc:	80 81       	ld	r24, Z
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	aa 27       	eor	r26, r26
    20e4:	97 fd       	sbrc	r25, 7
    20e6:	a0 95       	com	r26
    20e8:	ba 2f       	mov	r27, r26
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e4       	ldi	r21, 0x40	; 64
    2102:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	ea 81       	ldd	r30, Y+2	; 0x02
    2118:	fb 81       	ldd	r31, Y+3	; 0x03
    211a:	80 83       	st	Z, r24

}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <LCD_Init>:

#include <util/delay.h>

/* ====================== Functions Definitions ===================== */
void LCD_Init(void)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	6c 97       	sbiw	r28, 0x1c	; 28
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
	//Set direction

	DIO_VoidSetPortDirection(LCD_PORT,DIO_u8PORT_OUTPUT);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <DIO_VoidSetPortDirection>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a8 e4       	ldi	r26, 0x48	; 72
    214a:	b2 e4       	ldi	r27, 0x42	; 66
    214c:	89 8f       	std	Y+25, r24	; 0x19
    214e:	9a 8f       	std	Y+26, r25	; 0x1a
    2150:	ab 8f       	std	Y+27, r26	; 0x1b
    2152:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8d 8b       	std	Y+21, r24	; 0x15
    216e:	9e 8b       	std	Y+22, r25	; 0x16
    2170:	af 8b       	std	Y+23, r26	; 0x17
    2172:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2174:	6d 89       	ldd	r22, Y+21	; 0x15
    2176:	7e 89       	ldd	r23, Y+22	; 0x16
    2178:	8f 89       	ldd	r24, Y+23	; 0x17
    217a:	98 8d       	ldd	r25, Y+24	; 0x18
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <LCD_Init+0x6e>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <LCD_Init+0xec>
	else if (__tmp > 65535)
    2196:	6d 89       	ldd	r22, Y+21	; 0x15
    2198:	7e 89       	ldd	r23, Y+22	; 0x16
    219a:	8f 89       	ldd	r24, Y+23	; 0x17
    219c:	98 8d       	ldd	r25, Y+24	; 0x18
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	69 8d       	ldd	r22, Y+25	; 0x19
    21b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <LCD_Init+0xce>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9a 8b       	std	Y+18, r25	; 0x12
    21de:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e0:	89 89       	ldd	r24, Y+17	; 0x11
    21e2:	9a 89       	ldd	r25, Y+18	; 0x12
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_Init+0xbc>
    21e8:	9a 8b       	std	Y+18, r25	; 0x12
    21ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <LCD_Init+0xb0>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	6d 89       	ldd	r22, Y+21	; 0x15
    2202:	7e 89       	ldd	r23, Y+22	; 0x16
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	98 8d       	ldd	r25, Y+24	; 0x18
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9c 8b       	std	Y+20, r25	; 0x14
    2212:	8b 8b       	std	Y+19, r24	; 0x13
    2214:	8b 89       	ldd	r24, Y+19	; 0x13
    2216:	9c 89       	ldd	r25, Y+20	; 0x14
    2218:	98 8b       	std	Y+16, r25	; 0x10
    221a:	8f 87       	std	Y+15, r24	; 0x0f
    221c:	8f 85       	ldd	r24, Y+15	; 0x0f
    221e:	98 89       	ldd	r25, Y+16	; 0x10
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_Init+0xf8>
    2224:	98 8b       	std	Y+16, r25	; 0x10
    2226:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(50);
	 /* Send 4Bit mode command */
	 LCD_WriteCommand(_4_BIT_MODE_COMMAND);
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>

	 /* Set the interface data length , number of lines */
	 LCD_WriteCommand(FUNCTION_SET_MASK);
    222e:	88 e2       	ldi	r24, 0x28	; 40
    2230:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>

	 /* Display ON/OFF Control */
	 LCD_WriteCommand(DISPLAY_ON_OFF_MASK);
    2234:	8c e0       	ldi	r24, 0x0C	; 12
    2236:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>

	 /* Clear the Screen */
	 LCD_WriteCommand(CLEAR_SCREEN);
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a0 e8       	ldi	r26, 0x80	; 128
    2246:	bf e3       	ldi	r27, 0x3F	; 63
    2248:	8b 87       	std	Y+11, r24	; 0x0b
    224a:	9c 87       	std	Y+12, r25	; 0x0c
    224c:	ad 87       	std	Y+13, r26	; 0x0d
    224e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4a ef       	ldi	r20, 0xFA	; 250
    225e:	54 e4       	ldi	r21, 0x44	; 68
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	8f 83       	std	Y+7, r24	; 0x07
    226a:	98 87       	std	Y+8, r25	; 0x08
    226c:	a9 87       	std	Y+9, r26	; 0x09
    226e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2284:	88 23       	and	r24, r24
    2286:	2c f4       	brge	.+10     	; 0x2292 <LCD_Init+0x16a>
		__ticks = 1;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	3f c0       	rjmp	.+126    	; 0x2310 <LCD_Init+0x1e8>
	else if (__tmp > 65535)
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3f ef       	ldi	r19, 0xFF	; 255
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	4c f5       	brge	.+82     	; 0x22fc <LCD_Init+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e2       	ldi	r20, 0x20	; 32
    22b8:	51 e4       	ldi	r21, 0x41	; 65
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	0f c0       	rjmp	.+30     	; 0x22f2 <LCD_Init+0x1ca>
    22d4:	88 ec       	ldi	r24, 0xC8	; 200
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 83       	std	Y+4, r25	; 0x04
    22da:	8b 83       	std	Y+3, r24	; 0x03
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <LCD_Init+0x1b8>
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	69 f7       	brne	.-38     	; 0x22d4 <LCD_Init+0x1ac>
    22fa:	14 c0       	rjmp	.+40     	; 0x2324 <LCD_Init+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_Init+0x1f4>
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);

	 /* Entry Mode Set */
	 LCD_WriteCommand(ENTRY_MODE_SET);
    2324:	86 e0       	ldi	r24, 0x06	; 6
    2326:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>


}
    232a:	6c 96       	adiw	r28, 0x1c	; 28
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Copy_u8Command)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	e9 97       	sbiw	r28, 0x39	; 57
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_LOW); //RS = 0
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,4)); //DB4
    2366:	89 ad       	ldd	r24, Y+57	; 0x39
    2368:	82 95       	swap	r24
    236a:	8f 70       	andi	r24, 0x0F	; 15
    236c:	98 2f       	mov	r25, r24
    236e:	91 70       	andi	r25, 0x01	; 1
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	64 e0       	ldi	r22, 0x04	; 4
    2374:	49 2f       	mov	r20, r25
    2376:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,5)); //DB5
    237a:	89 ad       	ldd	r24, Y+57	; 0x39
    237c:	82 95       	swap	r24
    237e:	86 95       	lsr	r24
    2380:	87 70       	andi	r24, 0x07	; 7
    2382:	98 2f       	mov	r25, r24
    2384:	91 70       	andi	r25, 0x01	; 1
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	65 e0       	ldi	r22, 0x05	; 5
    238a:	49 2f       	mov	r20, r25
    238c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,6)); //DB5
    2390:	89 ad       	ldd	r24, Y+57	; 0x39
    2392:	82 95       	swap	r24
    2394:	86 95       	lsr	r24
    2396:	86 95       	lsr	r24
    2398:	83 70       	andi	r24, 0x03	; 3
    239a:	98 2f       	mov	r25, r24
    239c:	91 70       	andi	r25, 0x01	; 1
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	66 e0       	ldi	r22, 0x06	; 6
    23a2:	49 2f       	mov	r20, r25
    23a4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,7)); //DB7
    23a8:	89 ad       	ldd	r24, Y+57	; 0x39
    23aa:	98 2f       	mov	r25, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	99 27       	eor	r25, r25
    23b0:	99 1f       	adc	r25, r25
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	67 e0       	ldi	r22, 0x07	; 7
    23b6:	49 2f       	mov	r20, r25
    23b8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	62 e0       	ldi	r22, 0x02	; 2
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	a0 e8       	ldi	r26, 0x80	; 128
    23cc:	bf e3       	ldi	r27, 0x3F	; 63
    23ce:	8d ab       	std	Y+53, r24	; 0x35
    23d0:	9e ab       	std	Y+54, r25	; 0x36
    23d2:	af ab       	std	Y+55, r26	; 0x37
    23d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d6:	6d a9       	ldd	r22, Y+53	; 0x35
    23d8:	7e a9       	ldd	r23, Y+54	; 0x36
    23da:	8f a9       	ldd	r24, Y+55	; 0x37
    23dc:	98 ad       	ldd	r25, Y+56	; 0x38
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	4a ef       	ldi	r20, 0xFA	; 250
    23e4:	54 e4       	ldi	r21, 0x44	; 68
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	89 ab       	std	Y+49, r24	; 0x31
    23f0:	9a ab       	std	Y+50, r25	; 0x32
    23f2:	ab ab       	std	Y+51, r26	; 0x33
    23f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23f6:	69 a9       	ldd	r22, Y+49	; 0x31
    23f8:	7a a9       	ldd	r23, Y+50	; 0x32
    23fa:	8b a9       	ldd	r24, Y+51	; 0x33
    23fc:	9c a9       	ldd	r25, Y+52	; 0x34
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	2c f4       	brge	.+10     	; 0x2418 <LCD_WriteCommand+0xdc>
		__ticks = 1;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	98 ab       	std	Y+48, r25	; 0x30
    2414:	8f a7       	std	Y+47, r24	; 0x2f
    2416:	3f c0       	rjmp	.+126    	; 0x2496 <LCD_WriteCommand+0x15a>
	else if (__tmp > 65535)
    2418:	69 a9       	ldd	r22, Y+49	; 0x31
    241a:	7a a9       	ldd	r23, Y+50	; 0x32
    241c:	8b a9       	ldd	r24, Y+51	; 0x33
    241e:	9c a9       	ldd	r25, Y+52	; 0x34
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	57 e4       	ldi	r21, 0x47	; 71
    2428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	4c f5       	brge	.+82     	; 0x2482 <LCD_WriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2430:	6d a9       	ldd	r22, Y+53	; 0x35
    2432:	7e a9       	ldd	r23, Y+54	; 0x36
    2434:	8f a9       	ldd	r24, Y+55	; 0x37
    2436:	98 ad       	ldd	r25, Y+56	; 0x38
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e2       	ldi	r20, 0x20	; 32
    243e:	51 e4       	ldi	r21, 0x41	; 65
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	98 ab       	std	Y+48, r25	; 0x30
    2456:	8f a7       	std	Y+47, r24	; 0x2f
    2458:	0f c0       	rjmp	.+30     	; 0x2478 <LCD_WriteCommand+0x13c>
    245a:	88 ec       	ldi	r24, 0xC8	; 200
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9e a7       	std	Y+46, r25	; 0x2e
    2460:	8d a7       	std	Y+45, r24	; 0x2d
    2462:	8d a5       	ldd	r24, Y+45	; 0x2d
    2464:	9e a5       	ldd	r25, Y+46	; 0x2e
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <LCD_WriteCommand+0x12a>
    246a:	9e a7       	std	Y+46, r25	; 0x2e
    246c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2470:	98 a9       	ldd	r25, Y+48	; 0x30
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	98 ab       	std	Y+48, r25	; 0x30
    2476:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2478:	8f a5       	ldd	r24, Y+47	; 0x2f
    247a:	98 a9       	ldd	r25, Y+48	; 0x30
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	69 f7       	brne	.-38     	; 0x245a <LCD_WriteCommand+0x11e>
    2480:	14 c0       	rjmp	.+40     	; 0x24aa <LCD_WriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2482:	69 a9       	ldd	r22, Y+49	; 0x31
    2484:	7a a9       	ldd	r23, Y+50	; 0x32
    2486:	8b a9       	ldd	r24, Y+51	; 0x33
    2488:	9c a9       	ldd	r25, Y+52	; 0x34
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	98 ab       	std	Y+48, r25	; 0x30
    2494:	8f a7       	std	Y+47, r24	; 0x2f
    2496:	8f a5       	ldd	r24, Y+47	; 0x2f
    2498:	98 a9       	ldd	r25, Y+48	; 0x30
    249a:	9c a7       	std	Y+44, r25	; 0x2c
    249c:	8b a7       	std	Y+43, r24	; 0x2b
    249e:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_WriteCommand+0x166>
    24a6:	9c a7       	std	Y+44, r25	; 0x2c
    24a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	62 e0       	ldi	r22, 0x02	; 2
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e8       	ldi	r26, 0x80	; 128
    24ba:	bf e3       	ldi	r27, 0x3F	; 63
    24bc:	8f a3       	std	Y+39, r24	; 0x27
    24be:	98 a7       	std	Y+40, r25	; 0x28
    24c0:	a9 a7       	std	Y+41, r26	; 0x29
    24c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c4:	6f a1       	ldd	r22, Y+39	; 0x27
    24c6:	78 a5       	ldd	r23, Y+40	; 0x28
    24c8:	89 a5       	ldd	r24, Y+41	; 0x29
    24ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a ef       	ldi	r20, 0xFA	; 250
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8b a3       	std	Y+35, r24	; 0x23
    24de:	9c a3       	std	Y+36, r25	; 0x24
    24e0:	ad a3       	std	Y+37, r26	; 0x25
    24e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24e4:	6b a1       	ldd	r22, Y+35	; 0x23
    24e6:	7c a1       	ldd	r23, Y+36	; 0x24
    24e8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ea:	9e a1       	ldd	r25, Y+38	; 0x26
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	2c f4       	brge	.+10     	; 0x2506 <LCD_WriteCommand+0x1ca>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9a a3       	std	Y+34, r25	; 0x22
    2502:	89 a3       	std	Y+33, r24	; 0x21
    2504:	3f c0       	rjmp	.+126    	; 0x2584 <LCD_WriteCommand+0x248>
	else if (__tmp > 65535)
    2506:	6b a1       	ldd	r22, Y+35	; 0x23
    2508:	7c a1       	ldd	r23, Y+36	; 0x24
    250a:	8d a1       	ldd	r24, Y+37	; 0x25
    250c:	9e a1       	ldd	r25, Y+38	; 0x26
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	3f ef       	ldi	r19, 0xFF	; 255
    2512:	4f e7       	ldi	r20, 0x7F	; 127
    2514:	57 e4       	ldi	r21, 0x47	; 71
    2516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251a:	18 16       	cp	r1, r24
    251c:	4c f5       	brge	.+82     	; 0x2570 <LCD_WriteCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251e:	6f a1       	ldd	r22, Y+39	; 0x27
    2520:	78 a5       	ldd	r23, Y+40	; 0x28
    2522:	89 a5       	ldd	r24, Y+41	; 0x29
    2524:	9a a5       	ldd	r25, Y+42	; 0x2a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9a a3       	std	Y+34, r25	; 0x22
    2544:	89 a3       	std	Y+33, r24	; 0x21
    2546:	0f c0       	rjmp	.+30     	; 0x2566 <LCD_WriteCommand+0x22a>
    2548:	88 ec       	ldi	r24, 0xC8	; 200
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	98 a3       	std	Y+32, r25	; 0x20
    254e:	8f 8f       	std	Y+31, r24	; 0x1f
    2550:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2552:	98 a1       	ldd	r25, Y+32	; 0x20
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_WriteCommand+0x218>
    2558:	98 a3       	std	Y+32, r25	; 0x20
    255a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	89 a1       	ldd	r24, Y+33	; 0x21
    255e:	9a a1       	ldd	r25, Y+34	; 0x22
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	9a a3       	std	Y+34, r25	; 0x22
    2564:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2566:	89 a1       	ldd	r24, Y+33	; 0x21
    2568:	9a a1       	ldd	r25, Y+34	; 0x22
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	69 f7       	brne	.-38     	; 0x2548 <LCD_WriteCommand+0x20c>
    256e:	14 c0       	rjmp	.+40     	; 0x2598 <LCD_WriteCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2570:	6b a1       	ldd	r22, Y+35	; 0x23
    2572:	7c a1       	ldd	r23, Y+36	; 0x24
    2574:	8d a1       	ldd	r24, Y+37	; 0x25
    2576:	9e a1       	ldd	r25, Y+38	; 0x26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9a a3       	std	Y+34, r25	; 0x22
    2582:	89 a3       	std	Y+33, r24	; 0x21
    2584:	89 a1       	ldd	r24, Y+33	; 0x21
    2586:	9a a1       	ldd	r25, Y+34	; 0x22
    2588:	9e 8f       	std	Y+30, r25	; 0x1e
    258a:	8d 8f       	std	Y+29, r24	; 0x1d
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_WriteCommand+0x254>
    2594:	9e 8f       	std	Y+30, r25	; 0x1e
    2596:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

		  /* Second Half */
	  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,0)); //DB4
    2598:	89 ad       	ldd	r24, Y+57	; 0x39
    259a:	98 2f       	mov	r25, r24
    259c:	91 70       	andi	r25, 0x01	; 1
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	64 e0       	ldi	r22, 0x04	; 4
    25a2:	49 2f       	mov	r20, r25
    25a4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,1)); //DB5
    25a8:	89 ad       	ldd	r24, Y+57	; 0x39
    25aa:	86 95       	lsr	r24
    25ac:	98 2f       	mov	r25, r24
    25ae:	91 70       	andi	r25, 0x01	; 1
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	65 e0       	ldi	r22, 0x05	; 5
    25b4:	49 2f       	mov	r20, r25
    25b6:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,2)); //DB6
    25ba:	89 ad       	ldd	r24, Y+57	; 0x39
    25bc:	86 95       	lsr	r24
    25be:	86 95       	lsr	r24
    25c0:	98 2f       	mov	r25, r24
    25c2:	91 70       	andi	r25, 0x01	; 1
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	66 e0       	ldi	r22, 0x06	; 6
    25c8:	49 2f       	mov	r20, r25
    25ca:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,3)); //DB7
    25ce:	89 ad       	ldd	r24, Y+57	; 0x39
    25d0:	86 95       	lsr	r24
    25d2:	86 95       	lsr	r24
    25d4:	86 95       	lsr	r24
    25d6:	98 2f       	mov	r25, r24
    25d8:	91 70       	andi	r25, 0x01	; 1
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	67 e0       	ldi	r22, 0x07	; 7
    25de:	49 2f       	mov	r20, r25
    25e0:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a0 e8       	ldi	r26, 0x80	; 128
    25f4:	bf e3       	ldi	r27, 0x3F	; 63
    25f6:	89 8f       	std	Y+25, r24	; 0x19
    25f8:	9a 8f       	std	Y+26, r25	; 0x1a
    25fa:	ab 8f       	std	Y+27, r26	; 0x1b
    25fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a ef       	ldi	r20, 0xFA	; 250
    260c:	54 e4       	ldi	r21, 0x44	; 68
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	8d 8b       	std	Y+21, r24	; 0x15
    2618:	9e 8b       	std	Y+22, r25	; 0x16
    261a:	af 8b       	std	Y+23, r26	; 0x17
    261c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    261e:	6d 89       	ldd	r22, Y+21	; 0x15
    2620:	7e 89       	ldd	r23, Y+22	; 0x16
    2622:	8f 89       	ldd	r24, Y+23	; 0x17
    2624:	98 8d       	ldd	r25, Y+24	; 0x18
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	2c f4       	brge	.+10     	; 0x2640 <LCD_WriteCommand+0x304>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 8b       	std	Y+20, r25	; 0x14
    263c:	8b 8b       	std	Y+19, r24	; 0x13
    263e:	3f c0       	rjmp	.+126    	; 0x26be <LCD_WriteCommand+0x382>
	else if (__tmp > 65535)
    2640:	6d 89       	ldd	r22, Y+21	; 0x15
    2642:	7e 89       	ldd	r23, Y+22	; 0x16
    2644:	8f 89       	ldd	r24, Y+23	; 0x17
    2646:	98 8d       	ldd	r25, Y+24	; 0x18
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	57 e4       	ldi	r21, 0x47	; 71
    2650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	4c f5       	brge	.+82     	; 0x26aa <LCD_WriteCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	69 8d       	ldd	r22, Y+25	; 0x19
    265a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9c 8b       	std	Y+20, r25	; 0x14
    267e:	8b 8b       	std	Y+19, r24	; 0x13
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <LCD_WriteCommand+0x364>
    2682:	88 ec       	ldi	r24, 0xC8	; 200
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9a 8b       	std	Y+18, r25	; 0x12
    2688:	89 8b       	std	Y+17, r24	; 0x11
    268a:	89 89       	ldd	r24, Y+17	; 0x11
    268c:	9a 89       	ldd	r25, Y+18	; 0x12
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_WriteCommand+0x352>
    2692:	9a 8b       	std	Y+18, r25	; 0x12
    2694:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8b 89       	ldd	r24, Y+19	; 0x13
    2698:	9c 89       	ldd	r25, Y+20	; 0x14
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <LCD_WriteCommand+0x346>
    26a8:	14 c0       	rjmp	.+40     	; 0x26d2 <LCD_WriteCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	6d 89       	ldd	r22, Y+21	; 0x15
    26ac:	7e 89       	ldd	r23, Y+22	; 0x16
    26ae:	8f 89       	ldd	r24, Y+23	; 0x17
    26b0:	98 8d       	ldd	r25, Y+24	; 0x18
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	98 8b       	std	Y+16, r25	; 0x10
    26c4:	8f 87       	std	Y+15, r24	; 0x0f
    26c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c8:	98 89       	ldd	r25, Y+16	; 0x10
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_WriteCommand+0x38e>
    26ce:	98 8b       	std	Y+16, r25	; 0x10
    26d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	62 e0       	ldi	r22, 0x02	; 2
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e8       	ldi	r26, 0x80	; 128
    26e2:	bf e3       	ldi	r27, 0x3F	; 63
    26e4:	8b 87       	std	Y+11, r24	; 0x0b
    26e6:	9c 87       	std	Y+12, r25	; 0x0c
    26e8:	ad 87       	std	Y+13, r26	; 0x0d
    26ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a ef       	ldi	r20, 0xFA	; 250
    26fa:	54 e4       	ldi	r21, 0x44	; 68
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	8f 83       	std	Y+7, r24	; 0x07
    2706:	98 87       	std	Y+8, r25	; 0x08
    2708:	a9 87       	std	Y+9, r26	; 0x09
    270a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <LCD_WriteCommand+0x3f2>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <LCD_WriteCommand+0x470>
	else if (__tmp > 65535)
    272e:	6f 81       	ldd	r22, Y+7	; 0x07
    2730:	78 85       	ldd	r23, Y+8	; 0x08
    2732:	89 85       	ldd	r24, Y+9	; 0x09
    2734:	9a 85       	ldd	r25, Y+10	; 0x0a
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <LCD_WriteCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	0f c0       	rjmp	.+30     	; 0x278e <LCD_WriteCommand+0x452>
    2770:	88 ec       	ldi	r24, 0xC8	; 200
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_WriteCommand+0x440>
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <LCD_WriteCommand+0x434>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <LCD_WriteCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_WriteCommand+0x47c>
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    27c0:	e9 96       	adiw	r28, 0x39	; 57
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <LCD_WriteData>:
void LCD_WriteData(u8 Copy_u8Data)
{
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	e9 97       	sbiw	r28, 0x39	; 57
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_HIGH); //RS = 1
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,4)); //DB4
    27fc:	89 ad       	ldd	r24, Y+57	; 0x39
    27fe:	82 95       	swap	r24
    2800:	8f 70       	andi	r24, 0x0F	; 15
    2802:	98 2f       	mov	r25, r24
    2804:	91 70       	andi	r25, 0x01	; 1
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	64 e0       	ldi	r22, 0x04	; 4
    280a:	49 2f       	mov	r20, r25
    280c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,5)); //DB4
    2810:	89 ad       	ldd	r24, Y+57	; 0x39
    2812:	82 95       	swap	r24
    2814:	86 95       	lsr	r24
    2816:	87 70       	andi	r24, 0x07	; 7
    2818:	98 2f       	mov	r25, r24
    281a:	91 70       	andi	r25, 0x01	; 1
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	65 e0       	ldi	r22, 0x05	; 5
    2820:	49 2f       	mov	r20, r25
    2822:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,6)); //DB4
    2826:	89 ad       	ldd	r24, Y+57	; 0x39
    2828:	82 95       	swap	r24
    282a:	86 95       	lsr	r24
    282c:	86 95       	lsr	r24
    282e:	83 70       	andi	r24, 0x03	; 3
    2830:	98 2f       	mov	r25, r24
    2832:	91 70       	andi	r25, 0x01	; 1
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	66 e0       	ldi	r22, 0x06	; 6
    2838:	49 2f       	mov	r20, r25
    283a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,7)); //DB4
    283e:	89 ad       	ldd	r24, Y+57	; 0x39
    2840:	98 2f       	mov	r25, r24
    2842:	99 1f       	adc	r25, r25
    2844:	99 27       	eor	r25, r25
    2846:	99 1f       	adc	r25, r25
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	67 e0       	ldi	r22, 0x07	; 7
    284c:	49 2f       	mov	r20, r25
    284e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	62 e0       	ldi	r22, 0x02	; 2
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a0 e8       	ldi	r26, 0x80	; 128
    2862:	bf e3       	ldi	r27, 0x3F	; 63
    2864:	8d ab       	std	Y+53, r24	; 0x35
    2866:	9e ab       	std	Y+54, r25	; 0x36
    2868:	af ab       	std	Y+55, r26	; 0x37
    286a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286c:	6d a9       	ldd	r22, Y+53	; 0x35
    286e:	7e a9       	ldd	r23, Y+54	; 0x36
    2870:	8f a9       	ldd	r24, Y+55	; 0x37
    2872:	98 ad       	ldd	r25, Y+56	; 0x38
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a ef       	ldi	r20, 0xFA	; 250
    287a:	54 e4       	ldi	r21, 0x44	; 68
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	89 ab       	std	Y+49, r24	; 0x31
    2886:	9a ab       	std	Y+50, r25	; 0x32
    2888:	ab ab       	std	Y+51, r26	; 0x33
    288a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    288c:	69 a9       	ldd	r22, Y+49	; 0x31
    288e:	7a a9       	ldd	r23, Y+50	; 0x32
    2890:	8b a9       	ldd	r24, Y+51	; 0x33
    2892:	9c a9       	ldd	r25, Y+52	; 0x34
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e8       	ldi	r20, 0x80	; 128
    289a:	5f e3       	ldi	r21, 0x3F	; 63
    289c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	2c f4       	brge	.+10     	; 0x28ae <LCD_WriteData+0xdc>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	98 ab       	std	Y+48, r25	; 0x30
    28aa:	8f a7       	std	Y+47, r24	; 0x2f
    28ac:	3f c0       	rjmp	.+126    	; 0x292c <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    28ae:	69 a9       	ldd	r22, Y+49	; 0x31
    28b0:	7a a9       	ldd	r23, Y+50	; 0x32
    28b2:	8b a9       	ldd	r24, Y+51	; 0x33
    28b4:	9c a9       	ldd	r25, Y+52	; 0x34
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	3f ef       	ldi	r19, 0xFF	; 255
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	57 e4       	ldi	r21, 0x47	; 71
    28be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	4c f5       	brge	.+82     	; 0x2918 <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	6d a9       	ldd	r22, Y+53	; 0x35
    28c8:	7e a9       	ldd	r23, Y+54	; 0x36
    28ca:	8f a9       	ldd	r24, Y+55	; 0x37
    28cc:	98 ad       	ldd	r25, Y+56	; 0x38
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e2       	ldi	r20, 0x20	; 32
    28d4:	51 e4       	ldi	r21, 0x41	; 65
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <LCD_WriteData+0x13c>
    28f0:	88 ec       	ldi	r24, 0xC8	; 200
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9e a7       	std	Y+46, r25	; 0x2e
    28f6:	8d a7       	std	Y+45, r24	; 0x2d
    28f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    28fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_WriteData+0x12a>
    2900:	9e a7       	std	Y+46, r25	; 0x2e
    2902:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2910:	98 a9       	ldd	r25, Y+48	; 0x30
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	69 f7       	brne	.-38     	; 0x28f0 <LCD_WriteData+0x11e>
    2916:	14 c0       	rjmp	.+40     	; 0x2940 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2918:	69 a9       	ldd	r22, Y+49	; 0x31
    291a:	7a a9       	ldd	r23, Y+50	; 0x32
    291c:	8b a9       	ldd	r24, Y+51	; 0x33
    291e:	9c a9       	ldd	r25, Y+52	; 0x34
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	98 ab       	std	Y+48, r25	; 0x30
    292a:	8f a7       	std	Y+47, r24	; 0x2f
    292c:	8f a5       	ldd	r24, Y+47	; 0x2f
    292e:	98 a9       	ldd	r25, Y+48	; 0x30
    2930:	9c a7       	std	Y+44, r25	; 0x2c
    2932:	8b a7       	std	Y+43, r24	; 0x2b
    2934:	8b a5       	ldd	r24, Y+43	; 0x2b
    2936:	9c a5       	ldd	r25, Y+44	; 0x2c
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCD_WriteData+0x166>
    293c:	9c a7       	std	Y+44, r25	; 0x2c
    293e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e8       	ldi	r26, 0x80	; 128
    2950:	bf e3       	ldi	r27, 0x3F	; 63
    2952:	8f a3       	std	Y+39, r24	; 0x27
    2954:	98 a7       	std	Y+40, r25	; 0x28
    2956:	a9 a7       	std	Y+41, r26	; 0x29
    2958:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	6f a1       	ldd	r22, Y+39	; 0x27
    295c:	78 a5       	ldd	r23, Y+40	; 0x28
    295e:	89 a5       	ldd	r24, Y+41	; 0x29
    2960:	9a a5       	ldd	r25, Y+42	; 0x2a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4a ef       	ldi	r20, 0xFA	; 250
    2968:	54 e4       	ldi	r21, 0x44	; 68
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8b a3       	std	Y+35, r24	; 0x23
    2974:	9c a3       	std	Y+36, r25	; 0x24
    2976:	ad a3       	std	Y+37, r26	; 0x25
    2978:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    297a:	6b a1       	ldd	r22, Y+35	; 0x23
    297c:	7c a1       	ldd	r23, Y+36	; 0x24
    297e:	8d a1       	ldd	r24, Y+37	; 0x25
    2980:	9e a1       	ldd	r25, Y+38	; 0x26
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	2c f4       	brge	.+10     	; 0x299c <LCD_WriteData+0x1ca>
		__ticks = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9a a3       	std	Y+34, r25	; 0x22
    2998:	89 a3       	std	Y+33, r24	; 0x21
    299a:	3f c0       	rjmp	.+126    	; 0x2a1a <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    299c:	6b a1       	ldd	r22, Y+35	; 0x23
    299e:	7c a1       	ldd	r23, Y+36	; 0x24
    29a0:	8d a1       	ldd	r24, Y+37	; 0x25
    29a2:	9e a1       	ldd	r25, Y+38	; 0x26
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	4c f5       	brge	.+82     	; 0x2a06 <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b4:	6f a1       	ldd	r22, Y+39	; 0x27
    29b6:	78 a5       	ldd	r23, Y+40	; 0x28
    29b8:	89 a5       	ldd	r24, Y+41	; 0x29
    29ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <LCD_WriteData+0x22a>
    29de:	88 ec       	ldi	r24, 0xC8	; 200
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	98 a3       	std	Y+32, r25	; 0x20
    29e4:	8f 8f       	std	Y+31, r24	; 0x1f
    29e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e8:	98 a1       	ldd	r25, Y+32	; 0x20
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_WriteData+0x218>
    29ee:	98 a3       	std	Y+32, r25	; 0x20
    29f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fc:	89 a1       	ldd	r24, Y+33	; 0x21
    29fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	69 f7       	brne	.-38     	; 0x29de <LCD_WriteData+0x20c>
    2a04:	14 c0       	rjmp	.+40     	; 0x2a2e <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a06:	6b a1       	ldd	r22, Y+35	; 0x23
    2a08:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a20:	8d 8f       	std	Y+29, r24	; 0x1d
    2a22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_WriteData+0x254>
    2a2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a2c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
		  /* Second Half */
		  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,0)); //DB4
    2a2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a30:	98 2f       	mov	r25, r24
    2a32:	91 70       	andi	r25, 0x01	; 1
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	64 e0       	ldi	r22, 0x04	; 4
    2a38:	49 2f       	mov	r20, r25
    2a3a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,1)); //DB4
    2a3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a40:	86 95       	lsr	r24
    2a42:	98 2f       	mov	r25, r24
    2a44:	91 70       	andi	r25, 0x01	; 1
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	65 e0       	ldi	r22, 0x05	; 5
    2a4a:	49 2f       	mov	r20, r25
    2a4c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,2)); //DB4
    2a50:	89 ad       	ldd	r24, Y+57	; 0x39
    2a52:	86 95       	lsr	r24
    2a54:	86 95       	lsr	r24
    2a56:	98 2f       	mov	r25, r24
    2a58:	91 70       	andi	r25, 0x01	; 1
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	66 e0       	ldi	r22, 0x06	; 6
    2a5e:	49 2f       	mov	r20, r25
    2a60:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,3)); //DB4
    2a64:	89 ad       	ldd	r24, Y+57	; 0x39
    2a66:	86 95       	lsr	r24
    2a68:	86 95       	lsr	r24
    2a6a:	86 95       	lsr	r24
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	91 70       	andi	r25, 0x01	; 1
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	67 e0       	ldi	r22, 0x07	; 7
    2a74:	49 2f       	mov	r20, r25
    2a76:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	a0 e8       	ldi	r26, 0x80	; 128
    2a8a:	bf e3       	ldi	r27, 0x3F	; 63
    2a8c:	89 8f       	std	Y+25, r24	; 0x19
    2a8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a90:	ab 8f       	std	Y+27, r26	; 0x1b
    2a92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a94:	69 8d       	ldd	r22, Y+25	; 0x19
    2a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	4a ef       	ldi	r20, 0xFA	; 250
    2aa2:	54 e4       	ldi	r21, 0x44	; 68
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	8d 8b       	std	Y+21, r24	; 0x15
    2aae:	9e 8b       	std	Y+22, r25	; 0x16
    2ab0:	af 8b       	std	Y+23, r26	; 0x17
    2ab2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aba:	98 8d       	ldd	r25, Y+24	; 0x18
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	2c f4       	brge	.+10     	; 0x2ad6 <LCD_WriteData+0x304>
		__ticks = 1;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	9c 8b       	std	Y+20, r25	; 0x14
    2ad2:	8b 8b       	std	Y+19, r24	; 0x13
    2ad4:	3f c0       	rjmp	.+126    	; 0x2b54 <LCD_WriteData+0x382>
	else if (__tmp > 65535)
    2ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ada:	8f 89       	ldd	r24, Y+23	; 0x17
    2adc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	3f ef       	ldi	r19, 0xFF	; 255
    2ae2:	4f e7       	ldi	r20, 0x7F	; 127
    2ae4:	57 e4       	ldi	r21, 0x47	; 71
    2ae6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aea:	18 16       	cp	r1, r24
    2aec:	4c f5       	brge	.+82     	; 0x2b40 <LCD_WriteData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	69 8d       	ldd	r22, Y+25	; 0x19
    2af0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e2       	ldi	r20, 0x20	; 32
    2afc:	51 e4       	ldi	r21, 0x41	; 65
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	9c 8b       	std	Y+20, r25	; 0x14
    2b14:	8b 8b       	std	Y+19, r24	; 0x13
    2b16:	0f c0       	rjmp	.+30     	; 0x2b36 <LCD_WriteData+0x364>
    2b18:	88 ec       	ldi	r24, 0xC8	; 200
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9a 8b       	std	Y+18, r25	; 0x12
    2b1e:	89 8b       	std	Y+17, r24	; 0x11
    2b20:	89 89       	ldd	r24, Y+17	; 0x11
    2b22:	9a 89       	ldd	r25, Y+18	; 0x12
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_WriteData+0x352>
    2b28:	9a 8b       	std	Y+18, r25	; 0x12
    2b2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	9c 8b       	std	Y+20, r25	; 0x14
    2b34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b36:	8b 89       	ldd	r24, Y+19	; 0x13
    2b38:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	69 f7       	brne	.-38     	; 0x2b18 <LCD_WriteData+0x346>
    2b3e:	14 c0       	rjmp	.+40     	; 0x2b68 <LCD_WriteData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b40:	6d 89       	ldd	r22, Y+21	; 0x15
    2b42:	7e 89       	ldd	r23, Y+22	; 0x16
    2b44:	8f 89       	ldd	r24, Y+23	; 0x17
    2b46:	98 8d       	ldd	r25, Y+24	; 0x18
    2b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9c 8b       	std	Y+20, r25	; 0x14
    2b52:	8b 8b       	std	Y+19, r24	; 0x13
    2b54:	8b 89       	ldd	r24, Y+19	; 0x13
    2b56:	9c 89       	ldd	r25, Y+20	; 0x14
    2b58:	98 8b       	std	Y+16, r25	; 0x10
    2b5a:	8f 87       	std	Y+15, r24	; 0x0f
    2b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5e:	98 89       	ldd	r25, Y+16	; 0x10
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <LCD_WriteData+0x38e>
    2b64:	98 8b       	std	Y+16, r25	; 0x10
    2b66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	62 e0       	ldi	r22, 0x02	; 2
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a0 e8       	ldi	r26, 0x80	; 128
    2b78:	bf e3       	ldi	r27, 0x3F	; 63
    2b7a:	8b 87       	std	Y+11, r24	; 0x0b
    2b7c:	9c 87       	std	Y+12, r25	; 0x0c
    2b7e:	ad 87       	std	Y+13, r26	; 0x0d
    2b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a ef       	ldi	r20, 0xFA	; 250
    2b90:	54 e4       	ldi	r21, 0x44	; 68
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	8f 83       	std	Y+7, r24	; 0x07
    2b9c:	98 87       	std	Y+8, r25	; 0x08
    2b9e:	a9 87       	std	Y+9, r26	; 0x09
    2ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba4:	78 85       	ldd	r23, Y+8	; 0x08
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <LCD_WriteData+0x3f2>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	3f c0       	rjmp	.+126    	; 0x2c42 <LCD_WriteData+0x470>
	else if (__tmp > 65535)
    2bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc6:	78 85       	ldd	r23, Y+8	; 0x08
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	4c f5       	brge	.+82     	; 0x2c2e <LCD_WriteData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e2       	ldi	r20, 0x20	; 32
    2bea:	51 e4       	ldi	r21, 0x41	; 65
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
    2c04:	0f c0       	rjmp	.+30     	; 0x2c24 <LCD_WriteData+0x452>
    2c06:	88 ec       	ldi	r24, 0xC8	; 200
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <LCD_WriteData+0x440>
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	69 f7       	brne	.-38     	; 0x2c06 <LCD_WriteData+0x434>
    2c2c:	14 c0       	rjmp	.+40     	; 0x2c56 <LCD_WriteData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c30:	78 85       	ldd	r23, Y+8	; 0x08
    2c32:	89 85       	ldd	r24, Y+9	; 0x09
    2c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <LCD_WriteData+0x47c>
    2c52:	9a 83       	std	Y+2, r25	; 0x02
    2c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2c56:	e9 96       	adiw	r28, 0x39	; 57
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <LCD_WriteString>:
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <LCD_WriteString+0x6>
    2c6e:	0f 92       	push	r0
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	9b 83       	std	Y+3, r25	; 0x03
    2c76:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2c78:	19 82       	std	Y+1, r1	; 0x01
    2c7a:	0e c0       	rjmp	.+28     	; 0x2c98 <LCD_WriteString+0x30>
	while(Copy_u8PtrString[i] !='\0')
	{
		LCD_WriteData(Copy_u8PtrString[i]);
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	fc 01       	movw	r30, r24
    2c88:	e2 0f       	add	r30, r18
    2c8a:	f3 1f       	adc	r31, r19
    2c8c:	80 81       	ld	r24, Z
    2c8e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LCD_WriteData>
		i++;
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
	u8 i=0;
	while(Copy_u8PtrString[i] !='\0')
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	e2 0f       	add	r30, r18
    2ca6:	f3 1f       	adc	r31, r19
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 23       	and	r24, r24
    2cac:	39 f7       	brne	.-50     	; 0x2c7c <LCD_WriteString+0x14>
	{
		LCD_WriteData(Copy_u8PtrString[i]);
		i++;
	}

}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <LCD_GoTo>:

u8 LCD_GoTo(u8 Copy_u8Line, u8 Copy_u8Cell)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	e3 97       	sbiw	r28, 0x33	; 51
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	8a ab       	std	Y+50, r24	; 0x32
    2cd0:	6b ab       	std	Y+51, r22	; 0x33
    u8 Ret = E_OK;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	89 ab       	std	Y+49, r24	; 0x31

    if(Copy_u8Line == 0)
    2cd6:	8a a9       	ldd	r24, Y+50	; 0x32
    2cd8:	88 23       	and	r24, r24
    2cda:	09 f0       	breq	.+2      	; 0x2cde <LCD_GoTo+0x24>
    2cdc:	c3 c0       	rjmp	.+390    	; 0x2e64 <LCD_GoTo+0x1aa>
    {
        LCD_WriteCommand(0x80 + Copy_u8Cell);
    2cde:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce0:	80 58       	subi	r24, 0x80	; 128
    2ce2:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a0 e2       	ldi	r26, 0x20	; 32
    2cec:	b2 e4       	ldi	r27, 0x42	; 66
    2cee:	8d a7       	std	Y+45, r24	; 0x2d
    2cf0:	9e a7       	std	Y+46, r25	; 0x2e
    2cf2:	af a7       	std	Y+47, r26	; 0x2f
    2cf4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cf6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cf8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cfe:	2b ea       	ldi	r18, 0xAB	; 171
    2d00:	3a ea       	ldi	r19, 0xAA	; 170
    2d02:	4a e2       	ldi	r20, 0x2A	; 42
    2d04:	50 e4       	ldi	r21, 0x40	; 64
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	89 a7       	std	Y+41, r24	; 0x29
    2d10:	9a a7       	std	Y+42, r25	; 0x2a
    2d12:	ab a7       	std	Y+43, r26	; 0x2b
    2d14:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2d16:	69 a5       	ldd	r22, Y+41	; 0x29
    2d18:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2a:	88 23       	and	r24, r24
    2d2c:	1c f4       	brge	.+6      	; 0x2d34 <LCD_GoTo+0x7a>
		__ticks = 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	88 a7       	std	Y+40, r24	; 0x28
    2d32:	91 c0       	rjmp	.+290    	; 0x2e56 <LCD_GoTo+0x19c>
	else if (__tmp > 255)
    2d34:	69 a5       	ldd	r22, Y+41	; 0x29
    2d36:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	4f e7       	ldi	r20, 0x7F	; 127
    2d42:	53 e4       	ldi	r21, 0x43	; 67
    2d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d48:	18 16       	cp	r1, r24
    2d4a:	0c f0       	brlt	.+2      	; 0x2d4e <LCD_GoTo+0x94>
    2d4c:	7b c0       	rjmp	.+246    	; 0x2e44 <LCD_GoTo+0x18a>
	{
		_delay_ms(__us / 1000.0);
    2d4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d50:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d54:	98 a9       	ldd	r25, Y+48	; 0x30
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	4a e7       	ldi	r20, 0x7A	; 122
    2d5c:	54 e4       	ldi	r21, 0x44	; 68
    2d5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8c a3       	std	Y+36, r24	; 0x24
    2d68:	9d a3       	std	Y+37, r25	; 0x25
    2d6a:	ae a3       	std	Y+38, r26	; 0x26
    2d6c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6c a1       	ldd	r22, Y+36	; 0x24
    2d70:	7d a1       	ldd	r23, Y+37	; 0x25
    2d72:	8e a1       	ldd	r24, Y+38	; 0x26
    2d74:	9f a1       	ldd	r25, Y+39	; 0x27
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a ef       	ldi	r20, 0xFA	; 250
    2d7c:	54 e4       	ldi	r21, 0x44	; 68
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	88 a3       	std	Y+32, r24	; 0x20
    2d88:	99 a3       	std	Y+33, r25	; 0x21
    2d8a:	aa a3       	std	Y+34, r26	; 0x22
    2d8c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d8e:	68 a1       	ldd	r22, Y+32	; 0x20
    2d90:	79 a1       	ldd	r23, Y+33	; 0x21
    2d92:	8a a1       	ldd	r24, Y+34	; 0x22
    2d94:	9b a1       	ldd	r25, Y+35	; 0x23
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <LCD_GoTo+0xf6>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9f 8f       	std	Y+31, r25	; 0x1f
    2dac:	8e 8f       	std	Y+30, r24	; 0x1e
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <LCD_GoTo+0x174>
	else if (__tmp > 65535)
    2db0:	68 a1       	ldd	r22, Y+32	; 0x20
    2db2:	79 a1       	ldd	r23, Y+33	; 0x21
    2db4:	8a a1       	ldd	r24, Y+34	; 0x22
    2db6:	9b a1       	ldd	r25, Y+35	; 0x23
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <LCD_GoTo+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6c a1       	ldd	r22, Y+36	; 0x24
    2dca:	7d a1       	ldd	r23, Y+37	; 0x25
    2dcc:	8e a1       	ldd	r24, Y+38	; 0x26
    2dce:	9f a1       	ldd	r25, Y+39	; 0x27
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9f 8f       	std	Y+31, r25	; 0x1f
    2dee:	8e 8f       	std	Y+30, r24	; 0x1e
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <LCD_GoTo+0x156>
    2df2:	88 ec       	ldi	r24, 0xC8	; 200
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9d 8f       	std	Y+29, r25	; 0x1d
    2df8:	8c 8f       	std	Y+28, r24	; 0x1c
    2dfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dfc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_GoTo+0x144>
    2e02:	9d 8f       	std	Y+29, r25	; 0x1d
    2e04:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9f 8f       	std	Y+31, r25	; 0x1f
    2e0e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e12:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <LCD_GoTo+0x138>
    2e18:	fb c0       	rjmp	.+502    	; 0x3010 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	68 a1       	ldd	r22, Y+32	; 0x20
    2e1c:	79 a1       	ldd	r23, Y+33	; 0x21
    2e1e:	8a a1       	ldd	r24, Y+34	; 0x22
    2e20:	9b a1       	ldd	r25, Y+35	; 0x23
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9f 8f       	std	Y+31, r25	; 0x1f
    2e2c:	8e 8f       	std	Y+30, r24	; 0x1e
    2e2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e32:	9b 8f       	std	Y+27, r25	; 0x1b
    2e34:	8a 8f       	std	Y+26, r24	; 0x1a
    2e36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_GoTo+0x180>
    2e3e:	9b 8f       	std	Y+27, r25	; 0x1b
    2e40:	8a 8f       	std	Y+26, r24	; 0x1a
    2e42:	e6 c0       	rjmp	.+460    	; 0x3010 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e44:	69 a5       	ldd	r22, Y+41	; 0x29
    2e46:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	88 a7       	std	Y+40, r24	; 0x28
    2e56:	88 a5       	ldd	r24, Y+40	; 0x28
    2e58:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e5a:	89 8d       	ldd	r24, Y+25	; 0x19
    2e5c:	8a 95       	dec	r24
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <LCD_GoTo+0x1a2>
    2e60:	89 8f       	std	Y+25, r24	; 0x19
    2e62:	d6 c0       	rjmp	.+428    	; 0x3010 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 1)
    2e64:	8a a9       	ldd	r24, Y+50	; 0x32
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <LCD_GoTo+0x1b2>
    2e6a:	c3 c0       	rjmp	.+390    	; 0x2ff2 <LCD_GoTo+0x338>
    {
        LCD_WriteCommand(0xC0 + Copy_u8Cell);
    2e6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e6e:	80 54       	subi	r24, 0x40	; 64
    2e70:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	a0 e2       	ldi	r26, 0x20	; 32
    2e7a:	b2 e4       	ldi	r27, 0x42	; 66
    2e7c:	8d 8b       	std	Y+21, r24	; 0x15
    2e7e:	9e 8b       	std	Y+22, r25	; 0x16
    2e80:	af 8b       	std	Y+23, r26	; 0x17
    2e82:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	2b ea       	ldi	r18, 0xAB	; 171
    2e8e:	3a ea       	ldi	r19, 0xAA	; 170
    2e90:	4a e2       	ldi	r20, 0x2A	; 42
    2e92:	50 e4       	ldi	r21, 0x40	; 64
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	89 8b       	std	Y+17, r24	; 0x11
    2e9e:	9a 8b       	std	Y+18, r25	; 0x12
    2ea0:	ab 8b       	std	Y+19, r26	; 0x13
    2ea2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ea4:	69 89       	ldd	r22, Y+17	; 0x11
    2ea6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	1c f4       	brge	.+6      	; 0x2ec2 <LCD_GoTo+0x208>
		__ticks = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	88 8b       	std	Y+16, r24	; 0x10
    2ec0:	91 c0       	rjmp	.+290    	; 0x2fe4 <LCD_GoTo+0x32a>
	else if (__tmp > 255)
    2ec2:	69 89       	ldd	r22, Y+17	; 0x11
    2ec4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4f e7       	ldi	r20, 0x7F	; 127
    2ed0:	53 e4       	ldi	r21, 0x43	; 67
    2ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed6:	18 16       	cp	r1, r24
    2ed8:	0c f0       	brlt	.+2      	; 0x2edc <LCD_GoTo+0x222>
    2eda:	7b c0       	rjmp	.+246    	; 0x2fd2 <LCD_GoTo+0x318>
	{
		_delay_ms(__us / 1000.0);
    2edc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ede:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	4a e7       	ldi	r20, 0x7A	; 122
    2eea:	54 e4       	ldi	r21, 0x44	; 68
    2eec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	8c 87       	std	Y+12, r24	; 0x0c
    2ef6:	9d 87       	std	Y+13, r25	; 0x0d
    2ef8:	ae 87       	std	Y+14, r26	; 0x0e
    2efa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2efe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	88 87       	std	Y+8, r24	; 0x08
    2f16:	99 87       	std	Y+9, r25	; 0x09
    2f18:	aa 87       	std	Y+10, r26	; 0x0a
    2f1a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f1c:	68 85       	ldd	r22, Y+8	; 0x08
    2f1e:	79 85       	ldd	r23, Y+9	; 0x09
    2f20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <LCD_GoTo+0x284>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9f 83       	std	Y+7, r25	; 0x07
    2f3a:	8e 83       	std	Y+6, r24	; 0x06
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <LCD_GoTo+0x302>
	else if (__tmp > 65535)
    2f3e:	68 85       	ldd	r22, Y+8	; 0x08
    2f40:	79 85       	ldd	r23, Y+9	; 0x09
    2f42:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f44:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <LCD_GoTo+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f58:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9f 83       	std	Y+7, r25	; 0x07
    2f7c:	8e 83       	std	Y+6, r24	; 0x06
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <LCD_GoTo+0x2e4>
    2f80:	88 ec       	ldi	r24, 0xC8	; 200
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9d 83       	std	Y+5, r25	; 0x05
    2f86:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f88:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCD_GoTo+0x2d2>
    2f90:	9d 83       	std	Y+5, r25	; 0x05
    2f92:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	8e 81       	ldd	r24, Y+6	; 0x06
    2f96:	9f 81       	ldd	r25, Y+7	; 0x07
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9f 83       	std	Y+7, r25	; 0x07
    2f9c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <LCD_GoTo+0x2c6>
    2fa6:	34 c0       	rjmp	.+104    	; 0x3010 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	68 85       	ldd	r22, Y+8	; 0x08
    2faa:	79 85       	ldd	r23, Y+9	; 0x09
    2fac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9f 83       	std	Y+7, r25	; 0x07
    2fba:	8e 83       	std	Y+6, r24	; 0x06
    2fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc0:	9b 83       	std	Y+3, r25	; 0x03
    2fc2:	8a 83       	std	Y+2, r24	; 0x02
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <LCD_GoTo+0x30e>
    2fcc:	9b 83       	std	Y+3, r25	; 0x03
    2fce:	8a 83       	std	Y+2, r24	; 0x02
    2fd0:	1f c0       	rjmp	.+62     	; 0x3010 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fd2:	69 89       	ldd	r22, Y+17	; 0x11
    2fd4:	7a 89       	ldd	r23, Y+18	; 0x12
    2fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	88 8b       	std	Y+16, r24	; 0x10
    2fe4:	88 89       	ldd	r24, Y+16	; 0x10
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	8a 95       	dec	r24
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_GoTo+0x330>
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 2)
    2ff2:	8a a9       	ldd	r24, Y+50	; 0x32
    2ff4:	82 30       	cpi	r24, 0x02	; 2
    2ff6:	29 f4       	brne	.+10     	; 0x3002 <LCD_GoTo+0x348>
    {
        LCD_WriteCommand(0x94 + Copy_u8Cell);
    2ff8:	8b a9       	ldd	r24, Y+51	; 0x33
    2ffa:	8c 56       	subi	r24, 0x6C	; 108
    2ffc:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    3000:	07 c0       	rjmp	.+14     	; 0x3010 <LCD_GoTo+0x356>
    }
    else if(Copy_u8Line == 3)
    3002:	8a a9       	ldd	r24, Y+50	; 0x32
    3004:	83 30       	cpi	r24, 0x03	; 3
    3006:	21 f4       	brne	.+8      	; 0x3010 <LCD_GoTo+0x356>
    {
        LCD_WriteCommand(0xD4 + Copy_u8Cell);
    3008:	8b a9       	ldd	r24, Y+51	; 0x33
    300a:	8c 52       	subi	r24, 0x2C	; 44
    300c:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    }

    return Ret;
    3010:	89 a9       	ldd	r24, Y+49	; 0x31
}
    3012:	e3 96       	adiw	r28, 0x33	; 51
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	2e 97       	sbiw	r28, 0x0e	; 14
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(CLEAR_SCREEN);
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 e8       	ldi	r26, 0x80	; 128
    3044:	bf e3       	ldi	r27, 0x3F	; 63
    3046:	8b 87       	std	Y+11, r24	; 0x0b
    3048:	9c 87       	std	Y+12, r25	; 0x0c
    304a:	ad 87       	std	Y+13, r26	; 0x0d
    304c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3050:	7c 85       	ldd	r23, Y+12	; 0x0c
    3052:	8d 85       	ldd	r24, Y+13	; 0x0d
    3054:	9e 85       	ldd	r25, Y+14	; 0x0e
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8f 83       	std	Y+7, r24	; 0x07
    3068:	98 87       	std	Y+8, r25	; 0x08
    306a:	a9 87       	std	Y+9, r26	; 0x09
    306c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    306e:	6f 81       	ldd	r22, Y+7	; 0x07
    3070:	78 85       	ldd	r23, Y+8	; 0x08
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	3f c0       	rjmp	.+126    	; 0x310e <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	4c f5       	brge	.+82     	; 0x30fa <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e2       	ldi	r20, 0x20	; 32
    30b6:	51 e4       	ldi	r21, 0x41	; 65
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <LCD_ClearDisplay+0xcc>
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9c 83       	std	Y+4, r25	; 0x04
    30d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <LCD_ClearDisplay+0xba>
    30e2:	9c 83       	std	Y+4, r25	; 0x04
    30e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <LCD_ClearDisplay+0xae>
    30f8:	14 c0       	rjmp	.+40     	; 0x3122 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fa:	6f 81       	ldd	r22, Y+7	; 0x07
    30fc:	78 85       	ldd	r23, Y+8	; 0x08
    30fe:	89 85       	ldd	r24, Y+9	; 0x09
    3100:	9a 85       	ldd	r25, Y+10	; 0x0a
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	89 83       	std	Y+1, r24	; 0x01
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <LCD_ClearDisplay+0xf6>
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3122:	2e 96       	adiw	r28, 0x0e	; 14
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <LCD_WriteChar>:
u8	LCD_WriteChar(u8 Copy_u8Char)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	00 d0       	rcall	.+0      	; 0x313a <LCD_WriteChar+0x6>
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = E_OK;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(Copy_u8Char);
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LCD_WriteData>
	return Ret;
    314a:	89 81       	ldd	r24, Y+1	; 0x01
}
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <LCD_WriteNumber>:
s32 LCD_WriteNumber(s32 Copy_s32Num)
{
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	c5 59       	subi	r28, 0x95	; 149
    3164:	d0 40       	sbci	r29, 0x00	; 0
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	fe 01       	movw	r30, r28
    3172:	e2 57       	subi	r30, 0x72	; 114
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	60 83       	st	Z, r22
    3178:	71 83       	std	Z+1, r23	; 0x01
    317a:	82 83       	std	Z+2, r24	; 0x02
    317c:	93 83       	std	Z+3, r25	; 0x03
	u8 Ret = E_OK;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	89 a7       	std	Y+41, r24	; 0x29

	u8 iterator = 0 ,Rem = 0;
    3182:	18 a6       	std	Y+40, r1	; 0x28
    3184:	1f a2       	std	Y+39, r1	; 0x27
	u8 Str[100];

	/* if the user send 0 */
	if(Copy_s32Num == 0)
    3186:	fe 01       	movw	r30, r28
    3188:	e2 57       	subi	r30, 0x72	; 114
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	a2 81       	ldd	r26, Z+2	; 0x02
    3192:	b3 81       	ldd	r27, Z+3	; 0x03
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	a1 05       	cpc	r26, r1
    3198:	b1 05       	cpc	r27, r1
    319a:	09 f0       	breq	.+2      	; 0x319e <LCD_WriteNumber+0x48>
    319c:	83 c0       	rjmp	.+262    	; 0x32a4 <LCD_WriteNumber+0x14e>
	{
		LCD_WriteChar('0');
    319e:	80 e3       	ldi	r24, 0x30	; 48
    31a0:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	a0 e8       	ldi	r26, 0x80	; 128
    31aa:	bf e3       	ldi	r27, 0x3F	; 63
    31ac:	8b a3       	std	Y+35, r24	; 0x23
    31ae:	9c a3       	std	Y+36, r25	; 0x24
    31b0:	ad a3       	std	Y+37, r26	; 0x25
    31b2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b4:	6b a1       	ldd	r22, Y+35	; 0x23
    31b6:	7c a1       	ldd	r23, Y+36	; 0x24
    31b8:	8d a1       	ldd	r24, Y+37	; 0x25
    31ba:	9e a1       	ldd	r25, Y+38	; 0x26
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	4a ef       	ldi	r20, 0xFA	; 250
    31c2:	54 e4       	ldi	r21, 0x44	; 68
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8f 8f       	std	Y+31, r24	; 0x1f
    31ce:	98 a3       	std	Y+32, r25	; 0x20
    31d0:	a9 a3       	std	Y+33, r26	; 0x21
    31d2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    31d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31d6:	78 a1       	ldd	r23, Y+32	; 0x20
    31d8:	89 a1       	ldd	r24, Y+33	; 0x21
    31da:	9a a1       	ldd	r25, Y+34	; 0x22
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	5f e3       	ldi	r21, 0x3F	; 63
    31e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e8:	88 23       	and	r24, r24
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <LCD_WriteNumber+0xa0>
		__ticks = 1;
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9e 8f       	std	Y+30, r25	; 0x1e
    31f2:	8d 8f       	std	Y+29, r24	; 0x1d
    31f4:	3f c0       	rjmp	.+126    	; 0x3274 <LCD_WriteNumber+0x11e>
	else if (__tmp > 65535)
    31f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31f8:	78 a1       	ldd	r23, Y+32	; 0x20
    31fa:	89 a1       	ldd	r24, Y+33	; 0x21
    31fc:	9a a1       	ldd	r25, Y+34	; 0x22
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	3f ef       	ldi	r19, 0xFF	; 255
    3202:	4f e7       	ldi	r20, 0x7F	; 127
    3204:	57 e4       	ldi	r21, 0x47	; 71
    3206:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320a:	18 16       	cp	r1, r24
    320c:	4c f5       	brge	.+82     	; 0x3260 <LCD_WriteNumber+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320e:	6b a1       	ldd	r22, Y+35	; 0x23
    3210:	7c a1       	ldd	r23, Y+36	; 0x24
    3212:	8d a1       	ldd	r24, Y+37	; 0x25
    3214:	9e a1       	ldd	r25, Y+38	; 0x26
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e2       	ldi	r20, 0x20	; 32
    321c:	51 e4       	ldi	r21, 0x41	; 65
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9e 8f       	std	Y+30, r25	; 0x1e
    3234:	8d 8f       	std	Y+29, r24	; 0x1d
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <LCD_WriteNumber+0x100>
    3238:	88 ec       	ldi	r24, 0xC8	; 200
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9c 8f       	std	Y+28, r25	; 0x1c
    323e:	8b 8f       	std	Y+27, r24	; 0x1b
    3240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <LCD_WriteNumber+0xee>
    3248:	9c 8f       	std	Y+28, r25	; 0x1c
    324a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    324e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	9e 8f       	std	Y+30, r25	; 0x1e
    3254:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3256:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3258:	9e 8d       	ldd	r25, Y+30	; 0x1e
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	69 f7       	brne	.-38     	; 0x3238 <LCD_WriteNumber+0xe2>
    325e:	14 c0       	rjmp	.+40     	; 0x3288 <LCD_WriteNumber+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3260:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3262:	78 a1       	ldd	r23, Y+32	; 0x20
    3264:	89 a1       	ldd	r24, Y+33	; 0x21
    3266:	9a a1       	ldd	r25, Y+34	; 0x22
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9e 8f       	std	Y+30, r25	; 0x1e
    3272:	8d 8f       	std	Y+29, r24	; 0x1d
    3274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3276:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3278:	9a 8f       	std	Y+26, r25	; 0x1a
    327a:	89 8f       	std	Y+25, r24	; 0x19
    327c:	89 8d       	ldd	r24, Y+25	; 0x19
    327e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <LCD_WriteNumber+0x12a>
    3284:	9a 8f       	std	Y+26, r25	; 0x1a
    3286:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(1);
		return Ret;
    3288:	89 a5       	ldd	r24, Y+41	; 0x29
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	ce 56       	subi	r28, 0x6E	; 110
    3294:	df 4f       	sbci	r29, 0xFF	; 255
    3296:	28 83       	st	Y, r18
    3298:	39 83       	std	Y+1, r19	; 0x01
    329a:	4a 83       	std	Y+2, r20	; 0x02
    329c:	5b 83       	std	Y+3, r21	; 0x03
    329e:	c2 59       	subi	r28, 0x92	; 146
    32a0:	d0 40       	sbci	r29, 0x00	; 0
    32a2:	4c c1       	rjmp	.+664    	; 0x353c <LCD_WriteNumber+0x3e6>
	}

	/* if the user send negative number */
	if(Copy_s32Num < 0)
    32a4:	fe 01       	movw	r30, r28
    32a6:	e2 57       	subi	r30, 0x72	; 114
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	a2 81       	ldd	r26, Z+2	; 0x02
    32b0:	b3 81       	ldd	r27, Z+3	; 0x03
    32b2:	bb 23       	and	r27, r27
    32b4:	0c f0       	brlt	.+2      	; 0x32b8 <LCD_WriteNumber+0x162>
    32b6:	54 c0       	rjmp	.+168    	; 0x3360 <LCD_WriteNumber+0x20a>
	{
		Copy_s32Num *= -1;
    32b8:	9e 01       	movw	r18, r28
    32ba:	22 57       	subi	r18, 0x72	; 114
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	fe 01       	movw	r30, r28
    32c0:	e2 57       	subi	r30, 0x72	; 114
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	a2 81       	ldd	r26, Z+2	; 0x02
    32ca:	b3 81       	ldd	r27, Z+3	; 0x03
    32cc:	b0 95       	com	r27
    32ce:	a0 95       	com	r26
    32d0:	90 95       	com	r25
    32d2:	81 95       	neg	r24
    32d4:	9f 4f       	sbci	r25, 0xFF	; 255
    32d6:	af 4f       	sbci	r26, 0xFF	; 255
    32d8:	bf 4f       	sbci	r27, 0xFF	; 255
    32da:	f9 01       	movw	r30, r18
    32dc:	80 83       	st	Z, r24
    32de:	91 83       	std	Z+1, r25	; 0x01
    32e0:	a2 83       	std	Z+2, r26	; 0x02
    32e2:	b3 83       	std	Z+3, r27	; 0x03
		LCD_WriteChar('-');
    32e4:	8d e2       	ldi	r24, 0x2D	; 45
    32e6:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>
    32ea:	3a c0       	rjmp	.+116    	; 0x3360 <LCD_WriteNumber+0x20a>

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
	{
		/* Getting Remainder "Last Digit" */
		Rem = Copy_s32Num % 10;
    32ec:	fe 01       	movw	r30, r28
    32ee:	e2 57       	subi	r30, 0x72	; 114
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	a2 81       	ldd	r26, Z+2	; 0x02
    32f8:	b3 81       	ldd	r27, Z+3	; 0x03
    32fa:	2a e0       	ldi	r18, 0x0A	; 10
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__divmodsi4>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	8f a3       	std	Y+39, r24	; 0x27

		/* Assigning the Last Digit to the String */
		Str[iterator] = Rem + '0';
    3310:	88 a5       	ldd	r24, Y+40	; 0x28
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	8f a1       	ldd	r24, Y+39	; 0x27
    3318:	48 2f       	mov	r20, r24
    331a:	40 5d       	subi	r20, 0xD0	; 208
    331c:	ce 01       	movw	r24, r28
    331e:	8a 96       	adiw	r24, 0x2a	; 42
    3320:	fc 01       	movw	r30, r24
    3322:	e2 0f       	add	r30, r18
    3324:	f3 1f       	adc	r31, r19
    3326:	40 83       	st	Z, r20
		/* Increasing the iterator of the string */
		iterator++;
    3328:	88 a5       	ldd	r24, Y+40	; 0x28
    332a:	8f 5f       	subi	r24, 0xFF	; 255
    332c:	88 a7       	std	Y+40, r24	; 0x28

		/* Deleting the last digit from the number */
		Copy_s32Num /= 10;
    332e:	8e 01       	movw	r16, r28
    3330:	02 57       	subi	r16, 0x72	; 114
    3332:	1f 4f       	sbci	r17, 0xFF	; 255
    3334:	fe 01       	movw	r30, r28
    3336:	e2 57       	subi	r30, 0x72	; 114
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	a2 81       	ldd	r26, Z+2	; 0x02
    3340:	b3 81       	ldd	r27, Z+3	; 0x03
    3342:	2a e0       	ldi	r18, 0x0A	; 10
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__divmodsi4>
    3352:	da 01       	movw	r26, r20
    3354:	c9 01       	movw	r24, r18
    3356:	f8 01       	movw	r30, r16
    3358:	80 83       	st	Z, r24
    335a:	91 83       	std	Z+1, r25	; 0x01
    335c:	a2 83       	std	Z+2, r26	; 0x02
    335e:	b3 83       	std	Z+3, r27	; 0x03
		Copy_s32Num *= -1;
		LCD_WriteChar('-');
	}

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
    3360:	fe 01       	movw	r30, r28
    3362:	e2 57       	subi	r30, 0x72	; 114
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	a2 81       	ldd	r26, Z+2	; 0x02
    336c:	b3 81       	ldd	r27, Z+3	; 0x03
    336e:	18 16       	cp	r1, r24
    3370:	19 06       	cpc	r1, r25
    3372:	1a 06       	cpc	r1, r26
    3374:	1b 06       	cpc	r1, r27
    3376:	0c f4       	brge	.+2      	; 0x337a <LCD_WriteNumber+0x224>
    3378:	b9 cf       	rjmp	.-142    	; 0x32ec <LCD_WriteNumber+0x196>
    337a:	cf c0       	rjmp	.+414    	; 0x351a <LCD_WriteNumber+0x3c4>

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
	{
		LCD_WriteChar(Str[iterator-1]);
    337c:	88 a5       	ldd	r24, Y+40	; 0x28
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9c 01       	movw	r18, r24
    3384:	21 50       	subi	r18, 0x01	; 1
    3386:	30 40       	sbci	r19, 0x00	; 0
    3388:	ce 01       	movw	r24, r28
    338a:	8a 96       	adiw	r24, 0x2a	; 42
    338c:	fc 01       	movw	r30, r24
    338e:	e2 0f       	add	r30, r18
    3390:	f3 1f       	adc	r31, r19
    3392:	80 81       	ld	r24, Z
    3394:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	a0 e8       	ldi	r26, 0x80	; 128
    339e:	bf e3       	ldi	r27, 0x3F	; 63
    33a0:	8d 8b       	std	Y+21, r24	; 0x15
    33a2:	9e 8b       	std	Y+22, r25	; 0x16
    33a4:	af 8b       	std	Y+23, r26	; 0x17
    33a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	2b ea       	ldi	r18, 0xAB	; 171
    33b2:	3a ea       	ldi	r19, 0xAA	; 170
    33b4:	4a e2       	ldi	r20, 0x2A	; 42
    33b6:	50 e4       	ldi	r21, 0x40	; 64
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	89 8b       	std	Y+17, r24	; 0x11
    33c2:	9a 8b       	std	Y+18, r25	; 0x12
    33c4:	ab 8b       	std	Y+19, r26	; 0x13
    33c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33c8:	69 89       	ldd	r22, Y+17	; 0x11
    33ca:	7a 89       	ldd	r23, Y+18	; 0x12
    33cc:	8b 89       	ldd	r24, Y+19	; 0x13
    33ce:	9c 89       	ldd	r25, Y+20	; 0x14
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	1c f4       	brge	.+6      	; 0x33e6 <LCD_WriteNumber+0x290>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	88 8b       	std	Y+16, r24	; 0x10
    33e4:	91 c0       	rjmp	.+290    	; 0x3508 <LCD_WriteNumber+0x3b2>
	else if (__tmp > 255)
    33e6:	69 89       	ldd	r22, Y+17	; 0x11
    33e8:	7a 89       	ldd	r23, Y+18	; 0x12
    33ea:	8b 89       	ldd	r24, Y+19	; 0x13
    33ec:	9c 89       	ldd	r25, Y+20	; 0x14
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4f e7       	ldi	r20, 0x7F	; 127
    33f4:	53 e4       	ldi	r21, 0x43	; 67
    33f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33fa:	18 16       	cp	r1, r24
    33fc:	0c f0       	brlt	.+2      	; 0x3400 <LCD_WriteNumber+0x2aa>
    33fe:	7b c0       	rjmp	.+246    	; 0x34f6 <LCD_WriteNumber+0x3a0>
	{
		_delay_ms(__us / 1000.0);
    3400:	6d 89       	ldd	r22, Y+21	; 0x15
    3402:	7e 89       	ldd	r23, Y+22	; 0x16
    3404:	8f 89       	ldd	r24, Y+23	; 0x17
    3406:	98 8d       	ldd	r25, Y+24	; 0x18
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	4a e7       	ldi	r20, 0x7A	; 122
    340e:	54 e4       	ldi	r21, 0x44	; 68
    3410:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8c 87       	std	Y+12, r24	; 0x0c
    341a:	9d 87       	std	Y+13, r25	; 0x0d
    341c:	ae 87       	std	Y+14, r26	; 0x0e
    341e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3420:	6c 85       	ldd	r22, Y+12	; 0x0c
    3422:	7d 85       	ldd	r23, Y+13	; 0x0d
    3424:	8e 85       	ldd	r24, Y+14	; 0x0e
    3426:	9f 85       	ldd	r25, Y+15	; 0x0f
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4a ef       	ldi	r20, 0xFA	; 250
    342e:	54 e4       	ldi	r21, 0x44	; 68
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	88 87       	std	Y+8, r24	; 0x08
    343a:	99 87       	std	Y+9, r25	; 0x09
    343c:	aa 87       	std	Y+10, r26	; 0x0a
    343e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3440:	68 85       	ldd	r22, Y+8	; 0x08
    3442:	79 85       	ldd	r23, Y+9	; 0x09
    3444:	8a 85       	ldd	r24, Y+10	; 0x0a
    3446:	9b 85       	ldd	r25, Y+11	; 0x0b
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	2c f4       	brge	.+10     	; 0x3462 <LCD_WriteNumber+0x30c>
		__ticks = 1;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9f 83       	std	Y+7, r25	; 0x07
    345e:	8e 83       	std	Y+6, r24	; 0x06
    3460:	3f c0       	rjmp	.+126    	; 0x34e0 <LCD_WriteNumber+0x38a>
	else if (__tmp > 65535)
    3462:	68 85       	ldd	r22, Y+8	; 0x08
    3464:	79 85       	ldd	r23, Y+9	; 0x09
    3466:	8a 85       	ldd	r24, Y+10	; 0x0a
    3468:	9b 85       	ldd	r25, Y+11	; 0x0b
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	4c f5       	brge	.+82     	; 0x34cc <LCD_WriteNumber+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347a:	6c 85       	ldd	r22, Y+12	; 0x0c
    347c:	7d 85       	ldd	r23, Y+13	; 0x0d
    347e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3480:	9f 85       	ldd	r25, Y+15	; 0x0f
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9f 83       	std	Y+7, r25	; 0x07
    34a0:	8e 83       	std	Y+6, r24	; 0x06
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <LCD_WriteNumber+0x36c>
    34a4:	88 ec       	ldi	r24, 0xC8	; 200
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9d 83       	std	Y+5, r25	; 0x05
    34aa:	8c 83       	std	Y+4, r24	; 0x04
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	9d 81       	ldd	r25, Y+5	; 0x05
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_WriteNumber+0x35a>
    34b4:	9d 83       	std	Y+5, r25	; 0x05
    34b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ba:	9f 81       	ldd	r25, Y+7	; 0x07
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9f 83       	std	Y+7, r25	; 0x07
    34c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <LCD_WriteNumber+0x34e>
    34ca:	24 c0       	rjmp	.+72     	; 0x3514 <LCD_WriteNumber+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	68 85       	ldd	r22, Y+8	; 0x08
    34ce:	79 85       	ldd	r23, Y+9	; 0x09
    34d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    34d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9f 83       	std	Y+7, r25	; 0x07
    34de:	8e 83       	std	Y+6, r24	; 0x06
    34e0:	8e 81       	ldd	r24, Y+6	; 0x06
    34e2:	9f 81       	ldd	r25, Y+7	; 0x07
    34e4:	9b 83       	std	Y+3, r25	; 0x03
    34e6:	8a 83       	std	Y+2, r24	; 0x02
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	9b 81       	ldd	r25, Y+3	; 0x03
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <LCD_WriteNumber+0x396>
    34f0:	9b 83       	std	Y+3, r25	; 0x03
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    34f4:	0f c0       	rjmp	.+30     	; 0x3514 <LCD_WriteNumber+0x3be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34f6:	69 89       	ldd	r22, Y+17	; 0x11
    34f8:	7a 89       	ldd	r23, Y+18	; 0x12
    34fa:	8b 89       	ldd	r24, Y+19	; 0x13
    34fc:	9c 89       	ldd	r25, Y+20	; 0x14
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	88 8b       	std	Y+16, r24	; 0x10
    3508:	88 89       	ldd	r24, Y+16	; 0x10
    350a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	8a 95       	dec	r24
    3510:	f1 f7       	brne	.-4      	; 0x350e <LCD_WriteNumber+0x3b8>
    3512:	89 83       	std	Y+1, r24	; 0x01
		Copy_s32Num /= 10;
	}

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
    3514:	88 a5       	ldd	r24, Y+40	; 0x28
    3516:	81 50       	subi	r24, 0x01	; 1
    3518:	88 a7       	std	Y+40, r24	; 0x28
    351a:	88 a5       	ldd	r24, Y+40	; 0x28
    351c:	88 23       	and	r24, r24
    351e:	09 f0       	breq	.+2      	; 0x3522 <LCD_WriteNumber+0x3cc>
    3520:	2d cf       	rjmp	.-422    	; 0x337c <LCD_WriteNumber+0x226>
	{
		LCD_WriteChar(Str[iterator-1]);
		_delay_us(1);
	}

	return Ret;
    3522:	89 a5       	ldd	r24, Y+41	; 0x29
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	ce 56       	subi	r28, 0x6E	; 110
    352e:	df 4f       	sbci	r29, 0xFF	; 255
    3530:	28 83       	st	Y, r18
    3532:	39 83       	std	Y+1, r19	; 0x01
    3534:	4a 83       	std	Y+2, r20	; 0x02
    3536:	5b 83       	std	Y+3, r21	; 0x03
    3538:	c2 59       	subi	r28, 0x92	; 146
    353a:	d0 40       	sbci	r29, 0x00	; 0
    353c:	ce 56       	subi	r28, 0x6E	; 110
    353e:	df 4f       	sbci	r29, 0xFF	; 255
    3540:	88 81       	ld	r24, Y
    3542:	99 81       	ldd	r25, Y+1	; 0x01
    3544:	aa 81       	ldd	r26, Y+2	; 0x02
    3546:	bb 81       	ldd	r27, Y+3	; 0x03
    3548:	c2 59       	subi	r28, 0x92	; 146
    354a:	d0 40       	sbci	r29, 0x00	; 0
}
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	cb 56       	subi	r28, 0x6B	; 107
    3552:	df 4f       	sbci	r29, 0xFF	; 255
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	08 95       	ret

00003568 <LCD_GoToWriteNumber>:


u8 LCD_GoToWriteNumber(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_s32Num)
{
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	00 d0       	rcall	.+0      	; 0x356e <LCD_GoToWriteNumber+0x6>
    356e:	00 d0       	rcall	.+0      	; 0x3570 <LCD_GoToWriteNumber+0x8>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	8a 83       	std	Y+2, r24	; 0x02
    3576:	6b 83       	std	Y+3, r22	; 0x03
    3578:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	6b 81       	ldd	r22, Y+3	; 0x03
    3582:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_GoTo>
	LCD_WriteNumber(Copy_s32Num);
    3586:	8c 81       	ldd	r24, Y+4	; 0x04
    3588:	88 2f       	mov	r24, r24
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	a0 e0       	ldi	r26, 0x00	; 0
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	bc 01       	movw	r22, r24
    3592:	cd 01       	movw	r24, r26
    3594:	0e 94 ab 18 	call	0x3156	; 0x3156 <LCD_WriteNumber>

	return Ret;
    3598:	89 81       	ldd	r24, Y+1	; 0x01
}
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <LCD_GoToClear>:
u8 LCD_GoToClear(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8NumCells)
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <LCD_GoToClear+0x6>
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <LCD_GoToClear+0x8>
    35b0:	0f 92       	push	r0
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	8b 83       	std	Y+3, r24	; 0x03
    35b8:	6c 83       	std	Y+4, r22	; 0x04
    35ba:	4d 83       	std	Y+5, r20	; 0x05
	u8 Ret = E_OK;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator = 0;
    35c0:	19 82       	std	Y+1, r1	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	6c 81       	ldd	r22, Y+4	; 0x04
    35c6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_GoTo>
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    35ca:	19 82       	std	Y+1, r1	; 0x01
    35cc:	06 c0       	rjmp	.+12     	; 0x35da <LCD_GoToClear+0x32>
	{
		LCD_WriteChar(' ');
    35ce:	80 e2       	ldi	r24, 0x20	; 32
    35d0:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>
{
	u8 Ret = E_OK;
	u8 iterator = 0;

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	8f 5f       	subi	r24, 0xFF	; 255
    35d8:	89 83       	std	Y+1, r24	; 0x01
    35da:	99 81       	ldd	r25, Y+1	; 0x01
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	98 17       	cp	r25, r24
    35e0:	b0 f3       	brcs	.-20     	; 0x35ce <LCD_GoToClear+0x26>
	{
		LCD_WriteChar(' ');
	}

	return Ret;
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <LCD_GoToWriteChar>:

u8 LCD_GoToWriteChar(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8Char)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <LCD_GoToWriteChar+0x6>
    35fa:	00 d0       	rcall	.+0      	; 0x35fc <LCD_GoToWriteChar+0x8>
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	8a 83       	std	Y+2, r24	; 0x02
    3602:	6b 83       	std	Y+3, r22	; 0x03
    3604:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	6b 81       	ldd	r22, Y+3	; 0x03
    360e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_GoTo>
	LCD_WriteChar(Copy_u8Char);
    3612:	8c 81       	ldd	r24, Y+4	; 0x04
    3614:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_WriteChar>

	return Ret;
    3618:	89 81       	ldd	r24, Y+1	; 0x01
}
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	08 95       	ret

00003628 <LCD_GoToWriteString>:


u8 LCD_GoToWriteString(u8 Copy_u8Line, u8 Copy_u8Cell, const u8 *Copy_u8PtrString)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	00 d0       	rcall	.+0      	; 0x362e <LCD_GoToWriteString+0x6>
    362e:	00 d0       	rcall	.+0      	; 0x3630 <LCD_GoToWriteString+0x8>
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	8a 83       	std	Y+2, r24	; 0x02
    3638:	6b 83       	std	Y+3, r22	; 0x03
    363a:	5d 83       	std	Y+5, r21	; 0x05
    363c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	6b 81       	ldd	r22, Y+3	; 0x03
    3646:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_GoTo>
	LCD_WriteString(Copy_u8PtrString);
    364a:	8c 81       	ldd	r24, Y+4	; 0x04
    364c:	9d 81       	ldd	r25, Y+5	; 0x05
    364e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_WriteString>

	return Ret;
    3652:	89 81       	ldd	r24, Y+1	; 0x01
}
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <LCD_CreateCharacter>:

u8 LCD_CreateCharacter(u8* Copy_u8P_Pattern, u8 Copy_Location)
{
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	00 d0       	rcall	.+0      	; 0x366a <LCD_CreateCharacter+0x6>
    366a:	00 d0       	rcall	.+0      	; 0x366c <LCD_CreateCharacter+0x8>
    366c:	0f 92       	push	r0
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	9c 83       	std	Y+4, r25	; 0x04
    3674:	8b 83       	std	Y+3, r24	; 0x03
    3676:	6d 83       	std	Y+5, r22	; 0x05
    u8 Ret = E_OK;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	8a 83       	std	Y+2, r24	; 0x02

    u8 iterator = 0;
    367c:	19 82       	std	Y+1, r1	; 0x01

    for(iterator=0; iterator<8 ; iterator++)
        LCD_WriteData(Copy_u8P_Pattern[iterator]);

    /* Command to write the data to DDRAM Again */
    LCD_WriteCommand(DDRAM_ADDRESS);
    367e:	80 e8       	ldi	r24, 0x80	; 128
    3680:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_WriteCommand>
    return Ret;
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <Init_KP>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"KP_Config.h"
#include"KP_Interface.h"
void Init_KP(KP_stConfiguration *Copy_pstConfig)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	00 d0       	rcall	.+0      	; 0x369c <Init_KP+0x6>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	9a 83       	std	Y+2, r25	; 0x02
    36a2:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum1_PIN,DIO_u8PIN_OUTPUT);
    36a4:	e9 81       	ldd	r30, Y+1	; 0x01
    36a6:	fa 81       	ldd	r31, Y+2	; 0x02
    36a8:	80 81       	ld	r24, Z
    36aa:	e9 81       	ldd	r30, Y+1	; 0x01
    36ac:	fa 81       	ldd	r31, Y+2	; 0x02
    36ae:	90 85       	ldd	r25, Z+8	; 0x08
    36b0:	69 2f       	mov	r22, r25
    36b2:	41 e0       	ldi	r20, 0x01	; 1
    36b4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum2_PIN,DIO_u8PIN_OUTPUT);
    36b8:	e9 81       	ldd	r30, Y+1	; 0x01
    36ba:	fa 81       	ldd	r31, Y+2	; 0x02
    36bc:	81 81       	ldd	r24, Z+1	; 0x01
    36be:	e9 81       	ldd	r30, Y+1	; 0x01
    36c0:	fa 81       	ldd	r31, Y+2	; 0x02
    36c2:	91 85       	ldd	r25, Z+9	; 0x09
    36c4:	69 2f       	mov	r22, r25
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum3_PIN,DIO_u8PIN_OUTPUT);
    36cc:	e9 81       	ldd	r30, Y+1	; 0x01
    36ce:	fa 81       	ldd	r31, Y+2	; 0x02
    36d0:	82 81       	ldd	r24, Z+2	; 0x02
    36d2:	e9 81       	ldd	r30, Y+1	; 0x01
    36d4:	fa 81       	ldd	r31, Y+2	; 0x02
    36d6:	92 85       	ldd	r25, Z+10	; 0x0a
    36d8:	69 2f       	mov	r22, r25
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum4_PORT,Copy_pstConfig->KP_Colum4_PIN,DIO_u8PIN_OUTPUT);
    36e0:	e9 81       	ldd	r30, Y+1	; 0x01
    36e2:	fa 81       	ldd	r31, Y+2	; 0x02
    36e4:	83 81       	ldd	r24, Z+3	; 0x03
    36e6:	e9 81       	ldd	r30, Y+1	; 0x01
    36e8:	fa 81       	ldd	r31, Y+2	; 0x02
    36ea:	93 85       	ldd	r25, Z+11	; 0x0b
    36ec:	69 2f       	mov	r22, r25
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row1_PIN,DIO_u8PIN_INPUT);
    36f4:	e9 81       	ldd	r30, Y+1	; 0x01
    36f6:	fa 81       	ldd	r31, Y+2	; 0x02
    36f8:	84 81       	ldd	r24, Z+4	; 0x04
    36fa:	e9 81       	ldd	r30, Y+1	; 0x01
    36fc:	fa 81       	ldd	r31, Y+2	; 0x02
    36fe:	94 85       	ldd	r25, Z+12	; 0x0c
    3700:	69 2f       	mov	r22, r25
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row2_PIN,DIO_u8PIN_INPUT);
    3708:	e9 81       	ldd	r30, Y+1	; 0x01
    370a:	fa 81       	ldd	r31, Y+2	; 0x02
    370c:	85 81       	ldd	r24, Z+5	; 0x05
    370e:	e9 81       	ldd	r30, Y+1	; 0x01
    3710:	fa 81       	ldd	r31, Y+2	; 0x02
    3712:	95 85       	ldd	r25, Z+13	; 0x0d
    3714:	69 2f       	mov	r22, r25
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row3_PIN,DIO_u8PIN_INPUT);
    371c:	e9 81       	ldd	r30, Y+1	; 0x01
    371e:	fa 81       	ldd	r31, Y+2	; 0x02
    3720:	86 81       	ldd	r24, Z+6	; 0x06
    3722:	e9 81       	ldd	r30, Y+1	; 0x01
    3724:	fa 81       	ldd	r31, Y+2	; 0x02
    3726:	96 85       	ldd	r25, Z+14	; 0x0e
    3728:	69 2f       	mov	r22, r25
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row4_PORT,Copy_pstConfig->KP_Row4_PIN,DIO_u8PIN_INPUT);
    3730:	e9 81       	ldd	r30, Y+1	; 0x01
    3732:	fa 81       	ldd	r31, Y+2	; 0x02
    3734:	87 81       	ldd	r24, Z+7	; 0x07
    3736:	e9 81       	ldd	r30, Y+1	; 0x01
    3738:	fa 81       	ldd	r31, Y+2	; 0x02
    373a:	97 85       	ldd	r25, Z+15	; 0x0f
    373c:	69 2f       	mov	r22, r25
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
	
}
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <Read_KP>:
u8 Read_KP(KP_stConfiguration *Copy_pstConfig)
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	a5 97       	sbiw	r28, 0x25	; 37
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	98 a3       	std	Y+32, r25	; 0x20
    3764:	8f 8f       	std	Y+31, r24	; 0x1f
    u8 Pressed_key = KP_Not_Pressed;
    3766:	8f ef       	ldi	r24, 0xFF	; 255
    3768:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_KP_Arr[Rows_NUM][Columns_NUM] = KP_Arr; 
    376a:	ce 01       	movw	r24, r28
    376c:	04 96       	adiw	r24, 0x04	; 4
    376e:	9a a3       	std	Y+34, r25	; 0x22
    3770:	89 a3       	std	Y+33, r24	; 0x21
    3772:	ef e8       	ldi	r30, 0x8F	; 143
    3774:	f1 e0       	ldi	r31, 0x01	; 1
    3776:	fc a3       	std	Y+36, r31	; 0x24
    3778:	eb a3       	std	Y+35, r30	; 0x23
    377a:	fc e0       	ldi	r31, 0x0C	; 12
    377c:	fd a3       	std	Y+37, r31	; 0x25
    377e:	eb a1       	ldd	r30, Y+35	; 0x23
    3780:	fc a1       	ldd	r31, Y+36	; 0x24
    3782:	00 80       	ld	r0, Z
    3784:	8b a1       	ldd	r24, Y+35	; 0x23
    3786:	9c a1       	ldd	r25, Y+36	; 0x24
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	9c a3       	std	Y+36, r25	; 0x24
    378c:	8b a3       	std	Y+35, r24	; 0x23
    378e:	e9 a1       	ldd	r30, Y+33	; 0x21
    3790:	fa a1       	ldd	r31, Y+34	; 0x22
    3792:	00 82       	st	Z, r0
    3794:	89 a1       	ldd	r24, Y+33	; 0x21
    3796:	9a a1       	ldd	r25, Y+34	; 0x22
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	9a a3       	std	Y+34, r25	; 0x22
    379c:	89 a3       	std	Y+33, r24	; 0x21
    379e:	9d a1       	ldd	r25, Y+37	; 0x25
    37a0:	91 50       	subi	r25, 0x01	; 1
    37a2:	9d a3       	std	Y+37, r25	; 0x25
    37a4:	ed a1       	ldd	r30, Y+37	; 0x25
    37a6:	ee 23       	and	r30, r30
    37a8:	51 f7       	brne	.-44     	; 0x377e <Read_KP+0x30>
    
	u8 Colum_Index ,Row_Index ;
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
    37aa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37ac:	f8 a1       	ldd	r31, Y+32	; 0x20
    37ae:	90 81       	ld	r25, Z
    37b0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37b2:	f8 a1       	ldd	r31, Y+32	; 0x20
    37b4:	21 81       	ldd	r18, Z+1	; 0x01
    37b6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37b8:	f8 a1       	ldd	r31, Y+32	; 0x20
    37ba:	82 81       	ldd	r24, Z+2	; 0x02
    37bc:	98 8b       	std	Y+16, r25	; 0x10
    37be:	29 8b       	std	Y+17, r18	; 0x11
    37c0:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
    37c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37c4:	f8 a1       	ldd	r31, Y+32	; 0x20
    37c6:	24 81       	ldd	r18, Z+4	; 0x04
    37c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37ca:	f8 a1       	ldd	r31, Y+32	; 0x20
    37cc:	35 81       	ldd	r19, Z+5	; 0x05
    37ce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37d0:	f8 a1       	ldd	r31, Y+32	; 0x20
    37d2:	86 81       	ldd	r24, Z+6	; 0x06
    37d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37d6:	f8 a1       	ldd	r31, Y+32	; 0x20
    37d8:	97 81       	ldd	r25, Z+7	; 0x07
    37da:	2b 8b       	std	Y+19, r18	; 0x13
    37dc:	3c 8b       	std	Y+20, r19	; 0x14
    37de:	8d 8b       	std	Y+21, r24	; 0x15
    37e0:	9e 8b       	std	Y+22, r25	; 0x16
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
    37e2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37e4:	f8 a1       	ldd	r31, Y+32	; 0x20
    37e6:	90 85       	ldd	r25, Z+8	; 0x08
    37e8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37ea:	f8 a1       	ldd	r31, Y+32	; 0x20
    37ec:	21 85       	ldd	r18, Z+9	; 0x09
    37ee:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37f0:	f8 a1       	ldd	r31, Y+32	; 0x20
    37f2:	82 85       	ldd	r24, Z+10	; 0x0a
    37f4:	9f 8b       	std	Y+23, r25	; 0x17
    37f6:	28 8f       	std	Y+24, r18	; 0x18
    37f8:	89 8f       	std	Y+25, r24	; 0x19
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
    37fa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37fc:	f8 a1       	ldd	r31, Y+32	; 0x20
    37fe:	24 85       	ldd	r18, Z+12	; 0x0c
    3800:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3802:	f8 a1       	ldd	r31, Y+32	; 0x20
    3804:	35 85       	ldd	r19, Z+13	; 0x0d
    3806:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3808:	f8 a1       	ldd	r31, Y+32	; 0x20
    380a:	86 85       	ldd	r24, Z+14	; 0x0e
    380c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    380e:	f8 a1       	ldd	r31, Y+32	; 0x20
    3810:	97 85       	ldd	r25, Z+15	; 0x0f
    3812:	2a 8f       	std	Y+26, r18	; 0x1a
    3814:	3b 8f       	std	Y+27, r19	; 0x1b
    3816:	8c 8f       	std	Y+28, r24	; 0x1c
    3818:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 State = 0;
    381a:	1e 8e       	std	Y+30, r1	; 0x1e
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    381c:	1a 82       	std	Y+2, r1	; 0x02
    381e:	1a c0       	rjmp	.+52     	; 0x3854 <Read_KP+0x106>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
    3820:	8a 81       	ldd	r24, Y+2	; 0x02
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	ce 01       	movw	r24, r28
    3828:	40 96       	adiw	r24, 0x10	; 16
    382a:	fc 01       	movw	r30, r24
    382c:	e2 0f       	add	r30, r18
    382e:	f3 1f       	adc	r31, r19
    3830:	40 81       	ld	r20, Z
    3832:	8a 81       	ldd	r24, Y+2	; 0x02
    3834:	28 2f       	mov	r18, r24
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	ce 01       	movw	r24, r28
    383a:	47 96       	adiw	r24, 0x17	; 23
    383c:	fc 01       	movw	r30, r24
    383e:	e2 0f       	add	r30, r18
    3840:	f3 1f       	adc	r31, r19
    3842:	90 81       	ld	r25, Z
    3844:	84 2f       	mov	r24, r20
    3846:	69 2f       	mov	r22, r25
    3848:	41 e0       	ldi	r20, 0x01	; 1
    384a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	8f 5f       	subi	r24, 0xFF	; 255
    3852:	8a 83       	std	Y+2, r24	; 0x02
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	83 30       	cpi	r24, 0x03	; 3
    3858:	18 f3       	brcs	.-58     	; 0x3820 <Read_KP+0xd2>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    385a:	19 82       	std	Y+1, r1	; 0x01
    385c:	1a c0       	rjmp	.+52     	; 0x3892 <Read_KP+0x144>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	ce 01       	movw	r24, r28
    3866:	43 96       	adiw	r24, 0x13	; 19
    3868:	fc 01       	movw	r30, r24
    386a:	e2 0f       	add	r30, r18
    386c:	f3 1f       	adc	r31, r19
    386e:	40 81       	ld	r20, Z
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	28 2f       	mov	r18, r24
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	ce 01       	movw	r24, r28
    3878:	4a 96       	adiw	r24, 0x1a	; 26
    387a:	fc 01       	movw	r30, r24
    387c:	e2 0f       	add	r30, r18
    387e:	f3 1f       	adc	r31, r19
    3880:	90 81       	ld	r25, Z
    3882:	84 2f       	mov	r24, r20
    3884:	69 2f       	mov	r22, r25
    3886:	41 e0       	ldi	r20, 0x01	; 1
    3888:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	84 30       	cpi	r24, 0x04	; 4
    3896:	18 f3       	brcs	.-58     	; 0x385e <Read_KP+0x110>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    3898:	1a 82       	std	Y+2, r1	; 0x02
    389a:	8b c0       	rjmp	.+278    	; 0x39b2 <Read_KP+0x264>
    {
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_LOW);
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	ce 01       	movw	r24, r28
    38a4:	40 96       	adiw	r24, 0x10	; 16
    38a6:	fc 01       	movw	r30, r24
    38a8:	e2 0f       	add	r30, r18
    38aa:	f3 1f       	adc	r31, r19
    38ac:	40 81       	ld	r20, Z
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	28 2f       	mov	r18, r24
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	ce 01       	movw	r24, r28
    38b6:	47 96       	adiw	r24, 0x17	; 23
    38b8:	fc 01       	movw	r30, r24
    38ba:	e2 0f       	add	r30, r18
    38bc:	f3 1f       	adc	r31, r19
    38be:	90 81       	ld	r25, Z
    38c0:	84 2f       	mov	r24, r20
    38c2:	69 2f       	mov	r22, r25
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
    38ca:	19 82       	std	Y+1, r1	; 0x01
    38cc:	54 c0       	rjmp	.+168    	; 0x3976 <Read_KP+0x228>
        {
            DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	ce 01       	movw	r24, r28
    38d6:	43 96       	adiw	r24, 0x13	; 19
    38d8:	fc 01       	movw	r30, r24
    38da:	e2 0f       	add	r30, r18
    38dc:	f3 1f       	adc	r31, r19
    38de:	40 81       	ld	r20, Z
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	28 2f       	mov	r18, r24
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	ce 01       	movw	r24, r28
    38e8:	4a 96       	adiw	r24, 0x1a	; 26
    38ea:	fc 01       	movw	r30, r24
    38ec:	e2 0f       	add	r30, r18
    38ee:	f3 1f       	adc	r31, r19
    38f0:	90 81       	ld	r25, Z
    38f2:	9e 01       	movw	r18, r28
    38f4:	22 5e       	subi	r18, 0xE2	; 226
    38f6:	3f 4f       	sbci	r19, 0xFF	; 255
    38f8:	84 2f       	mov	r24, r20
    38fa:	69 2f       	mov	r22, r25
    38fc:	a9 01       	movw	r20, r18
    38fe:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <DIO_VoidGetPinValue>
            if (State == DIO_u8PIN_LOW)
    3902:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3904:	88 23       	and	r24, r24
    3906:	a1 f5       	brne	.+104    	; 0x3970 <Read_KP+0x222>
    3908:	1a c0       	rjmp	.+52     	; 0x393e <Read_KP+0x1f0>
            {
                while (State == DIO_u8PIN_LOW)
                {
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	28 2f       	mov	r18, r24
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	ce 01       	movw	r24, r28
    3912:	43 96       	adiw	r24, 0x13	; 19
    3914:	fc 01       	movw	r30, r24
    3916:	e2 0f       	add	r30, r18
    3918:	f3 1f       	adc	r31, r19
    391a:	40 81       	ld	r20, Z
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	28 2f       	mov	r18, r24
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	ce 01       	movw	r24, r28
    3924:	4a 96       	adiw	r24, 0x1a	; 26
    3926:	fc 01       	movw	r30, r24
    3928:	e2 0f       	add	r30, r18
    392a:	f3 1f       	adc	r31, r19
    392c:	90 81       	ld	r25, Z
    392e:	9e 01       	movw	r18, r28
    3930:	22 5e       	subi	r18, 0xE2	; 226
    3932:	3f 4f       	sbci	r19, 0xFF	; 255
    3934:	84 2f       	mov	r24, r20
    3936:	69 2f       	mov	r22, r25
    3938:	a9 01       	movw	r20, r18
    393a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <DIO_VoidGetPinValue>
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
        {
            DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
            if (State == DIO_u8PIN_LOW)
            {
                while (State == DIO_u8PIN_LOW)
    393e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3940:	88 23       	and	r24, r24
    3942:	19 f3       	breq	.-58     	; 0x390a <Read_KP+0x1bc>
                {
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
                }
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	28 2f       	mov	r18, r24
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
    394c:	48 2f       	mov	r20, r24
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	c9 01       	movw	r24, r18
    3952:	88 0f       	add	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	82 0f       	add	r24, r18
    3958:	93 1f       	adc	r25, r19
    395a:	9e 01       	movw	r18, r28
    395c:	2f 5f       	subi	r18, 0xFF	; 255
    395e:	3f 4f       	sbci	r19, 0xFF	; 255
    3960:	82 0f       	add	r24, r18
    3962:	93 1f       	adc	r25, r19
    3964:	84 0f       	add	r24, r20
    3966:	95 1f       	adc	r25, r21
    3968:	fc 01       	movw	r30, r24
    396a:	33 96       	adiw	r30, 0x03	; 3
    396c:	80 81       	ld	r24, Z
    396e:	8b 83       	std	Y+3, r24	; 0x03
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    {
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_LOW);
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	89 83       	std	Y+1, r24	; 0x01
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	84 30       	cpi	r24, 0x04	; 4
    397a:	08 f4       	brcc	.+2      	; 0x397e <Read_KP+0x230>
    397c:	a8 cf       	rjmp	.-176    	; 0x38ce <Read_KP+0x180>
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
                }
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
            }
        }
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_HIGH);
    397e:	8a 81       	ldd	r24, Y+2	; 0x02
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	ce 01       	movw	r24, r28
    3986:	40 96       	adiw	r24, 0x10	; 16
    3988:	fc 01       	movw	r30, r24
    398a:	e2 0f       	add	r30, r18
    398c:	f3 1f       	adc	r31, r19
    398e:	40 81       	ld	r20, Z
    3990:	8a 81       	ldd	r24, Y+2	; 0x02
    3992:	28 2f       	mov	r18, r24
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	ce 01       	movw	r24, r28
    3998:	47 96       	adiw	r24, 0x17	; 23
    399a:	fc 01       	movw	r30, r24
    399c:	e2 0f       	add	r30, r18
    399e:	f3 1f       	adc	r31, r19
    39a0:	90 81       	ld	r25, Z
    39a2:	84 2f       	mov	r24, r20
    39a4:	69 2f       	mov	r22, r25
    39a6:	41 e0       	ldi	r20, 0x01	; 1
    39a8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    39ac:	8a 81       	ldd	r24, Y+2	; 0x02
    39ae:	8f 5f       	subi	r24, 0xFF	; 255
    39b0:	8a 83       	std	Y+2, r24	; 0x02
    39b2:	8a 81       	ldd	r24, Y+2	; 0x02
    39b4:	83 30       	cpi	r24, 0x03	; 3
    39b6:	08 f4       	brcc	.+2      	; 0x39ba <Read_KP+0x26c>
    39b8:	71 cf       	rjmp	.-286    	; 0x389c <Read_KP+0x14e>
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
            }
        }
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_HIGH);
    }
    return Pressed_key;
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39bc:	a5 96       	adiw	r28, 0x25	; 37
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	cf 91       	pop	r28
    39ca:	df 91       	pop	r29
    39cc:	08 95       	ret

000039ce <EEPROM_voidSendData>:
#include"EEPROM_Interface.h"
#include<util/delay.h>



void EEPROM_voidSendData(u16 Copy_u16Address,u8 Copy_u8Data){
    39ce:	df 93       	push	r29
    39d0:	cf 93       	push	r28
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	61 97       	sbiw	r28, 0x11	; 17
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	98 8b       	std	Y+16, r25	; 0x10
    39e4:	8f 87       	std	Y+15, r24	; 0x0f
    39e6:	69 8b       	std	Y+17, r22	; 0x11
	/*1-Send Start Condition*/
	TWI_voidStartCond();
    39e8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    39ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ee:	98 89       	ldd	r25, Y+16	; 0x10
    39f0:	89 2f       	mov	r24, r25
    39f2:	99 27       	eor	r25, r25
    39f4:	80 65       	ori	r24, 0x50	; 80
    39f6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    39fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fc:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_voidMasterWriteData>
	/*4-Send Data*/
	TWI_voidMasterWriteData(Copy_u8Data);
    3a00:	89 89       	ldd	r24, Y+17	; 0x11
    3a02:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_voidMasterWriteData>
	/*5-Send Stop Condition*/
	TWI_voidStopCond();
    3a06:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <TWI_voidStopCond>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a8 e4       	ldi	r26, 0x48	; 72
    3a10:	b3 e4       	ldi	r27, 0x43	; 67
    3a12:	8b 87       	std	Y+11, r24	; 0x0b
    3a14:	9c 87       	std	Y+12, r25	; 0x0c
    3a16:	ad 87       	std	Y+13, r26	; 0x0d
    3a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	4a ef       	ldi	r20, 0xFA	; 250
    3a28:	54 e4       	ldi	r21, 0x44	; 68
    3a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	8f 83       	std	Y+7, r24	; 0x07
    3a34:	98 87       	std	Y+8, r25	; 0x08
    3a36:	a9 87       	std	Y+9, r26	; 0x09
    3a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3c:	78 85       	ldd	r23, Y+8	; 0x08
    3a3e:	89 85       	ldd	r24, Y+9	; 0x09
    3a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f e3       	ldi	r21, 0x3F	; 63
    3a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4e:	88 23       	and	r24, r24
    3a50:	2c f4       	brge	.+10     	; 0x3a5c <EEPROM_voidSendData+0x8e>
		__ticks = 1;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	3f c0       	rjmp	.+126    	; 0x3ada <EEPROM_voidSendData+0x10c>
	else if (__tmp > 65535)
    3a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5e:	78 85       	ldd	r23, Y+8	; 0x08
    3a60:	89 85       	ldd	r24, Y+9	; 0x09
    3a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	3f ef       	ldi	r19, 0xFF	; 255
    3a68:	4f e7       	ldi	r20, 0x7F	; 127
    3a6a:	57 e4       	ldi	r21, 0x47	; 71
    3a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a70:	18 16       	cp	r1, r24
    3a72:	4c f5       	brge	.+82     	; 0x3ac6 <EEPROM_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e2       	ldi	r20, 0x20	; 32
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	9e 83       	std	Y+6, r25	; 0x06
    3a9a:	8d 83       	std	Y+5, r24	; 0x05
    3a9c:	0f c0       	rjmp	.+30     	; 0x3abc <EEPROM_voidSendData+0xee>
    3a9e:	88 ec       	ldi	r24, 0xC8	; 200
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	9c 83       	std	Y+4, r25	; 0x04
    3aa4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <EEPROM_voidSendData+0xdc>
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	9e 83       	std	Y+6, r25	; 0x06
    3aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abc:	8d 81       	ldd	r24, Y+5	; 0x05
    3abe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	69 f7       	brne	.-38     	; 0x3a9e <EEPROM_voidSendData+0xd0>
    3ac4:	14 c0       	rjmp	.+40     	; 0x3aee <EEPROM_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac8:	78 85       	ldd	r23, Y+8	; 0x08
    3aca:	89 85       	ldd	r24, Y+9	; 0x09
    3acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9e 83       	std	Y+6, r25	; 0x06
    3ad8:	8d 83       	std	Y+5, r24	; 0x05
    3ada:	8d 81       	ldd	r24, Y+5	; 0x05
    3adc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ade:	9a 83       	std	Y+2, r25	; 0x02
    3ae0:	89 83       	std	Y+1, r24	; 0x01
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	f1 f7       	brne	.-4      	; 0x3ae6 <EEPROM_voidSendData+0x118>
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    3aee:	61 96       	adiw	r28, 0x11	; 17
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	de bf       	out	0x3e, r29	; 62
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	cd bf       	out	0x3d, r28	; 61
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <EEPROM_voidRecieveData>:
void EEPROM_voidRecieveData(u16 Copy_u16Address,u8 *Copy_u8ReceivedData)
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <EEPROM_voidRecieveData+0x6>
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <EEPROM_voidRecieveData+0x8>
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
    3b0c:	9a 83       	std	Y+2, r25	; 0x02
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	7c 83       	std	Y+4, r23	; 0x04
    3b12:	6b 83       	std	Y+3, r22	; 0x03


	/*1-Send Start Condition*/
	TWI_voidStartCond();
    3b14:	0e 94 4b 0a 	call	0x1496	; 0x1496 <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1c:	89 2f       	mov	r24, r25
    3b1e:	99 27       	eor	r25, r25
    3b20:	80 65       	ori	r24, 0x50	; 80
    3b22:	0e 94 8b 0a 	call	0x1516	; 0x1516 <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_voidMasterWriteData>
	/*4-Send repeated start Condition*/
	TWI_voidStopCond();
    3b2c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <TWI_voidStopCond>
	TWI_voidStartCond();
    3b30:	0e 94 4b 0a 	call	0x1496	; 0x1496 <TWI_voidStartCond>
	/*5-Send Slave Address with read*/
	TWI_voidSendSlaveAddressWithRead((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	9a 81       	ldd	r25, Y+2	; 0x02
    3b38:	89 2f       	mov	r24, r25
    3b3a:	99 27       	eor	r25, r25
    3b3c:	80 65       	ori	r24, 0x50	; 80
    3b3e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_voidSendSlaveAddressWithRead>
	TWI_voidMasterReadData(Copy_u8ReceivedData);
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	9c 81       	ldd	r25, Y+4	; 0x04
    3b46:	0e 94 c0 0a 	call	0x1580	; 0x1580 <TWI_voidMasterReadData>
	TWI_voidStopCond();
    3b4a:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <TWI_voidStopCond>

}
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	cf 91       	pop	r28
    3b58:	df 91       	pop	r29
    3b5a:	08 95       	ret

00003b5c <main>:




void main()
{
    3b5c:	df 93       	push	r29
    3b5e:	cf 93       	push	r28
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
	
	LCD_Init();
    3b64:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_Init>
		DIO_VoidSetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_INPUT);
    3b68:	82 e0       	ldi	r24, 0x02	; 2
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	40 e0       	ldi	r20, 0x00	; 0
    3b6e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DIO_VoidSetPinDirection>
		DIO_VoidSetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
    3b72:	82 e0       	ldi	r24, 0x02	; 2
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_VoidSetPinValue>
		LCD_Init();
    3b7c:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_Init>
//USE RTOS TO CREATE TASK FOR TIMER 		
TMU_CreateTask(TIMER,1000,0); 
    3b80:	8c e9       	ldi	r24, 0x9C	; 156
    3b82:	98 e0       	ldi	r25, 0x08	; 8
    3b84:	68 ee       	ldi	r22, 0xE8	; 232
    3b86:	73 e0       	ldi	r23, 0x03	; 3
    3b88:	40 e0       	ldi	r20, 0x00	; 0
    3b8a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TMU_CreateTask>
//USE RTOS TO CREATE TASK FOR SYSTEM TEMPERATURE STATE
TMU_CreateTask(SystemState_Setter,50,1);
    3b8e:	8d e2       	ldi	r24, 0x2D	; 45
    3b90:	98 e0       	ldi	r25, 0x08	; 8
    3b92:	62 e3       	ldi	r22, 0x32	; 50
    3b94:	70 e0       	ldi	r23, 0x00	; 0
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TMU_CreateTask>
TMU_Start_Scheduler();
    3b9c:	0e 94 9b 07 	call	0xf36	; 0xf36 <TMU_Start_Scheduler>
    3ba0:	ff cf       	rjmp	.-2      	; 0x3ba0 <main+0x44>

00003ba2 <__mulsi3>:
    3ba2:	62 9f       	mul	r22, r18
    3ba4:	d0 01       	movw	r26, r0
    3ba6:	73 9f       	mul	r23, r19
    3ba8:	f0 01       	movw	r30, r0
    3baa:	82 9f       	mul	r24, r18
    3bac:	e0 0d       	add	r30, r0
    3bae:	f1 1d       	adc	r31, r1
    3bb0:	64 9f       	mul	r22, r20
    3bb2:	e0 0d       	add	r30, r0
    3bb4:	f1 1d       	adc	r31, r1
    3bb6:	92 9f       	mul	r25, r18
    3bb8:	f0 0d       	add	r31, r0
    3bba:	83 9f       	mul	r24, r19
    3bbc:	f0 0d       	add	r31, r0
    3bbe:	74 9f       	mul	r23, r20
    3bc0:	f0 0d       	add	r31, r0
    3bc2:	65 9f       	mul	r22, r21
    3bc4:	f0 0d       	add	r31, r0
    3bc6:	99 27       	eor	r25, r25
    3bc8:	72 9f       	mul	r23, r18
    3bca:	b0 0d       	add	r27, r0
    3bcc:	e1 1d       	adc	r30, r1
    3bce:	f9 1f       	adc	r31, r25
    3bd0:	63 9f       	mul	r22, r19
    3bd2:	b0 0d       	add	r27, r0
    3bd4:	e1 1d       	adc	r30, r1
    3bd6:	f9 1f       	adc	r31, r25
    3bd8:	bd 01       	movw	r22, r26
    3bda:	cf 01       	movw	r24, r30
    3bdc:	11 24       	eor	r1, r1
    3bde:	08 95       	ret

00003be0 <__udivmodhi4>:
    3be0:	aa 1b       	sub	r26, r26
    3be2:	bb 1b       	sub	r27, r27
    3be4:	51 e1       	ldi	r21, 0x11	; 17
    3be6:	07 c0       	rjmp	.+14     	; 0x3bf6 <__udivmodhi4_ep>

00003be8 <__udivmodhi4_loop>:
    3be8:	aa 1f       	adc	r26, r26
    3bea:	bb 1f       	adc	r27, r27
    3bec:	a6 17       	cp	r26, r22
    3bee:	b7 07       	cpc	r27, r23
    3bf0:	10 f0       	brcs	.+4      	; 0x3bf6 <__udivmodhi4_ep>
    3bf2:	a6 1b       	sub	r26, r22
    3bf4:	b7 0b       	sbc	r27, r23

00003bf6 <__udivmodhi4_ep>:
    3bf6:	88 1f       	adc	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	5a 95       	dec	r21
    3bfc:	a9 f7       	brne	.-22     	; 0x3be8 <__udivmodhi4_loop>
    3bfe:	80 95       	com	r24
    3c00:	90 95       	com	r25
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	08 95       	ret

00003c08 <__udivmodsi4>:
    3c08:	a1 e2       	ldi	r26, 0x21	; 33
    3c0a:	1a 2e       	mov	r1, r26
    3c0c:	aa 1b       	sub	r26, r26
    3c0e:	bb 1b       	sub	r27, r27
    3c10:	fd 01       	movw	r30, r26
    3c12:	0d c0       	rjmp	.+26     	; 0x3c2e <__udivmodsi4_ep>

00003c14 <__udivmodsi4_loop>:
    3c14:	aa 1f       	adc	r26, r26
    3c16:	bb 1f       	adc	r27, r27
    3c18:	ee 1f       	adc	r30, r30
    3c1a:	ff 1f       	adc	r31, r31
    3c1c:	a2 17       	cp	r26, r18
    3c1e:	b3 07       	cpc	r27, r19
    3c20:	e4 07       	cpc	r30, r20
    3c22:	f5 07       	cpc	r31, r21
    3c24:	20 f0       	brcs	.+8      	; 0x3c2e <__udivmodsi4_ep>
    3c26:	a2 1b       	sub	r26, r18
    3c28:	b3 0b       	sbc	r27, r19
    3c2a:	e4 0b       	sbc	r30, r20
    3c2c:	f5 0b       	sbc	r31, r21

00003c2e <__udivmodsi4_ep>:
    3c2e:	66 1f       	adc	r22, r22
    3c30:	77 1f       	adc	r23, r23
    3c32:	88 1f       	adc	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	1a 94       	dec	r1
    3c38:	69 f7       	brne	.-38     	; 0x3c14 <__udivmodsi4_loop>
    3c3a:	60 95       	com	r22
    3c3c:	70 95       	com	r23
    3c3e:	80 95       	com	r24
    3c40:	90 95       	com	r25
    3c42:	9b 01       	movw	r18, r22
    3c44:	ac 01       	movw	r20, r24
    3c46:	bd 01       	movw	r22, r26
    3c48:	cf 01       	movw	r24, r30
    3c4a:	08 95       	ret

00003c4c <__divmodsi4>:
    3c4c:	97 fb       	bst	r25, 7
    3c4e:	09 2e       	mov	r0, r25
    3c50:	05 26       	eor	r0, r21
    3c52:	0e d0       	rcall	.+28     	; 0x3c70 <__divmodsi4_neg1>
    3c54:	57 fd       	sbrc	r21, 7
    3c56:	04 d0       	rcall	.+8      	; 0x3c60 <__divmodsi4_neg2>
    3c58:	d7 df       	rcall	.-82     	; 0x3c08 <__udivmodsi4>
    3c5a:	0a d0       	rcall	.+20     	; 0x3c70 <__divmodsi4_neg1>
    3c5c:	00 1c       	adc	r0, r0
    3c5e:	38 f4       	brcc	.+14     	; 0x3c6e <__divmodsi4_exit>

00003c60 <__divmodsi4_neg2>:
    3c60:	50 95       	com	r21
    3c62:	40 95       	com	r20
    3c64:	30 95       	com	r19
    3c66:	21 95       	neg	r18
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	4f 4f       	sbci	r20, 0xFF	; 255
    3c6c:	5f 4f       	sbci	r21, 0xFF	; 255

00003c6e <__divmodsi4_exit>:
    3c6e:	08 95       	ret

00003c70 <__divmodsi4_neg1>:
    3c70:	f6 f7       	brtc	.-4      	; 0x3c6e <__divmodsi4_exit>
    3c72:	90 95       	com	r25
    3c74:	80 95       	com	r24
    3c76:	70 95       	com	r23
    3c78:	61 95       	neg	r22
    3c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c80:	08 95       	ret

00003c82 <__prologue_saves__>:
    3c82:	2f 92       	push	r2
    3c84:	3f 92       	push	r3
    3c86:	4f 92       	push	r4
    3c88:	5f 92       	push	r5
    3c8a:	6f 92       	push	r6
    3c8c:	7f 92       	push	r7
    3c8e:	8f 92       	push	r8
    3c90:	9f 92       	push	r9
    3c92:	af 92       	push	r10
    3c94:	bf 92       	push	r11
    3c96:	cf 92       	push	r12
    3c98:	df 92       	push	r13
    3c9a:	ef 92       	push	r14
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	ca 1b       	sub	r28, r26
    3cac:	db 0b       	sbc	r29, r27
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	09 94       	ijmp

00003cba <__epilogue_restores__>:
    3cba:	2a 88       	ldd	r2, Y+18	; 0x12
    3cbc:	39 88       	ldd	r3, Y+17	; 0x11
    3cbe:	48 88       	ldd	r4, Y+16	; 0x10
    3cc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cca:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ccc:	b9 84       	ldd	r11, Y+9	; 0x09
    3cce:	c8 84       	ldd	r12, Y+8	; 0x08
    3cd0:	df 80       	ldd	r13, Y+7	; 0x07
    3cd2:	ee 80       	ldd	r14, Y+6	; 0x06
    3cd4:	fd 80       	ldd	r15, Y+5	; 0x05
    3cd6:	0c 81       	ldd	r16, Y+4	; 0x04
    3cd8:	1b 81       	ldd	r17, Y+3	; 0x03
    3cda:	aa 81       	ldd	r26, Y+2	; 0x02
    3cdc:	b9 81       	ldd	r27, Y+1	; 0x01
    3cde:	ce 0f       	add	r28, r30
    3ce0:	d1 1d       	adc	r29, r1
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	ed 01       	movw	r28, r26
    3cee:	08 95       	ret

00003cf0 <_exit>:
    3cf0:	f8 94       	cli

00003cf2 <__stop_program>:
    3cf2:	ff cf       	rjmp	.-2      	; 0x3cf2 <__stop_program>
