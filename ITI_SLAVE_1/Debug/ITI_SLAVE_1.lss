
ITI_SLAVE_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d6  00800060  000051ae  00005242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800436  00800436  00005618  2**0
                  ALLOC
  3 .stab         000061c8  00000000  00000000  00005618  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021cd  00000000  00000000  0000b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000db4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000dd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00010149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000114c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012698  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00012858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00012b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__vector_1>
       8:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__vector_2>
       c:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__vector_10>
      2c:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 35       	cpi	r26, 0x51	; 81
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <main>
      8a:	0c 94 d5 28 	jmp	0x51aa	; 0x51aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 28 	jmp	0x513c	; 0x513c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 28 	jmp	0x513c	; 0x513c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 28 	jmp	0x514c	; 0x514c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ef       	ldi	r22, 0xFD	; 253
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 aa 28 	jmp	0x5154	; 0x5154 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ae 28 	jmp	0x515c	; 0x515c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	eb 5f       	subi	r30, 0xFB	; 251
     a94:	fc 4f       	sbci	r31, 0xFC	; 252
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TMU_CreateTask>:
static TCB_t Tasks_Arr[TMU_Tasks_Num] =
{
{ NULL } };

void TMU_CreateTask(void (*Copy_ptr_Func), u16 Copy_Periodicity,u8 Copy_Priority)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <TMU_CreateTask+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <TMU_CreateTask+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	7c 83       	std	Y+4, r23	; 0x04
     e0c:	6b 83       	std	Y+3, r22	; 0x03
     e0e:	4d 83       	std	Y+5, r20	; 0x05
	if (Tasks_Arr[Copy_Priority].Pftask == NULL)
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	c9 01       	movw	r24, r18
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	fc 01       	movw	r30, r24
     e26:	ea 5c       	subi	r30, 0xCA	; 202
     e28:	fb 4f       	sbci	r31, 0xFB	; 251
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	81 f5       	brne	.+96     	; 0xe92 <TMU_CreateTask+0x9a>
	{
		Tasks_Arr[Copy_Priority].Pftask = Copy_ptr_Func;
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	49 81       	ldd	r20, Y+1	; 0x01
     e3a:	5a 81       	ldd	r21, Y+2	; 0x02
     e3c:	c9 01       	movw	r24, r18
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	fc 01       	movw	r30, r24
     e4c:	ea 5c       	subi	r30, 0xCA	; 202
     e4e:	fb 4f       	sbci	r31, 0xFB	; 251
     e50:	51 83       	std	Z+1, r21	; 0x01
     e52:	40 83       	st	Z, r20
		Tasks_Arr[Copy_Priority].Periodicity = Copy_Periodicity;
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	c9 01       	movw	r24, r18
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e8 5c       	subi	r30, 0xC8	; 200
     e6c:	fb 4f       	sbci	r31, 0xFB	; 251
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
		Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	82 0f       	add	r24, r18
     e88:	93 1f       	adc	r25, r19
     e8a:	fc 01       	movw	r30, r24
     e8c:	e6 5c       	subi	r30, 0xC6	; 198
     e8e:	fb 4f       	sbci	r31, 0xFB	; 251
     e90:	10 82       	st	Z, r1
		
	}
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <TMU_Delete_Task>:

void TMU_Delete_Task(u8 Copy_Priority)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Pftask = NULL;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	c9 01       	movw	r24, r18
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	fc 01       	movw	r30, r24
     ec4:	ea 5c       	subi	r30, 0xCA	; 202
     ec6:	fb 4f       	sbci	r31, 0xFB	; 251
     ec8:	11 82       	std	Z+1, r1	; 0x01
     eca:	10 82       	st	Z, r1
}
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <TMU_Suspend_Task>:

void TMU_Suspend_Task(u8 Copy_Priority)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Suspended;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	c9 01       	movw	r24, r18
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	fc 01       	movw	r30, r24
     ef6:	e6 5c       	subi	r30, 0xC6	; 198
     ef8:	fb 4f       	sbci	r31, 0xFB	; 251
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 83       	st	Z, r24
}
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TMU_Resume_Task>:

void TMU_Resume_Task(u8 Copy_Priority)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	c9 01       	movw	r24, r18
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	fc 01       	movw	r30, r24
     f28:	e6 5c       	subi	r30, 0xC6	; 198
     f2a:	fb 4f       	sbci	r31, 0xFB	; 251
     f2c:	10 82       	st	Z, r1
}
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <TMU_Start_Scheduler>:

void TMU_Start_Scheduler(void)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	27 97       	sbiw	r28, 0x07	; 7
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
			.GPT_Timer = GPT_Timer0, 
			.GPT_WG_Mode = GPT_CTC,
			.GPT_Prescaler = GPT_Prescaler_64 ,
			.GPT_COM_Value = 125, 
			.GPT_OVF_CBF = Scheduler
		};
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	fe 01       	movw	r30, r28
     f4e:	31 96       	adiw	r30, 0x01	; 1
     f50:	df 01       	movw	r26, r30
     f52:	98 2f       	mov	r25, r24
     f54:	1d 92       	st	X+, r1
     f56:	9a 95       	dec	r25
     f58:	e9 f7       	brne	.-6      	; 0xf54 <TMU_Start_Scheduler+0x1e>
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	8d e7       	ldi	r24, 0x7D	; 125
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	86 ec       	ldi	r24, 0xC6	; 198
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	9f 83       	std	Y+7, r25	; 0x07
     f6c:	8e 83       	std	Y+6, r24	; 0x06
		
	  GPT_Init(&Timer0);
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 76 15 	call	0x2aec	; 0x2aec <GPT_Init>


	G_INT_Enable();
     f76:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <G_INT_Enable>
}
     f7a:	27 96       	adiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <Scheduler>:

void Scheduler(void)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Counter = 0;
     f96:	19 82       	std	Y+1, r1	; 0x01
	static u16 Local_Index = 0;
	Local_Index++;
     f98:	80 91 45 04 	lds	r24, 0x0445
     f9c:	90 91 46 04 	lds	r25, 0x0446
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	90 93 46 04 	sts	0x0446, r25
     fa6:	80 93 45 04 	sts	0x0445, r24

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	4e c0       	rjmp	.+156    	; 0x104a <Scheduler+0xbe>
	{

		if (Tasks_Arr[Local_Counter].Pftask != NULL)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	fc 01       	movw	r30, r24
     fc4:	ea 5c       	subi	r30, 0xCA	; 202
     fc6:	fb 4f       	sbci	r31, 0xFB	; 251
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	d1 f1       	breq	.+116    	; 0x1044 <Scheduler+0xb8>
		{
			if (Tasks_Arr[Local_Counter].Task_State == Task_Resumed)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	c9 01       	movw	r24, r18
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	fc 01       	movw	r30, r24
     fe6:	e6 5c       	subi	r30, 0xC6	; 198
     fe8:	fb 4f       	sbci	r31, 0xFB	; 251
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	51 f5       	brne	.+84     	; 0x1044 <Scheduler+0xb8>
			{	
				if (Local_Index % Tasks_Arr[Local_Counter].Periodicity == 0)
     ff0:	40 91 45 04 	lds	r20, 0x0445
     ff4:	50 91 46 04 	lds	r21, 0x0446
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	c9 01       	movw	r24, r18
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	fc 01       	movw	r30, r24
    100e:	e8 5c       	subi	r30, 0xC8	; 200
    1010:	fb 4f       	sbci	r31, 0xFB	; 251
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	ca 01       	movw	r24, r20
    1018:	b9 01       	movw	r22, r18
    101a:	0e 94 4d 28 	call	0x509a	; 0x509a <__udivmodhi4>
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	89 f4       	brne	.+34     	; 0x1044 <Scheduler+0xb8>
				{
					Tasks_Arr[Local_Counter].Pftask();
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	c9 01       	movw	r24, r18
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	fc 01       	movw	r30, r24
    1038:	ea 5c       	subi	r30, 0xCA	; 202
    103a:	fb 4f       	sbci	r31, 0xFB	; 251
    103c:	01 90       	ld	r0, Z+
    103e:	f0 81       	ld	r31, Z
    1040:	e0 2d       	mov	r30, r0
    1042:	09 95       	icall
{
	u8 Local_Counter = 0;
	static u16 Local_Index = 0;
	Local_Index++;

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	08 f4       	brcc	.+2      	; 0x1052 <Scheduler+0xc6>
    1050:	ae cf       	rjmp	.-164    	; 0xfae <Scheduler+0x22>
					Tasks_Arr[Local_Counter].Pftask();
				}
		}
	}
}
}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <InteractiveLCD>:
#include"../HAL/LM35/LM35_Interface.h"

u8 Act_temp;
u8 Temp;
void InteractiveLCD()
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	ed 97       	sbiw	r28, 0x3d	; 61
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
	u8 temp;
	u8 PIN_Start = 1;  //BUTTON TO INIT LCD
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	8d a7       	std	Y+45, r24	; 0x2d
			.KP_Row2_PORT = DIO_u8PORTA, .KP_Row3_PORT = DIO_u8PORTA,
			.KP_Row4_PORT = DIO_u8PORTA, .KP_Colum1_PIN = DIO_u8PIN2,
			.KP_Colum2_PIN = DIO_u8PIN4, .KP_Colum3_PIN = DIO_u8PIN5,
			.KP_Row1_PIN =
			DIO_u8PIN7, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
			.KP_Row4_PIN = DIO_u8PIN7 };
    1072:	80 e1       	ldi	r24, 0x10	; 16
    1074:	fe 01       	movw	r30, r28
    1076:	be 96       	adiw	r30, 0x2e	; 46
    1078:	df 01       	movw	r26, r30
    107a:	98 2f       	mov	r25, r24
    107c:	1d 92       	st	X+, r1
    107e:	9a 95       	dec	r25
    1080:	e9 f7       	brne	.-6      	; 0x107c <InteractiveLCD+0x22>
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	8e a7       	std	Y+46, r24	; 0x2e
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	8f a7       	std	Y+47, r24	; 0x2f
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	88 ab       	std	Y+48, r24	; 0x30
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	8a ab       	std	Y+50, r24	; 0x32
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	8e ab       	std	Y+54, r24	; 0x36
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	8f ab       	std	Y+55, r24	; 0x37
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	88 af       	std	Y+56, r24	; 0x38
    109e:	87 e0       	ldi	r24, 0x07	; 7
    10a0:	8a af       	std	Y+58, r24	; 0x3a
    10a2:	85 e0       	ldi	r24, 0x05	; 5
    10a4:	8b af       	std	Y+59, r24	; 0x3b
    10a6:	86 e0       	ldi	r24, 0x06	; 6
    10a8:	8c af       	std	Y+60, r24	; 0x3c
    10aa:	87 e0       	ldi	r24, 0x07	; 7
    10ac:	8d af       	std	Y+61, r24	; 0x3d

	//KEYPAD TO INTERATC WITH THE LCD

	Init_KP(&KP1);
    10ae:	ce 01       	movw	r24, r28
    10b0:	8e 96       	adiw	r24, 0x2e	; 46
    10b2:	0e 94 34 25 	call	0x4a68	; 0x4a68 <Init_KP>
	DIO_VoidGetPinValue(DIO_u8PORTD, DIO_u8PIN6, &PIN_Start);
    10b6:	9e 01       	movw	r18, r28
    10b8:	23 5d       	subi	r18, 0xD3	; 211
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	66 e0       	ldi	r22, 0x06	; 6
    10c0:	a9 01       	movw	r20, r18
    10c2:	0e 94 21 19 	call	0x3242	; 0x3242 <DIO_VoidGetPinValue>

	if (PIN_Start == 0) // PRESS THE BUTTON INITIALIZE THE LCD
    10c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    10c8:	88 23       	and	r24, r24
    10ca:	09 f0       	breq	.+2      	; 0x10ce <InteractiveLCD+0x74>
    10cc:	8a c2       	rjmp	.+1300   	; 0x15e2 <InteractiveLCD+0x588>
	{
		//INTERACTIVE LCD

		LCD_GoToWriteString(0, 6, "WELCOME!"); //GOTO -> (CHANGE POSITION ON LCD)
    10ce:	20 e6       	ldi	r18, 0x60	; 96
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	66 e0       	ldi	r22, 0x06	; 6
    10d6:	a9 01       	movw	r20, r18
    10d8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
		LCD_GoToWriteString(2, 0, "FOR SETTING ENTER'#'");
    10dc:	29 e6       	ldi	r18, 0x69	; 105
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
		LCD_GoToWriteString(3, 0, "TEMPERATURE IS:");
    10ea:	2e e7       	ldi	r18, 0x7E	; 126
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
		LM35_voidReadValue(DIO_u8PIN0, &Temp);                 //READ LM35 VALUE
    10f8:	20 e5       	ldi	r18, 0x50	; 80
    10fa:	34 e0       	ldi	r19, 0x04	; 4
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	b9 01       	movw	r22, r18
    1100:	0e 94 3f 1a 	call	0x347e	; 0x347e <LM35_voidReadValue>

		LCD_GoToWriteNumber(3, 15, Temp); //SHOW ACTUAL TEMPERATUREE FROM LM35
    1104:	90 91 50 04 	lds	r25, 0x0450
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	6f e0       	ldi	r22, 0x0F	; 15
    110c:	49 2f       	mov	r20, r25
    110e:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
		LCD_GoToWriteString(3, 17, "C");
    1112:	2e e8       	ldi	r18, 0x8E	; 142
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	61 e1       	ldi	r22, 0x11	; 17
    111a:	a9 01       	movw	r20, r18
    111c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>

		u8 key_pressed = 0xFF;
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	8b a7       	std	Y+43, r24	; 0x2b
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <InteractiveLCD+0xd6>
		while (key_pressed == 0xFF)
		{
			key_pressed = Read_KP(&KP1);
    1126:	ce 01       	movw	r24, r28
    1128:	8e 96       	adiw	r24, 0x2e	; 46
    112a:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    112e:	8b a7       	std	Y+43, r24	; 0x2b

		LCD_GoToWriteNumber(3, 15, Temp); //SHOW ACTUAL TEMPERATUREE FROM LM35
		LCD_GoToWriteString(3, 17, "C");

		u8 key_pressed = 0xFF;
		while (key_pressed == 0xFF)
    1130:	8b a5       	ldd	r24, Y+43	; 0x2b
    1132:	8f 3f       	cpi	r24, 0xFF	; 255
    1134:	c1 f3       	breq	.-16     	; 0x1126 <InteractiveLCD+0xcc>
		{
			key_pressed = Read_KP(&KP1);
		}

		if (key_pressed == '#')
    1136:	8b a5       	ldd	r24, Y+43	; 0x2b
    1138:	83 32       	cpi	r24, 0x23	; 35
    113a:	09 f0       	breq	.+2      	; 0x113e <InteractiveLCD+0xe4>
    113c:	52 c2       	rjmp	.+1188   	; 0x15e2 <InteractiveLCD+0x588>
		{
			LCD_ClearDisplay();
    113e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>

			LCD_GoToWriteString(0, 0, "SETTING:");
    1142:	20 e9       	ldi	r18, 0x90	; 144
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(1, 0, "1-SECURITY");
    1150:	29 e9       	ldi	r18, 0x99	; 153
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(2, 0, "2-SERVICES");
    115e:	24 ea       	ldi	r18, 0xA4	; 164
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(3, 0, "3-CLOSE LCD");
    116c:	2f ea       	ldi	r18, 0xAF	; 175
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			while (1)
			{
				key_pressed = 0xFF;
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	8b a7       	std	Y+43, r24	; 0x2b
    117e:	05 c0       	rjmp	.+10     	; 0x118a <InteractiveLCD+0x130>
				while (key_pressed == 0xFF)
				{
					key_pressed = Read_KP(&KP1);
    1180:	ce 01       	movw	r24, r28
    1182:	8e 96       	adiw	r24, 0x2e	; 46
    1184:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1188:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_GoToWriteString(2, 0, "2-SERVICES");
			LCD_GoToWriteString(3, 0, "3-CLOSE LCD");
			while (1)
			{
				key_pressed = 0xFF;
				while (key_pressed == 0xFF)
    118a:	8b a5       	ldd	r24, Y+43	; 0x2b
    118c:	8f 3f       	cpi	r24, 0xFF	; 255
    118e:	c1 f3       	breq	.-16     	; 0x1180 <InteractiveLCD+0x126>
				{
					key_pressed = Read_KP(&KP1);
				}
				if (key_pressed == 1) //SECURITY
    1190:	8b a5       	ldd	r24, Y+43	; 0x2b
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	09 f0       	breq	.+2      	; 0x1198 <InteractiveLCD+0x13e>
    1196:	40 c0       	rjmp	.+128    	; 0x1218 <InteractiveLCD+0x1be>
				{
					LCD_GoToWriteString(0, 0, "SECURITY");
    1198:	2b eb       	ldi	r18, 0xBB	; 187
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	a9 01       	movw	r20, r18
    11a2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "1-CHANGE PASSWORD");
    11a6:	24 ec       	ldi	r18, 0xC4	; 196
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(2, 0, "2-ADD EMERGENCY NUM");
    11b4:	26 ed       	ldi	r18, 0xD6	; 214
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(3, 0, "3-ADD PHONE NUM");
    11c2:	2a ee       	ldi	r18, 0xEA	; 234
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>

					while (1)
					{
						key_pressed = 0xFF;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	8b a7       	std	Y+43, r24	; 0x2b
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <InteractiveLCD+0x186>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    11d6:	ce 01       	movw	r24, r28
    11d8:	8e 96       	adiw	r24, 0x2e	; 46
    11da:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    11de:	8b a7       	std	Y+43, r24	; 0x2b
					LCD_GoToWriteString(3, 0, "3-ADD PHONE NUM");

					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    11e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e2:	8f 3f       	cpi	r24, 0xFF	; 255
    11e4:	c1 f3       	breq	.-16     	; 0x11d6 <InteractiveLCD+0x17c>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) // Change Password
    11e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <InteractiveLCD+0x19c>
						{
							LCD_ClearDisplay();
    11ec:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
							Change_Pass();
    11f0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Change_Pass>
    11f4:	f6 c1       	rjmp	.+1004   	; 0x15e2 <InteractiveLCD+0x588>

						}
						else if (key_pressed == 2) //ADD EMERGENCY NUMBER
    11f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	29 f4       	brne	.+10     	; 0x1206 <InteractiveLCD+0x1ac>
						{
							LCD_ClearDisplay();
    11fc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
							Add_Emergn_NUM();
    1200:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <Add_Emergn_NUM>
    1204:	ee c1       	rjmp	.+988    	; 0x15e2 <InteractiveLCD+0x588>

						}
						else if (key_pressed == 3) //ADD PHONE NUMBER
    1206:	8b a5       	ldd	r24, Y+43	; 0x2b
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	09 f0       	breq	.+2      	; 0x120e <InteractiveLCD+0x1b4>
    120c:	ea c1       	rjmp	.+980    	; 0x15e2 <InteractiveLCD+0x588>
						{
							LCD_ClearDisplay();
    120e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
							Add_Phone_NUM();
    1212:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <Add_Phone_NUM>
    1216:	e5 c1       	rjmp	.+970    	; 0x15e2 <InteractiveLCD+0x588>

						break;
					}

				}
				else if (key_pressed == 2) //  
    1218:	8b a5       	ldd	r24, Y+43	; 0x2b
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	09 f0       	breq	.+2      	; 0x1220 <InteractiveLCD+0x1c6>
    121e:	e1 c1       	rjmp	.+962    	; 0x15e2 <InteractiveLCD+0x588>
				{
					LCD_GoToWriteString(0, 0, "SERVICES");
    1220:	2a ef       	ldi	r18, 0xFA	; 250
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "1-SET TEMPERATURE"); //1-4
    122e:	23 e0       	ldi	r18, 0x03	; 3
    1230:	31 e0       	ldi	r19, 0x01	; 1
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(2, 0, "2-TURN DEVICE ON/OFF"); //2-6
    123c:	25 e1       	ldi	r18, 0x15	; 21
    123e:	31 e0       	ldi	r19, 0x01	; 1
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	a9 01       	movw	r20, r18
    1246:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(3, 0,
    124a:	2a e2       	ldi	r18, 0x2A	; 42
    124c:	31 e0       	ldi	r19, 0x01	; 1
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	a9 01       	movw	r20, r18
    1254:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
							"3-MORE..                        ");

					while (1)
					{
						key_pressed = 0xFF;
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	8b a7       	std	Y+43, r24	; 0x2b
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <InteractiveLCD+0x20e>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    125e:	ce 01       	movw	r24, r28
    1260:	8e 96       	adiw	r24, 0x2e	; 46
    1262:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1266:	8b a7       	std	Y+43, r24	; 0x2b
							"3-MORE..                        ");

					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    1268:	8b a5       	ldd	r24, Y+43	; 0x2b
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	c1 f3       	breq	.-16     	; 0x125e <InteractiveLCD+0x204>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1)  //SET TEMP
    126e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	39 f4       	brne	.+14     	; 0x1282 <InteractiveLCD+0x228>
						{

							LCD_ClearDisplay();
    1274:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
							Set_Temp(&Act_temp);
    1278:	87 e4       	ldi	r24, 0x47	; 71
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <Set_Temp>
    1280:	b0 c1       	rjmp	.+864    	; 0x15e2 <InteractiveLCD+0x588>
						}
						else if (key_pressed == 2)  //TURN DEVICE ON/OFF
    1282:	8b a5       	ldd	r24, Y+43	; 0x2b
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	19 f4       	brne	.+6      	; 0x128e <InteractiveLCD+0x234>
						{

							SET_DEVICE();
    1288:	0e 94 73 10 	call	0x20e6	; 0x20e6 <SET_DEVICE>
    128c:	aa c1       	rjmp	.+852    	; 0x15e2 <InteractiveLCD+0x588>

						}
						else if (key_pressed == 3) //MORE..
    128e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	09 f0       	breq	.+2      	; 0x1296 <InteractiveLCD+0x23c>
    1294:	a6 c1       	rjmp	.+844    	; 0x15e2 <InteractiveLCD+0x588>
						{

							LCD_GoToWriteString(1, 0, "4-RATE US 0 TO 5 :)    ");
    1296:	2b e4       	ldi	r18, 0x4B	; 75
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
							LCD_GoToWriteString(2, 0, "5-ELECTRICITY MANAGE");
    12a4:	23 e6       	ldi	r18, 0x63	; 99
    12a6:	31 e0       	ldi	r19, 0x01	; 1
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	a9 01       	movw	r20, r18
    12ae:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
							LCD_GoToWriteString(3, 0, "6-SET TIME");
    12b2:	28 e7       	ldi	r18, 0x78	; 120
    12b4:	31 e0       	ldi	r19, 0x01	; 1
    12b6:	83 e0       	ldi	r24, 0x03	; 3
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>

							while (1)
							{
								key_pressed = 0xFF;
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	8b a7       	std	Y+43, r24	; 0x2b
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <InteractiveLCD+0x276>
								while (key_pressed == 0xFF)
								{
									key_pressed = Read_KP(&KP1);
    12c6:	ce 01       	movw	r24, r28
    12c8:	8e 96       	adiw	r24, 0x2e	; 46
    12ca:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    12ce:	8b a7       	std	Y+43, r24	; 0x2b
							LCD_GoToWriteString(3, 0, "6-SET TIME");

							while (1)
							{
								key_pressed = 0xFF;
								while (key_pressed == 0xFF)
    12d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d2:	8f 3f       	cpi	r24, 0xFF	; 255
    12d4:	c1 f3       	breq	.-16     	; 0x12c6 <InteractiveLCD+0x26c>
								{
									key_pressed = Read_KP(&KP1);
								}
								if (key_pressed == 4) //RATE
    12d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	09 f0       	breq	.+2      	; 0x12de <InteractiveLCD+0x284>
    12dc:	89 c0       	rjmp	.+274    	; 0x13f0 <InteractiveLCD+0x396>
								{
									LCD_ClearDisplay();
    12de:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
									LCD_WriteString("RATE:");
    12e2:	83 e8       	ldi	r24, 0x83	; 131
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	0e 94 1d 20 	call	0x403a	; 0x403a <LCD_WriteString>
									key_pressed = 0xFF;
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	8b a7       	std	Y+43, r24	; 0x2b
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <InteractiveLCD+0x2a0>
									while (key_pressed == 0xFF)
									{
										key_pressed = Read_KP(&KP1);
    12f0:	ce 01       	movw	r24, r28
    12f2:	8e 96       	adiw	r24, 0x2e	; 46
    12f4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    12f8:	8b a7       	std	Y+43, r24	; 0x2b
								if (key_pressed == 4) //RATE
								{
									LCD_ClearDisplay();
									LCD_WriteString("RATE:");
									key_pressed = 0xFF;
									while (key_pressed == 0xFF)
    12fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fc:	8f 3f       	cpi	r24, 0xFF	; 255
    12fe:	c1 f3       	breq	.-16     	; 0x12f0 <InteractiveLCD+0x296>
									{
										key_pressed = Read_KP(&KP1);
									}
									LCD_GoToWriteNumber(1,0,key_pressed);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	4b a5       	ldd	r20, Y+43	; 0x2b
    1306:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a8 ec       	ldi	r26, 0xC8	; 200
    1310:	b2 e4       	ldi	r27, 0x42	; 66
    1312:	8f a3       	std	Y+39, r24	; 0x27
    1314:	98 a7       	std	Y+40, r25	; 0x28
    1316:	a9 a7       	std	Y+41, r26	; 0x29
    1318:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	6f a1       	ldd	r22, Y+39	; 0x27
    131c:	78 a5       	ldd	r23, Y+40	; 0x28
    131e:	89 a5       	ldd	r24, Y+41	; 0x29
    1320:	9a a5       	ldd	r25, Y+42	; 0x2a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a ef       	ldi	r20, 0xFA	; 250
    1328:	54 e4       	ldi	r21, 0x44	; 68
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8b a3       	std	Y+35, r24	; 0x23
    1334:	9c a3       	std	Y+36, r25	; 0x24
    1336:	ad a3       	std	Y+37, r26	; 0x25
    1338:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    133a:	6b a1       	ldd	r22, Y+35	; 0x23
    133c:	7c a1       	ldd	r23, Y+36	; 0x24
    133e:	8d a1       	ldd	r24, Y+37	; 0x25
    1340:	9e a1       	ldd	r25, Y+38	; 0x26
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <InteractiveLCD+0x302>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9a a3       	std	Y+34, r25	; 0x22
    1358:	89 a3       	std	Y+33, r24	; 0x21
    135a:	3f c0       	rjmp	.+126    	; 0x13da <InteractiveLCD+0x380>
	else if (__tmp > 65535)
    135c:	6b a1       	ldd	r22, Y+35	; 0x23
    135e:	7c a1       	ldd	r23, Y+36	; 0x24
    1360:	8d a1       	ldd	r24, Y+37	; 0x25
    1362:	9e a1       	ldd	r25, Y+38	; 0x26
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <InteractiveLCD+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	6f a1       	ldd	r22, Y+39	; 0x27
    1376:	78 a5       	ldd	r23, Y+40	; 0x28
    1378:	89 a5       	ldd	r24, Y+41	; 0x29
    137a:	9a a5       	ldd	r25, Y+42	; 0x2a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <InteractiveLCD+0x362>
    139e:	88 ec       	ldi	r24, 0xC8	; 200
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	98 a3       	std	Y+32, r25	; 0x20
    13a4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a8:	98 a1       	ldd	r25, Y+32	; 0x20
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <InteractiveLCD+0x350>
    13ae:	98 a3       	std	Y+32, r25	; 0x20
    13b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	89 a1       	ldd	r24, Y+33	; 0x21
    13b4:	9a a1       	ldd	r25, Y+34	; 0x22
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9a a3       	std	Y+34, r25	; 0x22
    13ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	89 a1       	ldd	r24, Y+33	; 0x21
    13be:	9a a1       	ldd	r25, Y+34	; 0x22
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <InteractiveLCD+0x344>
    13c4:	0e c1       	rjmp	.+540    	; 0x15e2 <InteractiveLCD+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	6b a1       	ldd	r22, Y+35	; 0x23
    13c8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ca:	8d a1       	ldd	r24, Y+37	; 0x25
    13cc:	9e a1       	ldd	r25, Y+38	; 0x26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9a a3       	std	Y+34, r25	; 0x22
    13d8:	89 a3       	std	Y+33, r24	; 0x21
    13da:	89 a1       	ldd	r24, Y+33	; 0x21
    13dc:	9a a1       	ldd	r25, Y+34	; 0x22
    13de:	9e 8f       	std	Y+30, r25	; 0x1e
    13e0:	8d 8f       	std	Y+29, r24	; 0x1d
    13e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <InteractiveLCD+0x38c>
    13ea:	9e 8f       	std	Y+30, r25	; 0x1e
    13ec:	8d 8f       	std	Y+29, r24	; 0x1d
    13ee:	f9 c0       	rjmp	.+498    	; 0x15e2 <InteractiveLCD+0x588>
									_delay_ms(100);

								}
								else if (key_pressed == 5) //ELECTRICITY MANAGING
    13f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13f2:	85 30       	cpi	r24, 0x05	; 5
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <InteractiveLCD+0x39e>
    13f6:	79 c0       	rjmp	.+242    	; 0x14ea <InteractiveLCD+0x490>
								{
									LCD_ClearDisplay();
    13f8:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
									LCD_WriteString("SHA5LEL 3SHAN T3ADY :)");
    13fc:	89 e8       	ldi	r24, 0x89	; 137
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 1d 20 	call	0x403a	; 0x403a <LCD_WriteString>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a8 ec       	ldi	r26, 0xC8	; 200
    140a:	b2 e4       	ldi	r27, 0x42	; 66
    140c:	89 8f       	std	Y+25, r24	; 0x19
    140e:	9a 8f       	std	Y+26, r25	; 0x1a
    1410:	ab 8f       	std	Y+27, r26	; 0x1b
    1412:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	69 8d       	ldd	r22, Y+25	; 0x19
    1416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a ef       	ldi	r20, 0xFA	; 250
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8d 8b       	std	Y+21, r24	; 0x15
    142e:	9e 8b       	std	Y+22, r25	; 0x16
    1430:	af 8b       	std	Y+23, r26	; 0x17
    1432:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1434:	6d 89       	ldd	r22, Y+21	; 0x15
    1436:	7e 89       	ldd	r23, Y+22	; 0x16
    1438:	8f 89       	ldd	r24, Y+23	; 0x17
    143a:	98 8d       	ldd	r25, Y+24	; 0x18
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <InteractiveLCD+0x3fc>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <InteractiveLCD+0x47a>
	else if (__tmp > 65535)
    1456:	6d 89       	ldd	r22, Y+21	; 0x15
    1458:	7e 89       	ldd	r23, Y+22	; 0x16
    145a:	8f 89       	ldd	r24, Y+23	; 0x17
    145c:	98 8d       	ldd	r25, Y+24	; 0x18
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <InteractiveLCD+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	69 8d       	ldd	r22, Y+25	; 0x19
    1470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <InteractiveLCD+0x45c>
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9a 8b       	std	Y+18, r25	; 0x12
    149e:	89 8b       	std	Y+17, r24	; 0x11
    14a0:	89 89       	ldd	r24, Y+17	; 0x11
    14a2:	9a 89       	ldd	r25, Y+18	; 0x12
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <InteractiveLCD+0x44a>
    14a8:	9a 8b       	std	Y+18, r25	; 0x12
    14aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	9c 89       	ldd	r25, Y+20	; 0x14
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9c 8b       	std	Y+20, r25	; 0x14
    14b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8b 89       	ldd	r24, Y+19	; 0x13
    14b8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <InteractiveLCD+0x43e>
    14be:	91 c0       	rjmp	.+290    	; 0x15e2 <InteractiveLCD+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6d 89       	ldd	r22, Y+21	; 0x15
    14c2:	7e 89       	ldd	r23, Y+22	; 0x16
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	98 8d       	ldd	r25, Y+24	; 0x18
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	8f 87       	std	Y+15, r24	; 0x0f
    14dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14de:	98 89       	ldd	r25, Y+16	; 0x10
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <InteractiveLCD+0x486>
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	8f 87       	std	Y+15, r24	; 0x0f
    14e8:	7c c0       	rjmp	.+248    	; 0x15e2 <InteractiveLCD+0x588>
									_delay_ms(100);
								}
								else if (key_pressed == 6) //SET CLOCK
    14ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ec:	86 30       	cpi	r24, 0x06	; 6
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <InteractiveLCD+0x498>
    14f0:	78 c0       	rjmp	.+240    	; 0x15e2 <InteractiveLCD+0x588>
								{
									LCD_ClearDisplay();
    14f2:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
									LCD_WriteString("SET TIME ON CLOCK");
    14f6:	80 ea       	ldi	r24, 0xA0	; 160
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 1d 20 	call	0x403a	; 0x403a <LCD_WriteString>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a8 ec       	ldi	r26, 0xC8	; 200
    1504:	b2 e4       	ldi	r27, 0x42	; 66
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a ef       	ldi	r20, 0xFA	; 250
    151c:	54 e4       	ldi	r21, 0x44	; 68
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8f 83       	std	Y+7, r24	; 0x07
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	a9 87       	std	Y+9, r26	; 0x09
    152c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <InteractiveLCD+0x4f6>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <InteractiveLCD+0x574>
	else if (__tmp > 65535)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <InteractiveLCD+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <InteractiveLCD+0x556>
    1592:	88 ec       	ldi	r24, 0xC8	; 200
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <InteractiveLCD+0x544>
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <InteractiveLCD+0x538>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <InteractiveLCD+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <InteractiveLCD+0x580>
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}

}
    15e2:	ed 96       	adiw	r28, 0x3d	; 61
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <arrayToNum>:
#include"../MCAL/DIO/DIO_Interface.h"
#include"../HAL/LCD/LCD_interface.h"
#include <util/delay.h>

u16 arrayToNum(u16* arr, u16 length)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <arrayToNum+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <arrayToNum+0x8>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <arrayToNum+0xa>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	7e 83       	std	Y+6, r23	; 0x06
    1608:	6d 83       	std	Y+5, r22	; 0x05
	u8 num = 0; //u16
    160a:	1a 82       	std	Y+2, r1	; 0x02
	for (u8 i = 0; i < length; i++)
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	20 c0       	rjmp	.+64     	; 0x1650 <arrayToNum+0x5c>
	{
		num = num * 10 + arr[i];
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9c 01       	movw	r18, r24
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	c9 01       	movw	r24, r18
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	48 2f       	mov	r20, r24
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 01       	movw	r18, r24
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	fc 01       	movw	r30, r24
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	84 0f       	add	r24, r20
    1648:	8a 83       	std	Y+2, r24	; 0x02
#include <util/delay.h>

u16 arrayToNum(u16* arr, u16 length)
{
	u8 num = 0; //u16
	for (u8 i = 0; i < length; i++)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	c0 f2       	brcs	.-80     	; 0x1610 <arrayToNum+0x1c>
	{
		num = num * 10 + arr[i];
	}
	return num;
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
}
    1666:	26 96       	adiw	r28, 0x06	; 6
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <Change_Pass>:

void Change_Pass()
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	6d 97       	sbiw	r28, 0x1d	; 29
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
	u16 Pass;
	LCD_Init();
    168c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <LCD_Init>
			.KP_Row3_PORT = DIO_u8PORTA, .KP_Row4_PORT = DIO_u8PORTA,
			.KP_Colum1_PIN = DIO_u8PIN2, .KP_Colum2_PIN = DIO_u8PIN4,
			.KP_Colum3_PIN = DIO_u8PIN5,
			.KP_Row1_PIN =
			DIO_u8PIN7, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
			.KP_Row4_PIN = DIO_u8PIN7 };
    1690:	80 e1       	ldi	r24, 0x10	; 16
    1692:	fe 01       	movw	r30, r28
    1694:	39 96       	adiw	r30, 0x09	; 9
    1696:	df 01       	movw	r26, r30
    1698:	98 2f       	mov	r25, r24
    169a:	1d 92       	st	X+, r1
    169c:	9a 95       	dec	r25
    169e:	e9 f7       	brne	.-6      	; 0x169a <Change_Pass+0x22>
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	89 87       	std	Y+9, r24	; 0x09
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	8a 87       	std	Y+10, r24	; 0x0a
    16a8:	83 e0       	ldi	r24, 0x03	; 3
    16aa:	8b 87       	std	Y+11, r24	; 0x0b
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	8d 87       	std	Y+13, r24	; 0x0d
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	89 8b       	std	Y+17, r24	; 0x11
    16b4:	84 e0       	ldi	r24, 0x04	; 4
    16b6:	8a 8b       	std	Y+18, r24	; 0x12
    16b8:	85 e0       	ldi	r24, 0x05	; 5
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
    16bc:	87 e0       	ldi	r24, 0x07	; 7
    16be:	8d 8b       	std	Y+21, r24	; 0x15
    16c0:	85 e0       	ldi	r24, 0x05	; 5
    16c2:	8e 8b       	std	Y+22, r24	; 0x16
    16c4:	86 e0       	ldi	r24, 0x06	; 6
    16c6:	8f 8b       	std	Y+23, r24	; 0x17
    16c8:	87 e0       	ldi	r24, 0x07	; 7
    16ca:	88 8f       	std	Y+24, r24	; 0x18
	u16 num;
	u8 Flag = 0, i;
    16cc:	1c 82       	std	Y+4, r1	; 0x04
	u8 MultiArr[4] = //u16
			{ 1000, 100, 10, 1 };
    16ce:	88 ee       	ldi	r24, 0xE8	; 232
    16d0:	89 8f       	std	Y+25, r24	; 0x19
    16d2:	84 e6       	ldi	r24, 0x64	; 100
    16d4:	8a 8f       	std	Y+26, r24	; 0x1a
    16d6:	8a e0       	ldi	r24, 0x0A	; 10
    16d8:	8b 8f       	std	Y+27, r24	; 0x1b
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	8c 8f       	std	Y+28, r24	; 0x1c
	Init_KP(&KP1);
    16de:	ce 01       	movw	r24, r28
    16e0:	09 96       	adiw	r24, 0x09	; 9
    16e2:	0e 94 34 25 	call	0x4a68	; 0x4a68 <Init_KP>
	LCD_GoToWriteString(1, 0, "Change Password:");
    16e6:	22 eb       	ldi	r18, 0xB2	; 178
    16e8:	31 e0       	ldi	r19, 0x01	; 1
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
    16f4:	20 c0       	rjmp	.+64     	; 0x1736 <Change_Pass+0xbe>

	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <Change_Pass+0x8e>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    16fc:	ce 01       	movw	r24, r28
    16fe:	09 96       	adiw	r24, 0x09	; 9
    1700:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1704:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoToWriteString(1, 0, "Change Password:");

	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	8f 3f       	cpi	r24, 0xFF	; 255
    170a:	c1 f3       	breq	.-16     	; 0x16fc <Change_Pass+0x84>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag] = key_pressed;
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	ce 01       	movw	r24, r28
    1714:	49 96       	adiw	r24, 0x19	; 25
    1716:	fc 01       	movw	r30, r24
    1718:	e2 0f       	add	r30, r18
    171a:	f3 1f       	adc	r31, r19
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	80 83       	st	Z, r24
		num = arrayToNum(MultiArr, 4);
    1720:	ce 01       	movw	r24, r28
    1722:	49 96       	adiw	r24, 0x19	; 25
    1724:	64 e0       	ldi	r22, 0x04	; 4
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <arrayToNum>
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05

		Flag++;
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	8c 83       	std	Y+4, r24	; 0x04
	u8 MultiArr[4] = //u16
			{ 1000, 100, 10, 1 };
	Init_KP(&KP1);
	LCD_GoToWriteString(1, 0, "Change Password:");

	while (Flag < 4) //loop till the user finish inserting the pass
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	e8 f2       	brcs	.-70     	; 0x16f6 <Change_Pass+0x7e>
		num = arrayToNum(MultiArr, 4);

		Flag++;

	} //
	LCD_ClearDisplay();
    173c:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
	Pass = num;
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	98 87       	std	Y+8, r25	; 0x08
    1746:	8f 83       	std	Y+7, r24	; 0x07
	LCD_GoToWriteString(0, 1, "Password Saved!");
    1748:	23 ec       	ldi	r18, 0xC3	; 195
    174a:	31 e0       	ldi	r19, 0x01	; 1
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	a9 01       	movw	r20, r18
    1752:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>

	u8 first4digits = Pass / 100;
    1756:	8f 81       	ldd	r24, Y+7	; 0x07
    1758:	98 85       	ldd	r25, Y+8	; 0x08
    175a:	24 e6       	ldi	r18, 0x64	; 100
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	b9 01       	movw	r22, r18
    1760:	0e 94 4d 28 	call	0x509a	; 0x509a <__udivmodhi4>
    1764:	cb 01       	movw	r24, r22
    1766:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 last4digits = Pass % 100;
    1768:	8f 81       	ldd	r24, Y+7	; 0x07
    176a:	98 85       	ldd	r25, Y+8	; 0x08
    176c:	24 e6       	ldi	r18, 0x64	; 100
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 4d 28 	call	0x509a	; 0x509a <__udivmodhi4>
    1776:	8a 83       	std	Y+2, r24	; 0x02

	TWI_voidMaterInit(0x01);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 3f 14 	call	0x287e	; 0x287e <TWI_voidMaterInit>
	EEPROM_voidSendData(0x1234, first4digits);
    1780:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1782:	84 e3       	ldi	r24, 0x34	; 52
    1784:	92 e1       	ldi	r25, 0x12	; 18
    1786:	62 2f       	mov	r22, r18
    1788:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <EEPROM_voidSendData>
	EEPROM_voidRecieveData(0x1234, &first4digits);
    178c:	9e 01       	movw	r18, r28
    178e:	23 5e       	subi	r18, 0xE3	; 227
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	84 e3       	ldi	r24, 0x34	; 52
    1794:	92 e1       	ldi	r25, 0x12	; 18
    1796:	b9 01       	movw	r22, r18
    1798:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <EEPROM_voidRecieveData>
	EEPROM_voidSendData(0x1245, last4digits);
    179c:	85 e4       	ldi	r24, 0x45	; 69
    179e:	92 e1       	ldi	r25, 0x12	; 18
    17a0:	6a 81       	ldd	r22, Y+2	; 0x02
    17a2:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <EEPROM_voidSendData>
	EEPROM_voidRecieveData(0x1245, last4digits);
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 01       	movw	r18, r24
    17ae:	85 e4       	ldi	r24, 0x45	; 69
    17b0:	92 e1       	ldi	r25, 0x12	; 18
    17b2:	b9 01       	movw	r22, r18
    17b4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <EEPROM_voidRecieveData>
}
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <Add_Emergn_NUM>:

void Add_Emergn_NUM(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	ab 97       	sbiw	r28, 0x2b	; 43
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
			.KP_Row3_PORT = DIO_u8PORTA, .KP_Row4_PORT = DIO_u8PORTA,
			.KP_Colum1_PIN = DIO_u8PIN2, .KP_Colum2_PIN = DIO_u8PIN4,
			.KP_Colum3_PIN = DIO_u8PIN5,
			.KP_Row1_PIN =
			DIO_u8PIN7, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
			.KP_Row4_PIN = DIO_u8PIN7 };
    17de:	80 e1       	ldi	r24, 0x10	; 16
    17e0:	fe 01       	movw	r30, r28
    17e2:	74 96       	adiw	r30, 0x14	; 20
    17e4:	df 01       	movw	r26, r30
    17e6:	98 2f       	mov	r25, r24
    17e8:	1d 92       	st	X+, r1
    17ea:	9a 95       	dec	r25
    17ec:	e9 f7       	brne	.-6      	; 0x17e8 <Add_Emergn_NUM+0x1e>
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	8c 8b       	std	Y+20, r24	; 0x14
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	8d 8b       	std	Y+21, r24	; 0x15
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	8e 8b       	std	Y+22, r24	; 0x16
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	88 8f       	std	Y+24, r24	; 0x18
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	8c 8f       	std	Y+28, r24	; 0x1c
    1802:	84 e0       	ldi	r24, 0x04	; 4
    1804:	8d 8f       	std	Y+29, r24	; 0x1d
    1806:	85 e0       	ldi	r24, 0x05	; 5
    1808:	8e 8f       	std	Y+30, r24	; 0x1e
    180a:	87 e0       	ldi	r24, 0x07	; 7
    180c:	88 a3       	std	Y+32, r24	; 0x20
    180e:	85 e0       	ldi	r24, 0x05	; 5
    1810:	89 a3       	std	Y+33, r24	; 0x21
    1812:	86 e0       	ldi	r24, 0x06	; 6
    1814:	8a a3       	std	Y+34, r24	; 0x22
    1816:	87 e0       	ldi	r24, 0x07	; 7
    1818:	8b a3       	std	Y+35, r24	; 0x23
	LCD_ClearDisplay();
    181a:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
	u8 Flag1 = 0;
    181e:	1b 8a       	std	Y+19, r1	; 0x13
	u8 num;
	u8 MultiArr[3] =
	{ 10, 2, 10 };
    1820:	de 01       	movw	r26, r28
    1822:	94 96       	adiw	r26, 0x24	; 36
    1824:	b8 a7       	std	Y+40, r27	; 0x28
    1826:	af a3       	std	Y+39, r26	; 0x27
    1828:	ed e1       	ldi	r30, 0x1D	; 29
    182a:	f4 e0       	ldi	r31, 0x04	; 4
    182c:	fa a7       	std	Y+42, r31	; 0x2a
    182e:	e9 a7       	std	Y+41, r30	; 0x29
    1830:	f3 e0       	ldi	r31, 0x03	; 3
    1832:	fb a7       	std	Y+43, r31	; 0x2b
    1834:	a9 a5       	ldd	r26, Y+41	; 0x29
    1836:	ba a5       	ldd	r27, Y+42	; 0x2a
    1838:	0c 90       	ld	r0, X
    183a:	e9 a5       	ldd	r30, Y+41	; 0x29
    183c:	fa a5       	ldd	r31, Y+42	; 0x2a
    183e:	31 96       	adiw	r30, 0x01	; 1
    1840:	fa a7       	std	Y+42, r31	; 0x2a
    1842:	e9 a7       	std	Y+41, r30	; 0x29
    1844:	af a1       	ldd	r26, Y+39	; 0x27
    1846:	b8 a5       	ldd	r27, Y+40	; 0x28
    1848:	0c 92       	st	X, r0
    184a:	ef a1       	ldd	r30, Y+39	; 0x27
    184c:	f8 a5       	ldd	r31, Y+40	; 0x28
    184e:	31 96       	adiw	r30, 0x01	; 1
    1850:	f8 a7       	std	Y+40, r31	; 0x28
    1852:	ef a3       	std	Y+39, r30	; 0x27
    1854:	fb a5       	ldd	r31, Y+43	; 0x2b
    1856:	f1 50       	subi	r31, 0x01	; 1
    1858:	fb a7       	std	Y+43, r31	; 0x2b
    185a:	8b a5       	ldd	r24, Y+43	; 0x2b
    185c:	88 23       	and	r24, r24
    185e:	51 f7       	brne	.-44     	; 0x1834 <Add_Emergn_NUM+0x6a>
	Init_KP(&KP1);
    1860:	ce 01       	movw	r24, r28
    1862:	44 96       	adiw	r24, 0x14	; 20
    1864:	0e 94 34 25 	call	0x4a68	; 0x4a68 <Init_KP>
	LCD_GoToWriteString(0, 0, "ADD EMERGENCY NUMBER:");
    1868:	23 ed       	ldi	r18, 0xD3	; 211
    186a:	31 e0       	ldi	r19, 0x01	; 1
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
    1876:	1d c0       	rjmp	.+58     	; 0x18b2 <Add_Emergn_NUM+0xe8>
	while (Flag1 < 1) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	89 8b       	std	Y+17, r24	; 0x11
    187c:	05 c0       	rjmp	.+10     	; 0x1888 <Add_Emergn_NUM+0xbe>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    187e:	ce 01       	movw	r24, r28
    1880:	44 96       	adiw	r24, 0x14	; 20
    1882:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1886:	89 8b       	std	Y+17, r24	; 0x11
	Init_KP(&KP1);
	LCD_GoToWriteString(0, 0, "ADD EMERGENCY NUMBER:");
	while (Flag1 < 1) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    1888:	89 89       	ldd	r24, Y+17	; 0x11
    188a:	8f 3f       	cpi	r24, 0xFF	; 255
    188c:	c1 f3       	breq	.-16     	; 0x187e <Add_Emergn_NUM+0xb4>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag1] = key_pressed;
    188e:	8b 89       	ldd	r24, Y+19	; 0x13
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	ce 01       	movw	r24, r28
    1896:	84 96       	adiw	r24, 0x24	; 36
    1898:	fc 01       	movw	r30, r24
    189a:	e2 0f       	add	r30, r18
    189c:	f3 1f       	adc	r31, r19
    189e:	89 89       	ldd	r24, Y+17	; 0x11
    18a0:	80 83       	st	Z, r24
LCD_GoToWriteNumber(2,1,key_pressed);
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	49 89       	ldd	r20, Y+17	; 0x11
    18a8:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
		Flag1++;
    18ac:	8b 89       	ldd	r24, Y+19	; 0x13
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	8b 8b       	std	Y+19, r24	; 0x13
	u8 num;
	u8 MultiArr[3] =
	{ 10, 2, 10 };
	Init_KP(&KP1);
	LCD_GoToWriteString(0, 0, "ADD EMERGENCY NUMBER:");
	while (Flag1 < 1) //loop till the user finish inserting the pass
    18b2:	8b 89       	ldd	r24, Y+19	; 0x13
    18b4:	88 23       	and	r24, r24
    18b6:	01 f3       	breq	.-64     	; 0x1878 <Add_Emergn_NUM+0xae>
    18b8:	1d c0       	rjmp	.+58     	; 0x18f4 <Add_Emergn_NUM+0x12a>
		Flag1++;

	}
	while (Flag1 < 2) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	88 8b       	std	Y+16, r24	; 0x10
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <Add_Emergn_NUM+0x100>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    18c0:	ce 01       	movw	r24, r28
    18c2:	44 96       	adiw	r24, 0x14	; 20
    18c4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    18c8:	88 8b       	std	Y+16, r24	; 0x10

	}
	while (Flag1 < 2) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    18ca:	88 89       	ldd	r24, Y+16	; 0x10
    18cc:	8f 3f       	cpi	r24, 0xFF	; 255
    18ce:	c1 f3       	breq	.-16     	; 0x18c0 <Add_Emergn_NUM+0xf6>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag1] = key_pressed;
    18d0:	8b 89       	ldd	r24, Y+19	; 0x13
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	ce 01       	movw	r24, r28
    18d8:	84 96       	adiw	r24, 0x24	; 36
    18da:	fc 01       	movw	r30, r24
    18dc:	e2 0f       	add	r30, r18
    18de:	f3 1f       	adc	r31, r19
    18e0:	88 89       	ldd	r24, Y+16	; 0x10
    18e2:	80 83       	st	Z, r24
		LCD_GoToWriteNumber(2,2,key_pressed);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	48 89       	ldd	r20, Y+16	; 0x10
    18ea:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
		Flag1++;
    18ee:	8b 89       	ldd	r24, Y+19	; 0x13
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
		MultiArr[Flag1] = key_pressed;
LCD_GoToWriteNumber(2,1,key_pressed);
		Flag1++;

	}
	while (Flag1 < 2) //loop till the user finish inserting the pass
    18f4:	8b 89       	ldd	r24, Y+19	; 0x13
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	00 f3       	brcs	.-64     	; 0x18ba <Add_Emergn_NUM+0xf0>
    18fa:	8f c0       	rjmp	.+286    	; 0x1a1a <Add_Emergn_NUM+0x250>
		Flag1++;

	}
	while (Flag1 < 3) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	8f 87       	std	Y+15, r24	; 0x0f
    1900:	05 c0       	rjmp	.+10     	; 0x190c <Add_Emergn_NUM+0x142>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1902:	ce 01       	movw	r24, r28
    1904:	44 96       	adiw	r24, 0x14	; 20
    1906:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    190a:	8f 87       	std	Y+15, r24	; 0x0f

	}
	while (Flag1 < 3) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	8f 3f       	cpi	r24, 0xFF	; 255
    1910:	c1 f3       	breq	.-16     	; 0x1902 <Add_Emergn_NUM+0x138>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag1] = key_pressed;
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	ce 01       	movw	r24, r28
    191a:	84 96       	adiw	r24, 0x24	; 36
    191c:	fc 01       	movw	r30, r24
    191e:	e2 0f       	add	r30, r18
    1920:	f3 1f       	adc	r31, r19
    1922:	8f 85       	ldd	r24, Y+15	; 0x0f
    1924:	80 83       	st	Z, r24
		LCD_GoToWriteNumber(2,3,key_pressed);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	63 e0       	ldi	r22, 0x03	; 3
    192a:	4f 85       	ldd	r20, Y+15	; 0x0f
    192c:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
		Flag1++;
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	8b 8b       	std	Y+19, r24	; 0x13
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a8 ec       	ldi	r26, 0xC8	; 200
    193c:	b2 e4       	ldi	r27, 0x42	; 66
    193e:	8b 87       	std	Y+11, r24	; 0x0b
    1940:	9c 87       	std	Y+12, r25	; 0x0c
    1942:	ad 87       	std	Y+13, r26	; 0x0d
    1944:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1946:	6b 85       	ldd	r22, Y+11	; 0x0b
    1948:	7c 85       	ldd	r23, Y+12	; 0x0c
    194a:	8d 85       	ldd	r24, Y+13	; 0x0d
    194c:	9e 85       	ldd	r25, Y+14	; 0x0e
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a ef       	ldi	r20, 0xFA	; 250
    1954:	54 e4       	ldi	r21, 0x44	; 68
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8f 83       	std	Y+7, r24	; 0x07
    1960:	98 87       	std	Y+8, r25	; 0x08
    1962:	a9 87       	std	Y+9, r26	; 0x09
    1964:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1966:	6f 81       	ldd	r22, Y+7	; 0x07
    1968:	78 85       	ldd	r23, Y+8	; 0x08
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	9a 85       	ldd	r25, Y+10	; 0x0a
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <Add_Emergn_NUM+0x1be>
		__ticks = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <Add_Emergn_NUM+0x23c>
	else if (__tmp > 65535)
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	4c f5       	brge	.+82     	; 0x19f2 <Add_Emergn_NUM+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <Add_Emergn_NUM+0x21e>
    19ca:	88 ec       	ldi	r24, 0xC8	; 200
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <Add_Emergn_NUM+0x20c>
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	69 f7       	brne	.-38     	; 0x19ca <Add_Emergn_NUM+0x200>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <Add_Emergn_NUM+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	6f 81       	ldd	r22, Y+7	; 0x07
    19f4:	78 85       	ldd	r23, Y+8	; 0x08
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <Add_Emergn_NUM+0x248>
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
		MultiArr[Flag1] = key_pressed;
		LCD_GoToWriteNumber(2,2,key_pressed);
		Flag1++;

	}
	while (Flag1 < 3) //loop till the user finish inserting the pass
    1a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <Add_Emergn_NUM+0x258>
    1a20:	6d cf       	rjmp	.-294    	; 0x18fc <Add_Emergn_NUM+0x132>
		Flag1++;
_delay_ms(100);
	}
	
	
}
    1a22:	ab 96       	adiw	r28, 0x2b	; 43
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <Add_Phone_NUM>:

void Add_Phone_NUM(void)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	ec 97       	sbiw	r28, 0x3c	; 60
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
			.KP_Row3_PORT = DIO_u8PORTA, .KP_Row4_PORT = DIO_u8PORTA,
			.KP_Colum1_PIN = DIO_u8PIN2, .KP_Colum2_PIN = DIO_u8PIN4,
			.KP_Colum3_PIN = DIO_u8PIN5,
			.KP_Row1_PIN =
			DIO_u8PIN7, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
			.KP_Row4_PIN = DIO_u8PIN7 };
    1a48:	80 e1       	ldi	r24, 0x10	; 16
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	7e 96       	adiw	r30, 0x1e	; 30
    1a4e:	df 01       	movw	r26, r30
    1a50:	98 2f       	mov	r25, r24
    1a52:	1d 92       	st	X+, r1
    1a54:	9a 95       	dec	r25
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <Add_Phone_NUM+0x1e>
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	88 a3       	std	Y+32, r24	; 0x20
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	8a a3       	std	Y+34, r24	; 0x22
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	8e a3       	std	Y+38, r24	; 0x26
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	85 e0       	ldi	r24, 0x05	; 5
    1a72:	88 a7       	std	Y+40, r24	; 0x28
    1a74:	87 e0       	ldi	r24, 0x07	; 7
    1a76:	8a a7       	std	Y+42, r24	; 0x2a
    1a78:	85 e0       	ldi	r24, 0x05	; 5
    1a7a:	8b a7       	std	Y+43, r24	; 0x2b
    1a7c:	86 e0       	ldi	r24, 0x06	; 6
    1a7e:	8c a7       	std	Y+44, r24	; 0x2c
    1a80:	87 e0       	ldi	r24, 0x07	; 7
    1a82:	8d a7       	std	Y+45, r24	; 0x2d
	LCD_ClearDisplay();
    1a84:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
	u8 Flag2 = 0;
    1a88:	1d 8e       	std	Y+29, r1	; 0x1d
	u8 num;
	u8 MultiArr[10] =
	{ 2, 3, 5, 7 ,1,2,3,4,5,6};
    1a8a:	de 01       	movw	r26, r28
    1a8c:	9e 96       	adiw	r26, 0x2e	; 46
    1a8e:	b9 af       	std	Y+57, r27	; 0x39
    1a90:	a8 af       	std	Y+56, r26	; 0x38
    1a92:	e0 e2       	ldi	r30, 0x20	; 32
    1a94:	f4 e0       	ldi	r31, 0x04	; 4
    1a96:	fb af       	std	Y+59, r31	; 0x3b
    1a98:	ea af       	std	Y+58, r30	; 0x3a
    1a9a:	fa e0       	ldi	r31, 0x0A	; 10
    1a9c:	fc af       	std	Y+60, r31	; 0x3c
    1a9e:	aa ad       	ldd	r26, Y+58	; 0x3a
    1aa0:	bb ad       	ldd	r27, Y+59	; 0x3b
    1aa2:	0c 90       	ld	r0, X
    1aa4:	ea ad       	ldd	r30, Y+58	; 0x3a
    1aa6:	fb ad       	ldd	r31, Y+59	; 0x3b
    1aa8:	31 96       	adiw	r30, 0x01	; 1
    1aaa:	fb af       	std	Y+59, r31	; 0x3b
    1aac:	ea af       	std	Y+58, r30	; 0x3a
    1aae:	a8 ad       	ldd	r26, Y+56	; 0x38
    1ab0:	b9 ad       	ldd	r27, Y+57	; 0x39
    1ab2:	0c 92       	st	X, r0
    1ab4:	e8 ad       	ldd	r30, Y+56	; 0x38
    1ab6:	f9 ad       	ldd	r31, Y+57	; 0x39
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	f9 af       	std	Y+57, r31	; 0x39
    1abc:	e8 af       	std	Y+56, r30	; 0x38
    1abe:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ac0:	f1 50       	subi	r31, 0x01	; 1
    1ac2:	fc af       	std	Y+60, r31	; 0x3c
    1ac4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ac6:	88 23       	and	r24, r24
    1ac8:	51 f7       	brne	.-44     	; 0x1a9e <Add_Phone_NUM+0x6a>
	Init_KP(&KP1);
    1aca:	ce 01       	movw	r24, r28
    1acc:	4e 96       	adiw	r24, 0x1e	; 30
    1ace:	0e 94 34 25 	call	0x4a68	; 0x4a68 <Init_KP>
	LCD_GoToWriteString(0, 0, "ADD PHONE NUMBER:");
    1ad2:	29 ee       	ldi	r18, 0xE9	; 233
    1ad4:	31 e0       	ldi	r19, 0x01	; 1
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	a9 01       	movw	r20, r18
    1adc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
    1ae0:	1d c0       	rjmp	.+58     	; 0x1b1c <Add_Phone_NUM+0xe8>
	while (Flag2 < 1) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	89 8f       	std	Y+25, r24	; 0x19
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <Add_Phone_NUM+0xbe>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1ae8:	ce 01       	movw	r24, r28
    1aea:	4e 96       	adiw	r24, 0x1e	; 30
    1aec:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1af0:	89 8f       	std	Y+25, r24	; 0x19
	Init_KP(&KP1);
	LCD_GoToWriteString(0, 0, "ADD PHONE NUMBER:");
	while (Flag2 < 1) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    1af2:	89 8d       	ldd	r24, Y+25	; 0x19
    1af4:	8f 3f       	cpi	r24, 0xFF	; 255
    1af6:	c1 f3       	breq	.-16     	; 0x1ae8 <Add_Phone_NUM+0xb4>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag2] = key_pressed;
    1af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	ce 01       	movw	r24, r28
    1b00:	8e 96       	adiw	r24, 0x2e	; 46
    1b02:	fc 01       	movw	r30, r24
    1b04:	e2 0f       	add	r30, r18
    1b06:	f3 1f       	adc	r31, r19
    1b08:	89 8d       	ldd	r24, Y+25	; 0x19
    1b0a:	80 83       	st	Z, r24
		LCD_GoToWriteNumber(2,1,key_pressed);
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	49 8d       	ldd	r20, Y+25	; 0x19
    1b12:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
		Flag2++;
    1b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 num;
	u8 MultiArr[10] =
	{ 2, 3, 5, 7 ,1,2,3,4,5,6};
	Init_KP(&KP1);
	LCD_GoToWriteString(0, 0, "ADD PHONE NUMBER:");
	while (Flag2 < 1) //loop till the user finish inserting the pass
    1b1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b1e:	88 23       	and	r24, r24
    1b20:	01 f3       	breq	.-64     	; 0x1ae2 <Add_Phone_NUM+0xae>
    1b22:	1d c0       	rjmp	.+58     	; 0x1b5e <Add_Phone_NUM+0x12a>
		Flag2++;

	}
	while (Flag2 < 2) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	88 8f       	std	Y+24, r24	; 0x18
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <Add_Phone_NUM+0x100>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	4e 96       	adiw	r24, 0x1e	; 30
    1b2e:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1b32:	88 8f       	std	Y+24, r24	; 0x18

	}
	while (Flag2 < 2) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1b34:	88 8d       	ldd	r24, Y+24	; 0x18
    1b36:	8f 3f       	cpi	r24, 0xFF	; 255
    1b38:	c1 f3       	breq	.-16     	; 0x1b2a <Add_Phone_NUM+0xf6>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	ce 01       	movw	r24, r28
    1b42:	8e 96       	adiw	r24, 0x2e	; 46
    1b44:	fc 01       	movw	r30, r24
    1b46:	e2 0f       	add	r30, r18
    1b48:	f3 1f       	adc	r31, r19
    1b4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b4c:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,2,key_pressed);
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	48 8d       	ldd	r20, Y+24	; 0x18
    1b54:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1b58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	8d 8f       	std	Y+29, r24	; 0x1d
		MultiArr[Flag2] = key_pressed;
		LCD_GoToWriteNumber(2,1,key_pressed);
		Flag2++;

	}
	while (Flag2 < 2) //loop till the user finish inserting the pass
    1b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	00 f3       	brcs	.-64     	; 0x1b24 <Add_Phone_NUM+0xf0>
    1b64:	1d c0       	rjmp	.+58     	; 0x1ba0 <Add_Phone_NUM+0x16c>
			Flag2++;

		}
	while (Flag2 < 3) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	8f 8b       	std	Y+23, r24	; 0x17
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <Add_Phone_NUM+0x142>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	4e 96       	adiw	r24, 0x1e	; 30
    1b70:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1b74:	8f 8b       	std	Y+23, r24	; 0x17

		}
	while (Flag2 < 3) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7a:	c1 f3       	breq	.-16     	; 0x1b6c <Add_Phone_NUM+0x138>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	ce 01       	movw	r24, r28
    1b84:	8e 96       	adiw	r24, 0x2e	; 46
    1b86:	fc 01       	movw	r30, r24
    1b88:	e2 0f       	add	r30, r18
    1b8a:	f3 1f       	adc	r31, r19
    1b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8e:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,3,key_pressed);
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	63 e0       	ldi	r22, 0x03	; 3
    1b94:	4f 89       	ldd	r20, Y+23	; 0x17
    1b96:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,2,key_pressed);
			Flag2++;

		}
	while (Flag2 < 3) //loop till the user finish inserting the pass
    1ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	00 f3       	brcs	.-64     	; 0x1b66 <Add_Phone_NUM+0x132>
    1ba6:	1d c0       	rjmp	.+58     	; 0x1be2 <Add_Phone_NUM+0x1ae>
			Flag2++;

		}
	while (Flag2 < 4) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	8e 8b       	std	Y+22, r24	; 0x16
    1bac:	05 c0       	rjmp	.+10     	; 0x1bb8 <Add_Phone_NUM+0x184>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1bae:	ce 01       	movw	r24, r28
    1bb0:	4e 96       	adiw	r24, 0x1e	; 30
    1bb2:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1bb6:	8e 8b       	std	Y+22, r24	; 0x16

		}
	while (Flag2 < 4) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1bb8:	8e 89       	ldd	r24, Y+22	; 0x16
    1bba:	8f 3f       	cpi	r24, 0xFF	; 255
    1bbc:	c1 f3       	breq	.-16     	; 0x1bae <Add_Phone_NUM+0x17a>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	8e 96       	adiw	r24, 0x2e	; 46
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e2 0f       	add	r30, r18
    1bcc:	f3 1f       	adc	r31, r19
    1bce:	8e 89       	ldd	r24, Y+22	; 0x16
    1bd0:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,4,key_pressed);
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	64 e0       	ldi	r22, 0x04	; 4
    1bd6:	4e 89       	ldd	r20, Y+22	; 0x16
    1bd8:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,3,key_pressed);
			Flag2++;

		}
	while (Flag2 < 4) //loop till the user finish inserting the pass
    1be2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	00 f3       	brcs	.-64     	; 0x1ba8 <Add_Phone_NUM+0x174>
    1be8:	1d c0       	rjmp	.+58     	; 0x1c24 <Add_Phone_NUM+0x1f0>
			Flag2++;

		}
	while (Flag2 < 5) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
    1bec:	8d 8b       	std	Y+21, r24	; 0x15
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <Add_Phone_NUM+0x1c6>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	4e 96       	adiw	r24, 0x1e	; 30
    1bf4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1bf8:	8d 8b       	std	Y+21, r24	; 0x15

		}
	while (Flag2 < 5) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1bfa:	8d 89       	ldd	r24, Y+21	; 0x15
    1bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfe:	c1 f3       	breq	.-16     	; 0x1bf0 <Add_Phone_NUM+0x1bc>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	ce 01       	movw	r24, r28
    1c08:	8e 96       	adiw	r24, 0x2e	; 46
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	8d 89       	ldd	r24, Y+21	; 0x15
    1c12:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,5,key_pressed);
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	65 e0       	ldi	r22, 0x05	; 5
    1c18:	4d 89       	ldd	r20, Y+21	; 0x15
    1c1a:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,4,key_pressed);
			Flag2++;

		}
	while (Flag2 < 5) //loop till the user finish inserting the pass
    1c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c26:	85 30       	cpi	r24, 0x05	; 5
    1c28:	00 f3       	brcs	.-64     	; 0x1bea <Add_Phone_NUM+0x1b6>
    1c2a:	1d c0       	rjmp	.+58     	; 0x1c66 <Add_Phone_NUM+0x232>
			Flag2++;

		}
	while (Flag2 < 6) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	8c 8b       	std	Y+20, r24	; 0x14
    1c30:	05 c0       	rjmp	.+10     	; 0x1c3c <Add_Phone_NUM+0x208>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1c32:	ce 01       	movw	r24, r28
    1c34:	4e 96       	adiw	r24, 0x1e	; 30
    1c36:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1c3a:	8c 8b       	std	Y+20, r24	; 0x14

		}
	while (Flag2 < 6) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1c3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c40:	c1 f3       	breq	.-16     	; 0x1c32 <Add_Phone_NUM+0x1fe>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	ce 01       	movw	r24, r28
    1c4a:	8e 96       	adiw	r24, 0x2e	; 46
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	e2 0f       	add	r30, r18
    1c50:	f3 1f       	adc	r31, r19
    1c52:	8c 89       	ldd	r24, Y+20	; 0x14
    1c54:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,6,key_pressed);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	66 e0       	ldi	r22, 0x06	; 6
    1c5a:	4c 89       	ldd	r20, Y+20	; 0x14
    1c5c:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,5,key_pressed);
			Flag2++;

		}
	while (Flag2 < 6) //loop till the user finish inserting the pass
    1c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c68:	86 30       	cpi	r24, 0x06	; 6
    1c6a:	00 f3       	brcs	.-64     	; 0x1c2c <Add_Phone_NUM+0x1f8>
    1c6c:	1d c0       	rjmp	.+58     	; 0x1ca8 <Add_Phone_NUM+0x274>
			Flag2++;

		}
	while (Flag2 < 7) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <Add_Phone_NUM+0x24a>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1c74:	ce 01       	movw	r24, r28
    1c76:	4e 96       	adiw	r24, 0x1e	; 30
    1c78:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13

		}
	while (Flag2 < 7) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	8f 3f       	cpi	r24, 0xFF	; 255
    1c82:	c1 f3       	breq	.-16     	; 0x1c74 <Add_Phone_NUM+0x240>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	8e 96       	adiw	r24, 0x2e	; 46
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e2 0f       	add	r30, r18
    1c92:	f3 1f       	adc	r31, r19
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,7,key_pressed);
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	67 e0       	ldi	r22, 0x07	; 7
    1c9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1c9e:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,6,key_pressed);
			Flag2++;

		}
	while (Flag2 < 7) //loop till the user finish inserting the pass
    1ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1caa:	87 30       	cpi	r24, 0x07	; 7
    1cac:	00 f3       	brcs	.-64     	; 0x1c6e <Add_Phone_NUM+0x23a>
    1cae:	1d c0       	rjmp	.+58     	; 0x1cea <Add_Phone_NUM+0x2b6>
			Flag2++;

		}
	while (Flag2 < 8) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	8a 8b       	std	Y+18, r24	; 0x12
    1cb4:	05 c0       	rjmp	.+10     	; 0x1cc0 <Add_Phone_NUM+0x28c>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	4e 96       	adiw	r24, 0x1e	; 30
    1cba:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1cbe:	8a 8b       	std	Y+18, r24	; 0x12

		}
	while (Flag2 < 8) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1cc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc4:	c1 f3       	breq	.-16     	; 0x1cb6 <Add_Phone_NUM+0x282>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	ce 01       	movw	r24, r28
    1cce:	8e 96       	adiw	r24, 0x2e	; 46
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e2 0f       	add	r30, r18
    1cd4:	f3 1f       	adc	r31, r19
    1cd6:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd8:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,8,key_pressed);
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	68 e0       	ldi	r22, 0x08	; 8
    1cde:	4a 89       	ldd	r20, Y+18	; 0x12
    1ce0:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,7,key_pressed);
			Flag2++;

		}
	while (Flag2 < 8) //loop till the user finish inserting the pass
    1cea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cec:	88 30       	cpi	r24, 0x08	; 8
    1cee:	00 f3       	brcs	.-64     	; 0x1cb0 <Add_Phone_NUM+0x27c>
    1cf0:	1d c0       	rjmp	.+58     	; 0x1d2c <Add_Phone_NUM+0x2f8>
			Flag2++;

		}
	while (Flag2 < 9) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <Add_Phone_NUM+0x2ce>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	4e 96       	adiw	r24, 0x1e	; 30
    1cfc:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1d00:	89 8b       	std	Y+17, r24	; 0x11

		}
	while (Flag2 < 9) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1d02:	89 89       	ldd	r24, Y+17	; 0x11
    1d04:	8f 3f       	cpi	r24, 0xFF	; 255
    1d06:	c1 f3       	breq	.-16     	; 0x1cf8 <Add_Phone_NUM+0x2c4>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	ce 01       	movw	r24, r28
    1d10:	8e 96       	adiw	r24, 0x2e	; 46
    1d12:	fc 01       	movw	r30, r24
    1d14:	e2 0f       	add	r30, r18
    1d16:	f3 1f       	adc	r31, r19
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,9,key_pressed);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	69 e0       	ldi	r22, 0x09	; 9
    1d20:	49 89       	ldd	r20, Y+17	; 0x11
    1d22:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1d26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,8,key_pressed);
			Flag2++;

		}
	while (Flag2 < 9) //loop till the user finish inserting the pass
    1d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2e:	89 30       	cpi	r24, 0x09	; 9
    1d30:	00 f3       	brcs	.-64     	; 0x1cf2 <Add_Phone_NUM+0x2be>
    1d32:	1d c0       	rjmp	.+58     	; 0x1d6e <Add_Phone_NUM+0x33a>
			Flag2++;

		}
	while (Flag2 < 10) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	88 8b       	std	Y+16, r24	; 0x10
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <Add_Phone_NUM+0x310>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	4e 96       	adiw	r24, 0x1e	; 30
    1d3e:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1d42:	88 8b       	std	Y+16, r24	; 0x10

		}
	while (Flag2 < 10) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1d44:	88 89       	ldd	r24, Y+16	; 0x10
    1d46:	8f 3f       	cpi	r24, 0xFF	; 255
    1d48:	c1 f3       	breq	.-16     	; 0x1d3a <Add_Phone_NUM+0x306>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	ce 01       	movw	r24, r28
    1d52:	8e 96       	adiw	r24, 0x2e	; 46
    1d54:	fc 01       	movw	r30, r24
    1d56:	e2 0f       	add	r30, r18
    1d58:	f3 1f       	adc	r31, r19
    1d5a:	88 89       	ldd	r24, Y+16	; 0x10
    1d5c:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,10,key_pressed);
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	6a e0       	ldi	r22, 0x0A	; 10
    1d62:	48 89       	ldd	r20, Y+16	; 0x10
    1d64:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1d68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6a:	8f 5f       	subi	r24, 0xFF	; 255
    1d6c:	8d 8f       	std	Y+29, r24	; 0x1d
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,9,key_pressed);
			Flag2++;

		}
	while (Flag2 < 10) //loop till the user finish inserting the pass
    1d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d70:	8a 30       	cpi	r24, 0x0A	; 10
    1d72:	00 f3       	brcs	.-64     	; 0x1d34 <Add_Phone_NUM+0x300>
    1d74:	8f c0       	rjmp	.+286    	; 0x1e94 <Add_Phone_NUM+0x460>
			LCD_GoToWriteNumber(2,10,key_pressed);
			Flag2++;
		}
	while (Flag2 < 11) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <Add_Phone_NUM+0x352>
			while (key_pressed == 0xFF) //repeat till the user press any key
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	4e 96       	adiw	r24, 0x1e	; 30
    1d80:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
			Flag2++;
		}
	while (Flag2 < 11) //loop till the user finish inserting the pass
		{
			u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0xFF) //repeat till the user press any key
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8a:	c1 f3       	breq	.-16     	; 0x1d7c <Add_Phone_NUM+0x348>
			{

				key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

			}
			MultiArr[Flag2] = key_pressed;
    1d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	ce 01       	movw	r24, r28
    1d94:	8e 96       	adiw	r24, 0x2e	; 46
    1d96:	fc 01       	movw	r30, r24
    1d98:	e2 0f       	add	r30, r18
    1d9a:	f3 1f       	adc	r31, r19
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	80 83       	st	Z, r24
			LCD_GoToWriteNumber(2,11,key_pressed);
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	6b e0       	ldi	r22, 0x0B	; 11
    1da4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1da6:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>
			Flag2++;
    1daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
    1dae:	8d 8f       	std	Y+29, r24	; 0x1d
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a8 ec       	ldi	r26, 0xC8	; 200
    1db6:	b2 e4       	ldi	r27, 0x42	; 66
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
    1dba:	9c 87       	std	Y+12, r25	; 0x0c
    1dbc:	ad 87       	std	Y+13, r26	; 0x0d
    1dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a ef       	ldi	r20, 0xFA	; 250
    1dce:	54 e4       	ldi	r21, 0x44	; 68
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
    1dda:	98 87       	std	Y+8, r25	; 0x08
    1ddc:	a9 87       	std	Y+9, r26	; 0x09
    1dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <Add_Phone_NUM+0x3ce>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <Add_Phone_NUM+0x44c>
	else if (__tmp > 65535)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <Add_Phone_NUM+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <Add_Phone_NUM+0x42e>
    1e44:	88 ec       	ldi	r24, 0xC8	; 200
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <Add_Phone_NUM+0x41c>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <Add_Phone_NUM+0x410>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <Add_Phone_NUM+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <Add_Phone_NUM+0x458>
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
			}
			MultiArr[Flag2] = key_pressed;
			LCD_GoToWriteNumber(2,10,key_pressed);
			Flag2++;
		}
	while (Flag2 < 11) //loop till the user finish inserting the pass
    1e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e96:	8b 30       	cpi	r24, 0x0B	; 11
    1e98:	08 f4       	brcc	.+2      	; 0x1e9c <Add_Phone_NUM+0x468>
    1e9a:	6d cf       	rjmp	.-294    	; 0x1d76 <Add_Phone_NUM+0x342>
			Flag2++;
			_delay_ms(100);
		}


	u16 PHONE_Num = arrayToNum(MultiArr, 11);
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	8e 96       	adiw	r24, 0x2e	; 46
    1ea0:	6b e0       	ldi	r22, 0x0B	; 11
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <arrayToNum>
    1ea8:	9b 8f       	std	Y+27, r25	; 0x1b
    1eaa:	8a 8f       	std	Y+26, r24	; 0x1a


}
    1eac:	ec 96       	adiw	r28, 0x3c	; 60
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <Set_Temp>:
u8 Temp;

extern u8 Act_temp = 0; //USER TEMP

void Set_Temp(u8 *Ptr_Temp)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	67 97       	sbiw	r28, 0x17	; 23
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	9f 8b       	std	Y+23, r25	; 0x17
    1ed4:	8e 8b       	std	Y+22, r24	; 0x16
				.KP_Row3_PORT = DIO_u8PORTA, .KP_Row4_PORT = DIO_u8PORTA,
				.KP_Colum1_PIN = DIO_u8PIN2, .KP_Colum2_PIN = DIO_u8PIN4,
				.KP_Colum3_PIN = DIO_u8PIN5,
				.KP_Row1_PIN =
				DIO_u8PIN7, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
				.KP_Row4_PIN = DIO_u8PIN7 };
    1ed6:	80 e1       	ldi	r24, 0x10	; 16
    1ed8:	fe 01       	movw	r30, r28
    1eda:	34 96       	adiw	r30, 0x04	; 4
    1edc:	df 01       	movw	r26, r30
    1ede:	98 2f       	mov	r25, r24
    1ee0:	1d 92       	st	X+, r1
    1ee2:	9a 95       	dec	r25
    1ee4:	e9 f7       	brne	.-6      	; 0x1ee0 <Set_Temp+0x22>
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	8e 83       	std	Y+6, r24	; 0x06
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	88 87       	std	Y+8, r24	; 0x08
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	8c 87       	std	Y+12, r24	; 0x0c
    1efa:	84 e0       	ldi	r24, 0x04	; 4
    1efc:	8d 87       	std	Y+13, r24	; 0x0d
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	8e 87       	std	Y+14, r24	; 0x0e
    1f02:	87 e0       	ldi	r24, 0x07	; 7
    1f04:	88 8b       	std	Y+16, r24	; 0x10
    1f06:	85 e0       	ldi	r24, 0x05	; 5
    1f08:	89 8b       	std	Y+17, r24	; 0x11
    1f0a:	86 e0       	ldi	r24, 0x06	; 6
    1f0c:	8a 8b       	std	Y+18, r24	; 0x12
    1f0e:	87 e0       	ldi	r24, 0x07	; 7
    1f10:	8b 8b       	std	Y+19, r24	; 0x13

	Init_KP(&KP1);
    1f12:	ce 01       	movw	r24, r28
    1f14:	04 96       	adiw	r24, 0x04	; 4
    1f16:	0e 94 34 25 	call	0x4a68	; 0x4a68 <Init_KP>
	u8 counter = 0;
    1f1a:	1b 82       	std	Y+3, r1	; 0x03
	u8 key_pressed;
	u8 arr[2] =
	{ 0, 0 }; // Buffer size adjusted to hold the LM35 value
    1f1c:	1c 8a       	std	Y+20, r1	; 0x14
    1f1e:	1d 8a       	std	Y+21, r1	; 0x15
	u8 LM35_VAL = 0;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteString("Set Temp:");
    1f22:	8b ef       	ldi	r24, 0xFB	; 251
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	0e 94 1d 20 	call	0x403a	; 0x403a <LCD_WriteString>
	LCD_GoToWriteChar(0, 11, 'C');
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	6b e0       	ldi	r22, 0x0B	; 11
    1f2e:	43 e4       	ldi	r20, 0x43	; 67
    1f30:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <LCD_GoToWriteChar>
    1f34:	20 c0       	rjmp	.+64     	; 0x1f76 <Set_Temp+0xb8>
	while (counter < 2)
	{
		key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	05 c0       	rjmp	.+10     	; 0x1f46 <Set_Temp+0x88>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{
			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	04 96       	adiw	r24, 0x04	; 4
    1f40:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    1f44:	8a 83       	std	Y+2, r24	; 0x02
	LCD_WriteString("Set Temp:");
	LCD_GoToWriteChar(0, 11, 'C');
	while (counter < 2)
	{
		key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4a:	c1 f3       	breq	.-16     	; 0x1f3c <Set_Temp+0x7e>
		{
			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
		}

		arr[counter] = key_pressed;
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	ce 01       	movw	r24, r28
    1f54:	44 96       	adiw	r24, 0x14	; 20
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	80 83       	st	Z, r24

		LCD_GoToWriteNumber(0, 9 + counter, key_pressed);
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	98 2f       	mov	r25, r24
    1f64:	97 5f       	subi	r25, 0xF7	; 247
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	69 2f       	mov	r22, r25
    1f6a:	4a 81       	ldd	r20, Y+2	; 0x02
    1f6c:	0e 94 9d 24 	call	0x493a	; 0x493a <LCD_GoToWriteNumber>

		counter++;
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	8f 5f       	subi	r24, 0xFF	; 255
    1f74:	8b 83       	std	Y+3, r24	; 0x03
	u8 arr[2] =
	{ 0, 0 }; // Buffer size adjusted to hold the LM35 value
	u8 LM35_VAL = 0;
	LCD_WriteString("Set Temp:");
	LCD_GoToWriteChar(0, 11, 'C');
	while (counter < 2)
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	e8 f2       	brcs	.-70     	; 0x1f36 <Set_Temp+0x78>
		LCD_GoToWriteNumber(0, 9 + counter, key_pressed);

		counter++;

	}
	*Ptr_Temp = arr[0] * 10 + arr[1];
    1f7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 01       	movw	r18, r24
    1f84:	22 0f       	add	r18, r18
    1f86:	33 1f       	adc	r19, r19
    1f88:	c9 01       	movw	r24, r18
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	98 2f       	mov	r25, r24
    1f98:	8d 89       	ldd	r24, Y+21	; 0x15
    1f9a:	89 0f       	add	r24, r25
    1f9c:	ee 89       	ldd	r30, Y+22	; 0x16
    1f9e:	ff 89       	ldd	r31, Y+23	; 0x17
    1fa0:	80 83       	st	Z, r24

}
    1fa2:	67 96       	adiw	r28, 0x17	; 23
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <Temp_Monitoring>:

void Temp_Monitoring() //MENTOR TEMPERATURE WITH AC/HEATER
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62

	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_OUTPUT);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	63 e0       	ldi	r22, 0x03	; 3
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_OUTPUT);
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PIN_OUTPUT);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	66 e0       	ldi	r22, 0x06	; 6
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PIN_OUTPUT);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	67 e0       	ldi	r22, 0x07	; 7
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_OUTPUT);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	63 e0       	ldi	r22, 0x03	; 3
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTA, DIO_u8PIN4, DIO_u8PIN_OUTPUT);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	64 e0       	ldi	r22, 0x04	; 4
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>

	LM35_voidReadValue(DIO_u8PIN0, &Temp);
    1ff8:	20 e5       	ldi	r18, 0x50	; 80
    1ffa:	34 e0       	ldi	r19, 0x04	; 4
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	b9 01       	movw	r22, r18
    2000:	0e 94 3f 1a 	call	0x347e	; 0x347e <LM35_voidReadValue>

	if (Temp == Act_temp)
    2004:	90 91 50 04 	lds	r25, 0x0450
    2008:	80 91 47 04 	lds	r24, 0x0447
    200c:	98 17       	cp	r25, r24
    200e:	f9 f4       	brne	.+62     	; 0x204e <Temp_Monitoring+0x9a>
	{
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_LOW);
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	63 e0       	ldi	r22, 0x03	; 3
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	64 e0       	ldi	r22, 0x04	; 4
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PIN_LOW);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	66 e0       	ldi	r22, 0x06	; 6
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PIN_LOW);
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	67 e0       	ldi	r22, 0x07	; 7
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_LOW);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	63 e0       	ldi	r22, 0x03	; 3
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN4, DIO_u8PIN_LOW);
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	64 e0       	ldi	r22, 0x04	; 4
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    204c:	49 c0       	rjmp	.+146    	; 0x20e0 <Temp_Monitoring+0x12c>
	}
	else if (Temp < Act_temp)
    204e:	90 91 50 04 	lds	r25, 0x0450
    2052:	80 91 47 04 	lds	r24, 0x0447
    2056:	98 17       	cp	r25, r24
    2058:	f8 f4       	brcc	.+62     	; 0x2098 <Temp_Monitoring+0xe4>
	{
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_LOW);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	63 e0       	ldi	r22, 0x03	; 3
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	64 e0       	ldi	r22, 0x04	; 4
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PIN_LOW);
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	66 e0       	ldi	r22, 0x06	; 6
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PIN_HIGH);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	67 e0       	ldi	r22, 0x07	; 7
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_LOW);
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	63 e0       	ldi	r22, 0x03	; 3
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN4, DIO_u8PIN_HIGH);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	64 e0       	ldi	r22, 0x04	; 4
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2096:	24 c0       	rjmp	.+72     	; 0x20e0 <Temp_Monitoring+0x12c>
	}
	else if (Temp > Act_temp)
    2098:	90 91 50 04 	lds	r25, 0x0450
    209c:	80 91 47 04 	lds	r24, 0x0447
    20a0:	89 17       	cp	r24, r25
    20a2:	f0 f4       	brcc	.+60     	; 0x20e0 <Temp_Monitoring+0x12c>
	{
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3, DIO_u8PIN_HIGH);
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	63 e0       	ldi	r22, 0x03	; 3
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	64 e0       	ldi	r22, 0x04	; 4
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PIN_HIGH);
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	66 e0       	ldi	r22, 0x06	; 6
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PIN_LOW);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	67 e0       	ldi	r22, 0x07	; 7
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_HIGH);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	63 e0       	ldi	r22, 0x03	; 3
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN4, DIO_u8PIN_LOW);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	64 e0       	ldi	r22, 0x04	; 4
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	}

}
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <SET_DEVICE>:

void SET_DEVICE(void) //FUNCTION TO CONTROL DEVICES
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	61 97       	sbiw	r28, 0x11	; 17
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
				.KP_Row3_PORT = DIO_u8PORTA, .KP_Row4_PORT = DIO_u8PORTA,
				.KP_Colum1_PIN = DIO_u8PIN2, .KP_Colum2_PIN = DIO_u8PIN4,
				.KP_Colum3_PIN = DIO_u8PIN5,
				.KP_Row1_PIN =
				DIO_u8PIN7, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
				.KP_Row4_PIN = DIO_u8PIN7 };
    20fa:	80 e1       	ldi	r24, 0x10	; 16
    20fc:	fe 01       	movw	r30, r28
    20fe:	32 96       	adiw	r30, 0x02	; 2
    2100:	df 01       	movw	r26, r30
    2102:	98 2f       	mov	r25, r24
    2104:	1d 92       	st	X+, r1
    2106:	9a 95       	dec	r25
    2108:	e9 f7       	brne	.-6      	; 0x2104 <SET_DEVICE+0x1e>
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	8c 83       	std	Y+4, r24	; 0x04
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	8e 83       	std	Y+6, r24	; 0x06
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	8a 87       	std	Y+10, r24	; 0x0a
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	8b 87       	std	Y+11, r24	; 0x0b
    2122:	85 e0       	ldi	r24, 0x05	; 5
    2124:	8c 87       	std	Y+12, r24	; 0x0c
    2126:	87 e0       	ldi	r24, 0x07	; 7
    2128:	8e 87       	std	Y+14, r24	; 0x0e
    212a:	85 e0       	ldi	r24, 0x05	; 5
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	86 e0       	ldi	r24, 0x06	; 6
    2130:	88 8b       	std	Y+16, r24	; 0x10
    2132:	87 e0       	ldi	r24, 0x07	; 7
    2134:	89 8b       	std	Y+17, r24	; 0x11
	
	Init_KP(&KP1);
    2136:	ce 01       	movw	r24, r28
    2138:	02 96       	adiw	r24, 0x02	; 2
    213a:	0e 94 34 25 	call	0x4a68	; 0x4a68 <Init_KP>
	u8 key_pressed;
	LCD_ClearDisplay();
    213e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
	LCD_GoToWriteString(0, 0, "1-LIVING ROOM");
    2142:	25 e0       	ldi	r18, 0x05	; 5
    2144:	32 e0       	ldi	r19, 0x02	; 2
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	a9 01       	movw	r20, r18
    214c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
	LCD_GoToWriteString(1, 0, "2-ROOM 1");
    2150:	23 e1       	ldi	r18, 0x13	; 19
    2152:	32 e0       	ldi	r19, 0x02	; 2
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	a9 01       	movw	r20, r18
    215a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
	LCD_GoToWriteString(2, 0, "3-ROOM 2");
    215e:	2c e1       	ldi	r18, 0x1C	; 28
    2160:	32 e0       	ldi	r19, 0x02	; 2
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	a9 01       	movw	r20, r18
    2168:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
	LCD_GoToWriteString(3, 0, "4-GARDEN");
    216c:	25 e2       	ldi	r18, 0x25	; 37
    216e:	32 e0       	ldi	r19, 0x02	; 2
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	a9 01       	movw	r20, r18
    2176:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
	while (1)
	{
		key_pressed = 0xFF;
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	05 c0       	rjmp	.+10     	; 0x218a <SET_DEVICE+0xa4>
		while (key_pressed == 0xFF)
		{
			key_pressed = Read_KP(&KP1);
    2180:	ce 01       	movw	r24, r28
    2182:	02 96       	adiw	r24, 0x02	; 2
    2184:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    2188:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoToWriteString(2, 0, "3-ROOM 2");
	LCD_GoToWriteString(3, 0, "4-GARDEN");
	while (1)
	{
		key_pressed = 0xFF;
		while (key_pressed == 0xFF)
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	8f 3f       	cpi	r24, 0xFF	; 255
    218e:	c1 f3       	breq	.-16     	; 0x2180 <SET_DEVICE+0x9a>
		{
			key_pressed = Read_KP(&KP1);
		}
		if (key_pressed == 1) //LIVING ROOM
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	09 f0       	breq	.+2      	; 0x2198 <SET_DEVICE+0xb2>
    2196:	c5 c0       	rjmp	.+394    	; 0x2322 <SET_DEVICE+0x23c>
		{
			LCD_ClearDisplay();
    2198:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
			LCD_GoToWriteString(0, 0, "1-LED");
    219c:	2e e2       	ldi	r18, 0x2E	; 46
    219e:	32 e0       	ldi	r19, 0x02	; 2
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	a9 01       	movw	r20, r18
    21a6:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(1, 0, "2-AC");
    21aa:	24 e3       	ldi	r18, 0x34	; 52
    21ac:	32 e0       	ldi	r19, 0x02	; 2
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	a9 01       	movw	r20, r18
    21b4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(2, 0, "3-HEATER");
    21b8:	29 e3       	ldi	r18, 0x39	; 57
    21ba:	32 e0       	ldi	r19, 0x02	; 2
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	a9 01       	movw	r20, r18
    21c2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			while (1)
			{
				key_pressed = 0xFF;
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <SET_DEVICE+0xf0>
				while (key_pressed == 0xFF)
				{
					key_pressed = Read_KP(&KP1);
    21cc:	ce 01       	movw	r24, r28
    21ce:	02 96       	adiw	r24, 0x02	; 2
    21d0:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    21d4:	89 83       	std	Y+1, r24	; 0x01
			LCD_GoToWriteString(1, 0, "2-AC");
			LCD_GoToWriteString(2, 0, "3-HEATER");
			while (1)
			{
				key_pressed = 0xFF;
				while (key_pressed == 0xFF)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	8f 3f       	cpi	r24, 0xFF	; 255
    21da:	c1 f3       	breq	.-16     	; 0x21cc <SET_DEVICE+0xe6>
				{
					key_pressed = Read_KP(&KP1);
				}
				if (key_pressed == 1) //1-LED
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	99 f5       	brne	.+102    	; 0x2248 <SET_DEVICE+0x162>
				{
					LCD_ClearDisplay();
    21e2:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN2,
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
    21f0:	22 e4       	ldi	r18, 0x42	; 66
    21f2:	32 e0       	ldi	r19, 0x02	; 2
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	a9 01       	movw	r20, r18
    21fa:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
    21fe:	20 e5       	ldi	r18, 0x50	; 80
    2200:	32 e0       	ldi	r19, 0x02	; 2
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	a9 01       	movw	r20, r18
    2208:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	05 c0       	rjmp	.+10     	; 0x221c <SET_DEVICE+0x136>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    2212:	ce 01       	movw	r24, r28
    2214:	02 96       	adiw	r24, 0x02	; 2
    2216:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    221a:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 3f       	cpi	r24, 0xFF	; 255
    2220:	c1 f3       	breq	.-16     	; 0x2212 <SET_DEVICE+0x12c>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN LED ON
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	31 f4       	brne	.+12     	; 0x2234 <SET_DEVICE+0x14e>
						{

							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2,
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	62 e0       	ldi	r22, 0x02	; 2
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2232:	91 c2       	rjmp	.+1314   	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN LED OFF
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	09 f0       	breq	.+2      	; 0x223c <SET_DEVICE+0x156>
    223a:	8d c2       	rjmp	.+1306   	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN2,
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	62 e0       	ldi	r22, 0x02	; 2
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2246:	87 c2       	rjmp	.+1294   	; 0x2756 <SET_DEVICE+0x670>

						}
						break;
					}
				}
				else if (key_pressed == 2) //2-AC
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	82 30       	cpi	r24, 0x02	; 2
    224c:	99 f5       	brne	.+102    	; 0x22b4 <SET_DEVICE+0x1ce>
				{
					LCD_ClearDisplay();
    224e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN3,
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	63 e0       	ldi	r22, 0x03	; 3
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN AC ON");
    225c:	2f e5       	ldi	r18, 0x5F	; 95
    225e:	32 e0       	ldi	r19, 0x02	; 2
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN AC OFF");
    226a:	2c e6       	ldi	r18, 0x6C	; 108
    226c:	32 e0       	ldi	r19, 0x02	; 2
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	a9 01       	movw	r20, r18
    2274:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <SET_DEVICE+0x1a2>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    227e:	ce 01       	movw	r24, r28
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    2286:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN AC ON");
					LCD_GoToWriteString(1, 0, "2-TURN AC OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	8f 3f       	cpi	r24, 0xFF	; 255
    228c:	c1 f3       	breq	.-16     	; 0x227e <SET_DEVICE+0x198>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN AC ON
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	31 f4       	brne	.+12     	; 0x22a0 <SET_DEVICE+0x1ba>
						{

							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3,
    2294:	82 e0       	ldi	r24, 0x02	; 2
    2296:	63 e0       	ldi	r22, 0x03	; 3
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    229e:	5b c2       	rjmp	.+1206   	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN AC OFF
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	82 30       	cpi	r24, 0x02	; 2
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <SET_DEVICE+0x1c2>
    22a6:	57 c2       	rjmp	.+1198   	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN3,
    22a8:	82 e0       	ldi	r24, 0x02	; 2
    22aa:	63 e0       	ldi	r22, 0x03	; 3
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    22b2:	51 c2       	rjmp	.+1186   	; 0x2756 <SET_DEVICE+0x670>
						}
						break;
					}
				}

				else if (key_pressed == 3) //3-HEATER
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	83 30       	cpi	r24, 0x03	; 3
    22b8:	09 f0       	breq	.+2      	; 0x22bc <SET_DEVICE+0x1d6>
    22ba:	4d c2       	rjmp	.+1178   	; 0x2756 <SET_DEVICE+0x670>
				{
					LCD_ClearDisplay();
    22bc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN4,
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	64 e0       	ldi	r22, 0x04	; 4
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN HEATER ON");
    22ca:	2a e7       	ldi	r18, 0x7A	; 122
    22cc:	32 e0       	ldi	r19, 0x02	; 2
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	a9 01       	movw	r20, r18
    22d4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN HEATER OFF");
    22d8:	2b e8       	ldi	r18, 0x8B	; 139
    22da:	32 e0       	ldi	r19, 0x02	; 2
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <SET_DEVICE+0x210>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    22ec:	ce 01       	movw	r24, r28
    22ee:	02 96       	adiw	r24, 0x02	; 2
    22f0:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    22f4:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN HEATER ON");
					LCD_GoToWriteString(1, 0, "2-TURN HEATER OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	8f 3f       	cpi	r24, 0xFF	; 255
    22fa:	c1 f3       	breq	.-16     	; 0x22ec <SET_DEVICE+0x206>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN HEATER ON
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	31 f4       	brne	.+12     	; 0x230e <SET_DEVICE+0x228>
						{

							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4,
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	64 e0       	ldi	r22, 0x04	; 4
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    230c:	24 c2       	rjmp	.+1096   	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN HEATER OFF
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	09 f0       	breq	.+2      	; 0x2316 <SET_DEVICE+0x230>
    2314:	20 c2       	rjmp	.+1088   	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN4,
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	64 e0       	ldi	r22, 0x04	; 4
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2320:	1a c2       	rjmp	.+1076   	; 0x2756 <SET_DEVICE+0x670>

				}
				break;
			}
		}
		else if (key_pressed == 2) //ROOM 1
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	09 f0       	breq	.+2      	; 0x232a <SET_DEVICE+0x244>
    2328:	c5 c0       	rjmp	.+394    	; 0x24b4 <SET_DEVICE+0x3ce>
		{
			LCD_ClearDisplay();
    232a:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
			LCD_GoToWriteString(0, 0, "1-LED");
    232e:	2e e2       	ldi	r18, 0x2E	; 46
    2330:	32 e0       	ldi	r19, 0x02	; 2
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	a9 01       	movw	r20, r18
    2338:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(1, 0, "2-AC");
    233c:	24 e3       	ldi	r18, 0x34	; 52
    233e:	32 e0       	ldi	r19, 0x02	; 2
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	a9 01       	movw	r20, r18
    2346:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(2, 0, "3-HEATER");
    234a:	29 e3       	ldi	r18, 0x39	; 57
    234c:	32 e0       	ldi	r19, 0x02	; 2
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	a9 01       	movw	r20, r18
    2354:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			while (1)
			{
				key_pressed = 0xFF;
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <SET_DEVICE+0x282>
				while (key_pressed == 0xFF)
				{
					key_pressed = Read_KP(&KP1);
    235e:	ce 01       	movw	r24, r28
    2360:	02 96       	adiw	r24, 0x02	; 2
    2362:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    2366:	89 83       	std	Y+1, r24	; 0x01
			LCD_GoToWriteString(1, 0, "2-AC");
			LCD_GoToWriteString(2, 0, "3-HEATER");
			while (1)
			{
				key_pressed = 0xFF;
				while (key_pressed == 0xFF)
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	c1 f3       	breq	.-16     	; 0x235e <SET_DEVICE+0x278>
				{
					key_pressed = Read_KP(&KP1);
				}
				if (key_pressed == 1) //1-LED
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	81 30       	cpi	r24, 0x01	; 1
    2372:	99 f5       	brne	.+102    	; 0x23da <SET_DEVICE+0x2f4>
				{
					LCD_ClearDisplay();
    2374:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN5,
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	65 e0       	ldi	r22, 0x05	; 5
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
    2382:	22 e4       	ldi	r18, 0x42	; 66
    2384:	32 e0       	ldi	r19, 0x02	; 2
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	a9 01       	movw	r20, r18
    238c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
    2390:	20 e5       	ldi	r18, 0x50	; 80
    2392:	32 e0       	ldi	r19, 0x02	; 2
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	a9 01       	movw	r20, r18
    239a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    239e:	8f ef       	ldi	r24, 0xFF	; 255
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	05 c0       	rjmp	.+10     	; 0x23ae <SET_DEVICE+0x2c8>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    23a4:	ce 01       	movw	r24, r28
    23a6:	02 96       	adiw	r24, 0x02	; 2
    23a8:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    23ac:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	8f 3f       	cpi	r24, 0xFF	; 255
    23b2:	c1 f3       	breq	.-16     	; 0x23a4 <SET_DEVICE+0x2be>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN LED ON
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	31 f4       	brne	.+12     	; 0x23c6 <SET_DEVICE+0x2e0>
						{

							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN5,
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	65 e0       	ldi	r22, 0x05	; 5
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    23c4:	c8 c1       	rjmp	.+912    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN LED OFF
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	09 f0       	breq	.+2      	; 0x23ce <SET_DEVICE+0x2e8>
    23cc:	c4 c1       	rjmp	.+904    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN5,
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	65 e0       	ldi	r22, 0x05	; 5
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    23d8:	be c1       	rjmp	.+892    	; 0x2756 <SET_DEVICE+0x670>

						}
						break;
					}
				}
				else if (key_pressed == 2) //2-AC
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	99 f5       	brne	.+102    	; 0x2446 <SET_DEVICE+0x360>
				{
					LCD_ClearDisplay();
    23e0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN6,
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	66 e0       	ldi	r22, 0x06	; 6
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN AC ON");
    23ee:	2f e5       	ldi	r18, 0x5F	; 95
    23f0:	32 e0       	ldi	r19, 0x02	; 2
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	a9 01       	movw	r20, r18
    23f8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN AC OFF");
    23fc:	2c e6       	ldi	r18, 0x6C	; 108
    23fe:	32 e0       	ldi	r19, 0x02	; 2
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	a9 01       	movw	r20, r18
    2406:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    240a:	8f ef       	ldi	r24, 0xFF	; 255
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	05 c0       	rjmp	.+10     	; 0x241a <SET_DEVICE+0x334>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    2410:	ce 01       	movw	r24, r28
    2412:	02 96       	adiw	r24, 0x02	; 2
    2414:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    2418:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN AC ON");
					LCD_GoToWriteString(1, 0, "2-TURN AC OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	8f 3f       	cpi	r24, 0xFF	; 255
    241e:	c1 f3       	breq	.-16     	; 0x2410 <SET_DEVICE+0x32a>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN AC ON
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	31 f4       	brne	.+12     	; 0x2432 <SET_DEVICE+0x34c>
						{

							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN6,
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	66 e0       	ldi	r22, 0x06	; 6
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2430:	92 c1       	rjmp	.+804    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN AC OFF
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	09 f0       	breq	.+2      	; 0x243a <SET_DEVICE+0x354>
    2438:	8e c1       	rjmp	.+796    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN6,
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2444:	88 c1       	rjmp	.+784    	; 0x2756 <SET_DEVICE+0x670>
						}
						break;
					}
				}

				else if (key_pressed == 3) //3-HEATER
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	09 f0       	breq	.+2      	; 0x244e <SET_DEVICE+0x368>
    244c:	84 c1       	rjmp	.+776    	; 0x2756 <SET_DEVICE+0x670>
				{
					LCD_ClearDisplay();
    244e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTC, DIO_u8PIN7,
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	67 e0       	ldi	r22, 0x07	; 7
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN HEATER ON");
    245c:	2a e7       	ldi	r18, 0x7A	; 122
    245e:	32 e0       	ldi	r19, 0x02	; 2
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	a9 01       	movw	r20, r18
    2466:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN HEATER OFF");
    246a:	2b e8       	ldi	r18, 0x8B	; 139
    246c:	32 e0       	ldi	r19, 0x02	; 2
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	a9 01       	movw	r20, r18
    2474:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    2478:	8f ef       	ldi	r24, 0xFF	; 255
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <SET_DEVICE+0x3a2>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    247e:	ce 01       	movw	r24, r28
    2480:	02 96       	adiw	r24, 0x02	; 2
    2482:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    2486:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN HEATER ON");
					LCD_GoToWriteString(1, 0, "2-TURN HEATER OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	8f 3f       	cpi	r24, 0xFF	; 255
    248c:	c1 f3       	breq	.-16     	; 0x247e <SET_DEVICE+0x398>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN HEATER ON
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	31 f4       	brne	.+12     	; 0x24a0 <SET_DEVICE+0x3ba>
						{

							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN7,
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	67 e0       	ldi	r22, 0x07	; 7
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    249e:	5b c1       	rjmp	.+694    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN HEATER OFF
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <SET_DEVICE+0x3c2>
    24a6:	57 c1       	rjmp	.+686    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTC, DIO_u8PIN7,
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	67 e0       	ldi	r22, 0x07	; 7
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    24b2:	51 c1       	rjmp	.+674    	; 0x2756 <SET_DEVICE+0x670>
				}
				break;
			}

		}
		else if (key_pressed == 3) //ROOM 2
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	09 f0       	breq	.+2      	; 0x24bc <SET_DEVICE+0x3d6>
    24ba:	c5 c0       	rjmp	.+394    	; 0x2646 <SET_DEVICE+0x560>
		{
			LCD_ClearDisplay();
    24bc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
			LCD_GoToWriteString(0, 0, "1-LED");
    24c0:	2e e2       	ldi	r18, 0x2E	; 46
    24c2:	32 e0       	ldi	r19, 0x02	; 2
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	a9 01       	movw	r20, r18
    24ca:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(1, 0, "2-AC");
    24ce:	24 e3       	ldi	r18, 0x34	; 52
    24d0:	32 e0       	ldi	r19, 0x02	; 2
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	a9 01       	movw	r20, r18
    24d8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(2, 0, "3-HEATER");
    24dc:	29 e3       	ldi	r18, 0x39	; 57
    24de:	32 e0       	ldi	r19, 0x02	; 2
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	a9 01       	movw	r20, r18
    24e6:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			while (1)
			{
				key_pressed = 0xFF;
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <SET_DEVICE+0x414>
				while (key_pressed == 0xFF)
				{
					key_pressed = Read_KP(&KP1);
    24f0:	ce 01       	movw	r24, r28
    24f2:	02 96       	adiw	r24, 0x02	; 2
    24f4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    24f8:	89 83       	std	Y+1, r24	; 0x01
			LCD_GoToWriteString(1, 0, "2-AC");
			LCD_GoToWriteString(2, 0, "3-HEATER");
			while (1)
			{
				key_pressed = 0xFF;
				while (key_pressed == 0xFF)
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	8f 3f       	cpi	r24, 0xFF	; 255
    24fe:	c1 f3       	breq	.-16     	; 0x24f0 <SET_DEVICE+0x40a>
				{
					key_pressed = Read_KP(&KP1);
				}
				if (key_pressed == 1) //1-LED
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	99 f5       	brne	.+102    	; 0x256c <SET_DEVICE+0x486>
				{
					LCD_ClearDisplay();
    2506:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTA, DIO_u8PIN2,
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
    2514:	22 e4       	ldi	r18, 0x42	; 66
    2516:	32 e0       	ldi	r19, 0x02	; 2
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	a9 01       	movw	r20, r18
    251e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
    2522:	20 e5       	ldi	r18, 0x50	; 80
    2524:	32 e0       	ldi	r19, 0x02	; 2
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	a9 01       	movw	r20, r18
    252c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    2530:	8f ef       	ldi	r24, 0xFF	; 255
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <SET_DEVICE+0x45a>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    2536:	ce 01       	movw	r24, r28
    2538:	02 96       	adiw	r24, 0x02	; 2
    253a:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    253e:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	8f 3f       	cpi	r24, 0xFF	; 255
    2544:	c1 f3       	breq	.-16     	; 0x2536 <SET_DEVICE+0x450>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN LED ON
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	31 f4       	brne	.+12     	; 0x2558 <SET_DEVICE+0x472>
						{

							DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN2,
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	62 e0       	ldi	r22, 0x02	; 2
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2556:	ff c0       	rjmp	.+510    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN LED OFF
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	82 30       	cpi	r24, 0x02	; 2
    255c:	09 f0       	breq	.+2      	; 0x2560 <SET_DEVICE+0x47a>
    255e:	fb c0       	rjmp	.+502    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN2,
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	62 e0       	ldi	r22, 0x02	; 2
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    256a:	f5 c0       	rjmp	.+490    	; 0x2756 <SET_DEVICE+0x670>

						}
						break;
					}
				}
				else if (key_pressed == 2) //2-AC
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	82 30       	cpi	r24, 0x02	; 2
    2570:	99 f5       	brne	.+102    	; 0x25d8 <SET_DEVICE+0x4f2>
				{
					LCD_ClearDisplay();
    2572:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTA, DIO_u8PIN3,
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	63 e0       	ldi	r22, 0x03	; 3
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN AC ON");
    2580:	2f e5       	ldi	r18, 0x5F	; 95
    2582:	32 e0       	ldi	r19, 0x02	; 2
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	a9 01       	movw	r20, r18
    258a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN AC OFF");
    258e:	2c e6       	ldi	r18, 0x6C	; 108
    2590:	32 e0       	ldi	r19, 0x02	; 2
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	a9 01       	movw	r20, r18
    2598:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	05 c0       	rjmp	.+10     	; 0x25ac <SET_DEVICE+0x4c6>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    25a2:	ce 01       	movw	r24, r28
    25a4:	02 96       	adiw	r24, 0x02	; 2
    25a6:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    25aa:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN AC ON");
					LCD_GoToWriteString(1, 0, "2-TURN AC OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	8f 3f       	cpi	r24, 0xFF	; 255
    25b0:	c1 f3       	breq	.-16     	; 0x25a2 <SET_DEVICE+0x4bc>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN AC ON
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	31 f4       	brne	.+12     	; 0x25c4 <SET_DEVICE+0x4de>
						{

							DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN3,
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	63 e0       	ldi	r22, 0x03	; 3
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    25c2:	c9 c0       	rjmp	.+402    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN AC OFF
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	09 f0       	breq	.+2      	; 0x25cc <SET_DEVICE+0x4e6>
    25ca:	c5 c0       	rjmp	.+394    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN3,
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	63 e0       	ldi	r22, 0x03	; 3
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    25d6:	bf c0       	rjmp	.+382    	; 0x2756 <SET_DEVICE+0x670>
						}
						break;
					}
				}

				else if (key_pressed == 3) //3-HEATER
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <SET_DEVICE+0x4fa>
    25de:	bb c0       	rjmp	.+374    	; 0x2756 <SET_DEVICE+0x670>
				{
					LCD_ClearDisplay();
    25e0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTA, DIO_u8PIN4,
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	64 e0       	ldi	r22, 0x04	; 4
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN HEATER ON");
    25ee:	2a e7       	ldi	r18, 0x7A	; 122
    25f0:	32 e0       	ldi	r19, 0x02	; 2
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	a9 01       	movw	r20, r18
    25f8:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN HEATER OFF");
    25fc:	2b e8       	ldi	r18, 0x8B	; 139
    25fe:	32 e0       	ldi	r19, 0x02	; 2
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	a9 01       	movw	r20, r18
    2606:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    260a:	8f ef       	ldi	r24, 0xFF	; 255
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	05 c0       	rjmp	.+10     	; 0x261a <SET_DEVICE+0x534>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    2610:	ce 01       	movw	r24, r28
    2612:	02 96       	adiw	r24, 0x02	; 2
    2614:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    2618:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN HEATER ON");
					LCD_GoToWriteString(1, 0, "2-TURN HEATER OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	8f 3f       	cpi	r24, 0xFF	; 255
    261e:	c1 f3       	breq	.-16     	; 0x2610 <SET_DEVICE+0x52a>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN HEATER ON
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	31 f4       	brne	.+12     	; 0x2632 <SET_DEVICE+0x54c>
						{

							DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN4,
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	64 e0       	ldi	r22, 0x04	; 4
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2630:	92 c0       	rjmp	.+292    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN HEATER OFF
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	82 30       	cpi	r24, 0x02	; 2
    2636:	09 f0       	breq	.+2      	; 0x263a <SET_DEVICE+0x554>
    2638:	8e c0       	rjmp	.+284    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTA, DIO_u8PIN4,
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	64 e0       	ldi	r22, 0x04	; 4
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2644:	88 c0       	rjmp	.+272    	; 0x2756 <SET_DEVICE+0x670>
				}
				break;
			}

		}
		else if (key_pressed == 4) //GARDEN
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	09 f0       	breq	.+2      	; 0x264e <SET_DEVICE+0x568>
    264c:	84 c0       	rjmp	.+264    	; 0x2756 <SET_DEVICE+0x670>
		{
			LCD_ClearDisplay();
    264e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>

			LCD_GoToWriteString(0, 0, "1-OPEN/CLOSE GATE ");
    2652:	2d e9       	ldi	r18, 0x9D	; 157
    2654:	32 e0       	ldi	r19, 0x02	; 2
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	60 e0       	ldi	r22, 0x00	; 0
    265a:	a9 01       	movw	r20, r18
    265c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			LCD_GoToWriteString(1, 0, "2-TURN LED ON/OFF");
    2660:	20 eb       	ldi	r18, 0xB0	; 176
    2662:	32 e0       	ldi	r19, 0x02	; 2
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	a9 01       	movw	r20, r18
    266a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
			while (1)
			{

				key_pressed = 0xFF;
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	05 c0       	rjmp	.+10     	; 0x267e <SET_DEVICE+0x598>
				while (key_pressed == 0xFF)
				{
					key_pressed = Read_KP(&KP1);
    2674:	ce 01       	movw	r24, r28
    2676:	02 96       	adiw	r24, 0x02	; 2
    2678:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    267c:	89 83       	std	Y+1, r24	; 0x01
			LCD_GoToWriteString(1, 0, "2-TURN LED ON/OFF");
			while (1)
			{

				key_pressed = 0xFF;
				while (key_pressed == 0xFF)
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	8f 3f       	cpi	r24, 0xFF	; 255
    2682:	c1 f3       	breq	.-16     	; 0x2674 <SET_DEVICE+0x58e>
				{
					key_pressed = Read_KP(&KP1);
				}
				if (key_pressed == 1)
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 f5       	brne	.+100    	; 0x26ee <SET_DEVICE+0x608>
				{

					LCD_ClearDisplay();
    268a:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTD, DIO_u8PIN3,
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	63 e0       	ldi	r22, 0x03	; 3
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-OPEN GATE");
    2698:	22 ec       	ldi	r18, 0xC2	; 194
    269a:	32 e0       	ldi	r19, 0x02	; 2
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	a9 01       	movw	r20, r18
    26a2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-CLOSE GATE");
    26a6:	2e ec       	ldi	r18, 0xCE	; 206
    26a8:	32 e0       	ldi	r19, 0x02	; 2
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	a9 01       	movw	r20, r18
    26b0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    26b4:	8f ef       	ldi	r24, 0xFF	; 255
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	05 c0       	rjmp	.+10     	; 0x26c4 <SET_DEVICE+0x5de>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    26ba:	ce 01       	movw	r24, r28
    26bc:	02 96       	adiw	r24, 0x02	; 2
    26be:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    26c2:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-OPEN GATE");
					LCD_GoToWriteString(1, 0, "2-CLOSE GATE");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	8f 3f       	cpi	r24, 0xFF	; 255
    26c8:	c1 f3       	breq	.-16     	; 0x26ba <SET_DEVICE+0x5d4>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //OPEN GATE
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	31 f4       	brne	.+12     	; 0x26dc <SET_DEVICE+0x5f6>
						{

							DIO_VoidSetPinValue(DIO_u8PORTD, DIO_u8PIN3,
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	63 e0       	ldi	r22, 0x03	; 3
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    26da:	3d c0       	rjmp	.+122    	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //CLOSE GATE
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	d1 f5       	brne	.+116    	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTD, DIO_u8PIN3,
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	63 e0       	ldi	r22, 0x03	; 3
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    26ec:	34 c0       	rjmp	.+104    	; 0x2756 <SET_DEVICE+0x670>
						}
						break;
					}

				}
				else if (key_pressed == 2)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	89 f5       	brne	.+98     	; 0x2756 <SET_DEVICE+0x670>
				{
					LCD_ClearDisplay();
    26f4:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
					DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN3,
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	63 e0       	ldi	r22, 0x03	; 3
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
					DIO_u8PIN_OUTPUT);
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
    2702:	22 e4       	ldi	r18, 0x42	; 66
    2704:	32 e0       	ldi	r19, 0x02	; 2
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	a9 01       	movw	r20, r18
    270c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
    2710:	20 e5       	ldi	r18, 0x50	; 80
    2712:	32 e0       	ldi	r19, 0x02	; 2
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
					while (1)
					{
						key_pressed = 0xFF;
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	05 c0       	rjmp	.+10     	; 0x272e <SET_DEVICE+0x648>
						while (key_pressed == 0xFF)
						{
							key_pressed = Read_KP(&KP1);
    2724:	ce 01       	movw	r24, r28
    2726:	02 96       	adiw	r24, 0x02	; 2
    2728:	0e 94 90 25 	call	0x4b20	; 0x4b20 <Read_KP>
    272c:	89 83       	std	Y+1, r24	; 0x01
					LCD_GoToWriteString(0, 0, "1-TURN LED ON");
					LCD_GoToWriteString(1, 0, "2-TURN LED OFF");
					while (1)
					{
						key_pressed = 0xFF;
						while (key_pressed == 0xFF)
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	8f 3f       	cpi	r24, 0xFF	; 255
    2732:	c1 f3       	breq	.-16     	; 0x2724 <SET_DEVICE+0x63e>
						{
							key_pressed = Read_KP(&KP1);
						}
						if (key_pressed == 1) //TURN LED ON
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	31 f4       	brne	.+12     	; 0x2746 <SET_DEVICE+0x660>
						{

							DIO_VoidSetPinValue(DIO_u8PORTB, DIO_u8PIN3,
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	63 e0       	ldi	r22, 0x03	; 3
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <SET_DEVICE+0x670>
							DIO_u8PIN_HIGH);

						}
						else if (key_pressed == 2) //2-TURN LED OFF
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	29 f4       	brne	.+10     	; 0x2756 <SET_DEVICE+0x670>
						{
							DIO_VoidSetPinValue(DIO_u8PORTB, DIO_u8PIN3,
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	63 e0       	ldi	r22, 0x03	; 3
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>

		}

		break;
	}
}
    2756:	61 96       	adiw	r28, 0x11	; 17
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <USART_voidInit>:
#include "USART_Interface.h"




void USART_voidInit(void){
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	USART_UCSRB_REG |= (1 << USART_UCSRB_RIXEN_BIT) | (1 << USART_UCSRB_TXEN_BIT);
    2772:	aa e2       	ldi	r26, 0x2A	; 42
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ea e2       	ldi	r30, 0x2A	; 42
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	88 61       	ori	r24, 0x18	; 24
    277e:	8c 93       	st	X, r24

	USART_UCSRC_REG = (1 <<USART_UCSRC_URSEL_BIT) | (0 << USART_UCSRC_UMSEL_BIT) | (0 << USART_UCSRC_UPM0_BIT)
    2780:	e0 e4       	ldi	r30, 0x40	; 64
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	86 e8       	ldi	r24, 0x86	; 134
    2786:	80 83       	st	Z, r24
			| (0 << USART_UCSRC_UPM1_BIT) | (0 << USART_UCSRC_USBS_BIT) | (1 << USART_UCSRC_UCSZ0_BIT)
			| (1 << USART_UCSRC_UCSZ1_BIT) | (0 << USART_UCSRB_UCSZ2_BIT);

	u8 Baud = 51;
    2788:	83 e3       	ldi	r24, 0x33	; 51
    278a:	89 83       	std	Y+1, r24	; 0x01
	USART_UBRRL_REG = Baud;
    278c:	e9 e2       	ldi	r30, 0x29	; 41
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 83       	st	Z, r24
	USART_UBRRH_REG = (Baud >> 8);
    2794:	e0 e4       	ldi	r30, 0x40	; 64
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	89 2f       	mov	r24, r25
    27a0:	99 0f       	add	r25, r25
    27a2:	99 0b       	sbc	r25, r25
    27a4:	80 83       	st	Z, r24
}
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <USART_voidTransmit>:
void USART_voidTransmit(u8 Copy_u8Data){
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	89 83       	std	Y+1, r24	; 0x01
while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_UDRE_BIT)==0){
    27ba:	eb e2       	ldi	r30, 0x2B	; 43
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	82 95       	swap	r24
    27c2:	86 95       	lsr	r24
    27c4:	87 70       	andi	r24, 0x07	; 7
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	81 70       	andi	r24, 0x01	; 1
    27cc:	90 70       	andi	r25, 0x00	; 0
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	a1 f3       	breq	.-24     	; 0x27ba <USART_voidTransmit+0xc>
};
USART_UDR_REG=Copy_u8Data;
    27d2:	ec e2       	ldi	r30, 0x2C	; 44
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	80 83       	st	Z, r24
}
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <USART_voidRecieve>:
void USART_voidRecieve(u8 *Copy_ptu8DataSent){
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <USART_voidRecieve+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_RXC_BIT)==0){
    27f0:	eb e2       	ldi	r30, 0x2B	; 43
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	88 23       	and	r24, r24
    27f8:	dc f7       	brge	.-10     	; 0x27f0 <USART_voidRecieve+0xe>

	}

	*Copy_ptu8DataSent=USART_UDR_REG;
    27fa:	ec e2       	ldi	r30, 0x2C	; 44
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	e9 81       	ldd	r30, Y+1	; 0x01
    2802:	fa 81       	ldd	r31, Y+2	; 0x02
    2804:	80 83       	st	Z, r24
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <USART_voidSendString>:
void USART_voidSendString(u8* Copy_pu8String)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <USART_voidSendString+0x6>
    2816:	0f 92       	push	r0
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	9b 83       	std	Y+3, r25	; 0x03
    281e:	8a 83       	std	Y+2, r24	; 0x02
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <USART_voidSendString+0x30>

	u8 i;
	while (Copy_pu8String[i] != '\0')
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	9b 81       	ldd	r25, Y+3	; 0x03
    282c:	fc 01       	movw	r30, r24
    282e:	e2 0f       	add	r30, r18
    2830:	f3 1f       	adc	r31, r19
    2832:	90 81       	ld	r25, Z
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 2f       	mov	r24, r25
    283c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <USART_voidTransmit>
}
void USART_voidSendString(u8* Copy_pu8String)
{

	u8 i;
	while (Copy_pu8String[i] != '\0')
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	9b 81       	ldd	r25, Y+3	; 0x03
    284a:	fc 01       	movw	r30, r24
    284c:	e2 0f       	add	r30, r18
    284e:	f3 1f       	adc	r31, r19
    2850:	80 81       	ld	r24, Z
    2852:	88 23       	and	r24, r24
    2854:	31 f7       	brne	.-52     	; 0x2822 <USART_voidSendString+0x12>
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
	    }
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <USART_voidDisable>:


void USART_voidDisable(void)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    // Clear the USART transmitter and receiver enable bits
    USART_UCSRB_REG &= ~((1 << USART_UCSRB_TXEN_BIT) | (1 << USART_UCSRB_RIXEN_BIT));
    286a:	aa e2       	ldi	r26, 0x2A	; 42
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ea e2       	ldi	r30, 0x2A	; 42
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	87 7e       	andi	r24, 0xE7	; 231
    2876:	8c 93       	st	X, r24
}
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <TWI_voidMaterInit>:



/*Initialize Master*/
void TWI_voidMaterInit(u8 Copy_u8SlaveAddress)
{
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	89 83       	std	Y+1, r24	; 0x01
	/*1-Choose Prescaler*/
	TWI_TWBR_REG=(u8)(((FCPU/SCL)-16)/2);
    288a:	e0 e2       	ldi	r30, 0x20	; 32
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 e2       	ldi	r24, 0x20	; 32
    2890:	80 83       	st	Z, r24
	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    2892:	e2 e2       	ldi	r30, 0x22	; 34
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	88 0f       	add	r24, r24
    289a:	80 83       	st	Z, r24
 	 /*3-enable*/
 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    289c:	a6 e5       	ldi	r26, 0x56	; 86
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e6 e5       	ldi	r30, 0x56	; 86
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	84 60       	ori	r24, 0x04	; 4
    28a8:	8c 93       	st	X, r24
}
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <TWI_voidSlaveInit>:
/*Initialize Slave*/
void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress){
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	0f 92       	push	r0
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	89 83       	std	Y+1, r24	; 0x01

	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    28be:	e2 e2       	ldi	r30, 0x22	; 34
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	88 0f       	add	r24, r24
    28c6:	80 83       	st	Z, r24
 	 /*3-enable*/
 	 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    28c8:	a6 e5       	ldi	r26, 0x56	; 86
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e6 e5       	ldi	r30, 0x56	; 86
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	84 60       	ori	r24, 0x04	; 4
    28d4:	8c 93       	st	X, r24
}
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <TWI_voidStartCond>:
/*As Master Start Condition*/
void TWI_voidStartCond(void){
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    28e6:	a6 e5       	ldi	r26, 0x56	; 86
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e6 e5       	ldi	r30, 0x56	; 86
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	8f 7e       	andi	r24, 0xEF	; 239
    28f2:	8c 93       	st	X, r24
		/*1-Start Condition*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    28f4:	a6 e5       	ldi	r26, 0x56	; 86
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e6 e5       	ldi	r30, 0x56	; 86
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	80 62       	ori	r24, 0x20	; 32
    2900:	8c 93       	st	X, r24
		/*2-CLEAR TWINT FLAG TO START OPERATION*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    2902:	a6 e5       	ldi	r26, 0x56	; 86
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e6 e5       	ldi	r30, 0x56	; 86
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	80 68       	ori	r24, 0x80	; 128
    290e:	8c 93       	st	X, r24
		/*3-Wait until flag became 1*/
		while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    2910:	e6 e5       	ldi	r30, 0x56	; 86
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	88 23       	and	r24, r24
    2918:	dc f7       	brge	.-10     	; 0x2910 <TWI_voidStartCond+0x32>
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <TWI_voidSendSlaveAddressWithRead>:
/*As Master write Address on Bus*/
void TWI_voidSendSlaveAddressWithRead(u8 Copy_u8SlaveAddressToSend){
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	0f 92       	push	r0
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=((Copy_u8SlaveAddressToSend<<1) |0x01);
    292c:	e3 e2       	ldi	r30, 0x23	; 35
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	81 60       	ori	r24, 0x01	; 1
    293c:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    293e:	a6 e5       	ldi	r26, 0x56	; 86
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e6 e5       	ldi	r30, 0x56	; 86
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    294c:	e6 e5       	ldi	r30, 0x56	; 86
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	88 23       	and	r24, r24
    2954:	dc f7       	brge	.-10     	; 0x294c <TWI_voidSendSlaveAddressWithRead+0x2c>
}
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <TWI_voidSendSlaveAddressWithWrite>:
void TWI_voidSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddressToSend){
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	0f 92       	push	r0
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=(Copy_u8SlaveAddressToSend<<1);
    296a:	e3 e2       	ldi	r30, 0x23	; 35
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	88 0f       	add	r24, r24
    2972:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    2974:	a6 e5       	ldi	r26, 0x56	; 86
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e6 e5       	ldi	r30, 0x56	; 86
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	80 68       	ori	r24, 0x80	; 128
    2980:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    2982:	e6 e5       	ldi	r30, 0x56	; 86
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	88 23       	and	r24, r24
    298a:	dc f7       	brge	.-10     	; 0x2982 <TWI_voidSendSlaveAddressWithWrite+0x24>
}
    298c:	0f 90       	pop	r0
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <TWI_voidMasterWriteData>:
/*As Master Write Data On Bus*/
void TWI_voidMasterWriteData(u8 Copy_u8SentData){
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	0f 92       	push	r0
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	89 83       	std	Y+1, r24	; 0x01
	/*Assign Data to bus*/
	TWI_TWDR_REG=Copy_u8SentData;
    29a0:	e3 e2       	ldi	r30, 0x23	; 35
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	80 83       	st	Z, r24
	/*Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    29a8:	a6 e5       	ldi	r26, 0x56	; 86
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e6 e5       	ldi	r30, 0x56	; 86
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	80 68       	ori	r24, 0x80	; 128
    29b4:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    29b6:	e6 e5       	ldi	r30, 0x56	; 86
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	88 23       	and	r24, r24
    29be:	dc f7       	brge	.-10     	; 0x29b6 <TWI_voidMasterWriteData+0x22>
}
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <TWI_voidMasterReadData>:
/*As Master Read Data On Bus*/
void TWI_voidMasterReadData(u8 *Copy_u8ReceivedData){
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <TWI_voidMasterReadData+0x6>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01

	/*1Enable ACK*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    29d6:	a6 e5       	ldi	r26, 0x56	; 86
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e6 e5       	ldi	r30, 0x56	; 86
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	80 64       	ori	r24, 0x40	; 64
    29e2:	8c 93       	st	X, r24
	/*2-Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    29e4:	a6 e5       	ldi	r26, 0x56	; 86
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e6 e5       	ldi	r30, 0x56	; 86
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	80 68       	ori	r24, 0x80	; 128
    29f0:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    29f2:	e6 e5       	ldi	r30, 0x56	; 86
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	88 23       	and	r24, r24
    29fa:	dc f7       	brge	.-10     	; 0x29f2 <TWI_voidMasterReadData+0x2a>
	/*CHECK FOR ACK*/

	*Copy_u8ReceivedData=TWI_TWDR_REG;
    29fc:	e3 e2       	ldi	r30, 0x23	; 35
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	e9 81       	ldd	r30, Y+1	; 0x01
    2a04:	fa 81       	ldd	r31, Y+2	; 0x02
    2a06:	80 83       	st	Z, r24
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <TWI_voidStopCond>:
/*As Master Stop Condition*/
void TWI_voidStopCond(void){
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    2a1a:	a6 e5       	ldi	r26, 0x56	; 86
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e6 e5       	ldi	r30, 0x56	; 86
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8f 7d       	andi	r24, 0xDF	; 223
    2a26:	8c 93       	st	X, r24
  
	/*1-Stop Condition*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    2a28:	a6 e5       	ldi	r26, 0x56	; 86
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e6 e5       	ldi	r30, 0x56	; 86
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	80 61       	ori	r24, 0x10	; 16
    2a34:	8c 93       	st	X, r24
	/*2-CLEAR TWINT FLAG TO START OPERATION*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    2a36:	a6 e5       	ldi	r26, 0x56	; 86
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e6 e5       	ldi	r30, 0x56	; 86
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 68       	ori	r24, 0x80	; 128
    2a42:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
//	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
	
}
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <TWI_GetStatus>:
u8   TWI_GetStatus(u8 Copy_u8Status)
{
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	0f 92       	push	r0
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	89 83       	std	Y+1, r24	; 0x01
    /*Get status*/
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    2a56:	a6 e5       	ldi	r26, 0x56	; 86
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e6 e5       	ldi	r30, 0x56	; 86
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 68       	ori	r24, 0x80	; 128
    2a62:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    2a64:	a6 e5       	ldi	r26, 0x56	; 86
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e6 e5       	ldi	r30, 0x56	; 86
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 64       	ori	r24, 0x40	; 64
    2a70:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    2a72:	a6 e5       	ldi	r26, 0x56	; 86
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e6 e5       	ldi	r30, 0x56	; 86
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	84 60       	ori	r24, 0x04	; 4
    2a7e:	8c 93       	st	X, r24
    /*Busy wait for TWINT flag*/
    while(!GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT));
    2a80:	e6 e5       	ldi	r30, 0x56	; 86
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	88 23       	and	r24, r24
    2a88:	dc f7       	brge	.-10     	; 0x2a80 <TWI_GetStatus+0x36>
    while((TWI_TWSR_REG & 0xF8) != Copy_u8Status);
    2a8a:	e1 e2       	ldi	r30, 0x21	; 33
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9c 01       	movw	r18, r24
    2a96:	28 7f       	andi	r18, 0xF8	; 248
    2a98:	30 70       	andi	r19, 0x00	; 0
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	28 17       	cp	r18, r24
    2aa2:	39 07       	cpc	r19, r25
    2aa4:	91 f7       	brne	.-28     	; 0x2a8a <TWI_GetStatus+0x40>
    return TWI_TWDR_REG;
    2aa6:	e3 e2       	ldi	r30, 0x23	; 35
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
}
    2aac:	0f 90       	pop	r0
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <G_INT_Enable>:
#include"../../LIB/BIT_MATH.h"
#include"Global_INT_Private.h"
#include"Global_INT_Interface.h"

void G_INT_Enable(void)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_REG_I_BIT);
    2abc:	af e5       	ldi	r26, 0x5F	; 95
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	ef e5       	ldi	r30, 0x5F	; 95
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	80 68       	ori	r24, 0x80	; 128
    2ac8:	8c 93       	st	X, r24
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <G_INT_Disable>:
void G_INT_Disable(void)
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,SREG_REG_I_BIT);
    2ad8:	af e5       	ldi	r26, 0x5F	; 95
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	ef e5       	ldi	r30, 0x5F	; 95
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 77       	andi	r24, 0x7F	; 127
    2ae4:	8c 93       	st	X, r24
}
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <GPT_Init>:

void __vector_10(void)__attribute((signal,used));
void __vector_11(void)__attribute((signal,used));

void GPT_Init(GPT_stConfig *Copy_stConfig)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <GPT_Init+0x6>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_stConfig->GPT_Timer == GPT_Timer0)
    2afa:	e9 81       	ldd	r30, Y+1	; 0x01
    2afc:	fa 81       	ldd	r31, Y+2	; 0x02
    2afe:	80 81       	ld	r24, Z
    2b00:	88 23       	and	r24, r24
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <GPT_Init+0x1a>
    2b04:	68 c0       	rjmp	.+208    	; 0x2bd6 <GPT_Init+0xea>
	{
		if (Copy_stConfig->GPT_WG_Mode == GPT_Normal)
    2b06:	e9 81       	ldd	r30, Y+1	; 0x01
    2b08:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0a:	81 81       	ldd	r24, Z+1	; 0x01
    2b0c:	88 23       	and	r24, r24
    2b0e:	79 f5       	brne	.+94     	; 0x2b6e <GPT_Init+0x82>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    2b10:	a3 e5       	ldi	r26, 0x53	; 83
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e3 e5       	ldi	r30, 0x53	; 83
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	8f 7b       	andi	r24, 0xBF	; 191
    2b1c:	8c 93       	st	X, r24
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    2b1e:	a3 e5       	ldi	r26, 0x53	; 83
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e3 e5       	ldi	r30, 0x53	; 83
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	87 7f       	andi	r24, 0xF7	; 247
    2b2a:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    2b2c:	a3 e5       	ldi	r26, 0x53	; 83
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e3 e5       	ldi	r30, 0x53	; 83
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	90 81       	ld	r25, Z
    2b36:	e9 81       	ldd	r30, Y+1	; 0x01
    2b38:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	89 2b       	or	r24, r25
    2b3e:	8c 93       	st	X, r24
			Timer_TCNT0_REG = Copy_stConfig->GPT_Preload;
    2b40:	a2 e5       	ldi	r26, 0x52	; 82
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e9 81       	ldd	r30, Y+1	; 0x01
    2b46:	fa 81       	ldd	r31, Y+2	; 0x02
    2b48:	83 81       	ldd	r24, Z+3	; 0x03
    2b4a:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	85 81       	ldd	r24, Z+5	; 0x05
    2b52:	96 81       	ldd	r25, Z+6	; 0x06
    2b54:	90 93 49 04 	sts	0x0449, r25
    2b58:	80 93 48 04 	sts	0x0448, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_TOIE0_BIT);
    2b5c:	a9 e5       	ldi	r26, 0x59	; 89
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e9 e5       	ldi	r30, 0x59	; 89
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	81 60       	ori	r24, 0x01	; 1
    2b68:	8c 93       	st	X, r24
			G_INT_Enable();
    2b6a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <G_INT_Enable>
		}
		if (Copy_stConfig->GPT_WG_Mode == GPT_CTC)
    2b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b70:	fa 81       	ldd	r31, Y+2	; 0x02
    2b72:	81 81       	ldd	r24, Z+1	; 0x01
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	79 f5       	brne	.+94     	; 0x2bd6 <GPT_Init+0xea>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    2b78:	a3 e5       	ldi	r26, 0x53	; 83
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e3 e5       	ldi	r30, 0x53	; 83
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	8f 7b       	andi	r24, 0xBF	; 191
    2b84:	8c 93       	st	X, r24
			SET_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    2b86:	a3 e5       	ldi	r26, 0x53	; 83
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e3 e5       	ldi	r30, 0x53	; 83
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 60       	ori	r24, 0x08	; 8
    2b92:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    2b94:	a3 e5       	ldi	r26, 0x53	; 83
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e3 e5       	ldi	r30, 0x53	; 83
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	90 81       	ld	r25, Z
    2b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	89 2b       	or	r24, r25
    2ba6:	8c 93       	st	X, r24
			Timer_OCR0_REG = Copy_stConfig->GPT_COM_Value;
    2ba8:	ac e5       	ldi	r26, 0x5C	; 92
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e9 81       	ldd	r30, Y+1	; 0x01
    2bae:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb0:	84 81       	ldd	r24, Z+4	; 0x04
    2bb2:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    2bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb8:	85 81       	ldd	r24, Z+5	; 0x05
    2bba:	96 81       	ldd	r25, Z+6	; 0x06
    2bbc:	90 93 49 04 	sts	0x0449, r25
    2bc0:	80 93 48 04 	sts	0x0448, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_OCIE0_BIT);
    2bc4:	a9 e5       	ldi	r26, 0x59	; 89
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e9 e5       	ldi	r30, 0x59	; 89
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	82 60       	ori	r24, 0x02	; 2
    2bd0:	8c 93       	st	X, r24
			G_INT_Enable();
    2bd2:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <G_INT_Enable>
	}
	else
	{

	}
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <GPT_Set_Preload>:

void GPT_Set_Preload(u8 Copy_u8Preload)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	89 83       	std	Y+1, r24	; 0x01
	Timer_TCNT0_REG = Copy_u8Preload;
    2bec:	e2 e5       	ldi	r30, 0x52	; 82
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	80 83       	st	Z, r24
}
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <__vector_10>:


void __vector_10(void)
{
    2bfc:	1f 92       	push	r1
    2bfe:	0f 92       	push	r0
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	0f 92       	push	r0
    2c04:	11 24       	eor	r1, r1
    2c06:	2f 93       	push	r18
    2c08:	3f 93       	push	r19
    2c0a:	4f 93       	push	r20
    2c0c:	5f 93       	push	r21
    2c0e:	6f 93       	push	r22
    2c10:	7f 93       	push	r23
    2c12:	8f 93       	push	r24
    2c14:	9f 93       	push	r25
    2c16:	af 93       	push	r26
    2c18:	bf 93       	push	r27
    2c1a:	ef 93       	push	r30
    2c1c:	ff 93       	push	r31
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    2c26:	80 91 48 04 	lds	r24, 0x0448
    2c2a:	90 91 49 04 	lds	r25, 0x0449
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	29 f0       	breq	.+10     	; 0x2c3c <__vector_10+0x40>
	{
		Global_Timer0_CBF();
    2c32:	e0 91 48 04 	lds	r30, 0x0448
    2c36:	f0 91 49 04 	lds	r31, 0x0449
    2c3a:	09 95       	icall
	}
}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	ff 91       	pop	r31
    2c42:	ef 91       	pop	r30
    2c44:	bf 91       	pop	r27
    2c46:	af 91       	pop	r26
    2c48:	9f 91       	pop	r25
    2c4a:	8f 91       	pop	r24
    2c4c:	7f 91       	pop	r23
    2c4e:	6f 91       	pop	r22
    2c50:	5f 91       	pop	r21
    2c52:	4f 91       	pop	r20
    2c54:	3f 91       	pop	r19
    2c56:	2f 91       	pop	r18
    2c58:	0f 90       	pop	r0
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	0f 90       	pop	r0
    2c5e:	1f 90       	pop	r1
    2c60:	18 95       	reti

00002c62 <__vector_11>:
void __vector_11(void)
{
    2c62:	1f 92       	push	r1
    2c64:	0f 92       	push	r0
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	0f 92       	push	r0
    2c6a:	11 24       	eor	r1, r1
    2c6c:	2f 93       	push	r18
    2c6e:	3f 93       	push	r19
    2c70:	4f 93       	push	r20
    2c72:	5f 93       	push	r21
    2c74:	6f 93       	push	r22
    2c76:	7f 93       	push	r23
    2c78:	8f 93       	push	r24
    2c7a:	9f 93       	push	r25
    2c7c:	af 93       	push	r26
    2c7e:	bf 93       	push	r27
    2c80:	ef 93       	push	r30
    2c82:	ff 93       	push	r31
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    2c8c:	80 91 48 04 	lds	r24, 0x0448
    2c90:	90 91 49 04 	lds	r25, 0x0449
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	29 f0       	breq	.+10     	; 0x2ca2 <__vector_11+0x40>
	{
		Global_Timer0_CBF();
    2c98:	e0 91 48 04 	lds	r30, 0x0448
    2c9c:	f0 91 49 04 	lds	r31, 0x0449
    2ca0:	09 95       	icall
	}
}
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	ff 91       	pop	r31
    2ca8:	ef 91       	pop	r30
    2caa:	bf 91       	pop	r27
    2cac:	af 91       	pop	r26
    2cae:	9f 91       	pop	r25
    2cb0:	8f 91       	pop	r24
    2cb2:	7f 91       	pop	r23
    2cb4:	6f 91       	pop	r22
    2cb6:	5f 91       	pop	r21
    2cb8:	4f 91       	pop	r20
    2cba:	3f 91       	pop	r19
    2cbc:	2f 91       	pop	r18
    2cbe:	0f 90       	pop	r0
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	0f 90       	pop	r0
    2cc4:	1f 90       	pop	r1
    2cc6:	18 95       	reti

00002cc8 <EXT_INT_Init>:
void __vector_3(void)__attribute((signal,used));



void EXT_INT_Init(EXTI_St *Copy_EXT_INT_st)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <EXT_INT_Init+0x6>
    2cce:	0f 92       	push	r0
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
	/*The External Interrupt 1 is activated by if the SREG I-bit and the
	corresponding interrupt mask in the GICR are set.*/
	
	u8 check = 1;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    2cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    2cde:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce0:	80 81       	ld	r24, Z
    2ce2:	88 23       	and	r24, r24
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <EXT_INT_Init+0x20>
    2ce6:	67 c0       	rjmp	.+206    	; 0x2db6 <EXT_INT_Init+0xee>
	{
		
		
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Low_Level_SC)
    2ce8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cea:	fb 81       	ldd	r31, Y+3	; 0x03
    2cec:	81 81       	ldd	r24, Z+1	; 0x01
    2cee:	88 23       	and	r24, r24
    2cf0:	79 f4       	brne	.+30     	; 0x2d10 <EXT_INT_Init+0x48>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2cf2:	a5 e5       	ldi	r26, 0x55	; 85
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e5 e5       	ldi	r30, 0x55	; 85
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8e 7f       	andi	r24, 0xFE	; 254
    2cfe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2d00:	a5 e5       	ldi	r26, 0x55	; 85
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e5 e5       	ldi	r30, 0x55	; 85
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	8d 7f       	andi	r24, 0xFD	; 253
    2d0c:	8c 93       	st	X, r24
    2d0e:	3d c0       	rjmp	.+122    	; 0x2d8a <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Any_Change_SC)
    2d10:	ea 81       	ldd	r30, Y+2	; 0x02
    2d12:	fb 81       	ldd	r31, Y+3	; 0x03
    2d14:	81 81       	ldd	r24, Z+1	; 0x01
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	79 f4       	brne	.+30     	; 0x2d38 <EXT_INT_Init+0x70>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2d1a:	a5 e5       	ldi	r26, 0x55	; 85
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e5 e5       	ldi	r30, 0x55	; 85
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	81 60       	ori	r24, 0x01	; 1
    2d26:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2d28:	a5 e5       	ldi	r26, 0x55	; 85
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e5 e5       	ldi	r30, 0x55	; 85
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8d 7f       	andi	r24, 0xFD	; 253
    2d34:	8c 93       	st	X, r24
    2d36:	29 c0       	rjmp	.+82     	; 0x2d8a <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Falling_Edge_SC)
    2d38:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3c:	81 81       	ldd	r24, Z+1	; 0x01
    2d3e:	82 30       	cpi	r24, 0x02	; 2
    2d40:	79 f4       	brne	.+30     	; 0x2d60 <EXT_INT_Init+0x98>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2d42:	a5 e5       	ldi	r26, 0x55	; 85
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e5 e5       	ldi	r30, 0x55	; 85
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8e 7f       	andi	r24, 0xFE	; 254
    2d4e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2d50:	a5 e5       	ldi	r26, 0x55	; 85
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e5 e5       	ldi	r30, 0x55	; 85
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	82 60       	ori	r24, 0x02	; 2
    2d5c:	8c 93       	st	X, r24
    2d5e:	15 c0       	rjmp	.+42     	; 0x2d8a <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Rising_Edge_SC)
    2d60:	ea 81       	ldd	r30, Y+2	; 0x02
    2d62:	fb 81       	ldd	r31, Y+3	; 0x03
    2d64:	81 81       	ldd	r24, Z+1	; 0x01
    2d66:	83 30       	cpi	r24, 0x03	; 3
    2d68:	79 f4       	brne	.+30     	; 0x2d88 <EXT_INT_Init+0xc0>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2d6a:	a5 e5       	ldi	r26, 0x55	; 85
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e5 e5       	ldi	r30, 0x55	; 85
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	81 60       	ori	r24, 0x01	; 1
    2d76:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2d78:	a5 e5       	ldi	r26, 0x55	; 85
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e5 e5       	ldi	r30, 0x55	; 85
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	82 60       	ori	r24, 0x02	; 2
    2d84:	8c 93       	st	X, r24
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <EXT_INT_Init+0xc2>
		}
		else
		{
			check = 0;
    2d88:	19 82       	std	Y+1, r1	; 0x01
    //Prevent Enable The global interrupt
		}
		if (check == 1)
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <EXT_INT_Init+0xca>
    2d90:	b3 c0       	rjmp	.+358    	; 0x2ef8 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    2d92:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT0_BIT);
    2d96:	ab e5       	ldi	r26, 0x5B	; 91
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	eb e5       	ldi	r30, 0x5B	; 91
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	80 64       	ori	r24, 0x40	; 64
    2da2:	8c 93       	st	X, r24
			
			Global_EXTI0_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    2da4:	ea 81       	ldd	r30, Y+2	; 0x02
    2da6:	fb 81       	ldd	r31, Y+3	; 0x03
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	90 93 4b 04 	sts	0x044B, r25
    2db0:	80 93 4a 04 	sts	0x044A, r24
    2db4:	a1 c0       	rjmp	.+322    	; 0x2ef8 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    2db6:	ea 81       	ldd	r30, Y+2	; 0x02
    2db8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dba:	80 81       	ld	r24, Z
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <EXT_INT_Init+0xfa>
    2dc0:	67 c0       	rjmp	.+206    	; 0x2e90 <EXT_INT_Init+0x1c8>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Low_Level_SC)
    2dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc6:	81 81       	ldd	r24, Z+1	; 0x01
    2dc8:	84 30       	cpi	r24, 0x04	; 4
    2dca:	79 f4       	brne	.+30     	; 0x2dea <EXT_INT_Init+0x122>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2dcc:	a5 e5       	ldi	r26, 0x55	; 85
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e5 e5       	ldi	r30, 0x55	; 85
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8b 7f       	andi	r24, 0xFB	; 251
    2dd8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2dda:	a5 e5       	ldi	r26, 0x55	; 85
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e5 e5       	ldi	r30, 0x55	; 85
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	87 7f       	andi	r24, 0xF7	; 247
    2de6:	8c 93       	st	X, r24
    2de8:	3d c0       	rjmp	.+122    	; 0x2e64 <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Any_Change_SC)
    2dea:	ea 81       	ldd	r30, Y+2	; 0x02
    2dec:	fb 81       	ldd	r31, Y+3	; 0x03
    2dee:	81 81       	ldd	r24, Z+1	; 0x01
    2df0:	85 30       	cpi	r24, 0x05	; 5
    2df2:	79 f4       	brne	.+30     	; 0x2e12 <EXT_INT_Init+0x14a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2df4:	a5 e5       	ldi	r26, 0x55	; 85
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e5 e5       	ldi	r30, 0x55	; 85
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	84 60       	ori	r24, 0x04	; 4
    2e00:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2e02:	a5 e5       	ldi	r26, 0x55	; 85
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e5 e5       	ldi	r30, 0x55	; 85
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	87 7f       	andi	r24, 0xF7	; 247
    2e0e:	8c 93       	st	X, r24
    2e10:	29 c0       	rjmp	.+82     	; 0x2e64 <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Falling_Edge_SC)
    2e12:	ea 81       	ldd	r30, Y+2	; 0x02
    2e14:	fb 81       	ldd	r31, Y+3	; 0x03
    2e16:	81 81       	ldd	r24, Z+1	; 0x01
    2e18:	86 30       	cpi	r24, 0x06	; 6
    2e1a:	79 f4       	brne	.+30     	; 0x2e3a <EXT_INT_Init+0x172>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2e1c:	a5 e5       	ldi	r26, 0x55	; 85
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e5 e5       	ldi	r30, 0x55	; 85
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8b 7f       	andi	r24, 0xFB	; 251
    2e28:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2e2a:	a5 e5       	ldi	r26, 0x55	; 85
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e5 e5       	ldi	r30, 0x55	; 85
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	88 60       	ori	r24, 0x08	; 8
    2e36:	8c 93       	st	X, r24
    2e38:	15 c0       	rjmp	.+42     	; 0x2e64 <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Rising_Edge_SC)
    2e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e3e:	81 81       	ldd	r24, Z+1	; 0x01
    2e40:	87 30       	cpi	r24, 0x07	; 7
    2e42:	79 f4       	brne	.+30     	; 0x2e62 <EXT_INT_Init+0x19a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2e44:	a5 e5       	ldi	r26, 0x55	; 85
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e5 e5       	ldi	r30, 0x55	; 85
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	84 60       	ori	r24, 0x04	; 4
    2e50:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2e52:	a5 e5       	ldi	r26, 0x55	; 85
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e5 e5       	ldi	r30, 0x55	; 85
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	88 60       	ori	r24, 0x08	; 8
    2e5e:	8c 93       	st	X, r24
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <EXT_INT_Init+0x19c>
		}
		else
		{
			check = 0;
    2e62:	19 82       	std	Y+1, r1	; 0x01

		}
		if (check == 1)
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <EXT_INT_Init+0x1a4>
    2e6a:	46 c0       	rjmp	.+140    	; 0x2ef8 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    2e6c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT1_BIT);
    2e70:	ab e5       	ldi	r26, 0x5B	; 91
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	eb e5       	ldi	r30, 0x5B	; 91
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	8c 93       	st	X, r24
			
			Global_EXTI1_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    2e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e80:	fb 81       	ldd	r31, Y+3	; 0x03
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	90 93 4d 04 	sts	0x044D, r25
    2e8a:	80 93 4c 04 	sts	0x044C, r24
    2e8e:	34 c0       	rjmp	.+104    	; 0x2ef8 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    2e90:	ea 81       	ldd	r30, Y+2	; 0x02
    2e92:	fb 81       	ldd	r31, Y+3	; 0x03
    2e94:	80 81       	ld	r24, Z
    2e96:	82 30       	cpi	r24, 0x02	; 2
    2e98:	79 f5       	brne	.+94     	; 0x2ef8 <EXT_INT_Init+0x230>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Falling_Edge_SC)
    2e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ea0:	88 30       	cpi	r24, 0x08	; 8
    2ea2:	41 f4       	brne	.+16     	; 0x2eb4 <EXT_INT_Init+0x1ec>
		{
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    2ea4:	a4 e5       	ldi	r26, 0x54	; 84
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e4 e5       	ldi	r30, 0x54	; 84
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	8f 7b       	andi	r24, 0xBF	; 191
    2eb0:	8c 93       	st	X, r24
    2eb2:	0e c0       	rjmp	.+28     	; 0x2ed0 <EXT_INT_Init+0x208>

		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Rising_Edge_SC)
    2eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb8:	81 81       	ldd	r24, Z+1	; 0x01
    2eba:	89 30       	cpi	r24, 0x09	; 9
    2ebc:	41 f4       	brne	.+16     	; 0x2ece <EXT_INT_Init+0x206>
		{
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    2ebe:	a4 e5       	ldi	r26, 0x54	; 84
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e4 e5       	ldi	r30, 0x54	; 84
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	80 64       	ori	r24, 0x40	; 64
    2eca:	8c 93       	st	X, r24
    2ecc:	01 c0       	rjmp	.+2      	; 0x2ed0 <EXT_INT_Init+0x208>

		}
		else
		{
			check = 0;
    2ece:	19 82       	std	Y+1, r1	; 0x01
		}
		if (check == 1)
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	89 f4       	brne	.+34     	; 0x2ef8 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    2ed6:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT2_BIT);
    2eda:	ab e5       	ldi	r26, 0x5B	; 91
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	eb e5       	ldi	r30, 0x5B	; 91
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	80 62       	ori	r24, 0x20	; 32
    2ee6:	8c 93       	st	X, r24
			
			Global_EXTI2_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    2ee8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eea:	fb 81       	ldd	r31, Y+3	; 0x03
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	90 93 4f 04 	sts	0x044F, r25
    2ef4:	80 93 4e 04 	sts	0x044E, r24
	}
	else
	{

	}
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <EXT_INT_Disable>:

void EXT_INT_Disable(EXTI_St *Copy_EXT_INT_st)
{
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <EXT_INT_Disable+0x6>
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    2f12:	e9 81       	ldd	r30, Y+1	; 0x01
    2f14:	fa 81       	ldd	r31, Y+2	; 0x02
    2f16:	80 81       	ld	r24, Z
    2f18:	88 23       	and	r24, r24
    2f1a:	51 f4       	brne	.+20     	; 0x2f30 <EXT_INT_Disable+0x2c>
	{
		G_INT_Disable();
    2f1c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT0_BIT);
    2f20:	ab e5       	ldi	r26, 0x5B	; 91
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	eb e5       	ldi	r30, 0x5B	; 91
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	8f 7b       	andi	r24, 0xBF	; 191
    2f2c:	8c 93       	st	X, r24
    2f2e:	1d c0       	rjmp	.+58     	; 0x2f6a <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    2f30:	e9 81       	ldd	r30, Y+1	; 0x01
    2f32:	fa 81       	ldd	r31, Y+2	; 0x02
    2f34:	80 81       	ld	r24, Z
    2f36:	81 30       	cpi	r24, 0x01	; 1
    2f38:	51 f4       	brne	.+20     	; 0x2f4e <EXT_INT_Disable+0x4a>
	{
		G_INT_Disable();
    2f3a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT1_BIT);
    2f3e:	ab e5       	ldi	r26, 0x5B	; 91
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	eb e5       	ldi	r30, 0x5B	; 91
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	8f 77       	andi	r24, 0x7F	; 127
    2f4a:	8c 93       	st	X, r24
    2f4c:	0e c0       	rjmp	.+28     	; 0x2f6a <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    2f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f50:	fa 81       	ldd	r31, Y+2	; 0x02
    2f52:	80 81       	ld	r24, Z
    2f54:	82 30       	cpi	r24, 0x02	; 2
    2f56:	49 f4       	brne	.+18     	; 0x2f6a <EXT_INT_Disable+0x66>
	{
		G_INT_Disable();
    2f58:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT2_BIT);
    2f5c:	ab e5       	ldi	r26, 0x5B	; 91
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	eb e5       	ldi	r30, 0x5B	; 91
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	8f 7d       	andi	r24, 0xDF	; 223
    2f68:	8c 93       	st	X, r24
	else
	{

	}

}
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <__vector_1>:

void __vector_1(void)
{
    2f74:	1f 92       	push	r1
    2f76:	0f 92       	push	r0
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	0f 92       	push	r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	2f 93       	push	r18
    2f80:	3f 93       	push	r19
    2f82:	4f 93       	push	r20
    2f84:	5f 93       	push	r21
    2f86:	6f 93       	push	r22
    2f88:	7f 93       	push	r23
    2f8a:	8f 93       	push	r24
    2f8c:	9f 93       	push	r25
    2f8e:	af 93       	push	r26
    2f90:	bf 93       	push	r27
    2f92:	ef 93       	push	r30
    2f94:	ff 93       	push	r31
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI0_CPF != NULL)
    2f9e:	80 91 4a 04 	lds	r24, 0x044A
    2fa2:	90 91 4b 04 	lds	r25, 0x044B
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	29 f0       	breq	.+10     	; 0x2fb4 <__vector_1+0x40>
	{
		Global_EXTI0_CPF();
    2faa:	e0 91 4a 04 	lds	r30, 0x044A
    2fae:	f0 91 4b 04 	lds	r31, 0x044B
    2fb2:	09 95       	icall
	}

}
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	ff 91       	pop	r31
    2fba:	ef 91       	pop	r30
    2fbc:	bf 91       	pop	r27
    2fbe:	af 91       	pop	r26
    2fc0:	9f 91       	pop	r25
    2fc2:	8f 91       	pop	r24
    2fc4:	7f 91       	pop	r23
    2fc6:	6f 91       	pop	r22
    2fc8:	5f 91       	pop	r21
    2fca:	4f 91       	pop	r20
    2fcc:	3f 91       	pop	r19
    2fce:	2f 91       	pop	r18
    2fd0:	0f 90       	pop	r0
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	0f 90       	pop	r0
    2fd6:	1f 90       	pop	r1
    2fd8:	18 95       	reti

00002fda <__vector_2>:
void __vector_2(void)
{
    2fda:	1f 92       	push	r1
    2fdc:	0f 92       	push	r0
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	0f 92       	push	r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	2f 93       	push	r18
    2fe6:	3f 93       	push	r19
    2fe8:	4f 93       	push	r20
    2fea:	5f 93       	push	r21
    2fec:	6f 93       	push	r22
    2fee:	7f 93       	push	r23
    2ff0:	8f 93       	push	r24
    2ff2:	9f 93       	push	r25
    2ff4:	af 93       	push	r26
    2ff6:	bf 93       	push	r27
    2ff8:	ef 93       	push	r30
    2ffa:	ff 93       	push	r31
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI1_CPF != NULL)
    3004:	80 91 4c 04 	lds	r24, 0x044C
    3008:	90 91 4d 04 	lds	r25, 0x044D
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	29 f0       	breq	.+10     	; 0x301a <__vector_2+0x40>
		{
		Global_EXTI1_CPF();
    3010:	e0 91 4c 04 	lds	r30, 0x044C
    3014:	f0 91 4d 04 	lds	r31, 0x044D
    3018:	09 95       	icall
		}

}
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	ff 91       	pop	r31
    3020:	ef 91       	pop	r30
    3022:	bf 91       	pop	r27
    3024:	af 91       	pop	r26
    3026:	9f 91       	pop	r25
    3028:	8f 91       	pop	r24
    302a:	7f 91       	pop	r23
    302c:	6f 91       	pop	r22
    302e:	5f 91       	pop	r21
    3030:	4f 91       	pop	r20
    3032:	3f 91       	pop	r19
    3034:	2f 91       	pop	r18
    3036:	0f 90       	pop	r0
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	0f 90       	pop	r0
    303c:	1f 90       	pop	r1
    303e:	18 95       	reti

00003040 <__vector_3>:
void __vector_3(void)
{
    3040:	1f 92       	push	r1
    3042:	0f 92       	push	r0
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	0f 92       	push	r0
    3048:	11 24       	eor	r1, r1
    304a:	2f 93       	push	r18
    304c:	3f 93       	push	r19
    304e:	4f 93       	push	r20
    3050:	5f 93       	push	r21
    3052:	6f 93       	push	r22
    3054:	7f 93       	push	r23
    3056:	8f 93       	push	r24
    3058:	9f 93       	push	r25
    305a:	af 93       	push	r26
    305c:	bf 93       	push	r27
    305e:	ef 93       	push	r30
    3060:	ff 93       	push	r31
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI2_CPF != NULL)
    306a:	80 91 4e 04 	lds	r24, 0x044E
    306e:	90 91 4f 04 	lds	r25, 0x044F
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	29 f0       	breq	.+10     	; 0x3080 <__vector_3+0x40>
		{
		Global_EXTI2_CPF();
    3076:	e0 91 4e 04 	lds	r30, 0x044E
    307a:	f0 91 4f 04 	lds	r31, 0x044F
    307e:	09 95       	icall
		}

}
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	ff 91       	pop	r31
    3086:	ef 91       	pop	r30
    3088:	bf 91       	pop	r27
    308a:	af 91       	pop	r26
    308c:	9f 91       	pop	r25
    308e:	8f 91       	pop	r24
    3090:	7f 91       	pop	r23
    3092:	6f 91       	pop	r22
    3094:	5f 91       	pop	r21
    3096:	4f 91       	pop	r20
    3098:	3f 91       	pop	r19
    309a:	2f 91       	pop	r18
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <DIO_VoidSetPinDirection>:
{ DIO_PORTA_REG, DIO_PORTB_REG, DIO_PORTC_REG, DIO_PORTD_REG };
volatile u8 *DIO_ArrpVu8_PIN[4] =
{ DIO_PINA_REG, DIO_PINB_REG, DIO_PINC_REG, DIO_PIND_REG };

void DIO_VoidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <DIO_VoidSetPinDirection+0x6>
    30ac:	0f 92       	push	r0
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	6a 83       	std	Y+2, r22	; 0x02
    30b6:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	84 30       	cpi	r24, 0x04	; 4
    30bc:	08 f0       	brcs	.+2      	; 0x30c0 <DIO_VoidSetPinDirection+0x1a>
    30be:	54 c0       	rjmp	.+168    	; 0x3168 <DIO_VoidSetPinDirection+0xc2>
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	88 30       	cpi	r24, 0x08	; 8
    30c4:	08 f0       	brcs	.+2      	; 0x30c8 <DIO_VoidSetPinDirection+0x22>
    30c6:	50 c0       	rjmp	.+160    	; 0x3168 <DIO_VoidSetPinDirection+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	81 30       	cpi	r24, 0x01	; 1
    30cc:	29 f5       	brne	.+74     	; 0x3118 <DIO_VoidSetPinDirection+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	88 2f       	mov	r24, r24
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	fc 01       	movw	r30, r24
    30da:	eb 5f       	subi	r30, 0xFB	; 251
    30dc:	fb 4f       	sbci	r31, 0xFB	; 251
    30de:	a0 81       	ld	r26, Z
    30e0:	b1 81       	ldd	r27, Z+1	; 0x01
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	fc 01       	movw	r30, r24
    30ee:	eb 5f       	subi	r30, 0xFB	; 251
    30f0:	fb 4f       	sbci	r31, 0xFB	; 251
    30f2:	01 90       	ld	r0, Z+
    30f4:	f0 81       	ld	r31, Z
    30f6:	e0 2d       	mov	r30, r0
    30f8:	80 81       	ld	r24, Z
    30fa:	48 2f       	mov	r20, r24
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	28 2f       	mov	r18, r24
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	02 2e       	mov	r0, r18
    3108:	02 c0       	rjmp	.+4      	; 0x310e <DIO_VoidSetPinDirection+0x68>
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	0a 94       	dec	r0
    3110:	e2 f7       	brpl	.-8      	; 0x310a <DIO_VoidSetPinDirection+0x64>
    3112:	84 2b       	or	r24, r20
    3114:	8c 93       	st	X, r24
    3116:	28 c0       	rjmp	.+80     	; 0x3168 <DIO_VoidSetPinDirection+0xc2>
		}
		else if (Copy_u8Direction == DIO_u8PIN_INPUT)
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	88 23       	and	r24, r24
    311c:	29 f5       	brne	.+74     	; 0x3168 <DIO_VoidSetPinDirection+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	fc 01       	movw	r30, r24
    312a:	eb 5f       	subi	r30, 0xFB	; 251
    312c:	fb 4f       	sbci	r31, 0xFB	; 251
    312e:	a0 81       	ld	r26, Z
    3130:	b1 81       	ldd	r27, Z+1	; 0x01
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	fc 01       	movw	r30, r24
    313e:	eb 5f       	subi	r30, 0xFB	; 251
    3140:	fb 4f       	sbci	r31, 0xFB	; 251
    3142:	01 90       	ld	r0, Z+
    3144:	f0 81       	ld	r31, Z
    3146:	e0 2d       	mov	r30, r0
    3148:	80 81       	ld	r24, Z
    314a:	48 2f       	mov	r20, r24
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	02 2e       	mov	r0, r18
    3158:	02 c0       	rjmp	.+4      	; 0x315e <DIO_VoidSetPinDirection+0xb8>
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	0a 94       	dec	r0
    3160:	e2 f7       	brpl	.-8      	; 0x315a <DIO_VoidSetPinDirection+0xb4>
    3162:	80 95       	com	r24
    3164:	84 23       	and	r24, r20
    3166:	8c 93       	st	X, r24
	{
		/*empty */

	}

}
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	00 d0       	rcall	.+0      	; 0x317a <DIO_VoidSetPinValue+0x6>
    317a:	0f 92       	push	r0
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	89 83       	std	Y+1, r24	; 0x01
    3182:	6a 83       	std	Y+2, r22	; 0x02
    3184:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	84 30       	cpi	r24, 0x04	; 4
    318a:	08 f0       	brcs	.+2      	; 0x318e <DIO_VoidSetPinValue+0x1a>
    318c:	54 c0       	rjmp	.+168    	; 0x3236 <DIO_VoidSetPinValue+0xc2>
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	88 30       	cpi	r24, 0x08	; 8
    3192:	08 f0       	brcs	.+2      	; 0x3196 <DIO_VoidSetPinValue+0x22>
    3194:	50 c0       	rjmp	.+160    	; 0x3236 <DIO_VoidSetPinValue+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Value == DIO_u8PIN_HIGH)
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	29 f5       	brne	.+74     	; 0x31e6 <DIO_VoidSetPinValue+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	fc 01       	movw	r30, r24
    31a8:	e3 5f       	subi	r30, 0xF3	; 243
    31aa:	fb 4f       	sbci	r31, 0xFB	; 251
    31ac:	a0 81       	ld	r26, Z
    31ae:	b1 81       	ldd	r27, Z+1	; 0x01
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	fc 01       	movw	r30, r24
    31bc:	e3 5f       	subi	r30, 0xF3	; 243
    31be:	fb 4f       	sbci	r31, 0xFB	; 251
    31c0:	01 90       	ld	r0, Z+
    31c2:	f0 81       	ld	r31, Z
    31c4:	e0 2d       	mov	r30, r0
    31c6:	80 81       	ld	r24, Z
    31c8:	48 2f       	mov	r20, r24
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	02 2e       	mov	r0, r18
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <DIO_VoidSetPinValue+0x68>
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	0a 94       	dec	r0
    31de:	e2 f7       	brpl	.-8      	; 0x31d8 <DIO_VoidSetPinValue+0x64>
    31e0:	84 2b       	or	r24, r20
    31e2:	8c 93       	st	X, r24
    31e4:	28 c0       	rjmp	.+80     	; 0x3236 <DIO_VoidSetPinValue+0xc2>
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	88 23       	and	r24, r24
    31ea:	29 f5       	brne	.+74     	; 0x3236 <DIO_VoidSetPinValue+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	fc 01       	movw	r30, r24
    31f8:	e3 5f       	subi	r30, 0xF3	; 243
    31fa:	fb 4f       	sbci	r31, 0xFB	; 251
    31fc:	a0 81       	ld	r26, Z
    31fe:	b1 81       	ldd	r27, Z+1	; 0x01
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	fc 01       	movw	r30, r24
    320c:	e3 5f       	subi	r30, 0xF3	; 243
    320e:	fb 4f       	sbci	r31, 0xFB	; 251
    3210:	01 90       	ld	r0, Z+
    3212:	f0 81       	ld	r31, Z
    3214:	e0 2d       	mov	r30, r0
    3216:	80 81       	ld	r24, Z
    3218:	48 2f       	mov	r20, r24
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	02 2e       	mov	r0, r18
    3226:	02 c0       	rjmp	.+4      	; 0x322c <DIO_VoidSetPinValue+0xb8>
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	0a 94       	dec	r0
    322e:	e2 f7       	brpl	.-8      	; 0x3228 <DIO_VoidSetPinValue+0xb4>
    3230:	80 95       	com	r24
    3232:	84 23       	and	r24, r20
    3234:	8c 93       	st	X, r24
	else
	{
		/*empty */

	}
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8Return)
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <DIO_VoidGetPinValue+0x6>
    3248:	00 d0       	rcall	.+0      	; 0x324a <DIO_VoidGetPinValue+0x8>
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	89 83       	std	Y+1, r24	; 0x01
    3250:	6a 83       	std	Y+2, r22	; 0x02
    3252:	5c 83       	std	Y+4, r21	; 0x04
    3254:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	84 30       	cpi	r24, 0x04	; 4
    325a:	f8 f4       	brcc	.+62     	; 0x329a <DIO_VoidGetPinValue+0x58>
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	88 30       	cpi	r24, 0x08	; 8
    3260:	e0 f4       	brcc	.+56     	; 0x329a <DIO_VoidGetPinValue+0x58>
     	{

		   *Copy_Pu8Return=GET_BIT(*DIO_ArrpVu8_PIN[Copy_u8Port],Copy_u8Pin);
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	fc 01       	movw	r30, r24
    326e:	eb 5e       	subi	r30, 0xEB	; 235
    3270:	fb 4f       	sbci	r31, 0xFB	; 251
    3272:	01 90       	ld	r0, Z+
    3274:	f0 81       	ld	r31, Z
    3276:	e0 2d       	mov	r30, r0
    3278:	80 81       	ld	r24, Z
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	88 2f       	mov	r24, r24
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a9 01       	movw	r20, r18
    3286:	02 c0       	rjmp	.+4      	; 0x328c <DIO_VoidGetPinValue+0x4a>
    3288:	55 95       	asr	r21
    328a:	47 95       	ror	r20
    328c:	8a 95       	dec	r24
    328e:	e2 f7       	brpl	.-8      	; 0x3288 <DIO_VoidGetPinValue+0x46>
    3290:	ca 01       	movw	r24, r20
    3292:	81 70       	andi	r24, 0x01	; 1
    3294:	eb 81       	ldd	r30, Y+3	; 0x03
    3296:	fc 81       	ldd	r31, Y+4	; 0x04
    3298:	80 83       	st	Z, r24
		else
		{
			/*empty */

		}
}
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <DIO_VoidSetPortDirection>:

/*Port Level*/
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <DIO_VoidSetPortDirection+0x6>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	84 30       	cpi	r24, 0x04	; 4
    32ba:	68 f4       	brcc	.+26     	; 0x32d6 <DIO_VoidSetPortDirection+0x2e>
	{

		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Direction;
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	88 2f       	mov	r24, r24
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	fc 01       	movw	r30, r24
    32c8:	eb 5f       	subi	r30, 0xFB	; 251
    32ca:	fb 4f       	sbci	r31, 0xFB	; 251
    32cc:	01 90       	ld	r0, Z+
    32ce:	f0 81       	ld	r31, Z
    32d0:	e0 2d       	mov	r30, r0
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	80 83       	st	Z, r24
	}
	else
	{
       /*empty*/
	}
}
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <DIO_VoidSetPortValue>:

/*Port value*/
void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <DIO_VoidSetPortValue+0x6>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	84 30       	cpi	r24, 0x04	; 4
    32f2:	68 f4       	brcc	.+26     	; 0x330e <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Value;
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	88 2f       	mov	r24, r24
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	fc 01       	movw	r30, r24
    3300:	eb 5f       	subi	r30, 0xFB	; 251
    3302:	fb 4f       	sbci	r31, 0xFB	; 251
    3304:	01 90       	ld	r0, Z+
    3306:	f0 81       	ld	r31, Z
    3308:	e0 2d       	mov	r30, r0
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <DIO_VoidGetPortValue>:

void DIO_VoidGetPortValue(u8 Copy_u8Port, u8 *Copy_Pu8Return)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	00 d0       	rcall	.+0      	; 0x331e <DIO_VoidGetPortValue+0x6>
    331e:	0f 92       	push	r0
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	7b 83       	std	Y+3, r23	; 0x03
    3328:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	84 30       	cpi	r24, 0x04	; 4
    332e:	78 f4       	brcc	.+30     	; 0x334e <DIO_VoidGetPortValue+0x36>
	{
		*Copy_Pu8Return = *DIO_ArrpVu8_PIN[Copy_u8Port];
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	88 2f       	mov	r24, r24
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	fc 01       	movw	r30, r24
    333c:	eb 5e       	subi	r30, 0xEB	; 235
    333e:	fb 4f       	sbci	r31, 0xFB	; 251
    3340:	01 90       	ld	r0, Z+
    3342:	f0 81       	ld	r31, Z
    3344:	e0 2d       	mov	r30, r0
    3346:	80 81       	ld	r24, Z
    3348:	ea 81       	ldd	r30, Y+2	; 0x02
    334a:	fb 81       	ldd	r31, Y+3	; 0x03
    334c:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	08 95       	ret

0000335a <DIO_VoidTogglePIN>:

void DIO_VoidTogglePIN(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	00 d0       	rcall	.+0      	; 0x3360 <DIO_VoidTogglePIN+0x6>
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	6a 83       	std	Y+2, r22	; 0x02
	  if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	84 30       	cpi	r24, 0x04	; 4
    336c:	38 f5       	brcc	.+78     	; 0x33bc <DIO_VoidTogglePIN+0x62>
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	88 30       	cpi	r24, 0x08	; 8
    3372:	20 f5       	brcc	.+72     	; 0x33bc <DIO_VoidTogglePIN+0x62>
		{
		  TOG_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port],Copy_u8Pin);
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	88 2f       	mov	r24, r24
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	fc 01       	movw	r30, r24
    3380:	e3 5f       	subi	r30, 0xF3	; 243
    3382:	fb 4f       	sbci	r31, 0xFB	; 251
    3384:	a0 81       	ld	r26, Z
    3386:	b1 81       	ldd	r27, Z+1	; 0x01
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	88 2f       	mov	r24, r24
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	fc 01       	movw	r30, r24
    3394:	e3 5f       	subi	r30, 0xF3	; 243
    3396:	fb 4f       	sbci	r31, 0xFB	; 251
    3398:	01 90       	ld	r0, Z+
    339a:	f0 81       	ld	r31, Z
    339c:	e0 2d       	mov	r30, r0
    339e:	80 81       	ld	r24, Z
    33a0:	48 2f       	mov	r20, r24
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	02 2e       	mov	r0, r18
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <DIO_VoidTogglePIN+0x5a>
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	0a 94       	dec	r0
    33b6:	e2 f7       	brpl	.-8      	; 0x33b0 <DIO_VoidTogglePIN+0x56>
    33b8:	84 27       	eor	r24, r20
    33ba:	8c 93       	st	X, r24
		}
	  else
	  		  {

	  		  }
}
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <ADC_voidInit>:
#include"ADC_Config.h"
#include"ADC_Interface.h"



void ADC_voidInit(void){
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62

	/*2- Configure Prescaler*/
	ADC_ADCSRA_REG	|=ADC_PRESCALER;
    33ce:	a6 e2       	ldi	r26, 0x26	; 38
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	e6 e2       	ldi	r30, 0x26	; 38
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	87 60       	ori	r24, 0x07	; 7
    33da:	8c 93       	st	X, r24
	/*1-Configuring Voltage Reference*/
	ADC_ADMUX_REG|=(ADC_VOLTAGE_REFRENCE<<ADC_ADMUX_REFS0_BIT);
    33dc:	a7 e2       	ldi	r26, 0x27	; 39
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	e7 e2       	ldi	r30, 0x27	; 39
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	80 64       	ori	r24, 0x40	; 64
    33e8:	8c 93       	st	X, r24
	/*3-SET ADEN*/
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADEN_BIT);
    33ea:	a6 e2       	ldi	r26, 0x26	; 38
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	e6 e2       	ldi	r30, 0x26	; 38
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	80 68       	ori	r24, 0x80	; 128
    33f6:	8c 93       	st	X, r24




}
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <ADC_StartConv>:
void ADC_StartConv(u8 Copy_u8SelectedChannel,u16 *Copy_pu16Return){
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	00 d0       	rcall	.+0      	; 0x3404 <ADC_StartConv+0x6>
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	7b 83       	std	Y+3, r23	; 0x03
    340e:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8SelectedChannel<=ADC_CHANNEL7){
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	88 30       	cpi	r24, 0x08	; 8
    3414:	70 f5       	brcc	.+92     	; 0x3472 <ADC_StartConv+0x74>
		/*1-Select Channel*/
		ADC_ADMUX_REG|=Copy_u8SelectedChannel;
    3416:	a7 e2       	ldi	r26, 0x27	; 39
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	e7 e2       	ldi	r30, 0x27	; 39
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	90 81       	ld	r25, Z
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	89 2b       	or	r24, r25
    3424:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT);
    3426:	a6 e2       	ldi	r26, 0x26	; 38
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	e6 e2       	ldi	r30, 0x26	; 38
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	80 64       	ori	r24, 0x40	; 64
    3432:	8c 93       	st	X, r24
		while(GET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT)==1);
    3434:	e6 e2       	ldi	r30, 0x26	; 38
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	82 95       	swap	r24
    343c:	86 95       	lsr	r24
    343e:	86 95       	lsr	r24
    3440:	83 70       	andi	r24, 0x03	; 3
    3442:	88 2f       	mov	r24, r24
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	81 70       	andi	r24, 0x01	; 1
    3448:	90 70       	andi	r25, 0x00	; 0
    344a:	88 23       	and	r24, r24
    344c:	99 f7       	brne	.-26     	; 0x3434 <ADC_StartConv+0x36>
		      *Copy_pu16Return=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    344e:	e4 e2       	ldi	r30, 0x24	; 36
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	e5 e2       	ldi	r30, 0x25	; 37
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	88 2f       	mov	r24, r24
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	98 2f       	mov	r25, r24
    3464:	88 27       	eor	r24, r24
    3466:	82 2b       	or	r24, r18
    3468:	93 2b       	or	r25, r19
    346a:	ea 81       	ldd	r30, Y+2	; 0x02
    346c:	fb 81       	ldd	r31, Y+3	; 0x03
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
		else
		{
			/*NO OPERATION*/
		}

}
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <LM35_voidReadValue>:
#include"LM35_Interface.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"../../MCAL/ADC/ADC_Interface.h"


void LM35_voidReadValue(u8 Copy_u8Pin,u8 *Copy_u16value){
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	00 d0       	rcall	.+0      	; 0x3484 <LM35_voidReadValue+0x6>
    3484:	0f 92       	push	r0
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	89 83       	std	Y+1, r24	; 0x01
    348c:	7b 83       	std	Y+3, r23	; 0x03
    348e:	6a 83       	std	Y+2, r22	; 0x02


	DIO_VoidSetPinDirection(DIO_u8PORTA,Copy_u8Pin,DIO_u8PIN_INPUT);
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	69 81       	ldd	r22, Y+1	; 0x01
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	ADC_voidInit();
    349a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <ADC_voidInit>
	ADC_StartConv(Copy_u8Pin,Copy_u16value);
    349e:	2a 81       	ldd	r18, Y+2	; 0x02
    34a0:	3b 81       	ldd	r19, Y+3	; 0x03
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	b9 01       	movw	r22, r18
    34a6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <ADC_StartConv>
	*Copy_u16value/=(2.00);
    34aa:	ea 81       	ldd	r30, Y+2	; 0x02
    34ac:	fb 81       	ldd	r31, Y+3	; 0x03
    34ae:	80 81       	ld	r24, Z
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	aa 27       	eor	r26, r26
    34b6:	97 fd       	sbrc	r25, 7
    34b8:	a0 95       	com	r26
    34ba:	ba 2f       	mov	r27, r26
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e0       	ldi	r20, 0x00	; 0
    34d2:	50 e4       	ldi	r21, 0x40	; 64
    34d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	ea 81       	ldd	r30, Y+2	; 0x02
    34ea:	fb 81       	ldd	r31, Y+3	; 0x03
    34ec:	80 83       	st	Z, r24

}
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <LCD_Init>:

#include <util/delay.h>

/* ====================== Functions Definitions ===================== */
void LCD_Init(void)
{
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	6c 97       	sbiw	r28, 0x1c	; 28
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
	//Set direction

	DIO_VoidSetPortDirection(LCD_PORT,DIO_u8PORT_OUTPUT);
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	6f ef       	ldi	r22, 0xFF	; 255
    3512:	0e 94 54 19 	call	0x32a8	; 0x32a8 <DIO_VoidSetPortDirection>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a8 e4       	ldi	r26, 0x48	; 72
    351c:	b2 e4       	ldi	r27, 0x42	; 66
    351e:	89 8f       	std	Y+25, r24	; 0x19
    3520:	9a 8f       	std	Y+26, r25	; 0x1a
    3522:	ab 8f       	std	Y+27, r26	; 0x1b
    3524:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	69 8d       	ldd	r22, Y+25	; 0x19
    3528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    352c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	4a ef       	ldi	r20, 0xFA	; 250
    3534:	54 e4       	ldi	r21, 0x44	; 68
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8d 8b       	std	Y+21, r24	; 0x15
    3540:	9e 8b       	std	Y+22, r25	; 0x16
    3542:	af 8b       	std	Y+23, r26	; 0x17
    3544:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3546:	6d 89       	ldd	r22, Y+21	; 0x15
    3548:	7e 89       	ldd	r23, Y+22	; 0x16
    354a:	8f 89       	ldd	r24, Y+23	; 0x17
    354c:	98 8d       	ldd	r25, Y+24	; 0x18
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5f e3       	ldi	r21, 0x3F	; 63
    3556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <LCD_Init+0x6e>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9c 8b       	std	Y+20, r25	; 0x14
    3564:	8b 8b       	std	Y+19, r24	; 0x13
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <LCD_Init+0xec>
	else if (__tmp > 65535)
    3568:	6d 89       	ldd	r22, Y+21	; 0x15
    356a:	7e 89       	ldd	r23, Y+22	; 0x16
    356c:	8f 89       	ldd	r24, Y+23	; 0x17
    356e:	98 8d       	ldd	r25, Y+24	; 0x18
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357c:	18 16       	cp	r1, r24
    357e:	4c f5       	brge	.+82     	; 0x35d2 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	69 8d       	ldd	r22, Y+25	; 0x19
    3582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9c 8b       	std	Y+20, r25	; 0x14
    35a6:	8b 8b       	std	Y+19, r24	; 0x13
    35a8:	0f c0       	rjmp	.+30     	; 0x35c8 <LCD_Init+0xce>
    35aa:	88 ec       	ldi	r24, 0xC8	; 200
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9a 8b       	std	Y+18, r25	; 0x12
    35b0:	89 8b       	std	Y+17, r24	; 0x11
    35b2:	89 89       	ldd	r24, Y+17	; 0x11
    35b4:	9a 89       	ldd	r25, Y+18	; 0x12
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <LCD_Init+0xbc>
    35ba:	9a 8b       	std	Y+18, r25	; 0x12
    35bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35be:	8b 89       	ldd	r24, Y+19	; 0x13
    35c0:	9c 89       	ldd	r25, Y+20	; 0x14
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	9c 8b       	std	Y+20, r25	; 0x14
    35c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ca:	9c 89       	ldd	r25, Y+20	; 0x14
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	69 f7       	brne	.-38     	; 0x35aa <LCD_Init+0xb0>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	6d 89       	ldd	r22, Y+21	; 0x15
    35d4:	7e 89       	ldd	r23, Y+22	; 0x16
    35d6:	8f 89       	ldd	r24, Y+23	; 0x17
    35d8:	98 8d       	ldd	r25, Y+24	; 0x18
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9c 8b       	std	Y+20, r25	; 0x14
    35e4:	8b 8b       	std	Y+19, r24	; 0x13
    35e6:	8b 89       	ldd	r24, Y+19	; 0x13
    35e8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ea:	98 8b       	std	Y+16, r25	; 0x10
    35ec:	8f 87       	std	Y+15, r24	; 0x0f
    35ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f0:	98 89       	ldd	r25, Y+16	; 0x10
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <LCD_Init+0xf8>
    35f6:	98 8b       	std	Y+16, r25	; 0x10
    35f8:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(50);
	 /* Send 4Bit mode command */
	 LCD_WriteCommand(_4_BIT_MODE_COMMAND);
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>

	 /* Set the interface data length , number of lines */
	 LCD_WriteCommand(FUNCTION_SET_MASK);
    3600:	88 e2       	ldi	r24, 0x28	; 40
    3602:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>

	 /* Display ON/OFF Control */
	 LCD_WriteCommand(DISPLAY_ON_OFF_MASK);
    3606:	8c e0       	ldi	r24, 0x0C	; 12
    3608:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>

	 /* Clear the Screen */
	 LCD_WriteCommand(CLEAR_SCREEN);
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	a0 e8       	ldi	r26, 0x80	; 128
    3618:	bf e3       	ldi	r27, 0x3F	; 63
    361a:	8b 87       	std	Y+11, r24	; 0x0b
    361c:	9c 87       	std	Y+12, r25	; 0x0c
    361e:	ad 87       	std	Y+13, r26	; 0x0d
    3620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3622:	6b 85       	ldd	r22, Y+11	; 0x0b
    3624:	7c 85       	ldd	r23, Y+12	; 0x0c
    3626:	8d 85       	ldd	r24, Y+13	; 0x0d
    3628:	9e 85       	ldd	r25, Y+14	; 0x0e
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	4a ef       	ldi	r20, 0xFA	; 250
    3630:	54 e4       	ldi	r21, 0x44	; 68
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	8f 83       	std	Y+7, r24	; 0x07
    363c:	98 87       	std	Y+8, r25	; 0x08
    363e:	a9 87       	std	Y+9, r26	; 0x09
    3640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	2c f4       	brge	.+10     	; 0x3664 <LCD_Init+0x16a>
		__ticks = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	8d 83       	std	Y+5, r24	; 0x05
    3662:	3f c0       	rjmp	.+126    	; 0x36e2 <LCD_Init+0x1e8>
	else if (__tmp > 65535)
    3664:	6f 81       	ldd	r22, Y+7	; 0x07
    3666:	78 85       	ldd	r23, Y+8	; 0x08
    3668:	89 85       	ldd	r24, Y+9	; 0x09
    366a:	9a 85       	ldd	r25, Y+10	; 0x0a
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	3f ef       	ldi	r19, 0xFF	; 255
    3670:	4f e7       	ldi	r20, 0x7F	; 127
    3672:	57 e4       	ldi	r21, 0x47	; 71
    3674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3678:	18 16       	cp	r1, r24
    367a:	4c f5       	brge	.+82     	; 0x36ce <LCD_Init+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367c:	6b 85       	ldd	r22, Y+11	; 0x0b
    367e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3680:	8d 85       	ldd	r24, Y+13	; 0x0d
    3682:	9e 85       	ldd	r25, Y+14	; 0x0e
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e2       	ldi	r20, 0x20	; 32
    368a:	51 e4       	ldi	r21, 0x41	; 65
    368c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	0f c0       	rjmp	.+30     	; 0x36c4 <LCD_Init+0x1ca>
    36a6:	88 ec       	ldi	r24, 0xC8	; 200
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <LCD_Init+0x1b8>
    36b6:	9c 83       	std	Y+4, r25	; 0x04
    36b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	9e 83       	std	Y+6, r25	; 0x06
    36c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <LCD_Init+0x1ac>
    36cc:	14 c0       	rjmp	.+40     	; 0x36f6 <LCD_Init+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ce:	6f 81       	ldd	r22, Y+7	; 0x07
    36d0:	78 85       	ldd	r23, Y+8	; 0x08
    36d2:	89 85       	ldd	r24, Y+9	; 0x09
    36d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
    36e2:	8d 81       	ldd	r24, Y+5	; 0x05
    36e4:	9e 81       	ldd	r25, Y+6	; 0x06
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <LCD_Init+0x1f4>
    36f2:	9a 83       	std	Y+2, r25	; 0x02
    36f4:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);

	 /* Entry Mode Set */
	 LCD_WriteCommand(ENTRY_MODE_SET);
    36f6:	86 e0       	ldi	r24, 0x06	; 6
    36f8:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>


}
    36fc:	6c 96       	adiw	r28, 0x1c	; 28
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Copy_u8Command)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	e9 97       	sbiw	r28, 0x39	; 57
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_LOW); //RS = 0
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	40 e0       	ldi	r20, 0x00	; 0
    372a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,4)); //DB4
    3738:	89 ad       	ldd	r24, Y+57	; 0x39
    373a:	82 95       	swap	r24
    373c:	8f 70       	andi	r24, 0x0F	; 15
    373e:	98 2f       	mov	r25, r24
    3740:	91 70       	andi	r25, 0x01	; 1
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	64 e0       	ldi	r22, 0x04	; 4
    3746:	49 2f       	mov	r20, r25
    3748:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,5)); //DB5
    374c:	89 ad       	ldd	r24, Y+57	; 0x39
    374e:	82 95       	swap	r24
    3750:	86 95       	lsr	r24
    3752:	87 70       	andi	r24, 0x07	; 7
    3754:	98 2f       	mov	r25, r24
    3756:	91 70       	andi	r25, 0x01	; 1
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	65 e0       	ldi	r22, 0x05	; 5
    375c:	49 2f       	mov	r20, r25
    375e:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,6)); //DB5
    3762:	89 ad       	ldd	r24, Y+57	; 0x39
    3764:	82 95       	swap	r24
    3766:	86 95       	lsr	r24
    3768:	86 95       	lsr	r24
    376a:	83 70       	andi	r24, 0x03	; 3
    376c:	98 2f       	mov	r25, r24
    376e:	91 70       	andi	r25, 0x01	; 1
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	66 e0       	ldi	r22, 0x06	; 6
    3774:	49 2f       	mov	r20, r25
    3776:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,7)); //DB7
    377a:	89 ad       	ldd	r24, Y+57	; 0x39
    377c:	98 2f       	mov	r25, r24
    377e:	99 1f       	adc	r25, r25
    3780:	99 27       	eor	r25, r25
    3782:	99 1f       	adc	r25, r25
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	67 e0       	ldi	r22, 0x07	; 7
    3788:	49 2f       	mov	r20, r25
    378a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	62 e0       	ldi	r22, 0x02	; 2
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	a0 e8       	ldi	r26, 0x80	; 128
    379e:	bf e3       	ldi	r27, 0x3F	; 63
    37a0:	8d ab       	std	Y+53, r24	; 0x35
    37a2:	9e ab       	std	Y+54, r25	; 0x36
    37a4:	af ab       	std	Y+55, r26	; 0x37
    37a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a8:	6d a9       	ldd	r22, Y+53	; 0x35
    37aa:	7e a9       	ldd	r23, Y+54	; 0x36
    37ac:	8f a9       	ldd	r24, Y+55	; 0x37
    37ae:	98 ad       	ldd	r25, Y+56	; 0x38
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	4a ef       	ldi	r20, 0xFA	; 250
    37b6:	54 e4       	ldi	r21, 0x44	; 68
    37b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	89 ab       	std	Y+49, r24	; 0x31
    37c2:	9a ab       	std	Y+50, r25	; 0x32
    37c4:	ab ab       	std	Y+51, r26	; 0x33
    37c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37c8:	69 a9       	ldd	r22, Y+49	; 0x31
    37ca:	7a a9       	ldd	r23, Y+50	; 0x32
    37cc:	8b a9       	ldd	r24, Y+51	; 0x33
    37ce:	9c a9       	ldd	r25, Y+52	; 0x34
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	40 e8       	ldi	r20, 0x80	; 128
    37d6:	5f e3       	ldi	r21, 0x3F	; 63
    37d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37dc:	88 23       	and	r24, r24
    37de:	2c f4       	brge	.+10     	; 0x37ea <LCD_WriteCommand+0xdc>
		__ticks = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	98 ab       	std	Y+48, r25	; 0x30
    37e6:	8f a7       	std	Y+47, r24	; 0x2f
    37e8:	3f c0       	rjmp	.+126    	; 0x3868 <LCD_WriteCommand+0x15a>
	else if (__tmp > 65535)
    37ea:	69 a9       	ldd	r22, Y+49	; 0x31
    37ec:	7a a9       	ldd	r23, Y+50	; 0x32
    37ee:	8b a9       	ldd	r24, Y+51	; 0x33
    37f0:	9c a9       	ldd	r25, Y+52	; 0x34
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	3f ef       	ldi	r19, 0xFF	; 255
    37f6:	4f e7       	ldi	r20, 0x7F	; 127
    37f8:	57 e4       	ldi	r21, 0x47	; 71
    37fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37fe:	18 16       	cp	r1, r24
    3800:	4c f5       	brge	.+82     	; 0x3854 <LCD_WriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3802:	6d a9       	ldd	r22, Y+53	; 0x35
    3804:	7e a9       	ldd	r23, Y+54	; 0x36
    3806:	8f a9       	ldd	r24, Y+55	; 0x37
    3808:	98 ad       	ldd	r25, Y+56	; 0x38
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e2       	ldi	r20, 0x20	; 32
    3810:	51 e4       	ldi	r21, 0x41	; 65
    3812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	98 ab       	std	Y+48, r25	; 0x30
    3828:	8f a7       	std	Y+47, r24	; 0x2f
    382a:	0f c0       	rjmp	.+30     	; 0x384a <LCD_WriteCommand+0x13c>
    382c:	88 ec       	ldi	r24, 0xC8	; 200
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9e a7       	std	Y+46, r25	; 0x2e
    3832:	8d a7       	std	Y+45, r24	; 0x2d
    3834:	8d a5       	ldd	r24, Y+45	; 0x2d
    3836:	9e a5       	ldd	r25, Y+46	; 0x2e
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <LCD_WriteCommand+0x12a>
    383c:	9e a7       	std	Y+46, r25	; 0x2e
    383e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	8f a5       	ldd	r24, Y+47	; 0x2f
    3842:	98 a9       	ldd	r25, Y+48	; 0x30
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	98 ab       	std	Y+48, r25	; 0x30
    3848:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384a:	8f a5       	ldd	r24, Y+47	; 0x2f
    384c:	98 a9       	ldd	r25, Y+48	; 0x30
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	69 f7       	brne	.-38     	; 0x382c <LCD_WriteCommand+0x11e>
    3852:	14 c0       	rjmp	.+40     	; 0x387c <LCD_WriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3854:	69 a9       	ldd	r22, Y+49	; 0x31
    3856:	7a a9       	ldd	r23, Y+50	; 0x32
    3858:	8b a9       	ldd	r24, Y+51	; 0x33
    385a:	9c a9       	ldd	r25, Y+52	; 0x34
    385c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	98 ab       	std	Y+48, r25	; 0x30
    3866:	8f a7       	std	Y+47, r24	; 0x2f
    3868:	8f a5       	ldd	r24, Y+47	; 0x2f
    386a:	98 a9       	ldd	r25, Y+48	; 0x30
    386c:	9c a7       	std	Y+44, r25	; 0x2c
    386e:	8b a7       	std	Y+43, r24	; 0x2b
    3870:	8b a5       	ldd	r24, Y+43	; 0x2b
    3872:	9c a5       	ldd	r25, Y+44	; 0x2c
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <LCD_WriteCommand+0x166>
    3878:	9c a7       	std	Y+44, r25	; 0x2c
    387a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	62 e0       	ldi	r22, 0x02	; 2
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	a0 e8       	ldi	r26, 0x80	; 128
    388c:	bf e3       	ldi	r27, 0x3F	; 63
    388e:	8f a3       	std	Y+39, r24	; 0x27
    3890:	98 a7       	std	Y+40, r25	; 0x28
    3892:	a9 a7       	std	Y+41, r26	; 0x29
    3894:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3896:	6f a1       	ldd	r22, Y+39	; 0x27
    3898:	78 a5       	ldd	r23, Y+40	; 0x28
    389a:	89 a5       	ldd	r24, Y+41	; 0x29
    389c:	9a a5       	ldd	r25, Y+42	; 0x2a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	4a ef       	ldi	r20, 0xFA	; 250
    38a4:	54 e4       	ldi	r21, 0x44	; 68
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	8b a3       	std	Y+35, r24	; 0x23
    38b0:	9c a3       	std	Y+36, r25	; 0x24
    38b2:	ad a3       	std	Y+37, r26	; 0x25
    38b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38b6:	6b a1       	ldd	r22, Y+35	; 0x23
    38b8:	7c a1       	ldd	r23, Y+36	; 0x24
    38ba:	8d a1       	ldd	r24, Y+37	; 0x25
    38bc:	9e a1       	ldd	r25, Y+38	; 0x26
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e8       	ldi	r20, 0x80	; 128
    38c4:	5f e3       	ldi	r21, 0x3F	; 63
    38c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	2c f4       	brge	.+10     	; 0x38d8 <LCD_WriteCommand+0x1ca>
		__ticks = 1;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9a a3       	std	Y+34, r25	; 0x22
    38d4:	89 a3       	std	Y+33, r24	; 0x21
    38d6:	3f c0       	rjmp	.+126    	; 0x3956 <LCD_WriteCommand+0x248>
	else if (__tmp > 65535)
    38d8:	6b a1       	ldd	r22, Y+35	; 0x23
    38da:	7c a1       	ldd	r23, Y+36	; 0x24
    38dc:	8d a1       	ldd	r24, Y+37	; 0x25
    38de:	9e a1       	ldd	r25, Y+38	; 0x26
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	3f ef       	ldi	r19, 0xFF	; 255
    38e4:	4f e7       	ldi	r20, 0x7F	; 127
    38e6:	57 e4       	ldi	r21, 0x47	; 71
    38e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ec:	18 16       	cp	r1, r24
    38ee:	4c f5       	brge	.+82     	; 0x3942 <LCD_WriteCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f0:	6f a1       	ldd	r22, Y+39	; 0x27
    38f2:	78 a5       	ldd	r23, Y+40	; 0x28
    38f4:	89 a5       	ldd	r24, Y+41	; 0x29
    38f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e2       	ldi	r20, 0x20	; 32
    38fe:	51 e4       	ldi	r21, 0x41	; 65
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	9a a3       	std	Y+34, r25	; 0x22
    3916:	89 a3       	std	Y+33, r24	; 0x21
    3918:	0f c0       	rjmp	.+30     	; 0x3938 <LCD_WriteCommand+0x22a>
    391a:	88 ec       	ldi	r24, 0xC8	; 200
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	98 a3       	std	Y+32, r25	; 0x20
    3920:	8f 8f       	std	Y+31, r24	; 0x1f
    3922:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3924:	98 a1       	ldd	r25, Y+32	; 0x20
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <LCD_WriteCommand+0x218>
    392a:	98 a3       	std	Y+32, r25	; 0x20
    392c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392e:	89 a1       	ldd	r24, Y+33	; 0x21
    3930:	9a a1       	ldd	r25, Y+34	; 0x22
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	9a a3       	std	Y+34, r25	; 0x22
    3936:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3938:	89 a1       	ldd	r24, Y+33	; 0x21
    393a:	9a a1       	ldd	r25, Y+34	; 0x22
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	69 f7       	brne	.-38     	; 0x391a <LCD_WriteCommand+0x20c>
    3940:	14 c0       	rjmp	.+40     	; 0x396a <LCD_WriteCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3942:	6b a1       	ldd	r22, Y+35	; 0x23
    3944:	7c a1       	ldd	r23, Y+36	; 0x24
    3946:	8d a1       	ldd	r24, Y+37	; 0x25
    3948:	9e a1       	ldd	r25, Y+38	; 0x26
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	9a a3       	std	Y+34, r25	; 0x22
    3954:	89 a3       	std	Y+33, r24	; 0x21
    3956:	89 a1       	ldd	r24, Y+33	; 0x21
    3958:	9a a1       	ldd	r25, Y+34	; 0x22
    395a:	9e 8f       	std	Y+30, r25	; 0x1e
    395c:	8d 8f       	std	Y+29, r24	; 0x1d
    395e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3960:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <LCD_WriteCommand+0x254>
    3966:	9e 8f       	std	Y+30, r25	; 0x1e
    3968:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

		  /* Second Half */
	  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,0)); //DB4
    396a:	89 ad       	ldd	r24, Y+57	; 0x39
    396c:	98 2f       	mov	r25, r24
    396e:	91 70       	andi	r25, 0x01	; 1
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	64 e0       	ldi	r22, 0x04	; 4
    3974:	49 2f       	mov	r20, r25
    3976:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,1)); //DB5
    397a:	89 ad       	ldd	r24, Y+57	; 0x39
    397c:	86 95       	lsr	r24
    397e:	98 2f       	mov	r25, r24
    3980:	91 70       	andi	r25, 0x01	; 1
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	65 e0       	ldi	r22, 0x05	; 5
    3986:	49 2f       	mov	r20, r25
    3988:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,2)); //DB6
    398c:	89 ad       	ldd	r24, Y+57	; 0x39
    398e:	86 95       	lsr	r24
    3990:	86 95       	lsr	r24
    3992:	98 2f       	mov	r25, r24
    3994:	91 70       	andi	r25, 0x01	; 1
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	66 e0       	ldi	r22, 0x06	; 6
    399a:	49 2f       	mov	r20, r25
    399c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,3)); //DB7
    39a0:	89 ad       	ldd	r24, Y+57	; 0x39
    39a2:	86 95       	lsr	r24
    39a4:	86 95       	lsr	r24
    39a6:	86 95       	lsr	r24
    39a8:	98 2f       	mov	r25, r24
    39aa:	91 70       	andi	r25, 0x01	; 1
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	67 e0       	ldi	r22, 0x07	; 7
    39b0:	49 2f       	mov	r20, r25
    39b2:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	62 e0       	ldi	r22, 0x02	; 2
    39ba:	41 e0       	ldi	r20, 0x01	; 1
    39bc:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	a0 e8       	ldi	r26, 0x80	; 128
    39c6:	bf e3       	ldi	r27, 0x3F	; 63
    39c8:	89 8f       	std	Y+25, r24	; 0x19
    39ca:	9a 8f       	std	Y+26, r25	; 0x1a
    39cc:	ab 8f       	std	Y+27, r26	; 0x1b
    39ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d0:	69 8d       	ldd	r22, Y+25	; 0x19
    39d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a ef       	ldi	r20, 0xFA	; 250
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8d 8b       	std	Y+21, r24	; 0x15
    39ea:	9e 8b       	std	Y+22, r25	; 0x16
    39ec:	af 8b       	std	Y+23, r26	; 0x17
    39ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39f0:	6d 89       	ldd	r22, Y+21	; 0x15
    39f2:	7e 89       	ldd	r23, Y+22	; 0x16
    39f4:	8f 89       	ldd	r24, Y+23	; 0x17
    39f6:	98 8d       	ldd	r25, Y+24	; 0x18
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e8       	ldi	r20, 0x80	; 128
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a04:	88 23       	and	r24, r24
    3a06:	2c f4       	brge	.+10     	; 0x3a12 <LCD_WriteCommand+0x304>
		__ticks = 1;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9c 8b       	std	Y+20, r25	; 0x14
    3a0e:	8b 8b       	std	Y+19, r24	; 0x13
    3a10:	3f c0       	rjmp	.+126    	; 0x3a90 <LCD_WriteCommand+0x382>
	else if (__tmp > 65535)
    3a12:	6d 89       	ldd	r22, Y+21	; 0x15
    3a14:	7e 89       	ldd	r23, Y+22	; 0x16
    3a16:	8f 89       	ldd	r24, Y+23	; 0x17
    3a18:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	3f ef       	ldi	r19, 0xFF	; 255
    3a1e:	4f e7       	ldi	r20, 0x7F	; 127
    3a20:	57 e4       	ldi	r21, 0x47	; 71
    3a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a26:	18 16       	cp	r1, r24
    3a28:	4c f5       	brge	.+82     	; 0x3a7c <LCD_WriteCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9c 8b       	std	Y+20, r25	; 0x14
    3a50:	8b 8b       	std	Y+19, r24	; 0x13
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <LCD_WriteCommand+0x364>
    3a54:	88 ec       	ldi	r24, 0xC8	; 200
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9a 8b       	std	Y+18, r25	; 0x12
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
    3a5c:	89 89       	ldd	r24, Y+17	; 0x11
    3a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <LCD_WriteCommand+0x352>
    3a64:	9a 8b       	std	Y+18, r25	; 0x12
    3a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	9c 8b       	std	Y+20, r25	; 0x14
    3a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	8b 89       	ldd	r24, Y+19	; 0x13
    3a74:	9c 89       	ldd	r25, Y+20	; 0x14
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <LCD_WriteCommand+0x346>
    3a7a:	14 c0       	rjmp	.+40     	; 0x3aa4 <LCD_WriteCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a80:	8f 89       	ldd	r24, Y+23	; 0x17
    3a82:	98 8d       	ldd	r25, Y+24	; 0x18
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	8b 89       	ldd	r24, Y+19	; 0x13
    3a92:	9c 89       	ldd	r25, Y+20	; 0x14
    3a94:	98 8b       	std	Y+16, r25	; 0x10
    3a96:	8f 87       	std	Y+15, r24	; 0x0f
    3a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9a:	98 89       	ldd	r25, Y+16	; 0x10
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <LCD_WriteCommand+0x38e>
    3aa0:	98 8b       	std	Y+16, r25	; 0x10
    3aa2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	62 e0       	ldi	r22, 0x02	; 2
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	a0 e8       	ldi	r26, 0x80	; 128
    3ab4:	bf e3       	ldi	r27, 0x3F	; 63
    3ab6:	8b 87       	std	Y+11, r24	; 0x0b
    3ab8:	9c 87       	std	Y+12, r25	; 0x0c
    3aba:	ad 87       	std	Y+13, r26	; 0x0d
    3abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4a ef       	ldi	r20, 0xFA	; 250
    3acc:	54 e4       	ldi	r21, 0x44	; 68
    3ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	8f 83       	std	Y+7, r24	; 0x07
    3ad8:	98 87       	std	Y+8, r25	; 0x08
    3ada:	a9 87       	std	Y+9, r26	; 0x09
    3adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ade:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae0:	78 85       	ldd	r23, Y+8	; 0x08
    3ae2:	89 85       	ldd	r24, Y+9	; 0x09
    3ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e8       	ldi	r20, 0x80	; 128
    3aec:	5f e3       	ldi	r21, 0x3F	; 63
    3aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af2:	88 23       	and	r24, r24
    3af4:	2c f4       	brge	.+10     	; 0x3b00 <LCD_WriteCommand+0x3f2>
		__ticks = 1;
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	9e 83       	std	Y+6, r25	; 0x06
    3afc:	8d 83       	std	Y+5, r24	; 0x05
    3afe:	3f c0       	rjmp	.+126    	; 0x3b7e <LCD_WriteCommand+0x470>
	else if (__tmp > 65535)
    3b00:	6f 81       	ldd	r22, Y+7	; 0x07
    3b02:	78 85       	ldd	r23, Y+8	; 0x08
    3b04:	89 85       	ldd	r24, Y+9	; 0x09
    3b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	3f ef       	ldi	r19, 0xFF	; 255
    3b0c:	4f e7       	ldi	r20, 0x7F	; 127
    3b0e:	57 e4       	ldi	r21, 0x47	; 71
    3b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b14:	18 16       	cp	r1, r24
    3b16:	4c f5       	brge	.+82     	; 0x3b6a <LCD_WriteCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e2       	ldi	r20, 0x20	; 32
    3b26:	51 e4       	ldi	r21, 0x41	; 65
    3b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	0f c0       	rjmp	.+30     	; 0x3b60 <LCD_WriteCommand+0x452>
    3b42:	88 ec       	ldi	r24, 0xC8	; 200
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	9c 83       	std	Y+4, r25	; 0x04
    3b48:	8b 83       	std	Y+3, r24	; 0x03
    3b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <LCD_WriteCommand+0x440>
    3b52:	9c 83       	std	Y+4, r25	; 0x04
    3b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b56:	8d 81       	ldd	r24, Y+5	; 0x05
    3b58:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b60:	8d 81       	ldd	r24, Y+5	; 0x05
    3b62:	9e 81       	ldd	r25, Y+6	; 0x06
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	69 f7       	brne	.-38     	; 0x3b42 <LCD_WriteCommand+0x434>
    3b68:	14 c0       	rjmp	.+40     	; 0x3b92 <LCD_WriteCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6c:	78 85       	ldd	r23, Y+8	; 0x08
    3b6e:	89 85       	ldd	r24, Y+9	; 0x09
    3b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	89 83       	std	Y+1, r24	; 0x01
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <LCD_WriteCommand+0x47c>
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
    3b90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3b92:	e9 96       	adiw	r28, 0x39	; 57
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	08 95       	ret

00003ba4 <LCD_WriteData>:
void LCD_WriteData(u8 Copy_u8Data)
{
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	e9 97       	sbiw	r28, 0x39	; 57
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_HIGH); //RS = 1
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	41 e0       	ldi	r20, 0x01	; 1
    3bc0:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,4)); //DB4
    3bce:	89 ad       	ldd	r24, Y+57	; 0x39
    3bd0:	82 95       	swap	r24
    3bd2:	8f 70       	andi	r24, 0x0F	; 15
    3bd4:	98 2f       	mov	r25, r24
    3bd6:	91 70       	andi	r25, 0x01	; 1
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	64 e0       	ldi	r22, 0x04	; 4
    3bdc:	49 2f       	mov	r20, r25
    3bde:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,5)); //DB4
    3be2:	89 ad       	ldd	r24, Y+57	; 0x39
    3be4:	82 95       	swap	r24
    3be6:	86 95       	lsr	r24
    3be8:	87 70       	andi	r24, 0x07	; 7
    3bea:	98 2f       	mov	r25, r24
    3bec:	91 70       	andi	r25, 0x01	; 1
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	65 e0       	ldi	r22, 0x05	; 5
    3bf2:	49 2f       	mov	r20, r25
    3bf4:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,6)); //DB4
    3bf8:	89 ad       	ldd	r24, Y+57	; 0x39
    3bfa:	82 95       	swap	r24
    3bfc:	86 95       	lsr	r24
    3bfe:	86 95       	lsr	r24
    3c00:	83 70       	andi	r24, 0x03	; 3
    3c02:	98 2f       	mov	r25, r24
    3c04:	91 70       	andi	r25, 0x01	; 1
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	66 e0       	ldi	r22, 0x06	; 6
    3c0a:	49 2f       	mov	r20, r25
    3c0c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,7)); //DB4
    3c10:	89 ad       	ldd	r24, Y+57	; 0x39
    3c12:	98 2f       	mov	r25, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	99 27       	eor	r25, r25
    3c18:	99 1f       	adc	r25, r25
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	67 e0       	ldi	r22, 0x07	; 7
    3c1e:	49 2f       	mov	r20, r25
    3c20:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	62 e0       	ldi	r22, 0x02	; 2
    3c28:	41 e0       	ldi	r20, 0x01	; 1
    3c2a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	a0 e8       	ldi	r26, 0x80	; 128
    3c34:	bf e3       	ldi	r27, 0x3F	; 63
    3c36:	8d ab       	std	Y+53, r24	; 0x35
    3c38:	9e ab       	std	Y+54, r25	; 0x36
    3c3a:	af ab       	std	Y+55, r26	; 0x37
    3c3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c40:	7e a9       	ldd	r23, Y+54	; 0x36
    3c42:	8f a9       	ldd	r24, Y+55	; 0x37
    3c44:	98 ad       	ldd	r25, Y+56	; 0x38
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	4a ef       	ldi	r20, 0xFA	; 250
    3c4c:	54 e4       	ldi	r21, 0x44	; 68
    3c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	89 ab       	std	Y+49, r24	; 0x31
    3c58:	9a ab       	std	Y+50, r25	; 0x32
    3c5a:	ab ab       	std	Y+51, r26	; 0x33
    3c5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    3c60:	7a a9       	ldd	r23, Y+50	; 0x32
    3c62:	8b a9       	ldd	r24, Y+51	; 0x33
    3c64:	9c a9       	ldd	r25, Y+52	; 0x34
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e8       	ldi	r20, 0x80	; 128
    3c6c:	5f e3       	ldi	r21, 0x3F	; 63
    3c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c72:	88 23       	and	r24, r24
    3c74:	2c f4       	brge	.+10     	; 0x3c80 <LCD_WriteData+0xdc>
		__ticks = 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	98 ab       	std	Y+48, r25	; 0x30
    3c7c:	8f a7       	std	Y+47, r24	; 0x2f
    3c7e:	3f c0       	rjmp	.+126    	; 0x3cfe <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    3c80:	69 a9       	ldd	r22, Y+49	; 0x31
    3c82:	7a a9       	ldd	r23, Y+50	; 0x32
    3c84:	8b a9       	ldd	r24, Y+51	; 0x33
    3c86:	9c a9       	ldd	r25, Y+52	; 0x34
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	3f ef       	ldi	r19, 0xFF	; 255
    3c8c:	4f e7       	ldi	r20, 0x7F	; 127
    3c8e:	57 e4       	ldi	r21, 0x47	; 71
    3c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c94:	18 16       	cp	r1, r24
    3c96:	4c f5       	brge	.+82     	; 0x3cea <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c98:	6d a9       	ldd	r22, Y+53	; 0x35
    3c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e2       	ldi	r20, 0x20	; 32
    3ca6:	51 e4       	ldi	r21, 0x41	; 65
    3ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	98 ab       	std	Y+48, r25	; 0x30
    3cbe:	8f a7       	std	Y+47, r24	; 0x2f
    3cc0:	0f c0       	rjmp	.+30     	; 0x3ce0 <LCD_WriteData+0x13c>
    3cc2:	88 ec       	ldi	r24, 0xC8	; 200
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	9e a7       	std	Y+46, r25	; 0x2e
    3cc8:	8d a7       	std	Y+45, r24	; 0x2d
    3cca:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	f1 f7       	brne	.-4      	; 0x3cce <LCD_WriteData+0x12a>
    3cd2:	9e a7       	std	Y+46, r25	; 0x2e
    3cd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3cda:	01 97       	sbiw	r24, 0x01	; 1
    3cdc:	98 ab       	std	Y+48, r25	; 0x30
    3cde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	69 f7       	brne	.-38     	; 0x3cc2 <LCD_WriteData+0x11e>
    3ce8:	14 c0       	rjmp	.+40     	; 0x3d12 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cea:	69 a9       	ldd	r22, Y+49	; 0x31
    3cec:	7a a9       	ldd	r23, Y+50	; 0x32
    3cee:	8b a9       	ldd	r24, Y+51	; 0x33
    3cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    3cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	98 ab       	std	Y+48, r25	; 0x30
    3cfc:	8f a7       	std	Y+47, r24	; 0x2f
    3cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d00:	98 a9       	ldd	r25, Y+48	; 0x30
    3d02:	9c a7       	std	Y+44, r25	; 0x2c
    3d04:	8b a7       	std	Y+43, r24	; 0x2b
    3d06:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d08:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <LCD_WriteData+0x166>
    3d0e:	9c a7       	std	Y+44, r25	; 0x2c
    3d10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	62 e0       	ldi	r22, 0x02	; 2
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	a0 e8       	ldi	r26, 0x80	; 128
    3d22:	bf e3       	ldi	r27, 0x3F	; 63
    3d24:	8f a3       	std	Y+39, r24	; 0x27
    3d26:	98 a7       	std	Y+40, r25	; 0x28
    3d28:	a9 a7       	std	Y+41, r26	; 0x29
    3d2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    3d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    3d30:	89 a5       	ldd	r24, Y+41	; 0x29
    3d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	4a ef       	ldi	r20, 0xFA	; 250
    3d3a:	54 e4       	ldi	r21, 0x44	; 68
    3d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	8b a3       	std	Y+35, r24	; 0x23
    3d46:	9c a3       	std	Y+36, r25	; 0x24
    3d48:	ad a3       	std	Y+37, r26	; 0x25
    3d4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d4c:	6b a1       	ldd	r22, Y+35	; 0x23
    3d4e:	7c a1       	ldd	r23, Y+36	; 0x24
    3d50:	8d a1       	ldd	r24, Y+37	; 0x25
    3d52:	9e a1       	ldd	r25, Y+38	; 0x26
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f e3       	ldi	r21, 0x3F	; 63
    3d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d60:	88 23       	and	r24, r24
    3d62:	2c f4       	brge	.+10     	; 0x3d6e <LCD_WriteData+0x1ca>
		__ticks = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9a a3       	std	Y+34, r25	; 0x22
    3d6a:	89 a3       	std	Y+33, r24	; 0x21
    3d6c:	3f c0       	rjmp	.+126    	; 0x3dec <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    3d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d70:	7c a1       	ldd	r23, Y+36	; 0x24
    3d72:	8d a1       	ldd	r24, Y+37	; 0x25
    3d74:	9e a1       	ldd	r25, Y+38	; 0x26
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	3f ef       	ldi	r19, 0xFF	; 255
    3d7a:	4f e7       	ldi	r20, 0x7F	; 127
    3d7c:	57 e4       	ldi	r21, 0x47	; 71
    3d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d82:	18 16       	cp	r1, r24
    3d84:	4c f5       	brge	.+82     	; 0x3dd8 <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d86:	6f a1       	ldd	r22, Y+39	; 0x27
    3d88:	78 a5       	ldd	r23, Y+40	; 0x28
    3d8a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e2       	ldi	r20, 0x20	; 32
    3d94:	51 e4       	ldi	r21, 0x41	; 65
    3d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	bc 01       	movw	r22, r24
    3da0:	cd 01       	movw	r24, r26
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9a a3       	std	Y+34, r25	; 0x22
    3dac:	89 a3       	std	Y+33, r24	; 0x21
    3dae:	0f c0       	rjmp	.+30     	; 0x3dce <LCD_WriteData+0x22a>
    3db0:	88 ec       	ldi	r24, 0xC8	; 200
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	98 a3       	std	Y+32, r25	; 0x20
    3db6:	8f 8f       	std	Y+31, r24	; 0x1f
    3db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dba:	98 a1       	ldd	r25, Y+32	; 0x20
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <LCD_WriteData+0x218>
    3dc0:	98 a3       	std	Y+32, r25	; 0x20
    3dc2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    3dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	9a a3       	std	Y+34, r25	; 0x22
    3dcc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dce:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	69 f7       	brne	.-38     	; 0x3db0 <LCD_WriteData+0x20c>
    3dd6:	14 c0       	rjmp	.+40     	; 0x3e00 <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    3dda:	7c a1       	ldd	r23, Y+36	; 0x24
    3ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    3dde:	9e a1       	ldd	r25, Y+38	; 0x26
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	9a a3       	std	Y+34, r25	; 0x22
    3dea:	89 a3       	std	Y+33, r24	; 0x21
    3dec:	89 a1       	ldd	r24, Y+33	; 0x21
    3dee:	9a a1       	ldd	r25, Y+34	; 0x22
    3df0:	9e 8f       	std	Y+30, r25	; 0x1e
    3df2:	8d 8f       	std	Y+29, r24	; 0x1d
    3df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <LCD_WriteData+0x254>
    3dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    3dfe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
		  /* Second Half */
		  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,0)); //DB4
    3e00:	89 ad       	ldd	r24, Y+57	; 0x39
    3e02:	98 2f       	mov	r25, r24
    3e04:	91 70       	andi	r25, 0x01	; 1
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	64 e0       	ldi	r22, 0x04	; 4
    3e0a:	49 2f       	mov	r20, r25
    3e0c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,1)); //DB4
    3e10:	89 ad       	ldd	r24, Y+57	; 0x39
    3e12:	86 95       	lsr	r24
    3e14:	98 2f       	mov	r25, r24
    3e16:	91 70       	andi	r25, 0x01	; 1
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	65 e0       	ldi	r22, 0x05	; 5
    3e1c:	49 2f       	mov	r20, r25
    3e1e:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,2)); //DB4
    3e22:	89 ad       	ldd	r24, Y+57	; 0x39
    3e24:	86 95       	lsr	r24
    3e26:	86 95       	lsr	r24
    3e28:	98 2f       	mov	r25, r24
    3e2a:	91 70       	andi	r25, 0x01	; 1
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	66 e0       	ldi	r22, 0x06	; 6
    3e30:	49 2f       	mov	r20, r25
    3e32:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,3)); //DB4
    3e36:	89 ad       	ldd	r24, Y+57	; 0x39
    3e38:	86 95       	lsr	r24
    3e3a:	86 95       	lsr	r24
    3e3c:	86 95       	lsr	r24
    3e3e:	98 2f       	mov	r25, r24
    3e40:	91 70       	andi	r25, 0x01	; 1
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	67 e0       	ldi	r22, 0x07	; 7
    3e46:	49 2f       	mov	r20, r25
    3e48:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	62 e0       	ldi	r22, 0x02	; 2
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	a0 e8       	ldi	r26, 0x80	; 128
    3e5c:	bf e3       	ldi	r27, 0x3F	; 63
    3e5e:	89 8f       	std	Y+25, r24	; 0x19
    3e60:	9a 8f       	std	Y+26, r25	; 0x1a
    3e62:	ab 8f       	std	Y+27, r26	; 0x1b
    3e64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e66:	69 8d       	ldd	r22, Y+25	; 0x19
    3e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	4a ef       	ldi	r20, 0xFA	; 250
    3e74:	54 e4       	ldi	r21, 0x44	; 68
    3e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	8d 8b       	std	Y+21, r24	; 0x15
    3e80:	9e 8b       	std	Y+22, r25	; 0x16
    3e82:	af 8b       	std	Y+23, r26	; 0x17
    3e84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e86:	6d 89       	ldd	r22, Y+21	; 0x15
    3e88:	7e 89       	ldd	r23, Y+22	; 0x16
    3e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e8       	ldi	r20, 0x80	; 128
    3e94:	5f e3       	ldi	r21, 0x3F	; 63
    3e96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e9a:	88 23       	and	r24, r24
    3e9c:	2c f4       	brge	.+10     	; 0x3ea8 <LCD_WriteData+0x304>
		__ticks = 1;
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	9c 8b       	std	Y+20, r25	; 0x14
    3ea4:	8b 8b       	std	Y+19, r24	; 0x13
    3ea6:	3f c0       	rjmp	.+126    	; 0x3f26 <LCD_WriteData+0x382>
	else if (__tmp > 65535)
    3ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    3eac:	8f 89       	ldd	r24, Y+23	; 0x17
    3eae:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	3f ef       	ldi	r19, 0xFF	; 255
    3eb4:	4f e7       	ldi	r20, 0x7F	; 127
    3eb6:	57 e4       	ldi	r21, 0x47	; 71
    3eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ebc:	18 16       	cp	r1, r24
    3ebe:	4c f5       	brge	.+82     	; 0x3f12 <LCD_WriteData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ec2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ec4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ec6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e2       	ldi	r20, 0x20	; 32
    3ece:	51 e4       	ldi	r21, 0x41	; 65
    3ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	9c 8b       	std	Y+20, r25	; 0x14
    3ee6:	8b 8b       	std	Y+19, r24	; 0x13
    3ee8:	0f c0       	rjmp	.+30     	; 0x3f08 <LCD_WriteData+0x364>
    3eea:	88 ec       	ldi	r24, 0xC8	; 200
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	9a 8b       	std	Y+18, r25	; 0x12
    3ef0:	89 8b       	std	Y+17, r24	; 0x11
    3ef2:	89 89       	ldd	r24, Y+17	; 0x11
    3ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	f1 f7       	brne	.-4      	; 0x3ef6 <LCD_WriteData+0x352>
    3efa:	9a 8b       	std	Y+18, r25	; 0x12
    3efc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efe:	8b 89       	ldd	r24, Y+19	; 0x13
    3f00:	9c 89       	ldd	r25, Y+20	; 0x14
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	9c 8b       	std	Y+20, r25	; 0x14
    3f06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f08:	8b 89       	ldd	r24, Y+19	; 0x13
    3f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	69 f7       	brne	.-38     	; 0x3eea <LCD_WriteData+0x346>
    3f10:	14 c0       	rjmp	.+40     	; 0x3f3a <LCD_WriteData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f12:	6d 89       	ldd	r22, Y+21	; 0x15
    3f14:	7e 89       	ldd	r23, Y+22	; 0x16
    3f16:	8f 89       	ldd	r24, Y+23	; 0x17
    3f18:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	9c 8b       	std	Y+20, r25	; 0x14
    3f24:	8b 8b       	std	Y+19, r24	; 0x13
    3f26:	8b 89       	ldd	r24, Y+19	; 0x13
    3f28:	9c 89       	ldd	r25, Y+20	; 0x14
    3f2a:	98 8b       	std	Y+16, r25	; 0x10
    3f2c:	8f 87       	std	Y+15, r24	; 0x0f
    3f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f30:	98 89       	ldd	r25, Y+16	; 0x10
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	f1 f7       	brne	.-4      	; 0x3f32 <LCD_WriteData+0x38e>
    3f36:	98 8b       	std	Y+16, r25	; 0x10
    3f38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	62 e0       	ldi	r22, 0x02	; 2
    3f3e:	40 e0       	ldi	r20, 0x00	; 0
    3f40:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	a0 e8       	ldi	r26, 0x80	; 128
    3f4a:	bf e3       	ldi	r27, 0x3F	; 63
    3f4c:	8b 87       	std	Y+11, r24	; 0x0b
    3f4e:	9c 87       	std	Y+12, r25	; 0x0c
    3f50:	ad 87       	std	Y+13, r26	; 0x0d
    3f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	4a ef       	ldi	r20, 0xFA	; 250
    3f62:	54 e4       	ldi	r21, 0x44	; 68
    3f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	8f 83       	std	Y+7, r24	; 0x07
    3f6e:	98 87       	std	Y+8, r25	; 0x08
    3f70:	a9 87       	std	Y+9, r26	; 0x09
    3f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f74:	6f 81       	ldd	r22, Y+7	; 0x07
    3f76:	78 85       	ldd	r23, Y+8	; 0x08
    3f78:	89 85       	ldd	r24, Y+9	; 0x09
    3f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e8       	ldi	r20, 0x80	; 128
    3f82:	5f e3       	ldi	r21, 0x3F	; 63
    3f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f88:	88 23       	and	r24, r24
    3f8a:	2c f4       	brge	.+10     	; 0x3f96 <LCD_WriteData+0x3f2>
		__ticks = 1;
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	9e 83       	std	Y+6, r25	; 0x06
    3f92:	8d 83       	std	Y+5, r24	; 0x05
    3f94:	3f c0       	rjmp	.+126    	; 0x4014 <LCD_WriteData+0x470>
	else if (__tmp > 65535)
    3f96:	6f 81       	ldd	r22, Y+7	; 0x07
    3f98:	78 85       	ldd	r23, Y+8	; 0x08
    3f9a:	89 85       	ldd	r24, Y+9	; 0x09
    3f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	3f ef       	ldi	r19, 0xFF	; 255
    3fa2:	4f e7       	ldi	r20, 0x7F	; 127
    3fa4:	57 e4       	ldi	r21, 0x47	; 71
    3fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3faa:	18 16       	cp	r1, r24
    3fac:	4c f5       	brge	.+82     	; 0x4000 <LCD_WriteData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e2       	ldi	r20, 0x20	; 32
    3fbc:	51 e4       	ldi	r21, 0x41	; 65
    3fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	bc 01       	movw	r22, r24
    3fc8:	cd 01       	movw	r24, r26
    3fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	9e 83       	std	Y+6, r25	; 0x06
    3fd4:	8d 83       	std	Y+5, r24	; 0x05
    3fd6:	0f c0       	rjmp	.+30     	; 0x3ff6 <LCD_WriteData+0x452>
    3fd8:	88 ec       	ldi	r24, 0xC8	; 200
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	9c 83       	std	Y+4, r25	; 0x04
    3fde:	8b 83       	std	Y+3, r24	; 0x03
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <LCD_WriteData+0x440>
    3fe8:	9c 83       	std	Y+4, r25	; 0x04
    3fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fec:	8d 81       	ldd	r24, Y+5	; 0x05
    3fee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	9e 83       	std	Y+6, r25	; 0x06
    3ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	69 f7       	brne	.-38     	; 0x3fd8 <LCD_WriteData+0x434>
    3ffe:	14 c0       	rjmp	.+40     	; 0x4028 <LCD_WriteData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4000:	6f 81       	ldd	r22, Y+7	; 0x07
    4002:	78 85       	ldd	r23, Y+8	; 0x08
    4004:	89 85       	ldd	r24, Y+9	; 0x09
    4006:	9a 85       	ldd	r25, Y+10	; 0x0a
    4008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	9e 83       	std	Y+6, r25	; 0x06
    4012:	8d 83       	std	Y+5, r24	; 0x05
    4014:	8d 81       	ldd	r24, Y+5	; 0x05
    4016:	9e 81       	ldd	r25, Y+6	; 0x06
    4018:	9a 83       	std	Y+2, r25	; 0x02
    401a:	89 83       	std	Y+1, r24	; 0x01
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	f1 f7       	brne	.-4      	; 0x4020 <LCD_WriteData+0x47c>
    4024:	9a 83       	std	Y+2, r25	; 0x02
    4026:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    4028:	e9 96       	adiw	r28, 0x39	; 57
    402a:	0f b6       	in	r0, 0x3f	; 63
    402c:	f8 94       	cli
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <LCD_WriteString>:
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	00 d0       	rcall	.+0      	; 0x4040 <LCD_WriteString+0x6>
    4040:	0f 92       	push	r0
    4042:	cd b7       	in	r28, 0x3d	; 61
    4044:	de b7       	in	r29, 0x3e	; 62
    4046:	9b 83       	std	Y+3, r25	; 0x03
    4048:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    404a:	19 82       	std	Y+1, r1	; 0x01
    404c:	0e c0       	rjmp	.+28     	; 0x406a <LCD_WriteString+0x30>
	while(Copy_u8PtrString[i] !='\0')
	{
		LCD_WriteData(Copy_u8PtrString[i]);
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	28 2f       	mov	r18, r24
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	8a 81       	ldd	r24, Y+2	; 0x02
    4056:	9b 81       	ldd	r25, Y+3	; 0x03
    4058:	fc 01       	movw	r30, r24
    405a:	e2 0f       	add	r30, r18
    405c:	f3 1f       	adc	r31, r19
    405e:	80 81       	ld	r24, Z
    4060:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
		i++;
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	8f 5f       	subi	r24, 0xFF	; 255
    4068:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
	u8 i=0;
	while(Copy_u8PtrString[i] !='\0')
    406a:	89 81       	ldd	r24, Y+1	; 0x01
    406c:	28 2f       	mov	r18, r24
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	fc 01       	movw	r30, r24
    4076:	e2 0f       	add	r30, r18
    4078:	f3 1f       	adc	r31, r19
    407a:	80 81       	ld	r24, Z
    407c:	88 23       	and	r24, r24
    407e:	39 f7       	brne	.-50     	; 0x404e <LCD_WriteString+0x14>
	{
		LCD_WriteData(Copy_u8PtrString[i]);
		i++;
	}

}
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	cf 91       	pop	r28
    4088:	df 91       	pop	r29
    408a:	08 95       	ret

0000408c <LCD_GoTo>:

u8 LCD_GoTo(u8 Copy_u8Line, u8 Copy_u8Cell)
{
    408c:	df 93       	push	r29
    408e:	cf 93       	push	r28
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    4094:	e3 97       	sbiw	r28, 0x33	; 51
    4096:	0f b6       	in	r0, 0x3f	; 63
    4098:	f8 94       	cli
    409a:	de bf       	out	0x3e, r29	; 62
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	cd bf       	out	0x3d, r28	; 61
    40a0:	8a ab       	std	Y+50, r24	; 0x32
    40a2:	6b ab       	std	Y+51, r22	; 0x33
    u8 Ret = E_OK;
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	89 ab       	std	Y+49, r24	; 0x31

    if(Copy_u8Line == 0)
    40a8:	8a a9       	ldd	r24, Y+50	; 0x32
    40aa:	88 23       	and	r24, r24
    40ac:	09 f0       	breq	.+2      	; 0x40b0 <LCD_GoTo+0x24>
    40ae:	c3 c0       	rjmp	.+390    	; 0x4236 <LCD_GoTo+0x1aa>
    {
        LCD_WriteCommand(0x80 + Copy_u8Cell);
    40b0:	8b a9       	ldd	r24, Y+51	; 0x33
    40b2:	80 58       	subi	r24, 0x80	; 128
    40b4:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	a0 e2       	ldi	r26, 0x20	; 32
    40be:	b2 e4       	ldi	r27, 0x42	; 66
    40c0:	8d a7       	std	Y+45, r24	; 0x2d
    40c2:	9e a7       	std	Y+46, r25	; 0x2e
    40c4:	af a7       	std	Y+47, r26	; 0x2f
    40c6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    40ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    40cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ce:	98 a9       	ldd	r25, Y+48	; 0x30
    40d0:	2b ea       	ldi	r18, 0xAB	; 171
    40d2:	3a ea       	ldi	r19, 0xAA	; 170
    40d4:	4a e2       	ldi	r20, 0x2A	; 42
    40d6:	50 e4       	ldi	r21, 0x40	; 64
    40d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	89 a7       	std	Y+41, r24	; 0x29
    40e2:	9a a7       	std	Y+42, r25	; 0x2a
    40e4:	ab a7       	std	Y+43, r26	; 0x2b
    40e6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    40e8:	69 a5       	ldd	r22, Y+41	; 0x29
    40ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    40ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    40ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e8       	ldi	r20, 0x80	; 128
    40f6:	5f e3       	ldi	r21, 0x3F	; 63
    40f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fc:	88 23       	and	r24, r24
    40fe:	1c f4       	brge	.+6      	; 0x4106 <LCD_GoTo+0x7a>
		__ticks = 1;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	88 a7       	std	Y+40, r24	; 0x28
    4104:	91 c0       	rjmp	.+290    	; 0x4228 <LCD_GoTo+0x19c>
	else if (__tmp > 255)
    4106:	69 a5       	ldd	r22, Y+41	; 0x29
    4108:	7a a5       	ldd	r23, Y+42	; 0x2a
    410a:	8b a5       	ldd	r24, Y+43	; 0x2b
    410c:	9c a5       	ldd	r25, Y+44	; 0x2c
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	4f e7       	ldi	r20, 0x7F	; 127
    4114:	53 e4       	ldi	r21, 0x43	; 67
    4116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411a:	18 16       	cp	r1, r24
    411c:	0c f0       	brlt	.+2      	; 0x4120 <LCD_GoTo+0x94>
    411e:	7b c0       	rjmp	.+246    	; 0x4216 <LCD_GoTo+0x18a>
	{
		_delay_ms(__us / 1000.0);
    4120:	6d a5       	ldd	r22, Y+45	; 0x2d
    4122:	7e a5       	ldd	r23, Y+46	; 0x2e
    4124:	8f a5       	ldd	r24, Y+47	; 0x2f
    4126:	98 a9       	ldd	r25, Y+48	; 0x30
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	4a e7       	ldi	r20, 0x7A	; 122
    412e:	54 e4       	ldi	r21, 0x44	; 68
    4130:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	8c a3       	std	Y+36, r24	; 0x24
    413a:	9d a3       	std	Y+37, r25	; 0x25
    413c:	ae a3       	std	Y+38, r26	; 0x26
    413e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4140:	6c a1       	ldd	r22, Y+36	; 0x24
    4142:	7d a1       	ldd	r23, Y+37	; 0x25
    4144:	8e a1       	ldd	r24, Y+38	; 0x26
    4146:	9f a1       	ldd	r25, Y+39	; 0x27
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	4a ef       	ldi	r20, 0xFA	; 250
    414e:	54 e4       	ldi	r21, 0x44	; 68
    4150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	88 a3       	std	Y+32, r24	; 0x20
    415a:	99 a3       	std	Y+33, r25	; 0x21
    415c:	aa a3       	std	Y+34, r26	; 0x22
    415e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4160:	68 a1       	ldd	r22, Y+32	; 0x20
    4162:	79 a1       	ldd	r23, Y+33	; 0x21
    4164:	8a a1       	ldd	r24, Y+34	; 0x22
    4166:	9b a1       	ldd	r25, Y+35	; 0x23
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	40 e8       	ldi	r20, 0x80	; 128
    416e:	5f e3       	ldi	r21, 0x3F	; 63
    4170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4174:	88 23       	and	r24, r24
    4176:	2c f4       	brge	.+10     	; 0x4182 <LCD_GoTo+0xf6>
		__ticks = 1;
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	9f 8f       	std	Y+31, r25	; 0x1f
    417e:	8e 8f       	std	Y+30, r24	; 0x1e
    4180:	3f c0       	rjmp	.+126    	; 0x4200 <LCD_GoTo+0x174>
	else if (__tmp > 65535)
    4182:	68 a1       	ldd	r22, Y+32	; 0x20
    4184:	79 a1       	ldd	r23, Y+33	; 0x21
    4186:	8a a1       	ldd	r24, Y+34	; 0x22
    4188:	9b a1       	ldd	r25, Y+35	; 0x23
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	3f ef       	ldi	r19, 0xFF	; 255
    418e:	4f e7       	ldi	r20, 0x7F	; 127
    4190:	57 e4       	ldi	r21, 0x47	; 71
    4192:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4196:	18 16       	cp	r1, r24
    4198:	4c f5       	brge	.+82     	; 0x41ec <LCD_GoTo+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    419a:	6c a1       	ldd	r22, Y+36	; 0x24
    419c:	7d a1       	ldd	r23, Y+37	; 0x25
    419e:	8e a1       	ldd	r24, Y+38	; 0x26
    41a0:	9f a1       	ldd	r25, Y+39	; 0x27
    41a2:	20 e0       	ldi	r18, 0x00	; 0
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	40 e2       	ldi	r20, 0x20	; 32
    41a8:	51 e4       	ldi	r21, 0x41	; 65
    41aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	9f 8f       	std	Y+31, r25	; 0x1f
    41c0:	8e 8f       	std	Y+30, r24	; 0x1e
    41c2:	0f c0       	rjmp	.+30     	; 0x41e2 <LCD_GoTo+0x156>
    41c4:	88 ec       	ldi	r24, 0xC8	; 200
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	9d 8f       	std	Y+29, r25	; 0x1d
    41ca:	8c 8f       	std	Y+28, r24	; 0x1c
    41cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <LCD_GoTo+0x144>
    41d4:	9d 8f       	std	Y+29, r25	; 0x1d
    41d6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	9f 8f       	std	Y+31, r25	; 0x1f
    41e0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    41e6:	00 97       	sbiw	r24, 0x00	; 0
    41e8:	69 f7       	brne	.-38     	; 0x41c4 <LCD_GoTo+0x138>
    41ea:	fb c0       	rjmp	.+502    	; 0x43e2 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ec:	68 a1       	ldd	r22, Y+32	; 0x20
    41ee:	79 a1       	ldd	r23, Y+33	; 0x21
    41f0:	8a a1       	ldd	r24, Y+34	; 0x22
    41f2:	9b a1       	ldd	r25, Y+35	; 0x23
    41f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	9f 8f       	std	Y+31, r25	; 0x1f
    41fe:	8e 8f       	std	Y+30, r24	; 0x1e
    4200:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4202:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4204:	9b 8f       	std	Y+27, r25	; 0x1b
    4206:	8a 8f       	std	Y+26, r24	; 0x1a
    4208:	8a 8d       	ldd	r24, Y+26	; 0x1a
    420a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	f1 f7       	brne	.-4      	; 0x420c <LCD_GoTo+0x180>
    4210:	9b 8f       	std	Y+27, r25	; 0x1b
    4212:	8a 8f       	std	Y+26, r24	; 0x1a
    4214:	e6 c0       	rjmp	.+460    	; 0x43e2 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4216:	69 a5       	ldd	r22, Y+41	; 0x29
    4218:	7a a5       	ldd	r23, Y+42	; 0x2a
    421a:	8b a5       	ldd	r24, Y+43	; 0x2b
    421c:	9c a5       	ldd	r25, Y+44	; 0x2c
    421e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	88 a7       	std	Y+40, r24	; 0x28
    4228:	88 a5       	ldd	r24, Y+40	; 0x28
    422a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    422c:	89 8d       	ldd	r24, Y+25	; 0x19
    422e:	8a 95       	dec	r24
    4230:	f1 f7       	brne	.-4      	; 0x422e <LCD_GoTo+0x1a2>
    4232:	89 8f       	std	Y+25, r24	; 0x19
    4234:	d6 c0       	rjmp	.+428    	; 0x43e2 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 1)
    4236:	8a a9       	ldd	r24, Y+50	; 0x32
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	09 f0       	breq	.+2      	; 0x423e <LCD_GoTo+0x1b2>
    423c:	c3 c0       	rjmp	.+390    	; 0x43c4 <LCD_GoTo+0x338>
    {
        LCD_WriteCommand(0xC0 + Copy_u8Cell);
    423e:	8b a9       	ldd	r24, Y+51	; 0x33
    4240:	80 54       	subi	r24, 0x40	; 64
    4242:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	a0 e2       	ldi	r26, 0x20	; 32
    424c:	b2 e4       	ldi	r27, 0x42	; 66
    424e:	8d 8b       	std	Y+21, r24	; 0x15
    4250:	9e 8b       	std	Y+22, r25	; 0x16
    4252:	af 8b       	std	Y+23, r26	; 0x17
    4254:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4256:	6d 89       	ldd	r22, Y+21	; 0x15
    4258:	7e 89       	ldd	r23, Y+22	; 0x16
    425a:	8f 89       	ldd	r24, Y+23	; 0x17
    425c:	98 8d       	ldd	r25, Y+24	; 0x18
    425e:	2b ea       	ldi	r18, 0xAB	; 171
    4260:	3a ea       	ldi	r19, 0xAA	; 170
    4262:	4a e2       	ldi	r20, 0x2A	; 42
    4264:	50 e4       	ldi	r21, 0x40	; 64
    4266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	89 8b       	std	Y+17, r24	; 0x11
    4270:	9a 8b       	std	Y+18, r25	; 0x12
    4272:	ab 8b       	std	Y+19, r26	; 0x13
    4274:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4276:	69 89       	ldd	r22, Y+17	; 0x11
    4278:	7a 89       	ldd	r23, Y+18	; 0x12
    427a:	8b 89       	ldd	r24, Y+19	; 0x13
    427c:	9c 89       	ldd	r25, Y+20	; 0x14
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e8       	ldi	r20, 0x80	; 128
    4284:	5f e3       	ldi	r21, 0x3F	; 63
    4286:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    428a:	88 23       	and	r24, r24
    428c:	1c f4       	brge	.+6      	; 0x4294 <LCD_GoTo+0x208>
		__ticks = 1;
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	88 8b       	std	Y+16, r24	; 0x10
    4292:	91 c0       	rjmp	.+290    	; 0x43b6 <LCD_GoTo+0x32a>
	else if (__tmp > 255)
    4294:	69 89       	ldd	r22, Y+17	; 0x11
    4296:	7a 89       	ldd	r23, Y+18	; 0x12
    4298:	8b 89       	ldd	r24, Y+19	; 0x13
    429a:	9c 89       	ldd	r25, Y+20	; 0x14
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	4f e7       	ldi	r20, 0x7F	; 127
    42a2:	53 e4       	ldi	r21, 0x43	; 67
    42a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a8:	18 16       	cp	r1, r24
    42aa:	0c f0       	brlt	.+2      	; 0x42ae <LCD_GoTo+0x222>
    42ac:	7b c0       	rjmp	.+246    	; 0x43a4 <LCD_GoTo+0x318>
	{
		_delay_ms(__us / 1000.0);
    42ae:	6d 89       	ldd	r22, Y+21	; 0x15
    42b0:	7e 89       	ldd	r23, Y+22	; 0x16
    42b2:	8f 89       	ldd	r24, Y+23	; 0x17
    42b4:	98 8d       	ldd	r25, Y+24	; 0x18
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	4a e7       	ldi	r20, 0x7A	; 122
    42bc:	54 e4       	ldi	r21, 0x44	; 68
    42be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	8c 87       	std	Y+12, r24	; 0x0c
    42c8:	9d 87       	std	Y+13, r25	; 0x0d
    42ca:	ae 87       	std	Y+14, r26	; 0x0e
    42cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    42d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    42d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    42d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	4a ef       	ldi	r20, 0xFA	; 250
    42dc:	54 e4       	ldi	r21, 0x44	; 68
    42de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	88 87       	std	Y+8, r24	; 0x08
    42e8:	99 87       	std	Y+9, r25	; 0x09
    42ea:	aa 87       	std	Y+10, r26	; 0x0a
    42ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    42ee:	68 85       	ldd	r22, Y+8	; 0x08
    42f0:	79 85       	ldd	r23, Y+9	; 0x09
    42f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 e8       	ldi	r20, 0x80	; 128
    42fc:	5f e3       	ldi	r21, 0x3F	; 63
    42fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4302:	88 23       	and	r24, r24
    4304:	2c f4       	brge	.+10     	; 0x4310 <LCD_GoTo+0x284>
		__ticks = 1;
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	9f 83       	std	Y+7, r25	; 0x07
    430c:	8e 83       	std	Y+6, r24	; 0x06
    430e:	3f c0       	rjmp	.+126    	; 0x438e <LCD_GoTo+0x302>
	else if (__tmp > 65535)
    4310:	68 85       	ldd	r22, Y+8	; 0x08
    4312:	79 85       	ldd	r23, Y+9	; 0x09
    4314:	8a 85       	ldd	r24, Y+10	; 0x0a
    4316:	9b 85       	ldd	r25, Y+11	; 0x0b
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	3f ef       	ldi	r19, 0xFF	; 255
    431c:	4f e7       	ldi	r20, 0x7F	; 127
    431e:	57 e4       	ldi	r21, 0x47	; 71
    4320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4324:	18 16       	cp	r1, r24
    4326:	4c f5       	brge	.+82     	; 0x437a <LCD_GoTo+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4328:	6c 85       	ldd	r22, Y+12	; 0x0c
    432a:	7d 85       	ldd	r23, Y+13	; 0x0d
    432c:	8e 85       	ldd	r24, Y+14	; 0x0e
    432e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	40 e2       	ldi	r20, 0x20	; 32
    4336:	51 e4       	ldi	r21, 0x41	; 65
    4338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	bc 01       	movw	r22, r24
    4342:	cd 01       	movw	r24, r26
    4344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	9f 83       	std	Y+7, r25	; 0x07
    434e:	8e 83       	std	Y+6, r24	; 0x06
    4350:	0f c0       	rjmp	.+30     	; 0x4370 <LCD_GoTo+0x2e4>
    4352:	88 ec       	ldi	r24, 0xC8	; 200
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	9d 83       	std	Y+5, r25	; 0x05
    4358:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    435a:	8c 81       	ldd	r24, Y+4	; 0x04
    435c:	9d 81       	ldd	r25, Y+5	; 0x05
    435e:	01 97       	sbiw	r24, 0x01	; 1
    4360:	f1 f7       	brne	.-4      	; 0x435e <LCD_GoTo+0x2d2>
    4362:	9d 83       	std	Y+5, r25	; 0x05
    4364:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4366:	8e 81       	ldd	r24, Y+6	; 0x06
    4368:	9f 81       	ldd	r25, Y+7	; 0x07
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	9f 83       	std	Y+7, r25	; 0x07
    436e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4370:	8e 81       	ldd	r24, Y+6	; 0x06
    4372:	9f 81       	ldd	r25, Y+7	; 0x07
    4374:	00 97       	sbiw	r24, 0x00	; 0
    4376:	69 f7       	brne	.-38     	; 0x4352 <LCD_GoTo+0x2c6>
    4378:	34 c0       	rjmp	.+104    	; 0x43e2 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    437a:	68 85       	ldd	r22, Y+8	; 0x08
    437c:	79 85       	ldd	r23, Y+9	; 0x09
    437e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4380:	9b 85       	ldd	r25, Y+11	; 0x0b
    4382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	9f 83       	std	Y+7, r25	; 0x07
    438c:	8e 83       	std	Y+6, r24	; 0x06
    438e:	8e 81       	ldd	r24, Y+6	; 0x06
    4390:	9f 81       	ldd	r25, Y+7	; 0x07
    4392:	9b 83       	std	Y+3, r25	; 0x03
    4394:	8a 83       	std	Y+2, r24	; 0x02
    4396:	8a 81       	ldd	r24, Y+2	; 0x02
    4398:	9b 81       	ldd	r25, Y+3	; 0x03
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	f1 f7       	brne	.-4      	; 0x439a <LCD_GoTo+0x30e>
    439e:	9b 83       	std	Y+3, r25	; 0x03
    43a0:	8a 83       	std	Y+2, r24	; 0x02
    43a2:	1f c0       	rjmp	.+62     	; 0x43e2 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43a4:	69 89       	ldd	r22, Y+17	; 0x11
    43a6:	7a 89       	ldd	r23, Y+18	; 0x12
    43a8:	8b 89       	ldd	r24, Y+19	; 0x13
    43aa:	9c 89       	ldd	r25, Y+20	; 0x14
    43ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	88 8b       	std	Y+16, r24	; 0x10
    43b6:	88 89       	ldd	r24, Y+16	; 0x10
    43b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	8a 95       	dec	r24
    43be:	f1 f7       	brne	.-4      	; 0x43bc <LCD_GoTo+0x330>
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	0f c0       	rjmp	.+30     	; 0x43e2 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 2)
    43c4:	8a a9       	ldd	r24, Y+50	; 0x32
    43c6:	82 30       	cpi	r24, 0x02	; 2
    43c8:	29 f4       	brne	.+10     	; 0x43d4 <LCD_GoTo+0x348>
    {
        LCD_WriteCommand(0x94 + Copy_u8Cell);
    43ca:	8b a9       	ldd	r24, Y+51	; 0x33
    43cc:	8c 56       	subi	r24, 0x6C	; 108
    43ce:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    43d2:	07 c0       	rjmp	.+14     	; 0x43e2 <LCD_GoTo+0x356>
    }
    else if(Copy_u8Line == 3)
    43d4:	8a a9       	ldd	r24, Y+50	; 0x32
    43d6:	83 30       	cpi	r24, 0x03	; 3
    43d8:	21 f4       	brne	.+8      	; 0x43e2 <LCD_GoTo+0x356>
    {
        LCD_WriteCommand(0xD4 + Copy_u8Cell);
    43da:	8b a9       	ldd	r24, Y+51	; 0x33
    43dc:	8c 52       	subi	r24, 0x2C	; 44
    43de:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    }

    return Ret;
    43e2:	89 a9       	ldd	r24, Y+49	; 0x31
}
    43e4:	e3 96       	adiw	r28, 0x33	; 51
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
    43f0:	cf 91       	pop	r28
    43f2:	df 91       	pop	r29
    43f4:	08 95       	ret

000043f6 <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    43f6:	df 93       	push	r29
    43f8:	cf 93       	push	r28
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
    43fe:	2e 97       	sbiw	r28, 0x0e	; 14
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(CLEAR_SCREEN);
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	a0 e8       	ldi	r26, 0x80	; 128
    4416:	bf e3       	ldi	r27, 0x3F	; 63
    4418:	8b 87       	std	Y+11, r24	; 0x0b
    441a:	9c 87       	std	Y+12, r25	; 0x0c
    441c:	ad 87       	std	Y+13, r26	; 0x0d
    441e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4420:	6b 85       	ldd	r22, Y+11	; 0x0b
    4422:	7c 85       	ldd	r23, Y+12	; 0x0c
    4424:	8d 85       	ldd	r24, Y+13	; 0x0d
    4426:	9e 85       	ldd	r25, Y+14	; 0x0e
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	4a ef       	ldi	r20, 0xFA	; 250
    442e:	54 e4       	ldi	r21, 0x44	; 68
    4430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	8f 83       	std	Y+7, r24	; 0x07
    443a:	98 87       	std	Y+8, r25	; 0x08
    443c:	a9 87       	std	Y+9, r26	; 0x09
    443e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4440:	6f 81       	ldd	r22, Y+7	; 0x07
    4442:	78 85       	ldd	r23, Y+8	; 0x08
    4444:	89 85       	ldd	r24, Y+9	; 0x09
    4446:	9a 85       	ldd	r25, Y+10	; 0x0a
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e8       	ldi	r20, 0x80	; 128
    444e:	5f e3       	ldi	r21, 0x3F	; 63
    4450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4454:	88 23       	and	r24, r24
    4456:	2c f4       	brge	.+10     	; 0x4462 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	9e 83       	std	Y+6, r25	; 0x06
    445e:	8d 83       	std	Y+5, r24	; 0x05
    4460:	3f c0       	rjmp	.+126    	; 0x44e0 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    4462:	6f 81       	ldd	r22, Y+7	; 0x07
    4464:	78 85       	ldd	r23, Y+8	; 0x08
    4466:	89 85       	ldd	r24, Y+9	; 0x09
    4468:	9a 85       	ldd	r25, Y+10	; 0x0a
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	3f ef       	ldi	r19, 0xFF	; 255
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	57 e4       	ldi	r21, 0x47	; 71
    4472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4476:	18 16       	cp	r1, r24
    4478:	4c f5       	brge	.+82     	; 0x44cc <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447a:	6b 85       	ldd	r22, Y+11	; 0x0b
    447c:	7c 85       	ldd	r23, Y+12	; 0x0c
    447e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4480:	9e 85       	ldd	r25, Y+14	; 0x0e
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e2       	ldi	r20, 0x20	; 32
    4488:	51 e4       	ldi	r21, 0x41	; 65
    448a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	9e 83       	std	Y+6, r25	; 0x06
    44a0:	8d 83       	std	Y+5, r24	; 0x05
    44a2:	0f c0       	rjmp	.+30     	; 0x44c2 <LCD_ClearDisplay+0xcc>
    44a4:	88 ec       	ldi	r24, 0xC8	; 200
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	9c 83       	std	Y+4, r25	; 0x04
    44aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	9c 81       	ldd	r25, Y+4	; 0x04
    44b0:	01 97       	sbiw	r24, 0x01	; 1
    44b2:	f1 f7       	brne	.-4      	; 0x44b0 <LCD_ClearDisplay+0xba>
    44b4:	9c 83       	std	Y+4, r25	; 0x04
    44b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ba:	9e 81       	ldd	r25, Y+6	; 0x06
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	9e 83       	std	Y+6, r25	; 0x06
    44c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c2:	8d 81       	ldd	r24, Y+5	; 0x05
    44c4:	9e 81       	ldd	r25, Y+6	; 0x06
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	69 f7       	brne	.-38     	; 0x44a4 <LCD_ClearDisplay+0xae>
    44ca:	14 c0       	rjmp	.+40     	; 0x44f4 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44cc:	6f 81       	ldd	r22, Y+7	; 0x07
    44ce:	78 85       	ldd	r23, Y+8	; 0x08
    44d0:	89 85       	ldd	r24, Y+9	; 0x09
    44d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	9e 83       	std	Y+6, r25	; 0x06
    44de:	8d 83       	std	Y+5, r24	; 0x05
    44e0:	8d 81       	ldd	r24, Y+5	; 0x05
    44e2:	9e 81       	ldd	r25, Y+6	; 0x06
    44e4:	9a 83       	std	Y+2, r25	; 0x02
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	9a 81       	ldd	r25, Y+2	; 0x02
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	f1 f7       	brne	.-4      	; 0x44ec <LCD_ClearDisplay+0xf6>
    44f0:	9a 83       	std	Y+2, r25	; 0x02
    44f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    44f4:	2e 96       	adiw	r28, 0x0e	; 14
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	cf 91       	pop	r28
    4502:	df 91       	pop	r29
    4504:	08 95       	ret

00004506 <LCD_WriteChar>:
u8	LCD_WriteChar(u8 Copy_u8Char)
{
    4506:	df 93       	push	r29
    4508:	cf 93       	push	r28
    450a:	00 d0       	rcall	.+0      	; 0x450c <LCD_WriteChar+0x6>
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = E_OK;
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(Copy_u8Char);
    4516:	8a 81       	ldd	r24, Y+2	; 0x02
    4518:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
	return Ret;
    451c:	89 81       	ldd	r24, Y+1	; 0x01
}
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	cf 91       	pop	r28
    4524:	df 91       	pop	r29
    4526:	08 95       	ret

00004528 <LCD_WriteNumber>:
s32 LCD_WriteNumber(s32 Copy_s32Num)
{
    4528:	0f 93       	push	r16
    452a:	1f 93       	push	r17
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
    4534:	c5 59       	subi	r28, 0x95	; 149
    4536:	d0 40       	sbci	r29, 0x00	; 0
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	fe 01       	movw	r30, r28
    4544:	e2 57       	subi	r30, 0x72	; 114
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	60 83       	st	Z, r22
    454a:	71 83       	std	Z+1, r23	; 0x01
    454c:	82 83       	std	Z+2, r24	; 0x02
    454e:	93 83       	std	Z+3, r25	; 0x03
	u8 Ret = E_OK;
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	89 a7       	std	Y+41, r24	; 0x29

	u8 iterator = 0 ,Rem = 0;
    4554:	18 a6       	std	Y+40, r1	; 0x28
    4556:	1f a2       	std	Y+39, r1	; 0x27
	u8 Str[100];

	/* if the user send 0 */
	if(Copy_s32Num == 0)
    4558:	fe 01       	movw	r30, r28
    455a:	e2 57       	subi	r30, 0x72	; 114
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	80 81       	ld	r24, Z
    4560:	91 81       	ldd	r25, Z+1	; 0x01
    4562:	a2 81       	ldd	r26, Z+2	; 0x02
    4564:	b3 81       	ldd	r27, Z+3	; 0x03
    4566:	00 97       	sbiw	r24, 0x00	; 0
    4568:	a1 05       	cpc	r26, r1
    456a:	b1 05       	cpc	r27, r1
    456c:	09 f0       	breq	.+2      	; 0x4570 <LCD_WriteNumber+0x48>
    456e:	83 c0       	rjmp	.+262    	; 0x4676 <LCD_WriteNumber+0x14e>
	{
		LCD_WriteChar('0');
    4570:	80 e3       	ldi	r24, 0x30	; 48
    4572:	0e 94 83 22 	call	0x4506	; 0x4506 <LCD_WriteChar>
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	a0 e8       	ldi	r26, 0x80	; 128
    457c:	bf e3       	ldi	r27, 0x3F	; 63
    457e:	8b a3       	std	Y+35, r24	; 0x23
    4580:	9c a3       	std	Y+36, r25	; 0x24
    4582:	ad a3       	std	Y+37, r26	; 0x25
    4584:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4586:	6b a1       	ldd	r22, Y+35	; 0x23
    4588:	7c a1       	ldd	r23, Y+36	; 0x24
    458a:	8d a1       	ldd	r24, Y+37	; 0x25
    458c:	9e a1       	ldd	r25, Y+38	; 0x26
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	4a ef       	ldi	r20, 0xFA	; 250
    4594:	54 e4       	ldi	r21, 0x44	; 68
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	8f 8f       	std	Y+31, r24	; 0x1f
    45a0:	98 a3       	std	Y+32, r25	; 0x20
    45a2:	a9 a3       	std	Y+33, r26	; 0x21
    45a4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    45a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    45a8:	78 a1       	ldd	r23, Y+32	; 0x20
    45aa:	89 a1       	ldd	r24, Y+33	; 0x21
    45ac:	9a a1       	ldd	r25, Y+34	; 0x22
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e8       	ldi	r20, 0x80	; 128
    45b4:	5f e3       	ldi	r21, 0x3F	; 63
    45b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45ba:	88 23       	and	r24, r24
    45bc:	2c f4       	brge	.+10     	; 0x45c8 <LCD_WriteNumber+0xa0>
		__ticks = 1;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	9e 8f       	std	Y+30, r25	; 0x1e
    45c4:	8d 8f       	std	Y+29, r24	; 0x1d
    45c6:	3f c0       	rjmp	.+126    	; 0x4646 <LCD_WriteNumber+0x11e>
	else if (__tmp > 65535)
    45c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    45ca:	78 a1       	ldd	r23, Y+32	; 0x20
    45cc:	89 a1       	ldd	r24, Y+33	; 0x21
    45ce:	9a a1       	ldd	r25, Y+34	; 0x22
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	3f ef       	ldi	r19, 0xFF	; 255
    45d4:	4f e7       	ldi	r20, 0x7F	; 127
    45d6:	57 e4       	ldi	r21, 0x47	; 71
    45d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45dc:	18 16       	cp	r1, r24
    45de:	4c f5       	brge	.+82     	; 0x4632 <LCD_WriteNumber+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e0:	6b a1       	ldd	r22, Y+35	; 0x23
    45e2:	7c a1       	ldd	r23, Y+36	; 0x24
    45e4:	8d a1       	ldd	r24, Y+37	; 0x25
    45e6:	9e a1       	ldd	r25, Y+38	; 0x26
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	40 e2       	ldi	r20, 0x20	; 32
    45ee:	51 e4       	ldi	r21, 0x41	; 65
    45f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9e 8f       	std	Y+30, r25	; 0x1e
    4606:	8d 8f       	std	Y+29, r24	; 0x1d
    4608:	0f c0       	rjmp	.+30     	; 0x4628 <LCD_WriteNumber+0x100>
    460a:	88 ec       	ldi	r24, 0xC8	; 200
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	9c 8f       	std	Y+28, r25	; 0x1c
    4610:	8b 8f       	std	Y+27, r24	; 0x1b
    4612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4616:	01 97       	sbiw	r24, 0x01	; 1
    4618:	f1 f7       	brne	.-4      	; 0x4616 <LCD_WriteNumber+0xee>
    461a:	9c 8f       	std	Y+28, r25	; 0x1c
    461c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	9e 8f       	std	Y+30, r25	; 0x1e
    4626:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    462a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    462c:	00 97       	sbiw	r24, 0x00	; 0
    462e:	69 f7       	brne	.-38     	; 0x460a <LCD_WriteNumber+0xe2>
    4630:	14 c0       	rjmp	.+40     	; 0x465a <LCD_WriteNumber+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4632:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4634:	78 a1       	ldd	r23, Y+32	; 0x20
    4636:	89 a1       	ldd	r24, Y+33	; 0x21
    4638:	9a a1       	ldd	r25, Y+34	; 0x22
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9e 8f       	std	Y+30, r25	; 0x1e
    4644:	8d 8f       	std	Y+29, r24	; 0x1d
    4646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4648:	9e 8d       	ldd	r25, Y+30	; 0x1e
    464a:	9a 8f       	std	Y+26, r25	; 0x1a
    464c:	89 8f       	std	Y+25, r24	; 0x19
    464e:	89 8d       	ldd	r24, Y+25	; 0x19
    4650:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <LCD_WriteNumber+0x12a>
    4656:	9a 8f       	std	Y+26, r25	; 0x1a
    4658:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(1);
		return Ret;
    465a:	89 a5       	ldd	r24, Y+41	; 0x29
    465c:	28 2f       	mov	r18, r24
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e0       	ldi	r20, 0x00	; 0
    4662:	50 e0       	ldi	r21, 0x00	; 0
    4664:	ce 56       	subi	r28, 0x6E	; 110
    4666:	df 4f       	sbci	r29, 0xFF	; 255
    4668:	28 83       	st	Y, r18
    466a:	39 83       	std	Y+1, r19	; 0x01
    466c:	4a 83       	std	Y+2, r20	; 0x02
    466e:	5b 83       	std	Y+3, r21	; 0x03
    4670:	c2 59       	subi	r28, 0x92	; 146
    4672:	d0 40       	sbci	r29, 0x00	; 0
    4674:	4c c1       	rjmp	.+664    	; 0x490e <LCD_WriteNumber+0x3e6>
	}

	/* if the user send negative number */
	if(Copy_s32Num < 0)
    4676:	fe 01       	movw	r30, r28
    4678:	e2 57       	subi	r30, 0x72	; 114
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	80 81       	ld	r24, Z
    467e:	91 81       	ldd	r25, Z+1	; 0x01
    4680:	a2 81       	ldd	r26, Z+2	; 0x02
    4682:	b3 81       	ldd	r27, Z+3	; 0x03
    4684:	bb 23       	and	r27, r27
    4686:	0c f0       	brlt	.+2      	; 0x468a <LCD_WriteNumber+0x162>
    4688:	54 c0       	rjmp	.+168    	; 0x4732 <LCD_WriteNumber+0x20a>
	{
		Copy_s32Num *= -1;
    468a:	9e 01       	movw	r18, r28
    468c:	22 57       	subi	r18, 0x72	; 114
    468e:	3f 4f       	sbci	r19, 0xFF	; 255
    4690:	fe 01       	movw	r30, r28
    4692:	e2 57       	subi	r30, 0x72	; 114
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	80 81       	ld	r24, Z
    4698:	91 81       	ldd	r25, Z+1	; 0x01
    469a:	a2 81       	ldd	r26, Z+2	; 0x02
    469c:	b3 81       	ldd	r27, Z+3	; 0x03
    469e:	b0 95       	com	r27
    46a0:	a0 95       	com	r26
    46a2:	90 95       	com	r25
    46a4:	81 95       	neg	r24
    46a6:	9f 4f       	sbci	r25, 0xFF	; 255
    46a8:	af 4f       	sbci	r26, 0xFF	; 255
    46aa:	bf 4f       	sbci	r27, 0xFF	; 255
    46ac:	f9 01       	movw	r30, r18
    46ae:	80 83       	st	Z, r24
    46b0:	91 83       	std	Z+1, r25	; 0x01
    46b2:	a2 83       	std	Z+2, r26	; 0x02
    46b4:	b3 83       	std	Z+3, r27	; 0x03
		LCD_WriteChar('-');
    46b6:	8d e2       	ldi	r24, 0x2D	; 45
    46b8:	0e 94 83 22 	call	0x4506	; 0x4506 <LCD_WriteChar>
    46bc:	3a c0       	rjmp	.+116    	; 0x4732 <LCD_WriteNumber+0x20a>

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
	{
		/* Getting Remainder "Last Digit" */
		Rem = Copy_s32Num % 10;
    46be:	fe 01       	movw	r30, r28
    46c0:	e2 57       	subi	r30, 0x72	; 114
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	a2 81       	ldd	r26, Z+2	; 0x02
    46ca:	b3 81       	ldd	r27, Z+3	; 0x03
    46cc:	2a e0       	ldi	r18, 0x0A	; 10
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	bc 01       	movw	r22, r24
    46d6:	cd 01       	movw	r24, r26
    46d8:	0e 94 61 28 	call	0x50c2	; 0x50c2 <__divmodsi4>
    46dc:	dc 01       	movw	r26, r24
    46de:	cb 01       	movw	r24, r22
    46e0:	8f a3       	std	Y+39, r24	; 0x27

		/* Assigning the Last Digit to the String */
		Str[iterator] = Rem + '0';
    46e2:	88 a5       	ldd	r24, Y+40	; 0x28
    46e4:	28 2f       	mov	r18, r24
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	8f a1       	ldd	r24, Y+39	; 0x27
    46ea:	48 2f       	mov	r20, r24
    46ec:	40 5d       	subi	r20, 0xD0	; 208
    46ee:	ce 01       	movw	r24, r28
    46f0:	8a 96       	adiw	r24, 0x2a	; 42
    46f2:	fc 01       	movw	r30, r24
    46f4:	e2 0f       	add	r30, r18
    46f6:	f3 1f       	adc	r31, r19
    46f8:	40 83       	st	Z, r20
		/* Increasing the iterator of the string */
		iterator++;
    46fa:	88 a5       	ldd	r24, Y+40	; 0x28
    46fc:	8f 5f       	subi	r24, 0xFF	; 255
    46fe:	88 a7       	std	Y+40, r24	; 0x28

		/* Deleting the last digit from the number */
		Copy_s32Num /= 10;
    4700:	8e 01       	movw	r16, r28
    4702:	02 57       	subi	r16, 0x72	; 114
    4704:	1f 4f       	sbci	r17, 0xFF	; 255
    4706:	fe 01       	movw	r30, r28
    4708:	e2 57       	subi	r30, 0x72	; 114
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	a2 81       	ldd	r26, Z+2	; 0x02
    4712:	b3 81       	ldd	r27, Z+3	; 0x03
    4714:	2a e0       	ldi	r18, 0x0A	; 10
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 61 28 	call	0x50c2	; 0x50c2 <__divmodsi4>
    4724:	da 01       	movw	r26, r20
    4726:	c9 01       	movw	r24, r18
    4728:	f8 01       	movw	r30, r16
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
		Copy_s32Num *= -1;
		LCD_WriteChar('-');
	}

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
    4732:	fe 01       	movw	r30, r28
    4734:	e2 57       	subi	r30, 0x72	; 114
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	80 81       	ld	r24, Z
    473a:	91 81       	ldd	r25, Z+1	; 0x01
    473c:	a2 81       	ldd	r26, Z+2	; 0x02
    473e:	b3 81       	ldd	r27, Z+3	; 0x03
    4740:	18 16       	cp	r1, r24
    4742:	19 06       	cpc	r1, r25
    4744:	1a 06       	cpc	r1, r26
    4746:	1b 06       	cpc	r1, r27
    4748:	0c f4       	brge	.+2      	; 0x474c <LCD_WriteNumber+0x224>
    474a:	b9 cf       	rjmp	.-142    	; 0x46be <LCD_WriteNumber+0x196>
    474c:	cf c0       	rjmp	.+414    	; 0x48ec <LCD_WriteNumber+0x3c4>

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
	{
		LCD_WriteChar(Str[iterator-1]);
    474e:	88 a5       	ldd	r24, Y+40	; 0x28
    4750:	88 2f       	mov	r24, r24
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	9c 01       	movw	r18, r24
    4756:	21 50       	subi	r18, 0x01	; 1
    4758:	30 40       	sbci	r19, 0x00	; 0
    475a:	ce 01       	movw	r24, r28
    475c:	8a 96       	adiw	r24, 0x2a	; 42
    475e:	fc 01       	movw	r30, r24
    4760:	e2 0f       	add	r30, r18
    4762:	f3 1f       	adc	r31, r19
    4764:	80 81       	ld	r24, Z
    4766:	0e 94 83 22 	call	0x4506	; 0x4506 <LCD_WriteChar>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	a0 e8       	ldi	r26, 0x80	; 128
    4770:	bf e3       	ldi	r27, 0x3F	; 63
    4772:	8d 8b       	std	Y+21, r24	; 0x15
    4774:	9e 8b       	std	Y+22, r25	; 0x16
    4776:	af 8b       	std	Y+23, r26	; 0x17
    4778:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    477a:	6d 89       	ldd	r22, Y+21	; 0x15
    477c:	7e 89       	ldd	r23, Y+22	; 0x16
    477e:	8f 89       	ldd	r24, Y+23	; 0x17
    4780:	98 8d       	ldd	r25, Y+24	; 0x18
    4782:	2b ea       	ldi	r18, 0xAB	; 171
    4784:	3a ea       	ldi	r19, 0xAA	; 170
    4786:	4a e2       	ldi	r20, 0x2A	; 42
    4788:	50 e4       	ldi	r21, 0x40	; 64
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	89 8b       	std	Y+17, r24	; 0x11
    4794:	9a 8b       	std	Y+18, r25	; 0x12
    4796:	ab 8b       	std	Y+19, r26	; 0x13
    4798:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    479a:	69 89       	ldd	r22, Y+17	; 0x11
    479c:	7a 89       	ldd	r23, Y+18	; 0x12
    479e:	8b 89       	ldd	r24, Y+19	; 0x13
    47a0:	9c 89       	ldd	r25, Y+20	; 0x14
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e8       	ldi	r20, 0x80	; 128
    47a8:	5f e3       	ldi	r21, 0x3F	; 63
    47aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ae:	88 23       	and	r24, r24
    47b0:	1c f4       	brge	.+6      	; 0x47b8 <LCD_WriteNumber+0x290>
		__ticks = 1;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	88 8b       	std	Y+16, r24	; 0x10
    47b6:	91 c0       	rjmp	.+290    	; 0x48da <LCD_WriteNumber+0x3b2>
	else if (__tmp > 255)
    47b8:	69 89       	ldd	r22, Y+17	; 0x11
    47ba:	7a 89       	ldd	r23, Y+18	; 0x12
    47bc:	8b 89       	ldd	r24, Y+19	; 0x13
    47be:	9c 89       	ldd	r25, Y+20	; 0x14
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	4f e7       	ldi	r20, 0x7F	; 127
    47c6:	53 e4       	ldi	r21, 0x43	; 67
    47c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47cc:	18 16       	cp	r1, r24
    47ce:	0c f0       	brlt	.+2      	; 0x47d2 <LCD_WriteNumber+0x2aa>
    47d0:	7b c0       	rjmp	.+246    	; 0x48c8 <LCD_WriteNumber+0x3a0>
	{
		_delay_ms(__us / 1000.0);
    47d2:	6d 89       	ldd	r22, Y+21	; 0x15
    47d4:	7e 89       	ldd	r23, Y+22	; 0x16
    47d6:	8f 89       	ldd	r24, Y+23	; 0x17
    47d8:	98 8d       	ldd	r25, Y+24	; 0x18
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	4a e7       	ldi	r20, 0x7A	; 122
    47e0:	54 e4       	ldi	r21, 0x44	; 68
    47e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	8c 87       	std	Y+12, r24	; 0x0c
    47ec:	9d 87       	std	Y+13, r25	; 0x0d
    47ee:	ae 87       	std	Y+14, r26	; 0x0e
    47f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    47f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    47f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    47f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	4a ef       	ldi	r20, 0xFA	; 250
    4800:	54 e4       	ldi	r21, 0x44	; 68
    4802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	88 87       	std	Y+8, r24	; 0x08
    480c:	99 87       	std	Y+9, r25	; 0x09
    480e:	aa 87       	std	Y+10, r26	; 0x0a
    4810:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4812:	68 85       	ldd	r22, Y+8	; 0x08
    4814:	79 85       	ldd	r23, Y+9	; 0x09
    4816:	8a 85       	ldd	r24, Y+10	; 0x0a
    4818:	9b 85       	ldd	r25, Y+11	; 0x0b
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	40 e8       	ldi	r20, 0x80	; 128
    4820:	5f e3       	ldi	r21, 0x3F	; 63
    4822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4826:	88 23       	and	r24, r24
    4828:	2c f4       	brge	.+10     	; 0x4834 <LCD_WriteNumber+0x30c>
		__ticks = 1;
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	9f 83       	std	Y+7, r25	; 0x07
    4830:	8e 83       	std	Y+6, r24	; 0x06
    4832:	3f c0       	rjmp	.+126    	; 0x48b2 <LCD_WriteNumber+0x38a>
	else if (__tmp > 65535)
    4834:	68 85       	ldd	r22, Y+8	; 0x08
    4836:	79 85       	ldd	r23, Y+9	; 0x09
    4838:	8a 85       	ldd	r24, Y+10	; 0x0a
    483a:	9b 85       	ldd	r25, Y+11	; 0x0b
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	3f ef       	ldi	r19, 0xFF	; 255
    4840:	4f e7       	ldi	r20, 0x7F	; 127
    4842:	57 e4       	ldi	r21, 0x47	; 71
    4844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4848:	18 16       	cp	r1, r24
    484a:	4c f5       	brge	.+82     	; 0x489e <LCD_WriteNumber+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    484c:	6c 85       	ldd	r22, Y+12	; 0x0c
    484e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4850:	8e 85       	ldd	r24, Y+14	; 0x0e
    4852:	9f 85       	ldd	r25, Y+15	; 0x0f
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e2       	ldi	r20, 0x20	; 32
    485a:	51 e4       	ldi	r21, 0x41	; 65
    485c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	9f 83       	std	Y+7, r25	; 0x07
    4872:	8e 83       	std	Y+6, r24	; 0x06
    4874:	0f c0       	rjmp	.+30     	; 0x4894 <LCD_WriteNumber+0x36c>
    4876:	88 ec       	ldi	r24, 0xC8	; 200
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	9d 83       	std	Y+5, r25	; 0x05
    487c:	8c 83       	std	Y+4, r24	; 0x04
    487e:	8c 81       	ldd	r24, Y+4	; 0x04
    4880:	9d 81       	ldd	r25, Y+5	; 0x05
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	f1 f7       	brne	.-4      	; 0x4882 <LCD_WriteNumber+0x35a>
    4886:	9d 83       	std	Y+5, r25	; 0x05
    4888:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    488a:	8e 81       	ldd	r24, Y+6	; 0x06
    488c:	9f 81       	ldd	r25, Y+7	; 0x07
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	9f 83       	std	Y+7, r25	; 0x07
    4892:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4894:	8e 81       	ldd	r24, Y+6	; 0x06
    4896:	9f 81       	ldd	r25, Y+7	; 0x07
    4898:	00 97       	sbiw	r24, 0x00	; 0
    489a:	69 f7       	brne	.-38     	; 0x4876 <LCD_WriteNumber+0x34e>
    489c:	24 c0       	rjmp	.+72     	; 0x48e6 <LCD_WriteNumber+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489e:	68 85       	ldd	r22, Y+8	; 0x08
    48a0:	79 85       	ldd	r23, Y+9	; 0x09
    48a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    48a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    48a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	9f 83       	std	Y+7, r25	; 0x07
    48b0:	8e 83       	std	Y+6, r24	; 0x06
    48b2:	8e 81       	ldd	r24, Y+6	; 0x06
    48b4:	9f 81       	ldd	r25, Y+7	; 0x07
    48b6:	9b 83       	std	Y+3, r25	; 0x03
    48b8:	8a 83       	std	Y+2, r24	; 0x02
    48ba:	8a 81       	ldd	r24, Y+2	; 0x02
    48bc:	9b 81       	ldd	r25, Y+3	; 0x03
    48be:	01 97       	sbiw	r24, 0x01	; 1
    48c0:	f1 f7       	brne	.-4      	; 0x48be <LCD_WriteNumber+0x396>
    48c2:	9b 83       	std	Y+3, r25	; 0x03
    48c4:	8a 83       	std	Y+2, r24	; 0x02
    48c6:	0f c0       	rjmp	.+30     	; 0x48e6 <LCD_WriteNumber+0x3be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48c8:	69 89       	ldd	r22, Y+17	; 0x11
    48ca:	7a 89       	ldd	r23, Y+18	; 0x12
    48cc:	8b 89       	ldd	r24, Y+19	; 0x13
    48ce:	9c 89       	ldd	r25, Y+20	; 0x14
    48d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	88 8b       	std	Y+16, r24	; 0x10
    48da:	88 89       	ldd	r24, Y+16	; 0x10
    48dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	8a 95       	dec	r24
    48e2:	f1 f7       	brne	.-4      	; 0x48e0 <LCD_WriteNumber+0x3b8>
    48e4:	89 83       	std	Y+1, r24	; 0x01
		Copy_s32Num /= 10;
	}

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
    48e6:	88 a5       	ldd	r24, Y+40	; 0x28
    48e8:	81 50       	subi	r24, 0x01	; 1
    48ea:	88 a7       	std	Y+40, r24	; 0x28
    48ec:	88 a5       	ldd	r24, Y+40	; 0x28
    48ee:	88 23       	and	r24, r24
    48f0:	09 f0       	breq	.+2      	; 0x48f4 <LCD_WriteNumber+0x3cc>
    48f2:	2d cf       	rjmp	.-422    	; 0x474e <LCD_WriteNumber+0x226>
	{
		LCD_WriteChar(Str[iterator-1]);
		_delay_us(1);
	}

	return Ret;
    48f4:	89 a5       	ldd	r24, Y+41	; 0x29
    48f6:	28 2f       	mov	r18, r24
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 e0       	ldi	r20, 0x00	; 0
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	ce 56       	subi	r28, 0x6E	; 110
    4900:	df 4f       	sbci	r29, 0xFF	; 255
    4902:	28 83       	st	Y, r18
    4904:	39 83       	std	Y+1, r19	; 0x01
    4906:	4a 83       	std	Y+2, r20	; 0x02
    4908:	5b 83       	std	Y+3, r21	; 0x03
    490a:	c2 59       	subi	r28, 0x92	; 146
    490c:	d0 40       	sbci	r29, 0x00	; 0
    490e:	ce 56       	subi	r28, 0x6E	; 110
    4910:	df 4f       	sbci	r29, 0xFF	; 255
    4912:	88 81       	ld	r24, Y
    4914:	99 81       	ldd	r25, Y+1	; 0x01
    4916:	aa 81       	ldd	r26, Y+2	; 0x02
    4918:	bb 81       	ldd	r27, Y+3	; 0x03
    491a:	c2 59       	subi	r28, 0x92	; 146
    491c:	d0 40       	sbci	r29, 0x00	; 0
}
    491e:	bc 01       	movw	r22, r24
    4920:	cd 01       	movw	r24, r26
    4922:	cb 56       	subi	r28, 0x6B	; 107
    4924:	df 4f       	sbci	r29, 0xFF	; 255
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	f8 94       	cli
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	cd bf       	out	0x3d, r28	; 61
    4930:	cf 91       	pop	r28
    4932:	df 91       	pop	r29
    4934:	1f 91       	pop	r17
    4936:	0f 91       	pop	r16
    4938:	08 95       	ret

0000493a <LCD_GoToWriteNumber>:


u8 LCD_GoToWriteNumber(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_s32Num)
{
    493a:	df 93       	push	r29
    493c:	cf 93       	push	r28
    493e:	00 d0       	rcall	.+0      	; 0x4940 <LCD_GoToWriteNumber+0x6>
    4940:	00 d0       	rcall	.+0      	; 0x4942 <LCD_GoToWriteNumber+0x8>
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	8a 83       	std	Y+2, r24	; 0x02
    4948:	6b 83       	std	Y+3, r22	; 0x03
    494a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    4950:	8a 81       	ldd	r24, Y+2	; 0x02
    4952:	6b 81       	ldd	r22, Y+3	; 0x03
    4954:	0e 94 46 20 	call	0x408c	; 0x408c <LCD_GoTo>
	LCD_WriteNumber(Copy_s32Num);
    4958:	8c 81       	ldd	r24, Y+4	; 0x04
    495a:	88 2f       	mov	r24, r24
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	a0 e0       	ldi	r26, 0x00	; 0
    4960:	b0 e0       	ldi	r27, 0x00	; 0
    4962:	bc 01       	movw	r22, r24
    4964:	cd 01       	movw	r24, r26
    4966:	0e 94 94 22 	call	0x4528	; 0x4528 <LCD_WriteNumber>

	return Ret;
    496a:	89 81       	ldd	r24, Y+1	; 0x01
}
    496c:	0f 90       	pop	r0
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	cf 91       	pop	r28
    4976:	df 91       	pop	r29
    4978:	08 95       	ret

0000497a <LCD_GoToClear>:
u8 LCD_GoToClear(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8NumCells)
{
    497a:	df 93       	push	r29
    497c:	cf 93       	push	r28
    497e:	00 d0       	rcall	.+0      	; 0x4980 <LCD_GoToClear+0x6>
    4980:	00 d0       	rcall	.+0      	; 0x4982 <LCD_GoToClear+0x8>
    4982:	0f 92       	push	r0
    4984:	cd b7       	in	r28, 0x3d	; 61
    4986:	de b7       	in	r29, 0x3e	; 62
    4988:	8b 83       	std	Y+3, r24	; 0x03
    498a:	6c 83       	std	Y+4, r22	; 0x04
    498c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Ret = E_OK;
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator = 0;
    4992:	19 82       	std	Y+1, r1	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    4994:	8b 81       	ldd	r24, Y+3	; 0x03
    4996:	6c 81       	ldd	r22, Y+4	; 0x04
    4998:	0e 94 46 20 	call	0x408c	; 0x408c <LCD_GoTo>
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    499c:	19 82       	std	Y+1, r1	; 0x01
    499e:	06 c0       	rjmp	.+12     	; 0x49ac <LCD_GoToClear+0x32>
	{
		LCD_WriteChar(' ');
    49a0:	80 e2       	ldi	r24, 0x20	; 32
    49a2:	0e 94 83 22 	call	0x4506	; 0x4506 <LCD_WriteChar>
{
	u8 Ret = E_OK;
	u8 iterator = 0;

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    49a6:	89 81       	ldd	r24, Y+1	; 0x01
    49a8:	8f 5f       	subi	r24, 0xFF	; 255
    49aa:	89 83       	std	Y+1, r24	; 0x01
    49ac:	99 81       	ldd	r25, Y+1	; 0x01
    49ae:	8d 81       	ldd	r24, Y+5	; 0x05
    49b0:	98 17       	cp	r25, r24
    49b2:	b0 f3       	brcs	.-20     	; 0x49a0 <LCD_GoToClear+0x26>
	{
		LCD_WriteChar(' ');
	}

	return Ret;
    49b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    49b6:	0f 90       	pop	r0
    49b8:	0f 90       	pop	r0
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <LCD_GoToWriteChar>:

u8 LCD_GoToWriteChar(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8Char)
{
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	00 d0       	rcall	.+0      	; 0x49cc <LCD_GoToWriteChar+0x6>
    49cc:	00 d0       	rcall	.+0      	; 0x49ce <LCD_GoToWriteChar+0x8>
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	8a 83       	std	Y+2, r24	; 0x02
    49d4:	6b 83       	std	Y+3, r22	; 0x03
    49d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    49dc:	8a 81       	ldd	r24, Y+2	; 0x02
    49de:	6b 81       	ldd	r22, Y+3	; 0x03
    49e0:	0e 94 46 20 	call	0x408c	; 0x408c <LCD_GoTo>
	LCD_WriteChar(Copy_u8Char);
    49e4:	8c 81       	ldd	r24, Y+4	; 0x04
    49e6:	0e 94 83 22 	call	0x4506	; 0x4506 <LCD_WriteChar>

	return Ret;
    49ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    49ec:	0f 90       	pop	r0
    49ee:	0f 90       	pop	r0
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	cf 91       	pop	r28
    49f6:	df 91       	pop	r29
    49f8:	08 95       	ret

000049fa <LCD_GoToWriteString>:


u8 LCD_GoToWriteString(u8 Copy_u8Line, u8 Copy_u8Cell, const u8 *Copy_u8PtrString)
{
    49fa:	df 93       	push	r29
    49fc:	cf 93       	push	r28
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <LCD_GoToWriteString+0x6>
    4a00:	00 d0       	rcall	.+0      	; 0x4a02 <LCD_GoToWriteString+0x8>
    4a02:	0f 92       	push	r0
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
    4a08:	8a 83       	std	Y+2, r24	; 0x02
    4a0a:	6b 83       	std	Y+3, r22	; 0x03
    4a0c:	5d 83       	std	Y+5, r21	; 0x05
    4a0e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    4a14:	8a 81       	ldd	r24, Y+2	; 0x02
    4a16:	6b 81       	ldd	r22, Y+3	; 0x03
    4a18:	0e 94 46 20 	call	0x408c	; 0x408c <LCD_GoTo>
	LCD_WriteString(Copy_u8PtrString);
    4a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a20:	0e 94 1d 20 	call	0x403a	; 0x403a <LCD_WriteString>

	return Ret;
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	cf 91       	pop	r28
    4a32:	df 91       	pop	r29
    4a34:	08 95       	ret

00004a36 <LCD_CreateCharacter>:

u8 LCD_CreateCharacter(u8* Copy_u8P_Pattern, u8 Copy_Location)
{
    4a36:	df 93       	push	r29
    4a38:	cf 93       	push	r28
    4a3a:	00 d0       	rcall	.+0      	; 0x4a3c <LCD_CreateCharacter+0x6>
    4a3c:	00 d0       	rcall	.+0      	; 0x4a3e <LCD_CreateCharacter+0x8>
    4a3e:	0f 92       	push	r0
    4a40:	cd b7       	in	r28, 0x3d	; 61
    4a42:	de b7       	in	r29, 0x3e	; 62
    4a44:	9c 83       	std	Y+4, r25	; 0x04
    4a46:	8b 83       	std	Y+3, r24	; 0x03
    4a48:	6d 83       	std	Y+5, r22	; 0x05
    u8 Ret = E_OK;
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	8a 83       	std	Y+2, r24	; 0x02

    u8 iterator = 0;
    4a4e:	19 82       	std	Y+1, r1	; 0x01

    for(iterator=0; iterator<8 ; iterator++)
        LCD_WriteData(Copy_u8P_Pattern[iterator]);

    /* Command to write the data to DDRAM Again */
    LCD_WriteCommand(DDRAM_ADDRESS);
    4a50:	80 e8       	ldi	r24, 0x80	; 128
    4a52:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_WriteCommand>
    return Ret;
    4a56:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a58:	0f 90       	pop	r0
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	cf 91       	pop	r28
    4a64:	df 91       	pop	r29
    4a66:	08 95       	ret

00004a68 <Init_KP>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"KP_Config.h"
#include"KP_Interface.h"
void Init_KP(KP_stConfiguration *Copy_pstConfig)
{
    4a68:	df 93       	push	r29
    4a6a:	cf 93       	push	r28
    4a6c:	00 d0       	rcall	.+0      	; 0x4a6e <Init_KP+0x6>
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
    4a72:	9a 83       	std	Y+2, r25	; 0x02
    4a74:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum1_PIN,DIO_u8PIN_OUTPUT);
    4a76:	e9 81       	ldd	r30, Y+1	; 0x01
    4a78:	fa 81       	ldd	r31, Y+2	; 0x02
    4a7a:	80 81       	ld	r24, Z
    4a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    4a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    4a80:	90 85       	ldd	r25, Z+8	; 0x08
    4a82:	69 2f       	mov	r22, r25
    4a84:	41 e0       	ldi	r20, 0x01	; 1
    4a86:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum2_PIN,DIO_u8PIN_OUTPUT);
    4a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    4a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    4a8e:	81 81       	ldd	r24, Z+1	; 0x01
    4a90:	e9 81       	ldd	r30, Y+1	; 0x01
    4a92:	fa 81       	ldd	r31, Y+2	; 0x02
    4a94:	91 85       	ldd	r25, Z+9	; 0x09
    4a96:	69 2f       	mov	r22, r25
    4a98:	41 e0       	ldi	r20, 0x01	; 1
    4a9a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum3_PIN,DIO_u8PIN_OUTPUT);
    4a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    4aa2:	82 81       	ldd	r24, Z+2	; 0x02
    4aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    4aa8:	92 85       	ldd	r25, Z+10	; 0x0a
    4aaa:	69 2f       	mov	r22, r25
    4aac:	41 e0       	ldi	r20, 0x01	; 1
    4aae:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum4_PORT,Copy_pstConfig->KP_Colum4_PIN,DIO_u8PIN_OUTPUT);
    4ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab6:	83 81       	ldd	r24, Z+3	; 0x03
    4ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    4aba:	fa 81       	ldd	r31, Y+2	; 0x02
    4abc:	93 85       	ldd	r25, Z+11	; 0x0b
    4abe:	69 2f       	mov	r22, r25
    4ac0:	41 e0       	ldi	r20, 0x01	; 1
    4ac2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row1_PIN,DIO_u8PIN_INPUT);
    4ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    4aca:	84 81       	ldd	r24, Z+4	; 0x04
    4acc:	e9 81       	ldd	r30, Y+1	; 0x01
    4ace:	fa 81       	ldd	r31, Y+2	; 0x02
    4ad0:	94 85       	ldd	r25, Z+12	; 0x0c
    4ad2:	69 2f       	mov	r22, r25
    4ad4:	40 e0       	ldi	r20, 0x00	; 0
    4ad6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row2_PIN,DIO_u8PIN_INPUT);
    4ada:	e9 81       	ldd	r30, Y+1	; 0x01
    4adc:	fa 81       	ldd	r31, Y+2	; 0x02
    4ade:	85 81       	ldd	r24, Z+5	; 0x05
    4ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ae4:	95 85       	ldd	r25, Z+13	; 0x0d
    4ae6:	69 2f       	mov	r22, r25
    4ae8:	40 e0       	ldi	r20, 0x00	; 0
    4aea:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row3_PIN,DIO_u8PIN_INPUT);
    4aee:	e9 81       	ldd	r30, Y+1	; 0x01
    4af0:	fa 81       	ldd	r31, Y+2	; 0x02
    4af2:	86 81       	ldd	r24, Z+6	; 0x06
    4af4:	e9 81       	ldd	r30, Y+1	; 0x01
    4af6:	fa 81       	ldd	r31, Y+2	; 0x02
    4af8:	96 85       	ldd	r25, Z+14	; 0x0e
    4afa:	69 2f       	mov	r22, r25
    4afc:	40 e0       	ldi	r20, 0x00	; 0
    4afe:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row4_PORT,Copy_pstConfig->KP_Row4_PIN,DIO_u8PIN_INPUT);
    4b02:	e9 81       	ldd	r30, Y+1	; 0x01
    4b04:	fa 81       	ldd	r31, Y+2	; 0x02
    4b06:	87 81       	ldd	r24, Z+7	; 0x07
    4b08:	e9 81       	ldd	r30, Y+1	; 0x01
    4b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b0c:	97 85       	ldd	r25, Z+15	; 0x0f
    4b0e:	69 2f       	mov	r22, r25
    4b10:	40 e0       	ldi	r20, 0x00	; 0
    4b12:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	
}
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	cf 91       	pop	r28
    4b1c:	df 91       	pop	r29
    4b1e:	08 95       	ret

00004b20 <Read_KP>:
u8 Read_KP(KP_stConfiguration *Copy_pstConfig)
{
    4b20:	df 93       	push	r29
    4b22:	cf 93       	push	r28
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
    4b28:	a5 97       	sbiw	r28, 0x25	; 37
    4b2a:	0f b6       	in	r0, 0x3f	; 63
    4b2c:	f8 94       	cli
    4b2e:	de bf       	out	0x3e, r29	; 62
    4b30:	0f be       	out	0x3f, r0	; 63
    4b32:	cd bf       	out	0x3d, r28	; 61
    4b34:	98 a3       	std	Y+32, r25	; 0x20
    4b36:	8f 8f       	std	Y+31, r24	; 0x1f
    u8 Pressed_key = KP_Not_Pressed;
    4b38:	8f ef       	ldi	r24, 0xFF	; 255
    4b3a:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_KP_Arr[Rows_NUM][Columns_NUM] = KP_Arr; 
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	04 96       	adiw	r24, 0x04	; 4
    4b40:	9a a3       	std	Y+34, r25	; 0x22
    4b42:	89 a3       	std	Y+33, r24	; 0x21
    4b44:	ea e2       	ldi	r30, 0x2A	; 42
    4b46:	f4 e0       	ldi	r31, 0x04	; 4
    4b48:	fc a3       	std	Y+36, r31	; 0x24
    4b4a:	eb a3       	std	Y+35, r30	; 0x23
    4b4c:	fc e0       	ldi	r31, 0x0C	; 12
    4b4e:	fd a3       	std	Y+37, r31	; 0x25
    4b50:	eb a1       	ldd	r30, Y+35	; 0x23
    4b52:	fc a1       	ldd	r31, Y+36	; 0x24
    4b54:	00 80       	ld	r0, Z
    4b56:	8b a1       	ldd	r24, Y+35	; 0x23
    4b58:	9c a1       	ldd	r25, Y+36	; 0x24
    4b5a:	01 96       	adiw	r24, 0x01	; 1
    4b5c:	9c a3       	std	Y+36, r25	; 0x24
    4b5e:	8b a3       	std	Y+35, r24	; 0x23
    4b60:	e9 a1       	ldd	r30, Y+33	; 0x21
    4b62:	fa a1       	ldd	r31, Y+34	; 0x22
    4b64:	00 82       	st	Z, r0
    4b66:	89 a1       	ldd	r24, Y+33	; 0x21
    4b68:	9a a1       	ldd	r25, Y+34	; 0x22
    4b6a:	01 96       	adiw	r24, 0x01	; 1
    4b6c:	9a a3       	std	Y+34, r25	; 0x22
    4b6e:	89 a3       	std	Y+33, r24	; 0x21
    4b70:	9d a1       	ldd	r25, Y+37	; 0x25
    4b72:	91 50       	subi	r25, 0x01	; 1
    4b74:	9d a3       	std	Y+37, r25	; 0x25
    4b76:	ed a1       	ldd	r30, Y+37	; 0x25
    4b78:	ee 23       	and	r30, r30
    4b7a:	51 f7       	brne	.-44     	; 0x4b50 <Read_KP+0x30>
    
	u8 Colum_Index ,Row_Index ;
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
    4b7c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4b7e:	f8 a1       	ldd	r31, Y+32	; 0x20
    4b80:	90 81       	ld	r25, Z
    4b82:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4b84:	f8 a1       	ldd	r31, Y+32	; 0x20
    4b86:	21 81       	ldd	r18, Z+1	; 0x01
    4b88:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4b8a:	f8 a1       	ldd	r31, Y+32	; 0x20
    4b8c:	82 81       	ldd	r24, Z+2	; 0x02
    4b8e:	98 8b       	std	Y+16, r25	; 0x10
    4b90:	29 8b       	std	Y+17, r18	; 0x11
    4b92:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
    4b94:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4b96:	f8 a1       	ldd	r31, Y+32	; 0x20
    4b98:	24 81       	ldd	r18, Z+4	; 0x04
    4b9a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4b9c:	f8 a1       	ldd	r31, Y+32	; 0x20
    4b9e:	35 81       	ldd	r19, Z+5	; 0x05
    4ba0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4ba2:	f8 a1       	ldd	r31, Y+32	; 0x20
    4ba4:	86 81       	ldd	r24, Z+6	; 0x06
    4ba6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4ba8:	f8 a1       	ldd	r31, Y+32	; 0x20
    4baa:	97 81       	ldd	r25, Z+7	; 0x07
    4bac:	2b 8b       	std	Y+19, r18	; 0x13
    4bae:	3c 8b       	std	Y+20, r19	; 0x14
    4bb0:	8d 8b       	std	Y+21, r24	; 0x15
    4bb2:	9e 8b       	std	Y+22, r25	; 0x16
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
    4bb4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4bb6:	f8 a1       	ldd	r31, Y+32	; 0x20
    4bb8:	90 85       	ldd	r25, Z+8	; 0x08
    4bba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4bbc:	f8 a1       	ldd	r31, Y+32	; 0x20
    4bbe:	21 85       	ldd	r18, Z+9	; 0x09
    4bc0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4bc2:	f8 a1       	ldd	r31, Y+32	; 0x20
    4bc4:	82 85       	ldd	r24, Z+10	; 0x0a
    4bc6:	9f 8b       	std	Y+23, r25	; 0x17
    4bc8:	28 8f       	std	Y+24, r18	; 0x18
    4bca:	89 8f       	std	Y+25, r24	; 0x19
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
    4bcc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4bce:	f8 a1       	ldd	r31, Y+32	; 0x20
    4bd0:	24 85       	ldd	r18, Z+12	; 0x0c
    4bd2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4bd4:	f8 a1       	ldd	r31, Y+32	; 0x20
    4bd6:	35 85       	ldd	r19, Z+13	; 0x0d
    4bd8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4bda:	f8 a1       	ldd	r31, Y+32	; 0x20
    4bdc:	86 85       	ldd	r24, Z+14	; 0x0e
    4bde:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4be0:	f8 a1       	ldd	r31, Y+32	; 0x20
    4be2:	97 85       	ldd	r25, Z+15	; 0x0f
    4be4:	2a 8f       	std	Y+26, r18	; 0x1a
    4be6:	3b 8f       	std	Y+27, r19	; 0x1b
    4be8:	8c 8f       	std	Y+28, r24	; 0x1c
    4bea:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 State = 0;
    4bec:	1e 8e       	std	Y+30, r1	; 0x1e
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    4bee:	1a 82       	std	Y+2, r1	; 0x02
    4bf0:	1a c0       	rjmp	.+52     	; 0x4c26 <Read_KP+0x106>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
    4bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf4:	28 2f       	mov	r18, r24
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	ce 01       	movw	r24, r28
    4bfa:	40 96       	adiw	r24, 0x10	; 16
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	e2 0f       	add	r30, r18
    4c00:	f3 1f       	adc	r31, r19
    4c02:	40 81       	ld	r20, Z
    4c04:	8a 81       	ldd	r24, Y+2	; 0x02
    4c06:	28 2f       	mov	r18, r24
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	ce 01       	movw	r24, r28
    4c0c:	47 96       	adiw	r24, 0x17	; 23
    4c0e:	fc 01       	movw	r30, r24
    4c10:	e2 0f       	add	r30, r18
    4c12:	f3 1f       	adc	r31, r19
    4c14:	90 81       	ld	r25, Z
    4c16:	84 2f       	mov	r24, r20
    4c18:	69 2f       	mov	r22, r25
    4c1a:	41 e0       	ldi	r20, 0x01	; 1
    4c1c:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    4c20:	8a 81       	ldd	r24, Y+2	; 0x02
    4c22:	8f 5f       	subi	r24, 0xFF	; 255
    4c24:	8a 83       	std	Y+2, r24	; 0x02
    4c26:	8a 81       	ldd	r24, Y+2	; 0x02
    4c28:	83 30       	cpi	r24, 0x03	; 3
    4c2a:	18 f3       	brcs	.-58     	; 0x4bf2 <Read_KP+0xd2>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    4c2c:	19 82       	std	Y+1, r1	; 0x01
    4c2e:	1a c0       	rjmp	.+52     	; 0x4c64 <Read_KP+0x144>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	28 2f       	mov	r18, r24
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	ce 01       	movw	r24, r28
    4c38:	43 96       	adiw	r24, 0x13	; 19
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	e2 0f       	add	r30, r18
    4c3e:	f3 1f       	adc	r31, r19
    4c40:	40 81       	ld	r20, Z
    4c42:	89 81       	ldd	r24, Y+1	; 0x01
    4c44:	28 2f       	mov	r18, r24
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	ce 01       	movw	r24, r28
    4c4a:	4a 96       	adiw	r24, 0x1a	; 26
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	e2 0f       	add	r30, r18
    4c50:	f3 1f       	adc	r31, r19
    4c52:	90 81       	ld	r25, Z
    4c54:	84 2f       	mov	r24, r20
    4c56:	69 2f       	mov	r22, r25
    4c58:	41 e0       	ldi	r20, 0x01	; 1
    4c5a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    4c5e:	89 81       	ldd	r24, Y+1	; 0x01
    4c60:	8f 5f       	subi	r24, 0xFF	; 255
    4c62:	89 83       	std	Y+1, r24	; 0x01
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	84 30       	cpi	r24, 0x04	; 4
    4c68:	18 f3       	brcs	.-58     	; 0x4c30 <Read_KP+0x110>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    4c6a:	1a 82       	std	Y+2, r1	; 0x02
    4c6c:	8b c0       	rjmp	.+278    	; 0x4d84 <Read_KP+0x264>
    {
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_LOW);
    4c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c70:	28 2f       	mov	r18, r24
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	ce 01       	movw	r24, r28
    4c76:	40 96       	adiw	r24, 0x10	; 16
    4c78:	fc 01       	movw	r30, r24
    4c7a:	e2 0f       	add	r30, r18
    4c7c:	f3 1f       	adc	r31, r19
    4c7e:	40 81       	ld	r20, Z
    4c80:	8a 81       	ldd	r24, Y+2	; 0x02
    4c82:	28 2f       	mov	r18, r24
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	ce 01       	movw	r24, r28
    4c88:	47 96       	adiw	r24, 0x17	; 23
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	e2 0f       	add	r30, r18
    4c8e:	f3 1f       	adc	r31, r19
    4c90:	90 81       	ld	r25, Z
    4c92:	84 2f       	mov	r24, r20
    4c94:	69 2f       	mov	r22, r25
    4c96:	40 e0       	ldi	r20, 0x00	; 0
    4c98:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
    4c9c:	19 82       	std	Y+1, r1	; 0x01
    4c9e:	54 c0       	rjmp	.+168    	; 0x4d48 <Read_KP+0x228>
        {
            DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
    4ca0:	89 81       	ldd	r24, Y+1	; 0x01
    4ca2:	28 2f       	mov	r18, r24
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	43 96       	adiw	r24, 0x13	; 19
    4caa:	fc 01       	movw	r30, r24
    4cac:	e2 0f       	add	r30, r18
    4cae:	f3 1f       	adc	r31, r19
    4cb0:	40 81       	ld	r20, Z
    4cb2:	89 81       	ldd	r24, Y+1	; 0x01
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	ce 01       	movw	r24, r28
    4cba:	4a 96       	adiw	r24, 0x1a	; 26
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	e2 0f       	add	r30, r18
    4cc0:	f3 1f       	adc	r31, r19
    4cc2:	90 81       	ld	r25, Z
    4cc4:	9e 01       	movw	r18, r28
    4cc6:	22 5e       	subi	r18, 0xE2	; 226
    4cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cca:	84 2f       	mov	r24, r20
    4ccc:	69 2f       	mov	r22, r25
    4cce:	a9 01       	movw	r20, r18
    4cd0:	0e 94 21 19 	call	0x3242	; 0x3242 <DIO_VoidGetPinValue>
            if (State == DIO_u8PIN_LOW)
    4cd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cd6:	88 23       	and	r24, r24
    4cd8:	a1 f5       	brne	.+104    	; 0x4d42 <Read_KP+0x222>
    4cda:	1a c0       	rjmp	.+52     	; 0x4d10 <Read_KP+0x1f0>
            {
                while (State == DIO_u8PIN_LOW)
                {
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
    4cdc:	89 81       	ldd	r24, Y+1	; 0x01
    4cde:	28 2f       	mov	r18, r24
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	ce 01       	movw	r24, r28
    4ce4:	43 96       	adiw	r24, 0x13	; 19
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	e2 0f       	add	r30, r18
    4cea:	f3 1f       	adc	r31, r19
    4cec:	40 81       	ld	r20, Z
    4cee:	89 81       	ldd	r24, Y+1	; 0x01
    4cf0:	28 2f       	mov	r18, r24
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	ce 01       	movw	r24, r28
    4cf6:	4a 96       	adiw	r24, 0x1a	; 26
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	e2 0f       	add	r30, r18
    4cfc:	f3 1f       	adc	r31, r19
    4cfe:	90 81       	ld	r25, Z
    4d00:	9e 01       	movw	r18, r28
    4d02:	22 5e       	subi	r18, 0xE2	; 226
    4d04:	3f 4f       	sbci	r19, 0xFF	; 255
    4d06:	84 2f       	mov	r24, r20
    4d08:	69 2f       	mov	r22, r25
    4d0a:	a9 01       	movw	r20, r18
    4d0c:	0e 94 21 19 	call	0x3242	; 0x3242 <DIO_VoidGetPinValue>
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
        {
            DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
            if (State == DIO_u8PIN_LOW)
            {
                while (State == DIO_u8PIN_LOW)
    4d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d12:	88 23       	and	r24, r24
    4d14:	19 f3       	breq	.-58     	; 0x4cdc <Read_KP+0x1bc>
                {
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
                }
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
    4d16:	89 81       	ldd	r24, Y+1	; 0x01
    4d18:	28 2f       	mov	r18, r24
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1e:	48 2f       	mov	r20, r24
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	c9 01       	movw	r24, r18
    4d24:	88 0f       	add	r24, r24
    4d26:	99 1f       	adc	r25, r25
    4d28:	82 0f       	add	r24, r18
    4d2a:	93 1f       	adc	r25, r19
    4d2c:	9e 01       	movw	r18, r28
    4d2e:	2f 5f       	subi	r18, 0xFF	; 255
    4d30:	3f 4f       	sbci	r19, 0xFF	; 255
    4d32:	82 0f       	add	r24, r18
    4d34:	93 1f       	adc	r25, r19
    4d36:	84 0f       	add	r24, r20
    4d38:	95 1f       	adc	r25, r21
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	33 96       	adiw	r30, 0x03	; 3
    4d3e:	80 81       	ld	r24, Z
    4d40:	8b 83       	std	Y+3, r24	; 0x03
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    {
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_LOW);
        for (Row_Index = 0; Row_Index < Rows_NUM; Row_Index++)
    4d42:	89 81       	ldd	r24, Y+1	; 0x01
    4d44:	8f 5f       	subi	r24, 0xFF	; 255
    4d46:	89 83       	std	Y+1, r24	; 0x01
    4d48:	89 81       	ldd	r24, Y+1	; 0x01
    4d4a:	84 30       	cpi	r24, 0x04	; 4
    4d4c:	08 f4       	brcc	.+2      	; 0x4d50 <Read_KP+0x230>
    4d4e:	a8 cf       	rjmp	.-176    	; 0x4ca0 <Read_KP+0x180>
                    DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index], Row_Pin_Arr[Row_Index], &State);
                }
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
            }
        }
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_HIGH);
    4d50:	8a 81       	ldd	r24, Y+2	; 0x02
    4d52:	28 2f       	mov	r18, r24
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	ce 01       	movw	r24, r28
    4d58:	40 96       	adiw	r24, 0x10	; 16
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	e2 0f       	add	r30, r18
    4d5e:	f3 1f       	adc	r31, r19
    4d60:	40 81       	ld	r20, Z
    4d62:	8a 81       	ldd	r24, Y+2	; 0x02
    4d64:	28 2f       	mov	r18, r24
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	ce 01       	movw	r24, r28
    4d6a:	47 96       	adiw	r24, 0x17	; 23
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	e2 0f       	add	r30, r18
    4d70:	f3 1f       	adc	r31, r19
    4d72:	90 81       	ld	r25, Z
    4d74:	84 2f       	mov	r24, r20
    4d76:	69 2f       	mov	r22, r25
    4d78:	41 e0       	ldi	r20, 0x01	; 1
    4d7a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}

    for (Colum_Index = 0; Colum_Index < Columns_NUM; Colum_Index++)
    4d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d80:	8f 5f       	subi	r24, 0xFF	; 255
    4d82:	8a 83       	std	Y+2, r24	; 0x02
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	83 30       	cpi	r24, 0x03	; 3
    4d88:	08 f4       	brcc	.+2      	; 0x4d8c <Read_KP+0x26c>
    4d8a:	71 cf       	rjmp	.-286    	; 0x4c6e <Read_KP+0x14e>
                Pressed_key = Local_KP_Arr[Row_Index][Colum_Index]; // Update to use Local_KP_Arr
            }
        }
        DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index], Colum_Pin_Arr[Colum_Index], DIO_u8PIN_HIGH);
    }
    return Pressed_key;
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4d8e:	a5 96       	adiw	r28, 0x25	; 37
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	f8 94       	cli
    4d94:	de bf       	out	0x3e, r29	; 62
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	cd bf       	out	0x3d, r28	; 61
    4d9a:	cf 91       	pop	r28
    4d9c:	df 91       	pop	r29
    4d9e:	08 95       	ret

00004da0 <EEPROM_voidSendData>:
#include"EEPROM_Interface.h"
#include<util/delay.h>



void EEPROM_voidSendData(u16 Copy_u16Address,u8 Copy_u8Data){
    4da0:	df 93       	push	r29
    4da2:	cf 93       	push	r28
    4da4:	cd b7       	in	r28, 0x3d	; 61
    4da6:	de b7       	in	r29, 0x3e	; 62
    4da8:	61 97       	sbiw	r28, 0x11	; 17
    4daa:	0f b6       	in	r0, 0x3f	; 63
    4dac:	f8 94       	cli
    4dae:	de bf       	out	0x3e, r29	; 62
    4db0:	0f be       	out	0x3f, r0	; 63
    4db2:	cd bf       	out	0x3d, r28	; 61
    4db4:	98 8b       	std	Y+16, r25	; 0x10
    4db6:	8f 87       	std	Y+15, r24	; 0x0f
    4db8:	69 8b       	std	Y+17, r22	; 0x11
	/*1-Send Start Condition*/
	TWI_voidStartCond();
    4dba:	0e 94 6f 14 	call	0x28de	; 0x28de <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    4dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dc0:	98 89       	ldd	r25, Y+16	; 0x10
    4dc2:	89 2f       	mov	r24, r25
    4dc4:	99 27       	eor	r25, r25
    4dc6:	80 65       	ori	r24, 0x50	; 80
    4dc8:	0e 94 af 14 	call	0x295e	; 0x295e <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    4dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dce:	0e 94 ca 14 	call	0x2994	; 0x2994 <TWI_voidMasterWriteData>
	/*4-Send Data*/
	TWI_voidMasterWriteData(Copy_u8Data);
    4dd2:	89 89       	ldd	r24, Y+17	; 0x11
    4dd4:	0e 94 ca 14 	call	0x2994	; 0x2994 <TWI_voidMasterWriteData>
	/*5-Send Stop Condition*/
	TWI_voidStopCond();
    4dd8:	0e 94 09 15 	call	0x2a12	; 0x2a12 <TWI_voidStopCond>
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	a8 e4       	ldi	r26, 0x48	; 72
    4de2:	b3 e4       	ldi	r27, 0x43	; 67
    4de4:	8b 87       	std	Y+11, r24	; 0x0b
    4de6:	9c 87       	std	Y+12, r25	; 0x0c
    4de8:	ad 87       	std	Y+13, r26	; 0x0d
    4dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	4a ef       	ldi	r20, 0xFA	; 250
    4dfa:	54 e4       	ldi	r21, 0x44	; 68
    4dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	8f 83       	std	Y+7, r24	; 0x07
    4e06:	98 87       	std	Y+8, r25	; 0x08
    4e08:	a9 87       	std	Y+9, r26	; 0x09
    4e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e0e:	78 85       	ldd	r23, Y+8	; 0x08
    4e10:	89 85       	ldd	r24, Y+9	; 0x09
    4e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	40 e8       	ldi	r20, 0x80	; 128
    4e1a:	5f e3       	ldi	r21, 0x3F	; 63
    4e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e20:	88 23       	and	r24, r24
    4e22:	2c f4       	brge	.+10     	; 0x4e2e <EEPROM_voidSendData+0x8e>
		__ticks = 1;
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	9e 83       	std	Y+6, r25	; 0x06
    4e2a:	8d 83       	std	Y+5, r24	; 0x05
    4e2c:	3f c0       	rjmp	.+126    	; 0x4eac <EEPROM_voidSendData+0x10c>
	else if (__tmp > 65535)
    4e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e30:	78 85       	ldd	r23, Y+8	; 0x08
    4e32:	89 85       	ldd	r24, Y+9	; 0x09
    4e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	3f ef       	ldi	r19, 0xFF	; 255
    4e3a:	4f e7       	ldi	r20, 0x7F	; 127
    4e3c:	57 e4       	ldi	r21, 0x47	; 71
    4e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e42:	18 16       	cp	r1, r24
    4e44:	4c f5       	brge	.+82     	; 0x4e98 <EEPROM_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	40 e2       	ldi	r20, 0x20	; 32
    4e54:	51 e4       	ldi	r21, 0x41	; 65
    4e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	bc 01       	movw	r22, r24
    4e60:	cd 01       	movw	r24, r26
    4e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	9e 83       	std	Y+6, r25	; 0x06
    4e6c:	8d 83       	std	Y+5, r24	; 0x05
    4e6e:	0f c0       	rjmp	.+30     	; 0x4e8e <EEPROM_voidSendData+0xee>
    4e70:	88 ec       	ldi	r24, 0xC8	; 200
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	9c 83       	std	Y+4, r25	; 0x04
    4e76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e78:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7c:	01 97       	sbiw	r24, 0x01	; 1
    4e7e:	f1 f7       	brne	.-4      	; 0x4e7c <EEPROM_voidSendData+0xdc>
    4e80:	9c 83       	std	Y+4, r25	; 0x04
    4e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	9e 81       	ldd	r25, Y+6	; 0x06
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	9e 83       	std	Y+6, r25	; 0x06
    4e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e90:	9e 81       	ldd	r25, Y+6	; 0x06
    4e92:	00 97       	sbiw	r24, 0x00	; 0
    4e94:	69 f7       	brne	.-38     	; 0x4e70 <EEPROM_voidSendData+0xd0>
    4e96:	14 c0       	rjmp	.+40     	; 0x4ec0 <EEPROM_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e98:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9a:	78 85       	ldd	r23, Y+8	; 0x08
    4e9c:	89 85       	ldd	r24, Y+9	; 0x09
    4e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	9e 83       	std	Y+6, r25	; 0x06
    4eaa:	8d 83       	std	Y+5, r24	; 0x05
    4eac:	8d 81       	ldd	r24, Y+5	; 0x05
    4eae:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb0:	9a 83       	std	Y+2, r25	; 0x02
    4eb2:	89 83       	std	Y+1, r24	; 0x01
    4eb4:	89 81       	ldd	r24, Y+1	; 0x01
    4eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <EEPROM_voidSendData+0x118>
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    4ec0:	61 96       	adiw	r28, 0x11	; 17
    4ec2:	0f b6       	in	r0, 0x3f	; 63
    4ec4:	f8 94       	cli
    4ec6:	de bf       	out	0x3e, r29	; 62
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	cd bf       	out	0x3d, r28	; 61
    4ecc:	cf 91       	pop	r28
    4ece:	df 91       	pop	r29
    4ed0:	08 95       	ret

00004ed2 <EEPROM_voidRecieveData>:
void EEPROM_voidRecieveData(u16 Copy_u16Address,u8 *Copy_u8ReceivedData)
{
    4ed2:	df 93       	push	r29
    4ed4:	cf 93       	push	r28
    4ed6:	00 d0       	rcall	.+0      	; 0x4ed8 <EEPROM_voidRecieveData+0x6>
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <EEPROM_voidRecieveData+0x8>
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	9a 83       	std	Y+2, r25	; 0x02
    4ee0:	89 83       	std	Y+1, r24	; 0x01
    4ee2:	7c 83       	std	Y+4, r23	; 0x04
    4ee4:	6b 83       	std	Y+3, r22	; 0x03


	/*1-Send Start Condition*/
	TWI_voidStartCond();
    4ee6:	0e 94 6f 14 	call	0x28de	; 0x28de <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    4eea:	89 81       	ldd	r24, Y+1	; 0x01
    4eec:	9a 81       	ldd	r25, Y+2	; 0x02
    4eee:	89 2f       	mov	r24, r25
    4ef0:	99 27       	eor	r25, r25
    4ef2:	80 65       	ori	r24, 0x50	; 80
    4ef4:	0e 94 af 14 	call	0x295e	; 0x295e <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    4ef8:	89 81       	ldd	r24, Y+1	; 0x01
    4efa:	0e 94 ca 14 	call	0x2994	; 0x2994 <TWI_voidMasterWriteData>
	/*4-Send repeated start Condition*/
	TWI_voidStopCond();
    4efe:	0e 94 09 15 	call	0x2a12	; 0x2a12 <TWI_voidStopCond>
	TWI_voidStartCond();
    4f02:	0e 94 6f 14 	call	0x28de	; 0x28de <TWI_voidStartCond>
	/*5-Send Slave Address with read*/
	TWI_voidSendSlaveAddressWithRead((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0a:	89 2f       	mov	r24, r25
    4f0c:	99 27       	eor	r25, r25
    4f0e:	80 65       	ori	r24, 0x50	; 80
    4f10:	0e 94 90 14 	call	0x2920	; 0x2920 <TWI_voidSendSlaveAddressWithRead>
	TWI_voidMasterReadData(Copy_u8ReceivedData);
    4f14:	8b 81       	ldd	r24, Y+3	; 0x03
    4f16:	9c 81       	ldd	r25, Y+4	; 0x04
    4f18:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <TWI_voidMasterReadData>
	TWI_voidStopCond();
    4f1c:	0e 94 09 15 	call	0x2a12	; 0x2a12 <TWI_voidStopCond>

}
    4f20:	0f 90       	pop	r0
    4f22:	0f 90       	pop	r0
    4f24:	0f 90       	pop	r0
    4f26:	0f 90       	pop	r0
    4f28:	cf 91       	pop	r28
    4f2a:	df 91       	pop	r29
    4f2c:	08 95       	ret

00004f2e <main>:




void main()
{
    4f2e:	df 93       	push	r29
    4f30:	cf 93       	push	r28
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	2f 97       	sbiw	r28, 0x0f	; 15
    4f38:	0f b6       	in	r0, 0x3f	; 63
    4f3a:	f8 94       	cli
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	0f be       	out	0x3f, r0	; 63
    4f40:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    4f42:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <LCD_Init>
	u8 Start_U2;
	DIO_VoidSetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_INPUT);
    4f46:	83 e0       	ldi	r24, 0x03	; 3
    4f48:	60 e0       	ldi	r22, 0x00	; 0
    4f4a:	40 e0       	ldi	r20, 0x00	; 0
    4f4c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_INPUT);
    4f50:	83 e0       	ldi	r24, 0x03	; 3
    4f52:	61 e0       	ldi	r22, 0x01	; 1
    4f54:	40 e0       	ldi	r20, 0x00	; 0
    4f56:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTD, DIO_u8PIN6, DIO_u8PIN_INPUT);
    4f5a:	83 e0       	ldi	r24, 0x03	; 3
    4f5c:	66 e0       	ldi	r22, 0x06	; 6
    4f5e:	40 e0       	ldi	r20, 0x00	; 0
    4f60:	0e 94 53 18 	call	0x30a6	; 0x30a6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(DIO_u8PORTD, DIO_u8PIN6, DIO_u8PIN_HIGH);
    4f64:	83 e0       	ldi	r24, 0x03	; 3
    4f66:	66 e0       	ldi	r22, 0x06	; 6
    4f68:	41 e0       	ldi	r20, 0x01	; 1
    4f6a:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_VoidSetPinValue>
	USART_voidInit();
    4f6e:	0e 94 b4 13 	call	0x2768	; 0x2768 <USART_voidInit>
while(1){	
	USART_voidRecieve(&Start_U2); //IF PASSWORD IS TURE IN MICROCONTROLLER 1 -> INITIALIZE MICROCONTROLLER 
    4f72:	ce 01       	movw	r24, r28
    4f74:	0f 96       	adiw	r24, 0x0f	; 15
    4f76:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <USART_voidRecieve>
	if(Start_U2 == 1)
    4f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f7c:	81 30       	cpi	r24, 0x01	; 1
    4f7e:	c9 f7       	brne	.-14     	; 0x4f72 <main+0x44>
	{
		LCD_GoToWriteString(1,5,"CONTROL ON!");  
    4f80:	2b ed       	ldi	r18, 0xDB	; 219
    4f82:	32 e0       	ldi	r19, 0x02	; 2
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	65 e0       	ldi	r22, 0x05	; 5
    4f8a:	70 e0       	ldi	r23, 0x00	; 0
    4f8c:	a9 01       	movw	r20, r18
    4f8e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
	break;}}
	LCD_Init();
    4f92:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <LCD_Init>

	while (1)
	{
		LCD_GoToWriteString(2,0,"TO ENTER PRESS START!");
    4f96:	27 ee       	ldi	r18, 0xE7	; 231
    4f98:	32 e0       	ldi	r19, 0x02	; 2
    4f9a:	82 e0       	ldi	r24, 0x02	; 2
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	60 e0       	ldi	r22, 0x00	; 0
    4fa0:	70 e0       	ldi	r23, 0x00	; 0
    4fa2:	a9 01       	movw	r20, r18
    4fa4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_GoToWriteString>
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	a8 ec       	ldi	r26, 0xC8	; 200
    4fae:	b2 e4       	ldi	r27, 0x42	; 66
    4fb0:	8b 87       	std	Y+11, r24	; 0x0b
    4fb2:	9c 87       	std	Y+12, r25	; 0x0c
    4fb4:	ad 87       	std	Y+13, r26	; 0x0d
    4fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	4a ef       	ldi	r20, 0xFA	; 250
    4fc6:	54 e4       	ldi	r21, 0x44	; 68
    4fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	8f 83       	std	Y+7, r24	; 0x07
    4fd2:	98 87       	std	Y+8, r25	; 0x08
    4fd4:	a9 87       	std	Y+9, r26	; 0x09
    4fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    4fda:	78 85       	ldd	r23, Y+8	; 0x08
    4fdc:	89 85       	ldd	r24, Y+9	; 0x09
    4fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	40 e8       	ldi	r20, 0x80	; 128
    4fe6:	5f e3       	ldi	r21, 0x3F	; 63
    4fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fec:	88 23       	and	r24, r24
    4fee:	2c f4       	brge	.+10     	; 0x4ffa <main+0xcc>
		__ticks = 1;
    4ff0:	81 e0       	ldi	r24, 0x01	; 1
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	9e 83       	std	Y+6, r25	; 0x06
    4ff6:	8d 83       	std	Y+5, r24	; 0x05
    4ff8:	3f c0       	rjmp	.+126    	; 0x5078 <main+0x14a>
	else if (__tmp > 65535)
    4ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    4ffc:	78 85       	ldd	r23, Y+8	; 0x08
    4ffe:	89 85       	ldd	r24, Y+9	; 0x09
    5000:	9a 85       	ldd	r25, Y+10	; 0x0a
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	3f ef       	ldi	r19, 0xFF	; 255
    5006:	4f e7       	ldi	r20, 0x7F	; 127
    5008:	57 e4       	ldi	r21, 0x47	; 71
    500a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    500e:	18 16       	cp	r1, r24
    5010:	4c f5       	brge	.+82     	; 0x5064 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5012:	6b 85       	ldd	r22, Y+11	; 0x0b
    5014:	7c 85       	ldd	r23, Y+12	; 0x0c
    5016:	8d 85       	ldd	r24, Y+13	; 0x0d
    5018:	9e 85       	ldd	r25, Y+14	; 0x0e
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	40 e2       	ldi	r20, 0x20	; 32
    5020:	51 e4       	ldi	r21, 0x41	; 65
    5022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	bc 01       	movw	r22, r24
    502c:	cd 01       	movw	r24, r26
    502e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5032:	dc 01       	movw	r26, r24
    5034:	cb 01       	movw	r24, r22
    5036:	9e 83       	std	Y+6, r25	; 0x06
    5038:	8d 83       	std	Y+5, r24	; 0x05
    503a:	0f c0       	rjmp	.+30     	; 0x505a <main+0x12c>
    503c:	88 ec       	ldi	r24, 0xC8	; 200
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	9c 83       	std	Y+4, r25	; 0x04
    5042:	8b 83       	std	Y+3, r24	; 0x03
    5044:	8b 81       	ldd	r24, Y+3	; 0x03
    5046:	9c 81       	ldd	r25, Y+4	; 0x04
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	f1 f7       	brne	.-4      	; 0x5048 <main+0x11a>
    504c:	9c 83       	std	Y+4, r25	; 0x04
    504e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5050:	8d 81       	ldd	r24, Y+5	; 0x05
    5052:	9e 81       	ldd	r25, Y+6	; 0x06
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	9e 83       	std	Y+6, r25	; 0x06
    5058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    505a:	8d 81       	ldd	r24, Y+5	; 0x05
    505c:	9e 81       	ldd	r25, Y+6	; 0x06
    505e:	00 97       	sbiw	r24, 0x00	; 0
    5060:	69 f7       	brne	.-38     	; 0x503c <main+0x10e>
    5062:	14 c0       	rjmp	.+40     	; 0x508c <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5064:	6f 81       	ldd	r22, Y+7	; 0x07
    5066:	78 85       	ldd	r23, Y+8	; 0x08
    5068:	89 85       	ldd	r24, Y+9	; 0x09
    506a:	9a 85       	ldd	r25, Y+10	; 0x0a
    506c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5070:	dc 01       	movw	r26, r24
    5072:	cb 01       	movw	r24, r22
    5074:	9e 83       	std	Y+6, r25	; 0x06
    5076:	8d 83       	std	Y+5, r24	; 0x05
    5078:	8d 81       	ldd	r24, Y+5	; 0x05
    507a:	9e 81       	ldd	r25, Y+6	; 0x06
    507c:	9a 83       	std	Y+2, r25	; 0x02
    507e:	89 83       	std	Y+1, r24	; 0x01
    5080:	89 81       	ldd	r24, Y+1	; 0x01
    5082:	9a 81       	ldd	r25, Y+2	; 0x02
    5084:	01 97       	sbiw	r24, 0x01	; 1
    5086:	f1 f7       	brne	.-4      	; 0x5084 <main+0x156>
    5088:	9a 83       	std	Y+2, r25	; 0x02
    508a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		InteractiveLCD();
    508c:	0e 94 2d 08 	call	0x105a	; 0x105a <InteractiveLCD>
		LCD_ClearDisplay();
    5090:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_ClearDisplay>
		Temp_Monitoring();
    5094:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Temp_Monitoring>
    5098:	7e cf       	rjmp	.-260    	; 0x4f96 <main+0x68>

0000509a <__udivmodhi4>:
    509a:	aa 1b       	sub	r26, r26
    509c:	bb 1b       	sub	r27, r27
    509e:	51 e1       	ldi	r21, 0x11	; 17
    50a0:	07 c0       	rjmp	.+14     	; 0x50b0 <__udivmodhi4_ep>

000050a2 <__udivmodhi4_loop>:
    50a2:	aa 1f       	adc	r26, r26
    50a4:	bb 1f       	adc	r27, r27
    50a6:	a6 17       	cp	r26, r22
    50a8:	b7 07       	cpc	r27, r23
    50aa:	10 f0       	brcs	.+4      	; 0x50b0 <__udivmodhi4_ep>
    50ac:	a6 1b       	sub	r26, r22
    50ae:	b7 0b       	sbc	r27, r23

000050b0 <__udivmodhi4_ep>:
    50b0:	88 1f       	adc	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	5a 95       	dec	r21
    50b6:	a9 f7       	brne	.-22     	; 0x50a2 <__udivmodhi4_loop>
    50b8:	80 95       	com	r24
    50ba:	90 95       	com	r25
    50bc:	bc 01       	movw	r22, r24
    50be:	cd 01       	movw	r24, r26
    50c0:	08 95       	ret

000050c2 <__divmodsi4>:
    50c2:	97 fb       	bst	r25, 7
    50c4:	09 2e       	mov	r0, r25
    50c6:	05 26       	eor	r0, r21
    50c8:	0e d0       	rcall	.+28     	; 0x50e6 <__divmodsi4_neg1>
    50ca:	57 fd       	sbrc	r21, 7
    50cc:	04 d0       	rcall	.+8      	; 0x50d6 <__divmodsi4_neg2>
    50ce:	14 d0       	rcall	.+40     	; 0x50f8 <__udivmodsi4>
    50d0:	0a d0       	rcall	.+20     	; 0x50e6 <__divmodsi4_neg1>
    50d2:	00 1c       	adc	r0, r0
    50d4:	38 f4       	brcc	.+14     	; 0x50e4 <__divmodsi4_exit>

000050d6 <__divmodsi4_neg2>:
    50d6:	50 95       	com	r21
    50d8:	40 95       	com	r20
    50da:	30 95       	com	r19
    50dc:	21 95       	neg	r18
    50de:	3f 4f       	sbci	r19, 0xFF	; 255
    50e0:	4f 4f       	sbci	r20, 0xFF	; 255
    50e2:	5f 4f       	sbci	r21, 0xFF	; 255

000050e4 <__divmodsi4_exit>:
    50e4:	08 95       	ret

000050e6 <__divmodsi4_neg1>:
    50e6:	f6 f7       	brtc	.-4      	; 0x50e4 <__divmodsi4_exit>
    50e8:	90 95       	com	r25
    50ea:	80 95       	com	r24
    50ec:	70 95       	com	r23
    50ee:	61 95       	neg	r22
    50f0:	7f 4f       	sbci	r23, 0xFF	; 255
    50f2:	8f 4f       	sbci	r24, 0xFF	; 255
    50f4:	9f 4f       	sbci	r25, 0xFF	; 255
    50f6:	08 95       	ret

000050f8 <__udivmodsi4>:
    50f8:	a1 e2       	ldi	r26, 0x21	; 33
    50fa:	1a 2e       	mov	r1, r26
    50fc:	aa 1b       	sub	r26, r26
    50fe:	bb 1b       	sub	r27, r27
    5100:	fd 01       	movw	r30, r26
    5102:	0d c0       	rjmp	.+26     	; 0x511e <__udivmodsi4_ep>

00005104 <__udivmodsi4_loop>:
    5104:	aa 1f       	adc	r26, r26
    5106:	bb 1f       	adc	r27, r27
    5108:	ee 1f       	adc	r30, r30
    510a:	ff 1f       	adc	r31, r31
    510c:	a2 17       	cp	r26, r18
    510e:	b3 07       	cpc	r27, r19
    5110:	e4 07       	cpc	r30, r20
    5112:	f5 07       	cpc	r31, r21
    5114:	20 f0       	brcs	.+8      	; 0x511e <__udivmodsi4_ep>
    5116:	a2 1b       	sub	r26, r18
    5118:	b3 0b       	sbc	r27, r19
    511a:	e4 0b       	sbc	r30, r20
    511c:	f5 0b       	sbc	r31, r21

0000511e <__udivmodsi4_ep>:
    511e:	66 1f       	adc	r22, r22
    5120:	77 1f       	adc	r23, r23
    5122:	88 1f       	adc	r24, r24
    5124:	99 1f       	adc	r25, r25
    5126:	1a 94       	dec	r1
    5128:	69 f7       	brne	.-38     	; 0x5104 <__udivmodsi4_loop>
    512a:	60 95       	com	r22
    512c:	70 95       	com	r23
    512e:	80 95       	com	r24
    5130:	90 95       	com	r25
    5132:	9b 01       	movw	r18, r22
    5134:	ac 01       	movw	r20, r24
    5136:	bd 01       	movw	r22, r26
    5138:	cf 01       	movw	r24, r30
    513a:	08 95       	ret

0000513c <__prologue_saves__>:
    513c:	2f 92       	push	r2
    513e:	3f 92       	push	r3
    5140:	4f 92       	push	r4
    5142:	5f 92       	push	r5
    5144:	6f 92       	push	r6
    5146:	7f 92       	push	r7
    5148:	8f 92       	push	r8
    514a:	9f 92       	push	r9
    514c:	af 92       	push	r10
    514e:	bf 92       	push	r11
    5150:	cf 92       	push	r12
    5152:	df 92       	push	r13
    5154:	ef 92       	push	r14
    5156:	ff 92       	push	r15
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	cd b7       	in	r28, 0x3d	; 61
    5162:	de b7       	in	r29, 0x3e	; 62
    5164:	ca 1b       	sub	r28, r26
    5166:	db 0b       	sbc	r29, r27
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	f8 94       	cli
    516c:	de bf       	out	0x3e, r29	; 62
    516e:	0f be       	out	0x3f, r0	; 63
    5170:	cd bf       	out	0x3d, r28	; 61
    5172:	09 94       	ijmp

00005174 <__epilogue_restores__>:
    5174:	2a 88       	ldd	r2, Y+18	; 0x12
    5176:	39 88       	ldd	r3, Y+17	; 0x11
    5178:	48 88       	ldd	r4, Y+16	; 0x10
    517a:	5f 84       	ldd	r5, Y+15	; 0x0f
    517c:	6e 84       	ldd	r6, Y+14	; 0x0e
    517e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5180:	8c 84       	ldd	r8, Y+12	; 0x0c
    5182:	9b 84       	ldd	r9, Y+11	; 0x0b
    5184:	aa 84       	ldd	r10, Y+10	; 0x0a
    5186:	b9 84       	ldd	r11, Y+9	; 0x09
    5188:	c8 84       	ldd	r12, Y+8	; 0x08
    518a:	df 80       	ldd	r13, Y+7	; 0x07
    518c:	ee 80       	ldd	r14, Y+6	; 0x06
    518e:	fd 80       	ldd	r15, Y+5	; 0x05
    5190:	0c 81       	ldd	r16, Y+4	; 0x04
    5192:	1b 81       	ldd	r17, Y+3	; 0x03
    5194:	aa 81       	ldd	r26, Y+2	; 0x02
    5196:	b9 81       	ldd	r27, Y+1	; 0x01
    5198:	ce 0f       	add	r28, r30
    519a:	d1 1d       	adc	r29, r1
    519c:	0f b6       	in	r0, 0x3f	; 63
    519e:	f8 94       	cli
    51a0:	de bf       	out	0x3e, r29	; 62
    51a2:	0f be       	out	0x3f, r0	; 63
    51a4:	cd bf       	out	0x3d, r28	; 61
    51a6:	ed 01       	movw	r28, r26
    51a8:	08 95       	ret

000051aa <_exit>:
    51aa:	f8 94       	cli

000051ac <__stop_program>:
    51ac:	ff cf       	rjmp	.-2      	; 0x51ac <__stop_program>
