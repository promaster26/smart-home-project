
Saif_9_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  00007aa8  00007b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800206  00800206  00007ce2  2**0
                  ALLOC
  3 .stab         00007848  00000000  00000000  00007ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a18  00000000  00000000  0000f52c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00011f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000120e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000122d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000146e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00015a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00016c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00016e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000170f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_1>
       8:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__vector_2>
       c:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__vector_10>
      2c:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fa e7       	ldi	r31, 0x7A	; 122
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 3c 	call	0x7944	; 0x7944 <main>
      8a:	0c 94 52 3d 	jmp	0x7aa4	; 0x7aa4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ed       	ldi	r26, 0xD5	; 213
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 3d 	jmp	0x7a4e	; 0x7a4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 3d 	jmp	0x7a4e	; 0x7a4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ed       	ldi	r24, 0xD5	; 213
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 ed       	ldi	r22, 0xD5	; 213
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 3d 	jmp	0x7a4e	; 0x7a4e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 3d 	jmp	0x7a4e	; 0x7a4e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 3d 	jmp	0x7a4e	; 0x7a4e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 3d 	jmp	0x7a56	; 0x7a56 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 3d 	jmp	0x7a8e	; 0x7a8e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 52       	subi	r30, 0x23	; 35
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TMU_CreateTask>:
static TCB_t Tasks_Arr[TMU_Tasks_Num] =
{
{ NULL } };

void TMU_CreateTask(void (*Copy_ptr_Func), u16 Copy_Periodicity,u8 Copy_Priority)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TMU_CreateTask+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <TMU_CreateTask+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	7c 83       	std	Y+4, r23	; 0x04
     e42:	6b 83       	std	Y+3, r22	; 0x03
     e44:	4d 83       	std	Y+5, r20	; 0x05
	if (Tasks_Arr[Copy_Priority].Pftask == NULL)
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	c9 01       	movw	r24, r18
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	fc 01       	movw	r30, r24
     e5c:	ea 5f       	subi	r30, 0xFA	; 250
     e5e:	fd 4f       	sbci	r31, 0xFD	; 253
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	81 f5       	brne	.+96     	; 0xec8 <TMU_CreateTask+0x9a>
	{
		Tasks_Arr[Copy_Priority].Pftask = Copy_ptr_Func;
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	49 81       	ldd	r20, Y+1	; 0x01
     e70:	5a 81       	ldd	r21, Y+2	; 0x02
     e72:	c9 01       	movw	r24, r18
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	fc 01       	movw	r30, r24
     e82:	ea 5f       	subi	r30, 0xFA	; 250
     e84:	fd 4f       	sbci	r31, 0xFD	; 253
     e86:	51 83       	std	Z+1, r21	; 0x01
     e88:	40 83       	st	Z, r20
		Tasks_Arr[Copy_Priority].Periodicity = Copy_Periodicity;
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	c9 01       	movw	r24, r18
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	fc 01       	movw	r30, r24
     ea0:	e8 5f       	subi	r30, 0xF8	; 248
     ea2:	fd 4f       	sbci	r31, 0xFD	; 253
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	80 83       	st	Z, r24
		Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	c9 01       	movw	r24, r18
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	fc 01       	movw	r30, r24
     ec2:	e6 5f       	subi	r30, 0xF6	; 246
     ec4:	fd 4f       	sbci	r31, 0xFD	; 253
     ec6:	10 82       	st	Z, r1
		
	}
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <TMU_Delete_Task>:

void TMU_Delete_Task(u8 Copy_Priority)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Pftask = NULL;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	c9 01       	movw	r24, r18
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	82 0f       	add	r24, r18
     ef6:	93 1f       	adc	r25, r19
     ef8:	fc 01       	movw	r30, r24
     efa:	ea 5f       	subi	r30, 0xFA	; 250
     efc:	fd 4f       	sbci	r31, 0xFD	; 253
     efe:	11 82       	std	Z+1, r1	; 0x01
     f00:	10 82       	st	Z, r1
}
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <TMU_Suspend_Task>:

void TMU_Suspend_Task(u8 Copy_Priority)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Suspended;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	c9 01       	movw	r24, r18
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	fc 01       	movw	r30, r24
     f2c:	e6 5f       	subi	r30, 0xF6	; 246
     f2e:	fd 4f       	sbci	r31, 0xFD	; 253
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 83       	st	Z, r24
}
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <TMU_Resume_Task>:

void TMU_Resume_Task(u8 Copy_Priority)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	89 83       	std	Y+1, r24	; 0x01
	Tasks_Arr[Copy_Priority].Task_State = Task_Resumed;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	c9 01       	movw	r24, r18
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	82 0f       	add	r24, r18
     f5a:	93 1f       	adc	r25, r19
     f5c:	fc 01       	movw	r30, r24
     f5e:	e6 5f       	subi	r30, 0xF6	; 246
     f60:	fd 4f       	sbci	r31, 0xFD	; 253
     f62:	10 82       	st	Z, r1
}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TMU_Start_Scheduler>:

void TMU_Start_Scheduler(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	27 97       	sbiw	r28, 0x07	; 7
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
			.GPT_Timer = GPT_Timer0, 
			.GPT_WG_Mode = GPT_CTC,
			.GPT_Prescaler = GPT_Prescaler_64 ,
			.GPT_COM_Value = 125, 
			.GPT_OVF_CBF = Scheduler
		};
     f80:	87 e0       	ldi	r24, 0x07	; 7
     f82:	fe 01       	movw	r30, r28
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	df 01       	movw	r26, r30
     f88:	98 2f       	mov	r25, r24
     f8a:	1d 92       	st	X+, r1
     f8c:	9a 95       	dec	r25
     f8e:	e9 f7       	brne	.-6      	; 0xf8a <TMU_Start_Scheduler+0x1e>
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	8b 83       	std	Y+3, r24	; 0x03
     f98:	8d e7       	ldi	r24, 0x7D	; 125
     f9a:	8d 83       	std	Y+5, r24	; 0x05
     f9c:	81 ee       	ldi	r24, 0xE1	; 225
     f9e:	97 e0       	ldi	r25, 0x07	; 7
     fa0:	9f 83       	std	Y+7, r25	; 0x07
     fa2:	8e 83       	std	Y+6, r24	; 0x06
		
	  GPT_Init(&Timer0);
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPT_Init>


	G_INT_Enable();
     fac:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
}
     fb0:	27 96       	adiw	r28, 0x07	; 7
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <Scheduler>:

void Scheduler(void)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Counter = 0;
     fcc:	19 82       	std	Y+1, r1	; 0x01
	static u16 Local_Index = 0;
	Local_Index++;
     fce:	80 91 15 02 	lds	r24, 0x0215
     fd2:	90 91 16 02 	lds	r25, 0x0216
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 16 02 	sts	0x0216, r25
     fdc:	80 93 15 02 	sts	0x0215, r24

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	4e c0       	rjmp	.+156    	; 0x1080 <Scheduler+0xbe>
	{

		if (Tasks_Arr[Local_Counter].Pftask != NULL)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	c9 01       	movw	r24, r18
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	fc 01       	movw	r30, r24
     ffa:	ea 5f       	subi	r30, 0xFA	; 250
     ffc:	fd 4f       	sbci	r31, 0xFD	; 253
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	d1 f1       	breq	.+116    	; 0x107a <Scheduler+0xb8>
		{
			if (Tasks_Arr[Local_Counter].Task_State == Task_Resumed)
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	c9 01       	movw	r24, r18
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	fc 01       	movw	r30, r24
    101c:	e6 5f       	subi	r30, 0xF6	; 246
    101e:	fd 4f       	sbci	r31, 0xFD	; 253
    1020:	80 81       	ld	r24, Z
    1022:	88 23       	and	r24, r24
    1024:	51 f5       	brne	.+84     	; 0x107a <Scheduler+0xb8>
			{	
				if (Local_Index % Tasks_Arr[Local_Counter].Periodicity == 0)
    1026:	40 91 15 02 	lds	r20, 0x0215
    102a:	50 91 16 02 	lds	r21, 0x0216
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	c9 01       	movw	r24, r18
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	fc 01       	movw	r30, r24
    1044:	e8 5f       	subi	r30, 0xF8	; 248
    1046:	fd 4f       	sbci	r31, 0xFD	; 253
    1048:	20 81       	ld	r18, Z
    104a:	31 81       	ldd	r19, Z+1	; 0x01
    104c:	ca 01       	movw	r24, r20
    104e:	b9 01       	movw	r22, r18
    1050:	0e 94 ca 3c 	call	0x7994	; 0x7994 <__udivmodhi4>
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	89 f4       	brne	.+34     	; 0x107a <Scheduler+0xb8>
				{
					Tasks_Arr[Local_Counter].Pftask();
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	c9 01       	movw	r24, r18
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	fc 01       	movw	r30, r24
    106e:	ea 5f       	subi	r30, 0xFA	; 250
    1070:	fd 4f       	sbci	r31, 0xFD	; 253
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	09 95       	icall
{
	u8 Local_Counter = 0;
	static u16 Local_Index = 0;
	Local_Index++;

	for (Local_Counter = 0; Local_Counter < TMU_Tasks_Num; Local_Counter++)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	08 f4       	brcc	.+2      	; 0x1088 <Scheduler+0xc6>
    1086:	ae cf       	rjmp	.-164    	; 0xfe4 <Scheduler+0x22>
					Tasks_Arr[Local_Counter].Pftask();
				}
		}
	}
}
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <arrayToNum>:
#include"../HAL/EEPROM/EEPROM_Interface.h"
#include"../MCAL/DIO/DIO_Interface.h"
#include"../HAL/LCD/LCD_interface.h"

u16 arrayToNum(u16* arr, u16 length)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	28 97       	sbiw	r28, 0x08	; 8
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	78 87       	std	Y+8, r23	; 0x08
    10aa:	6f 83       	std	Y+7, r22	; 0x07
	u16 num = 0;
    10ac:	1c 82       	std	Y+4, r1	; 0x04
    10ae:	1b 82       	std	Y+3, r1	; 0x03
	for (u16 i = 0; i < length; i++)
    10b0:	1a 82       	std	Y+2, r1	; 0x02
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	22 c0       	rjmp	.+68     	; 0x10fa <arrayToNum+0x6a>
	{
		num = num * 10 + arr[i];
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	9c 01       	movw	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	c9 01       	movw	r24, r18
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	a9 01       	movw	r20, r18
    10cc:	48 0f       	add	r20, r24
    10ce:	59 1f       	adc	r21, r25
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	9c 01       	movw	r18, r24
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	fc 01       	movw	r30, r24
    10e0:	e2 0f       	add	r30, r18
    10e2:	f3 1f       	adc	r31, r19
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	84 0f       	add	r24, r20
    10ea:	95 1f       	adc	r25, r21
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
#include"../HAL/LCD/LCD_interface.h"

u16 arrayToNum(u16* arr, u16 length)
{
	u16 num = 0;
	for (u16 i = 0; i < length; i++)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	29 81       	ldd	r18, Y+1	; 0x01
    10fc:	3a 81       	ldd	r19, Y+2	; 0x02
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	98 85       	ldd	r25, Y+8	; 0x08
    1102:	28 17       	cp	r18, r24
    1104:	39 07       	cpc	r19, r25
    1106:	b8 f2       	brcs	.-82     	; 0x10b6 <arrayToNum+0x26>
	{
		num = num * 10 + arr[i];
	}
	return num;
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    110c:	28 96       	adiw	r28, 0x08	; 8
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <Pass>:
void Pass(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	ed 97       	sbiw	r28, 0x3d	; 61
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
	u16 Pass;
	LCD_Init();
    1132:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <LCD_Init>

	u16 num;
	u8 Flag, i;
	u16 MultiArr[4] =
	{ 1000, 100, 10, 1 };
    1136:	ae 01       	movw	r20, r28
    1138:	4f 5e       	subi	r20, 0xEF	; 239
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	5d ab       	std	Y+53, r21	; 0x35
    113e:	4c ab       	std	Y+52, r20	; 0x34
    1140:	8d ef       	ldi	r24, 0xFD	; 253
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	9f ab       	std	Y+55, r25	; 0x37
    1146:	8e ab       	std	Y+54, r24	; 0x36
    1148:	98 e0       	ldi	r25, 0x08	; 8
    114a:	98 af       	std	Y+56, r25	; 0x38
    114c:	ae a9       	ldd	r26, Y+54	; 0x36
    114e:	bf a9       	ldd	r27, Y+55	; 0x37
    1150:	0c 90       	ld	r0, X
    1152:	ee a9       	ldd	r30, Y+54	; 0x36
    1154:	ff a9       	ldd	r31, Y+55	; 0x37
    1156:	31 96       	adiw	r30, 0x01	; 1
    1158:	ff ab       	std	Y+55, r31	; 0x37
    115a:	ee ab       	std	Y+54, r30	; 0x36
    115c:	ac a9       	ldd	r26, Y+52	; 0x34
    115e:	bd a9       	ldd	r27, Y+53	; 0x35
    1160:	0c 92       	st	X, r0
    1162:	ec a9       	ldd	r30, Y+52	; 0x34
    1164:	fd a9       	ldd	r31, Y+53	; 0x35
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	fd ab       	std	Y+53, r31	; 0x35
    116a:	ec ab       	std	Y+52, r30	; 0x34
    116c:	f8 ad       	ldd	r31, Y+56	; 0x38
    116e:	f1 50       	subi	r31, 0x01	; 1
    1170:	f8 af       	std	Y+56, r31	; 0x38
    1172:	48 ad       	ldd	r20, Y+56	; 0x38
    1174:	44 23       	and	r20, r20
    1176:	51 f7       	brne	.-44     	; 0x114c <Pass+0x2e>
			.KP_Row3_PORT = DIO_u8PORTA, .KP_Row4_PORT = DIO_u8PORTA,
			.KP_Colum1_PIN = DIO_u8PIN0, .KP_Colum2_PIN = DIO_u8PIN1,
			.KP_Colum3_PIN = DIO_u8PIN2,
			.KP_Row1_PIN =
			DIO_u8PIN4, .KP_Row2_PIN = DIO_u8PIN5, .KP_Row3_PIN = DIO_u8PIN6,
			.KP_Row4_PIN = DIO_u8PIN7 };
    1178:	80 e1       	ldi	r24, 0x10	; 16
    117a:	fe 01       	movw	r30, r28
    117c:	79 96       	adiw	r30, 0x19	; 25
    117e:	df 01       	movw	r26, r30
    1180:	48 2f       	mov	r20, r24
    1182:	1d 92       	st	X+, r1
    1184:	4a 95       	dec	r20
    1186:	e9 f7       	brne	.-6      	; 0x1182 <Pass+0x64>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	8a a3       	std	Y+34, r24	; 0x22
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	8b a3       	std	Y+35, r24	; 0x23
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	8d a3       	std	Y+37, r24	; 0x25
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	8e a3       	std	Y+38, r24	; 0x26
    1198:	86 e0       	ldi	r24, 0x06	; 6
    119a:	8f a3       	std	Y+39, r24	; 0x27
    119c:	87 e0       	ldi	r24, 0x07	; 7
    119e:	88 a7       	std	Y+40, r24	; 0x28
	Init_KP(&KP1);
    11a0:	ce 01       	movw	r24, r28
    11a2:	49 96       	adiw	r24, 0x19	; 25
    11a4:	0e 94 47 3a 	call	0x748e	; 0x748e <Init_KP>

	LCD_GoToWriteString(0, 4, "WELCOME");
    11a8:	20 e6       	ldi	r18, 0x60	; 96
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	64 e0       	ldi	r22, 0x04	; 4
    11b0:	a9 01       	movw	r20, r18
    11b2:	0e 94 98 39 	call	0x7330	; 0x7330 <LCD_GoToWriteString>
	LCD_GoToWriteString(1, 0, "Set Password:");
    11b6:	28 e6       	ldi	r18, 0x68	; 104
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	0e 94 98 39 	call	0x7330	; 0x7330 <LCD_GoToWriteString>
    11c4:	26 c0       	rjmp	.+76     	; 0x1212 <Pass+0xf4>
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <Pass+0xb8>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    11cc:	ce 01       	movw	r24, r28
    11ce:	49 96       	adiw	r24, 0x19	; 25
    11d0:	0e 94 a3 3a 	call	0x7546	; 0x7546 <Read_KP>
    11d4:	8d 83       	std	Y+5, r24	; 0x05
	LCD_GoToWriteString(0, 4, "WELCOME");
	LCD_GoToWriteString(1, 0, "Set Password:");
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	8f 3f       	cpi	r24, 0xFF	; 255
    11da:	c1 f3       	breq	.-16     	; 0x11cc <Pass+0xae>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr[Flag] = key_pressed;
    11dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	48 2f       	mov	r20, r24
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	fc 01       	movw	r30, r24
    11f6:	70 96       	adiw	r30, 0x10	; 16
    11f8:	51 83       	std	Z+1, r21	; 0x01
    11fa:	40 83       	st	Z, r20
		num = arrayToNum(MultiArr, 4);
    11fc:	ce 01       	movw	r24, r28
    11fe:	41 96       	adiw	r24, 0x11	; 17
    1200:	64 e0       	ldi	r22, 0x04	; 4
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	0e 94 48 08 	call	0x1090	; 0x1090 <arrayToNum>
    1208:	9e 87       	std	Y+14, r25	; 0x0e
    120a:	8d 87       	std	Y+13, r24	; 0x0d

		Flag++;
    120c:	8c 85       	ldd	r24, Y+12	; 0x0c
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	8c 87       	std	Y+12, r24	; 0x0c
			.KP_Row4_PIN = DIO_u8PIN7 };
	Init_KP(&KP1);

	LCD_GoToWriteString(0, 4, "WELCOME");
	LCD_GoToWriteString(1, 0, "Set Password:");
	while (Flag < 4) //loop till the user finish inserting the pass
    1212:	8c 85       	ldd	r24, Y+12	; 0x0c
    1214:	84 30       	cpi	r24, 0x04	; 4
    1216:	b8 f2       	brcs	.-82     	; 0x11c6 <Pass+0xa8>
		num = arrayToNum(MultiArr, 4);

		Flag++;

	}
	LCD_ClearDisplay();
    1218:	0e 94 65 36 	call	0x6cca	; 0x6cca <LCD_ClearDisplay>
	Pass = num;
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	98 8b       	std	Y+16, r25	; 0x10
    1222:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_GoToWriteString(0, 1, "Password Saved!");
    1224:	26 e7       	ldi	r18, 0x76	; 118
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	a9 01       	movw	r20, r18
    122e:	0e 94 98 39 	call	0x7330	; 0x7330 <LCD_GoToWriteString>

	u8 first4digits = Pass / 100;
    1232:	8f 85       	ldd	r24, Y+15	; 0x0f
    1234:	98 89       	ldd	r25, Y+16	; 0x10
    1236:	24 e6       	ldi	r18, 0x64	; 100
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	b9 01       	movw	r22, r18
    123c:	0e 94 ca 3c 	call	0x7994	; 0x7994 <__udivmodhi4>
    1240:	cb 01       	movw	r24, r22
    1242:	89 a7       	std	Y+41, r24	; 0x29
	u8 last4digits = Pass % 100;
    1244:	8f 85       	ldd	r24, Y+15	; 0x0f
    1246:	98 89       	ldd	r25, Y+16	; 0x10
    1248:	24 e6       	ldi	r18, 0x64	; 100
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	b9 01       	movw	r22, r18
    124e:	0e 94 ca 3c 	call	0x7994	; 0x7994 <__udivmodhi4>
    1252:	8a 87       	std	Y+10, r24	; 0x0a

	TWI_voidMaterInit(0x01);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_voidMaterInit>
	EEPROM_voidSendData(0x1234, first4digits);
    125a:	29 a5       	ldd	r18, Y+41	; 0x29
    125c:	84 e3       	ldi	r24, 0x34	; 52
    125e:	92 e1       	ldi	r25, 0x12	; 18
    1260:	62 2f       	mov	r22, r18
    1262:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <EEPROM_voidSendData>
	EEPROM_voidRecieveData(0x1234, &first4digits);
    1266:	9e 01       	movw	r18, r28
    1268:	27 5d       	subi	r18, 0xD7	; 215
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	84 e3       	ldi	r24, 0x34	; 52
    126e:	92 e1       	ldi	r25, 0x12	; 18
    1270:	b9 01       	movw	r22, r18
    1272:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <EEPROM_voidRecieveData>
	EEPROM_voidSendData(0x1245, last4digits);
    1276:	85 e4       	ldi	r24, 0x45	; 69
    1278:	92 e1       	ldi	r25, 0x12	; 18
    127a:	6a 85       	ldd	r22, Y+10	; 0x0a
    127c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <EEPROM_voidSendData>
	EEPROM_voidRecieveData(0x1245, last4digits);
    1280:	8a 85       	ldd	r24, Y+10	; 0x0a
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9c 01       	movw	r18, r24
    1288:	85 e4       	ldi	r24, 0x45	; 69
    128a:	92 e1       	ldi	r25, 0x12	; 18
    128c:	b9 01       	movw	r22, r18
    128e:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <EEPROM_voidRecieveData>
//User Compare Password
	
	LCD_GoToWriteString(0, 0, " Enter Password");
    1292:	26 e8       	ldi	r18, 0x86	; 134
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	0e 94 98 39 	call	0x7330	; 0x7330 <LCD_GoToWriteString>
Flag = 0;
    12a0:	1c 86       	std	Y+12, r1	; 0x0c
u16 com_num;
u16 MultiArr2[4] =
	{ 1000, 100, 10, 1 };
    12a2:	ce 01       	movw	r24, r28
    12a4:	8a 96       	adiw	r24, 0x2a	; 42
    12a6:	9a af       	std	Y+58, r25	; 0x3a
    12a8:	89 af       	std	Y+57, r24	; 0x39
    12aa:	a5 ef       	ldi	r26, 0xF5	; 245
    12ac:	b1 e0       	ldi	r27, 0x01	; 1
    12ae:	bc af       	std	Y+60, r27	; 0x3c
    12b0:	ab af       	std	Y+59, r26	; 0x3b
    12b2:	b8 e0       	ldi	r27, 0x08	; 8
    12b4:	bd af       	std	Y+61, r27	; 0x3d
    12b6:	eb ad       	ldd	r30, Y+59	; 0x3b
    12b8:	fc ad       	ldd	r31, Y+60	; 0x3c
    12ba:	00 80       	ld	r0, Z
    12bc:	4b ad       	ldd	r20, Y+59	; 0x3b
    12be:	5c ad       	ldd	r21, Y+60	; 0x3c
    12c0:	4f 5f       	subi	r20, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	5c af       	std	Y+60, r21	; 0x3c
    12c6:	4b af       	std	Y+59, r20	; 0x3b
    12c8:	a9 ad       	ldd	r26, Y+57	; 0x39
    12ca:	ba ad       	ldd	r27, Y+58	; 0x3a
    12cc:	0c 92       	st	X, r0
    12ce:	e9 ad       	ldd	r30, Y+57	; 0x39
    12d0:	fa ad       	ldd	r31, Y+58	; 0x3a
    12d2:	31 96       	adiw	r30, 0x01	; 1
    12d4:	fa af       	std	Y+58, r31	; 0x3a
    12d6:	e9 af       	std	Y+57, r30	; 0x39
    12d8:	fd ad       	ldd	r31, Y+61	; 0x3d
    12da:	f1 50       	subi	r31, 0x01	; 1
    12dc:	fd af       	std	Y+61, r31	; 0x3d
    12de:	4d ad       	ldd	r20, Y+61	; 0x3d
    12e0:	44 23       	and	r20, r20
    12e2:	49 f7       	brne	.-46     	; 0x12b6 <Pass+0x198>
    12e4:	26 c0       	rjmp	.+76     	; 0x1332 <Pass+0x214>
u8 Num_of_tries;
u8 Pass_Correct;
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	8c 83       	std	Y+4, r24	; 0x04
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <Pass+0x1d8>
		while (key_pressed == 0xFF) //repeat till the user press any key
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    12ec:	ce 01       	movw	r24, r28
    12ee:	49 96       	adiw	r24, 0x19	; 25
    12f0:	0e 94 a3 3a 	call	0x7546	; 0x7546 <Read_KP>
    12f4:	8c 83       	std	Y+4, r24	; 0x04
u8 Num_of_tries;
u8 Pass_Correct;
	while (Flag < 4) //loop till the user finish inserting the pass
	{
		u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == 0xFF) //repeat till the user press any key
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	c1 f3       	breq	.-16     	; 0x12ec <Pass+0x1ce>
		{

			key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

		}
		MultiArr2[Flag] = key_pressed;
    12fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	48 2f       	mov	r20, r24
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	fc 01       	movw	r30, r24
    1316:	b9 96       	adiw	r30, 0x29	; 41
    1318:	51 83       	std	Z+1, r21	; 0x01
    131a:	40 83       	st	Z, r20
		com_num = arrayToNum(MultiArr2, 4);
    131c:	ce 01       	movw	r24, r28
    131e:	8a 96       	adiw	r24, 0x2a	; 42
    1320:	64 e0       	ldi	r22, 0x04	; 4
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	0e 94 48 08 	call	0x1090	; 0x1090 <arrayToNum>
    1328:	99 87       	std	Y+9, r25	; 0x09
    132a:	88 87       	std	Y+8, r24	; 0x08

		Flag++;
    132c:	8c 85       	ldd	r24, Y+12	; 0x0c
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	8c 87       	std	Y+12, r24	; 0x0c
u16 com_num;
u16 MultiArr2[4] =
	{ 1000, 100, 10, 1 };
u8 Num_of_tries;
u8 Pass_Correct;
	while (Flag < 4) //loop till the user finish inserting the pass
    1332:	8c 85       	ldd	r24, Y+12	; 0x0c
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	b8 f2       	brcs	.-82     	; 0x12e6 <Pass+0x1c8>
		com_num = arrayToNum(MultiArr2, 4);

		Flag++;

	}
	LCD_ClearDisplay();
    1338:	0e 94 65 36 	call	0x6cca	; 0x6cca <LCD_ClearDisplay>

	for(i = 0 ; i < 3 ; i++)
    133c:	1b 86       	std	Y+11, r1	; 0x0b
    133e:	66 c0       	rjmp	.+204    	; 0x140c <Pass+0x2ee>
	{
		
		while (Flag < 4) //loop till the user finish inserting the pass
			{
				u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <Pass+0x232>
				while (key_pressed == 0xFF) //repeat till the user press any key
				{

					key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed
    1346:	ce 01       	movw	r24, r28
    1348:	49 96       	adiw	r24, 0x19	; 25
    134a:	0e 94 a3 3a 	call	0x7546	; 0x7546 <Read_KP>
    134e:	89 83       	std	Y+1, r24	; 0x01
	{
		
		while (Flag < 4) //loop till the user finish inserting the pass
			{
				u8 key_pressed = 0xFF; //return the variable that holds the pressed key from keypad to its initial value
				while (key_pressed == 0xFF) //repeat till the user press any key
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	c1 f3       	breq	.-16     	; 0x1346 <Pass+0x228>
				{

					key_pressed = Read_KP(&KP1); //if the user pressed any button in keypad save the value in key_pressed

				}
				MultiArr2[Flag] = key_pressed;
    1356:	8c 85       	ldd	r24, Y+12	; 0x0c
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	48 2f       	mov	r20, r24
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	82 0f       	add	r24, r18
    136c:	93 1f       	adc	r25, r19
    136e:	fc 01       	movw	r30, r24
    1370:	b9 96       	adiw	r30, 0x29	; 41
    1372:	51 83       	std	Z+1, r21	; 0x01
    1374:	40 83       	st	Z, r20
				com_num = arrayToNum(MultiArr2, 4);
    1376:	ce 01       	movw	r24, r28
    1378:	8a 96       	adiw	r24, 0x2a	; 42
    137a:	64 e0       	ldi	r22, 0x04	; 4
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 48 08 	call	0x1090	; 0x1090 <arrayToNum>
    1382:	99 87       	std	Y+9, r25	; 0x09
    1384:	88 87       	std	Y+8, r24	; 0x08

				Flag++;
    1386:	8c 85       	ldd	r24, Y+12	; 0x0c
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	8c 87       	std	Y+12, r24	; 0x0c
	LCD_ClearDisplay();

	for(i = 0 ; i < 3 ; i++)
	{
		
		while (Flag < 4) //loop till the user finish inserting the pass
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	b8 f2       	brcs	.-82     	; 0x1340 <Pass+0x222>
				com_num = arrayToNum(MultiArr2, 4);

				Flag++;

			}
		Flag = 0;
    1392:	1c 86       	std	Y+12, r1	; 0x0c
			LCD_ClearDisplay();
    1394:	0e 94 65 36 	call	0x6cca	; 0x6cca <LCD_ClearDisplay>
		 u8 z,y;
		 u16 TotPass;

						EEPROM_voidRecieveData(0x1234, &z);
    1398:	9e 01       	movw	r18, r28
    139a:	2e 5c       	subi	r18, 0xCE	; 206
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	84 e3       	ldi	r24, 0x34	; 52
    13a0:	92 e1       	ldi	r25, 0x12	; 18
    13a2:	b9 01       	movw	r22, r18
    13a4:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <EEPROM_voidRecieveData>
						EEPROM_voidRecieveData(0x1245, &y);
    13a8:	9e 01       	movw	r18, r28
    13aa:	2d 5c       	subi	r18, 0xCD	; 205
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	85 e4       	ldi	r24, 0x45	; 69
    13b0:	92 e1       	ldi	r25, 0x12	; 18
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <EEPROM_voidRecieveData>
			TotPass = z*100 + y;
    13b8:	8a a9       	ldd	r24, Y+50	; 0x32
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	84 e6       	ldi	r24, 0x64	; 100
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	d9 01       	movw	r26, r18
    13c4:	a8 9f       	mul	r26, r24
    13c6:	90 01       	movw	r18, r0
    13c8:	a9 9f       	mul	r26, r25
    13ca:	30 0d       	add	r19, r0
    13cc:	b8 9f       	mul	r27, r24
    13ce:	30 0d       	add	r19, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	8b a9       	ldd	r24, Y+51	; 0x33
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	9b 83       	std	Y+3, r25	; 0x03
    13de:	8a 83       	std	Y+2, r24	; 0x02

		if(com_num==TotPass)
    13e0:	28 85       	ldd	r18, Y+8	; 0x08
    13e2:	39 85       	ldd	r19, Y+9	; 0x09
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <Pass+0x2da>
		{
			LCD_WriteString("PASSWORD CORRECT");
    13ee:	86 e9       	ldi	r24, 0x96	; 150
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 87 34 	call	0x690e	; 0x690e <LCD_WriteString>
    13f6:	0e c0       	rjmp	.+28     	; 0x1414 <Pass+0x2f6>
			break;
			//GREEN LED
		}
		else
		{
			LCD_WriteString("PLEASE TRY AGAIN");
    13f8:	87 ea       	ldi	r24, 0xA7	; 167
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 87 34 	call	0x690e	; 0x690e <LCD_WriteString>
			Num_of_tries++;
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	8f 83       	std	Y+7, r24	; 0x07
		Flag++;

	}
	LCD_ClearDisplay();

	for(i = 0 ; i < 3 ; i++)
    1406:	8b 85       	ldd	r24, Y+11	; 0x0b
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	8b 87       	std	Y+11, r24	; 0x0b
    140c:	8b 85       	ldd	r24, Y+11	; 0x0b
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	08 f4       	brcc	.+2      	; 0x1414 <Pass+0x2f6>
    1412:	bc cf       	rjmp	.-136    	; 0x138c <Pass+0x26e>
			Num_of_tries++;
			//RED LED TOG
		}
		
	}
	if(Num_of_tries == 3)
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	81 f4       	brne	.+32     	; 0x143a <Pass+0x31c>
	{
		LCD_ClearDisplay();
    141a:	0e 94 65 36 	call	0x6cca	; 0x6cca <LCD_ClearDisplay>
		LCD_GoToWriteString(0,0,"NO MORE TRIES");
    141e:	28 eb       	ldi	r18, 0xB8	; 184
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	0e 94 98 39 	call	0x7330	; 0x7330 <LCD_GoToWriteString>
		LCD_GoToWriteString(1,0,"ACCESS DENIED ");
    142c:	26 ec       	ldi	r18, 0xC6	; 198
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	0e 94 98 39 	call	0x7330	; 0x7330 <LCD_GoToWriteString>
		//RED LED
		//BUZZER
		//CALL EMERGENCY
	}
}
    143a:	ed 96       	adiw	r28, 0x3d	; 61
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <USART_voidInit>:
#include "USART_Interface.h"




void USART_voidInit(void){
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	USART_UCSRB_REG |= (1 << USART_UCSRB_RIXEN_BIT) | (1 << USART_UCSRB_TXEN_BIT);
    1456:	aa e2       	ldi	r26, 0x2A	; 42
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ea e2       	ldi	r30, 0x2A	; 42
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	88 61       	ori	r24, 0x18	; 24
    1462:	8c 93       	st	X, r24

	USART_UCSRC_REG = (1 <<USART_UCSRC_URSEL_BIT) | (0 << USART_UCSRC_UMSEL_BIT) | (0 << USART_UCSRC_UPM0_BIT)
    1464:	e0 e4       	ldi	r30, 0x40	; 64
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	86 e8       	ldi	r24, 0x86	; 134
    146a:	80 83       	st	Z, r24
			| (0 << USART_UCSRC_UPM1_BIT) | (0 << USART_UCSRC_USBS_BIT) | (1 << USART_UCSRC_UCSZ0_BIT)
			| (1 << USART_UCSRC_UCSZ1_BIT) | (0 << USART_UCSRB_UCSZ2_BIT);

	u8 Baud = 51;
    146c:	83 e3       	ldi	r24, 0x33	; 51
    146e:	89 83       	std	Y+1, r24	; 0x01
	USART_UBRRL_REG = Baud;
    1470:	e9 e2       	ldi	r30, 0x29	; 41
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	80 83       	st	Z, r24
	USART_UBRRH_REG = (Baud >> 8);
    1478:	e0 e4       	ldi	r30, 0x40	; 64
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	89 2f       	mov	r24, r25
    1484:	99 0f       	add	r25, r25
    1486:	99 0b       	sbc	r25, r25
    1488:	80 83       	st	Z, r24
}
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <USART_voidTransmit>:
void USART_voidTransmit(u8 Copy_u8Data){
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	0f 92       	push	r0
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	89 83       	std	Y+1, r24	; 0x01
while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_UDRE_BIT)==0){
    149e:	eb e2       	ldi	r30, 0x2B	; 43
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	82 95       	swap	r24
    14a6:	86 95       	lsr	r24
    14a8:	87 70       	andi	r24, 0x07	; 7
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	a1 f3       	breq	.-24     	; 0x149e <USART_voidTransmit+0xc>
};
USART_UDR_REG=Copy_u8Data;
    14b6:	ec e2       	ldi	r30, 0x2C	; 44
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	80 83       	st	Z, r24
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <USART_voidRecieve>:
void USART_voidRecieve(u8 *Copy_ptu8DataSent){
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <USART_voidRecieve+0x6>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(USART_UCSRA_REG,USART_UCSRA_RXC_BIT)==0){
    14d4:	eb e2       	ldi	r30, 0x2B	; 43
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 23       	and	r24, r24
    14dc:	dc f7       	brge	.-10     	; 0x14d4 <USART_voidRecieve+0xe>

	}

	*Copy_ptu8DataSent=USART_UDR_REG;
    14de:	ec e2       	ldi	r30, 0x2C	; 44
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	e9 81       	ldd	r30, Y+1	; 0x01
    14e6:	fa 81       	ldd	r31, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <USART_voidSendString>:
void USART_voidSendString(u8* Copy_pu8String)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <USART_voidSendString+0x6>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <USART_voidSendString+0x30>

	u8 i;
	while (Copy_pu8String[i] != '\0')
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	fc 01       	movw	r30, r24
    1512:	e2 0f       	add	r30, r18
    1514:	f3 1f       	adc	r31, r19
    1516:	90 81       	ld	r25, Z
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	89 2f       	mov	r24, r25
    1520:	0e 94 49 0a 	call	0x1492	; 0x1492 <USART_voidTransmit>
}
void USART_voidSendString(u8* Copy_pu8String)
{

	u8 i;
	while (Copy_pu8String[i] != '\0')
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	fc 01       	movw	r30, r24
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	80 81       	ld	r24, Z
    1536:	88 23       	and	r24, r24
    1538:	31 f7       	brne	.-52     	; 0x1506 <USART_voidSendString+0x12>
	    {
		USART_voidTransmit(Copy_pu8String[i++]);
	    }
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <TWI_voidMaterInit>:



/*Initialize Master*/
void TWI_voidMaterInit(u8 Copy_u8SlaveAddress)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	/*1-Choose Prescaler*/
	TWI_TWBR_REG=(u8)(((FCPU/SCL)-16)/2);
    1552:	e0 e2       	ldi	r30, 0x20	; 32
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	80 83       	st	Z, r24
	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    155a:	e2 e2       	ldi	r30, 0x22	; 34
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	88 0f       	add	r24, r24
    1562:	80 83       	st	Z, r24
 	 /*3-enable*/
 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1564:	a6 e5       	ldi	r26, 0x56	; 86
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e6 e5       	ldi	r30, 0x56	; 86
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	8c 93       	st	X, r24
}
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <TWI_voidSlaveInit>:
/*Initialize Slave*/
void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01

	/*2-Assign Slave Address*/
 TWI_TWAR_REG= (Copy_u8SlaveAddress<<1);
    1586:	e2 e2       	ldi	r30, 0x22	; 34
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	88 0f       	add	r24, r24
    158e:	80 83       	st	Z, r24
 	 /*3-enable*/
 	 SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    1590:	a6 e5       	ldi	r26, 0x56	; 86
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e6 e5       	ldi	r30, 0x56	; 86
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	8c 93       	st	X, r24
}
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <TWI_voidStartCond>:
/*As Master Start Condition*/
void TWI_voidStartCond(void){
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    15ae:	a6 e5       	ldi	r26, 0x56	; 86
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e6 e5       	ldi	r30, 0x56	; 86
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 7e       	andi	r24, 0xEF	; 239
    15ba:	8c 93       	st	X, r24
		/*1-Start Condition*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    15bc:	a6 e5       	ldi	r26, 0x56	; 86
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e6 e5       	ldi	r30, 0x56	; 86
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 62       	ori	r24, 0x20	; 32
    15c8:	8c 93       	st	X, r24
		/*2-CLEAR TWINT FLAG TO START OPERATION*/
		SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    15ca:	a6 e5       	ldi	r26, 0x56	; 86
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e6 e5       	ldi	r30, 0x56	; 86
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	8c 93       	st	X, r24
		/*3-Wait until flag became 1*/
		while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    15d8:	e6 e5       	ldi	r30, 0x56	; 86
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	88 23       	and	r24, r24
    15e0:	dc f7       	brge	.-10     	; 0x15d8 <TWI_voidStartCond+0x32>
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <TWI_voidSendSlaveAddressWithRead>:
/*As Master write Address on Bus*/
void TWI_voidSendSlaveAddressWithRead(u8 Copy_u8SlaveAddressToSend){
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	0f 92       	push	r0
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=((Copy_u8SlaveAddressToSend<<1) |0x01);
    15f4:	e3 e2       	ldi	r30, 0x23	; 35
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1606:	a6 e5       	ldi	r26, 0x56	; 86
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e6 e5       	ldi	r30, 0x56	; 86
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	80 68       	ori	r24, 0x80	; 128
    1612:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    1614:	e6 e5       	ldi	r30, 0x56	; 86
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	dc f7       	brge	.-10     	; 0x1614 <TWI_voidSendSlaveAddressWithRead+0x2c>
}
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <TWI_voidSendSlaveAddressWithWrite>:
void TWI_voidSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddressToSend){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Start Condition*/
	//CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
	/*1-Assign Slave address on data bus And setting bit to enable read*/
	TWI_TWDR_REG=(Copy_u8SlaveAddressToSend<<1);
    1632:	e3 e2       	ldi	r30, 0x23	; 35
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	88 0f       	add	r24, r24
    163a:	80 83       	st	Z, r24
	/*2-Clear Flag To Start Operation*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    163c:	a6 e5       	ldi	r26, 0x56	; 86
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e6 e5       	ldi	r30, 0x56	; 86
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 68       	ori	r24, 0x80	; 128
    1648:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    164a:	e6 e5       	ldi	r30, 0x56	; 86
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 23       	and	r24, r24
    1652:	dc f7       	brge	.-10     	; 0x164a <TWI_voidSendSlaveAddressWithWrite+0x24>
}
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <TWI_voidMasterWriteData>:
/*As Master Write Data On Bus*/
void TWI_voidMasterWriteData(u8 Copy_u8SentData){
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	0f 92       	push	r0
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	89 83       	std	Y+1, r24	; 0x01
	/*Assign Data to bus*/
	TWI_TWDR_REG=Copy_u8SentData;
    1668:	e3 e2       	ldi	r30, 0x23	; 35
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	80 83       	st	Z, r24
	/*Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    1670:	a6 e5       	ldi	r26, 0x56	; 86
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e6 e5       	ldi	r30, 0x56	; 86
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    167e:	e6 e5       	ldi	r30, 0x56	; 86
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 23       	and	r24, r24
    1686:	dc f7       	brge	.-10     	; 0x167e <TWI_voidMasterWriteData+0x22>
}
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <TWI_voidMasterReadData>:
/*As Master Read Data On Bus*/
void TWI_voidMasterReadData(u8 *Copy_u8ReceivedData){
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <TWI_voidMasterReadData+0x6>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	89 83       	std	Y+1, r24	; 0x01

	/*1Enable ACK*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    169e:	a6 e5       	ldi	r26, 0x56	; 86
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e6 e5       	ldi	r30, 0x56	; 86
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 64       	ori	r24, 0x40	; 64
    16aa:	8c 93       	st	X, r24
	/*2-Clear Flag and wait*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    16ac:	a6 e5       	ldi	r26, 0x56	; 86
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e6 e5       	ldi	r30, 0x56	; 86
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 68       	ori	r24, 0x80	; 128
    16b8:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
    16ba:	e6 e5       	ldi	r30, 0x56	; 86
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	88 23       	and	r24, r24
    16c2:	dc f7       	brge	.-10     	; 0x16ba <TWI_voidMasterReadData+0x2a>
	/*CHECK FOR ACK*/

	*Copy_u8ReceivedData=TWI_TWDR_REG;
    16c4:	e3 e2       	ldi	r30, 0x23	; 35
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	80 83       	st	Z, r24
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <TWI_voidStopCond>:
/*As Master Stop Condition*/
void TWI_voidStopCond(void){
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTA_BIT);
    16e2:	a6 e5       	ldi	r26, 0x56	; 86
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e6 e5       	ldi	r30, 0x56	; 86
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 7d       	andi	r24, 0xDF	; 223
    16ee:	8c 93       	st	X, r24
  
	/*1-Stop Condition*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWSTO_BIT);
    16f0:	a6 e5       	ldi	r26, 0x56	; 86
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e6 e5       	ldi	r30, 0x56	; 86
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 61       	ori	r24, 0x10	; 16
    16fc:	8c 93       	st	X, r24
	/*2-CLEAR TWINT FLAG TO START OPERATION*/
	SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    16fe:	a6 e5       	ldi	r26, 0x56	; 86
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e6 e5       	ldi	r30, 0x56	; 86
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 68       	ori	r24, 0x80	; 128
    170a:	8c 93       	st	X, r24
	/*3-Wait until flag became 1*/
//	while(GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT)==0);
	
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <TWI_GetStatus>:
u8   TWI_GetStatus(u8 Copy_u8Status)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
    /*Get status*/
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT);
    171e:	a6 e5       	ldi	r26, 0x56	; 86
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e6 e5       	ldi	r30, 0x56	; 86
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 68       	ori	r24, 0x80	; 128
    172a:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEA_BIT);
    172c:	a6 e5       	ldi	r26, 0x56	; 86
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e6 e5       	ldi	r30, 0x56	; 86
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 64       	ori	r24, 0x40	; 64
    1738:	8c 93       	st	X, r24
    SET_BIT(TWI_TWCR_REG,TWI_TWCR_TWEN_BIT);
    173a:	a6 e5       	ldi	r26, 0x56	; 86
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e6 e5       	ldi	r30, 0x56	; 86
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	84 60       	ori	r24, 0x04	; 4
    1746:	8c 93       	st	X, r24
    /*Busy wait for TWINT flag*/
    while(!GET_BIT(TWI_TWCR_REG,TWI_TWCR_TWINT_BIT));
    1748:	e6 e5       	ldi	r30, 0x56	; 86
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	88 23       	and	r24, r24
    1750:	dc f7       	brge	.-10     	; 0x1748 <TWI_GetStatus+0x36>
    while((TWI_TWSR_REG & 0xF8) != Copy_u8Status);
    1752:	e1 e2       	ldi	r30, 0x21	; 33
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9c 01       	movw	r18, r24
    175e:	28 7f       	andi	r18, 0xF8	; 248
    1760:	30 70       	andi	r19, 0x00	; 0
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	91 f7       	brne	.-28     	; 0x1752 <TWI_GetStatus+0x40>
    return TWI_TWDR_REG;
    176e:	e3 e2       	ldi	r30, 0x23	; 35
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
}
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <SPI_Init_Master>:
#include"../../MCAL/DIO/DIO_Interface.h"
#include"SPI_private.h"
#include"SPI_interface.h"

void SPI_Init_Master(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN5, DIO_u8PIN_OUTPUT); //MOSI
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	65 e0       	ldi	r22, 0x05	; 5
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN_INPUT); //MISO
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	66 e0       	ldi	r22, 0x06	; 6
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN7, DIO_u8PIN_OUTPUT); //SCK
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	67 e0       	ldi	r22, 0x07	; 7
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>

	SPCR_REG |= (Data_Order_Mode << SPCR_DORD) | (SPI_Master << SPCR_MSTR)
    17a2:	ad e2       	ldi	r26, 0x2D	; 45
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	ed e2       	ldi	r30, 0x2D	; 45
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	87 67       	ori	r24, 0x77	; 119
    17ae:	8c 93       	st	X, r24
			| (Clock_Polarity_Mode << SPCR_CPOL)
			| (Clock_Phase_Mode << SPCR_CPHA) | (Clock_Rate_Mode << SPCR_SPR0)
			| (SPI_Enable << SPCR_SPE);

	SPSR_REG |= SPI_Double_Speed_Status;
    17b0:	ae e2       	ldi	r26, 0x2E	; 46
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ee e2       	ldi	r30, 0x2E	; 46
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8c 93       	st	X, r24

}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <SPI_Init_Slave>:
void SPI_Init_Slave(void)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN5, DIO_u8PIN_INPUT); //MOSI
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	65 e0       	ldi	r22, 0x05	; 5
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN_OUTPUT); //MISO
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	66 e0       	ldi	r22, 0x06	; 6
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_u8PORTB, DIO_u8PIN7, DIO_u8PIN_INPUT); //SCK
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	67 e0       	ldi	r22, 0x07	; 7
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>

	SPCR_REG |= (Data_Order_Mode << SPCR_DORD) | (SPI_Slave << SPCR_MSTR)
    17e8:	ad e2       	ldi	r26, 0x2D	; 45
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ed e2       	ldi	r30, 0x2D	; 45
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	87 66       	ori	r24, 0x67	; 103
    17f4:	8c 93       	st	X, r24
			| (Clock_Polarity_Mode << SPCR_CPOL)
			| (Clock_Phase_Mode << SPCR_CPHA) | (Clock_Rate_Mode << SPCR_SPR0)
			| (SPI_Enable << SPCR_SPE);

	SPSR_REG |= SPI_Double_Speed_Status;
    17f6:	ae e2       	ldi	r26, 0x2E	; 46
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ee e2       	ldi	r30, 0x2E	; 46
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8c 93       	st	X, r24
}
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <SPI_Trancieve>:

void SPI_Trancieve(u8 Copy_Data_Sent, u8 * Copy_Data_Receieved)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <SPI_Trancieve+0x6>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	7b 83       	std	Y+3, r23	; 0x03
    1818:	6a 83       	std	Y+2, r22	; 0x02
	SPDR_REG = Copy_Data_Sent;
    181a:	ef e2       	ldi	r30, 0x2F	; 47
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	80 83       	st	Z, r24
	while (GET_BIT(SPSR_REG,SPSR_SPIF) == 0)
    1822:	ee e2       	ldi	r30, 0x2E	; 46
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	88 23       	and	r24, r24
    182a:	dc f7       	brge	.-10     	; 0x1822 <SPI_Trancieve+0x1a>
		; //until receive
	*Copy_Data_Receieved = SPDR_REG;
    182c:	ef e2       	ldi	r30, 0x2F	; 47
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	ea 81       	ldd	r30, Y+2	; 0x02
    1834:	fb 81       	ldd	r31, Y+3	; 0x03
    1836:	80 83       	st	Z, r24
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <PWM_Init>:
#include"PWM_Private.h"
#include"PWM_Interface.h"


void PWM_Init(PWM_stConfig *Copy_stConfig)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <PWM_Init+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_stConfig -> PWM_Timer == PWM_Timer_1)
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	80 81       	ld	r24, Z
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	09 f0       	breq	.+2      	; 0x185e <PWM_Init+0x1a>
    185c:	05 c1       	rjmp	.+522    	; 0x1a68 <PWM_Init+0x224>
	{
		if(Copy_stConfig -> PWM_WG_Mode == PWM_Fast)
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	09 f0       	breq	.+2      	; 0x186a <PWM_Init+0x26>
    1868:	7d c0       	rjmp	.+250    	; 0x1964 <PWM_Init+0x120>
		{
			CLR_BIT(PWM_TCCR1A_REG,PWM_TCCR1A_WGM10_BIT);
    186a:	af e4       	ldi	r26, 0x4F	; 79
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ef e4       	ldi	r30, 0x4F	; 79
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	8c 93       	st	X, r24
			SET_BIT(PWM_TCCR1A_REG,PWM_TCCR1A_WGM11_BIT);
    1878:	af e4       	ldi	r26, 0x4F	; 79
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e4       	ldi	r30, 0x4F	; 79
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	82 60       	ori	r24, 0x02	; 2
    1884:	8c 93       	st	X, r24
			SET_BIT(PWM_TCCR1B_REG,PWM_TCCR1B_WGM12_BIT);
    1886:	ae e4       	ldi	r26, 0x4E	; 78
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	ee e4       	ldi	r30, 0x4E	; 78
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	88 60       	ori	r24, 0x08	; 8
    1892:	8c 93       	st	X, r24
			SET_BIT(PWM_TCCR1B_REG,PWM_TCCR1B_WGM13_BIT);
    1894:	ae e4       	ldi	r26, 0x4E	; 78
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ee e4       	ldi	r30, 0x4E	; 78
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 61       	ori	r24, 0x10	; 16
    18a0:	8c 93       	st	X, r24
			
			PWM_TCCR1A_REG |= Copy_stConfig-> PWM_CMP_OP_Mode_A << PWM_TCCR1A_COM1A0_BIT;
    18a2:	af e4       	ldi	r26, 0x4F	; 79
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ef e4       	ldi	r30, 0x4F	; 79
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	28 2f       	mov	r18, r24
    18ae:	e9 81       	ldd	r30, Y+1	; 0x01
    18b0:	fa 81       	ldd	r31, Y+2	; 0x02
    18b2:	83 81       	ldd	r24, Z+3	; 0x03
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	00 24       	eor	r0, r0
    18ba:	96 95       	lsr	r25
    18bc:	87 95       	ror	r24
    18be:	07 94       	ror	r0
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	07 94       	ror	r0
    18c6:	98 2f       	mov	r25, r24
    18c8:	80 2d       	mov	r24, r0
    18ca:	82 2b       	or	r24, r18
    18cc:	8c 93       	st	X, r24
			
			PWM_TCCR1A_REG |= Copy_stConfig-> PWM_CMP_OP_Mode_B << PWM_TCCR1A_COM1B0_BIT;
    18ce:	af e4       	ldi	r26, 0x4F	; 79
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ef e4       	ldi	r30, 0x4F	; 79
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	e9 81       	ldd	r30, Y+1	; 0x01
    18dc:	fa 81       	ldd	r31, Y+2	; 0x02
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	82 95       	swap	r24
    18e6:	92 95       	swap	r25
    18e8:	90 7f       	andi	r25, 0xF0	; 240
    18ea:	98 27       	eor	r25, r24
    18ec:	80 7f       	andi	r24, 0xF0	; 240
    18ee:	98 27       	eor	r25, r24
    18f0:	82 2b       	or	r24, r18
    18f2:	8c 93       	st	X, r24
			
			PWM_TCCR1B_REG |= Copy_stConfig -> PWM_Prescaler;
    18f4:	ae e4       	ldi	r26, 0x4E	; 78
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ee e4       	ldi	r30, 0x4E	; 78
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	90 81       	ld	r25, Z
    18fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1900:	fa 81       	ldd	r31, Y+2	; 0x02
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	89 2b       	or	r24, r25
    1906:	8c 93       	st	X, r24
			
			PWM_ICR1_REG |= Copy_stConfig -> PWM_u16_TopValue;
    1908:	a6 e4       	ldi	r26, 0x46	; 70
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e6 e4       	ldi	r30, 0x46	; 70
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	20 81       	ld	r18, Z
    1912:	31 81       	ldd	r19, Z+1	; 0x01
    1914:	e9 81       	ldd	r30, Y+1	; 0x01
    1916:	fa 81       	ldd	r31, Y+2	; 0x02
    1918:	85 81       	ldd	r24, Z+5	; 0x05
    191a:	96 81       	ldd	r25, Z+6	; 0x06
    191c:	82 2b       	or	r24, r18
    191e:	93 2b       	or	r25, r19
    1920:	11 96       	adiw	r26, 0x01	; 1
    1922:	9c 93       	st	X, r25
    1924:	8e 93       	st	-X, r24
			
			PWM_OCR1A_REG |= Copy_stConfig -> PWM_u16_OCR1A_Value;
    1926:	aa e4       	ldi	r26, 0x4A	; 74
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ea e4       	ldi	r30, 0x4A	; 74
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	20 81       	ld	r18, Z
    1930:	31 81       	ldd	r19, Z+1	; 0x01
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	87 81       	ldd	r24, Z+7	; 0x07
    1938:	90 85       	ldd	r25, Z+8	; 0x08
    193a:	82 2b       	or	r24, r18
    193c:	93 2b       	or	r25, r19
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	9c 93       	st	X, r25
    1942:	8e 93       	st	-X, r24
			
			PWM_OCR1B_REG |= Copy_stConfig -> PWM_u16_OCR1B_Value;
    1944:	a8 e4       	ldi	r26, 0x48	; 72
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e8 e4       	ldi	r30, 0x48	; 72
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	20 81       	ld	r18, Z
    194e:	31 81       	ldd	r19, Z+1	; 0x01
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	81 85       	ldd	r24, Z+9	; 0x09
    1956:	92 85       	ldd	r25, Z+10	; 0x0a
    1958:	82 2b       	or	r24, r18
    195a:	93 2b       	or	r25, r19
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	9c 93       	st	X, r25
    1960:	8e 93       	st	-X, r24
    1962:	82 c0       	rjmp	.+260    	; 0x1a68 <PWM_Init+0x224>
			
		}
		else if(Copy_stConfig -> PWM_WG_Mode == PWM_Phase_Correct)
    1964:	e9 81       	ldd	r30, Y+1	; 0x01
    1966:	fa 81       	ldd	r31, Y+2	; 0x02
    1968:	81 81       	ldd	r24, Z+1	; 0x01
    196a:	88 23       	and	r24, r24
    196c:	09 f0       	breq	.+2      	; 0x1970 <PWM_Init+0x12c>
    196e:	7c c0       	rjmp	.+248    	; 0x1a68 <PWM_Init+0x224>
		{
			CLR_BIT(PWM_TCCR1A_REG,PWM_TCCR1A_WGM10_BIT);
    1970:	af e4       	ldi	r26, 0x4F	; 79
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ef e4       	ldi	r30, 0x4F	; 79
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	8c 93       	st	X, r24
			SET_BIT(PWM_TCCR1A_REG,PWM_TCCR1A_WGM11_BIT);
    197e:	af e4       	ldi	r26, 0x4F	; 79
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ef e4       	ldi	r30, 0x4F	; 79
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	8c 93       	st	X, r24
			CLR_BIT(PWM_TCCR1B_REG,PWM_TCCR1B_WGM12_BIT);
    198c:	ae e4       	ldi	r26, 0x4E	; 78
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ee e4       	ldi	r30, 0x4E	; 78
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	87 7f       	andi	r24, 0xF7	; 247
    1998:	8c 93       	st	X, r24
			SET_BIT(PWM_TCCR1B_REG,PWM_TCCR1B_WGM13_BIT);
    199a:	ae e4       	ldi	r26, 0x4E	; 78
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ee e4       	ldi	r30, 0x4E	; 78
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 61       	ori	r24, 0x10	; 16
    19a6:	8c 93       	st	X, r24
					
			PWM_TCCR1A_REG |= Copy_stConfig-> PWM_CMP_OP_Mode_A << PWM_TCCR1A_COM1A0_BIT;
    19a8:	af e4       	ldi	r26, 0x4F	; 79
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef e4       	ldi	r30, 0x4F	; 79
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	28 2f       	mov	r18, r24
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	83 81       	ldd	r24, Z+3	; 0x03
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	00 24       	eor	r0, r0
    19c0:	96 95       	lsr	r25
    19c2:	87 95       	ror	r24
    19c4:	07 94       	ror	r0
    19c6:	96 95       	lsr	r25
    19c8:	87 95       	ror	r24
    19ca:	07 94       	ror	r0
    19cc:	98 2f       	mov	r25, r24
    19ce:	80 2d       	mov	r24, r0
    19d0:	82 2b       	or	r24, r18
    19d2:	8c 93       	st	X, r24
					
			PWM_TCCR1A_REG |= Copy_stConfig-> PWM_CMP_OP_Mode_B << PWM_TCCR1A_COM1B0_BIT;
    19d4:	af e4       	ldi	r26, 0x4F	; 79
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ef e4       	ldi	r30, 0x4F	; 79
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	e9 81       	ldd	r30, Y+1	; 0x01
    19e2:	fa 81       	ldd	r31, Y+2	; 0x02
    19e4:	84 81       	ldd	r24, Z+4	; 0x04
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	82 95       	swap	r24
    19ec:	92 95       	swap	r25
    19ee:	90 7f       	andi	r25, 0xF0	; 240
    19f0:	98 27       	eor	r25, r24
    19f2:	80 7f       	andi	r24, 0xF0	; 240
    19f4:	98 27       	eor	r25, r24
    19f6:	82 2b       	or	r24, r18
    19f8:	8c 93       	st	X, r24
					
			PWM_TCCR1B_REG |= Copy_stConfig -> PWM_Prescaler;
    19fa:	ae e4       	ldi	r26, 0x4E	; 78
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ee e4       	ldi	r30, 0x4E	; 78
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	90 81       	ld	r25, Z
    1a04:	e9 81       	ldd	r30, Y+1	; 0x01
    1a06:	fa 81       	ldd	r31, Y+2	; 0x02
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	89 2b       	or	r24, r25
    1a0c:	8c 93       	st	X, r24
					
			PWM_ICR1_REG |= Copy_stConfig -> PWM_u16_TopValue;
    1a0e:	a6 e4       	ldi	r26, 0x46	; 70
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e6 e4       	ldi	r30, 0x46	; 70
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	20 81       	ld	r18, Z
    1a18:	31 81       	ldd	r19, Z+1	; 0x01
    1a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1e:	85 81       	ldd	r24, Z+5	; 0x05
    1a20:	96 81       	ldd	r25, Z+6	; 0x06
    1a22:	82 2b       	or	r24, r18
    1a24:	93 2b       	or	r25, r19
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
					
			PWM_OCR1A_REG |= Copy_stConfig -> PWM_u16_OCR1A_Value;
    1a2c:	aa e4       	ldi	r26, 0x4A	; 74
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ea e4       	ldi	r30, 0x4A	; 74
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	20 81       	ld	r18, Z
    1a36:	31 81       	ldd	r19, Z+1	; 0x01
    1a38:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3c:	87 81       	ldd	r24, Z+7	; 0x07
    1a3e:	90 85       	ldd	r25, Z+8	; 0x08
    1a40:	82 2b       	or	r24, r18
    1a42:	93 2b       	or	r25, r19
    1a44:	11 96       	adiw	r26, 0x01	; 1
    1a46:	9c 93       	st	X, r25
    1a48:	8e 93       	st	-X, r24
					
			PWM_OCR1B_REG |= Copy_stConfig -> PWM_u16_OCR1B_Value;
    1a4a:	a8 e4       	ldi	r26, 0x48	; 72
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e8 e4       	ldi	r30, 0x48	; 72
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	20 81       	ld	r18, Z
    1a54:	31 81       	ldd	r19, Z+1	; 0x01
    1a56:	e9 81       	ldd	r30, Y+1	; 0x01
    1a58:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5a:	81 85       	ldd	r24, Z+9	; 0x09
    1a5c:	92 85       	ldd	r25, Z+10	; 0x0a
    1a5e:	82 2b       	or	r24, r18
    1a60:	93 2b       	or	r25, r19
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	9c 93       	st	X, r25
    1a66:	8e 93       	st	-X, r24
					
				}
	}
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <PWM_OCR_SET>:

void PWM_OCR_SET(PWM_enum_OCR PWM_OCR_Select, u16 *Copy_pu16Value)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <PWM_OCR_SET+0x6>
    1a78:	0f 92       	push	r0
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	7b 83       	std	Y+3, r23	; 0x03
    1a82:	6a 83       	std	Y+2, r22	; 0x02
	if(PWM_OCR_Select == PWM_OCR1A)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	88 23       	and	r24, r24
    1a88:	51 f4       	brne	.+20     	; 0x1a9e <PWM_OCR_SET+0x2c>
	{
		PWM_OCR1A_REG = *Copy_pu16Value;
    1a8a:	ea e4       	ldi	r30, 0x4A	; 74
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a90:	bb 81       	ldd	r27, Y+3	; 0x03
    1a92:	8d 91       	ld	r24, X+
    1a94:	9c 91       	ld	r25, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	0c c0       	rjmp	.+24     	; 0x1ab6 <PWM_OCR_SET+0x44>
	}
	else if(PWM_OCR_Select == PWM_OCR1B)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	49 f4       	brne	.+18     	; 0x1ab6 <PWM_OCR_SET+0x44>
		{
			PWM_OCR1B_REG = *Copy_pu16Value;
    1aa4:	e8 e4       	ldi	r30, 0x48	; 72
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    1aaa:	bb 81       	ldd	r27, Y+3	; 0x03
    1aac:	8d 91       	ld	r24, X+
    1aae:	9c 91       	ld	r25, X
    1ab0:	11 97       	sbiw	r26, 0x01	; 1
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
		}
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <ICU_Init>:
void __vector_6(void)__attribute((signal,used));



void ICU_Init(ICU_stConfig *Copy_stConfig)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <ICU_Init+0x6>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_stConfig -> ICU_Edge == ICU_Falling_Edge)
    1ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 23       	and	r24, r24
    1ad8:	41 f4       	brne	.+16     	; 0x1aea <ICU_Init+0x28>
	{
		CLR_BIT(ICU_TCCR1B_REG, TCCR1B_ICES1_BIT);
    1ada:	ae e4       	ldi	r26, 0x4E	; 78
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ee e4       	ldi	r30, 0x4E	; 78
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 7b       	andi	r24, 0xBF	; 191
    1ae6:	8c 93       	st	X, r24
    1ae8:	0c c0       	rjmp	.+24     	; 0x1b02 <ICU_Init+0x40>
	}
	else if (Copy_stConfig -> ICU_Edge == ICU_Raising_Edge)
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	80 81       	ld	r24, Z
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <ICU_Init+0x40>
	{
		SET_BIT(ICU_TCCR1B_REG, TCCR1B_ICES1_BIT);
    1af4:	ae e4       	ldi	r26, 0x4E	; 78
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ee e4       	ldi	r30, 0x4E	; 78
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 64       	ori	r24, 0x40	; 64
    1b00:	8c 93       	st	X, r24
	}
	
	ICU_TCCR1B_REG |= Copy_stConfig -> ICU_Prescaler;
    1b02:	ae e4       	ldi	r26, 0x4E	; 78
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	ee e4       	ldi	r30, 0x4E	; 78
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	90 81       	ld	r25, Z
    1b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b10:	81 81       	ldd	r24, Z+1	; 0x01
    1b12:	89 2b       	or	r24, r25
    1b14:	8c 93       	st	X, r24
	
	SET_BIT(ICU_TCCR1B_REG,TCCR1B_ICNC1_BIT); 
    1b16:	ae e4       	ldi	r26, 0x4E	; 78
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ee e4       	ldi	r30, 0x4E	; 78
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 68       	ori	r24, 0x80	; 128
    1b22:	8c 93       	st	X, r24
	
	Global_CPF = Copy_stConfig -> ICU_CBF;
    1b24:	e9 81       	ldd	r30, Y+1	; 0x01
    1b26:	fa 81       	ldd	r31, Y+2	; 0x02
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	90 93 18 02 	sts	0x0218, r25
    1b30:	80 93 17 02 	sts	0x0217, r24
	
	SET_BIT(ICU_TIMSK_REG, TIMSK_TICIE1_BIT);
    1b34:	a9 e5       	ldi	r26, 0x59	; 89
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e9 e5       	ldi	r30, 0x59	; 89
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 62       	ori	r24, 0x20	; 32
    1b40:	8c 93       	st	X, r24
	
	G_INT_Enable();
    1b42:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <ICU_Change_Trigger>:

void ICU_Change_Trigger(ICU_enum_Edge Copy_Edge)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	0f 92       	push	r0
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Edge == ICU_Falling_Edge)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	88 23       	and	r24, r24
    1b60:	41 f4       	brne	.+16     	; 0x1b72 <ICU_Change_Trigger+0x22>
		{
			CLR_BIT(ICU_TCCR1B_REG, TCCR1B_ICES1_BIT);
    1b62:	ae e4       	ldi	r26, 0x4E	; 78
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ee e4       	ldi	r30, 0x4E	; 78
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 7b       	andi	r24, 0xBF	; 191
    1b6e:	8c 93       	st	X, r24
    1b70:	0a c0       	rjmp	.+20     	; 0x1b86 <ICU_Change_Trigger+0x36>
		}
		else if (Copy_Edge == ICU_Raising_Edge)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	39 f4       	brne	.+14     	; 0x1b86 <ICU_Change_Trigger+0x36>
		{
			SET_BIT(ICU_TCCR1B_REG, TCCR1B_ICES1_BIT);
    1b78:	ae e4       	ldi	r26, 0x4E	; 78
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	ee e4       	ldi	r30, 0x4E	; 78
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	8c 93       	st	X, r24
		}	
}
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <ICU_GET_ICR_Value>:

void ICU_GET_ICR_Value(u16 *Copy_Return_Value)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <ICU_GET_ICR_Value+0x6>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	*Copy_Return_Value = ICU_ICR1_REG;
    1b9c:	e6 e4       	ldi	r30, 0x46	; 70
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <__vector_6>:

void __vector_6(void)
{
    1bb6:	1f 92       	push	r1
    1bb8:	0f 92       	push	r0
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	0f 92       	push	r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	2f 93       	push	r18
    1bc2:	3f 93       	push	r19
    1bc4:	4f 93       	push	r20
    1bc6:	5f 93       	push	r21
    1bc8:	6f 93       	push	r22
    1bca:	7f 93       	push	r23
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	af 93       	push	r26
    1bd2:	bf 93       	push	r27
    1bd4:	ef 93       	push	r30
    1bd6:	ff 93       	push	r31
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	if (Global_CPF != NULL)
    1be0:	80 91 17 02 	lds	r24, 0x0217
    1be4:	90 91 18 02 	lds	r25, 0x0218
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	29 f0       	breq	.+10     	; 0x1bf6 <__vector_6+0x40>
	{
		Global_CPF();
    1bec:	e0 91 17 02 	lds	r30, 0x0217
    1bf0:	f0 91 18 02 	lds	r31, 0x0218
    1bf4:	09 95       	icall
	}
}
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	ff 91       	pop	r31
    1bfc:	ef 91       	pop	r30
    1bfe:	bf 91       	pop	r27
    1c00:	af 91       	pop	r26
    1c02:	9f 91       	pop	r25
    1c04:	8f 91       	pop	r24
    1c06:	7f 91       	pop	r23
    1c08:	6f 91       	pop	r22
    1c0a:	5f 91       	pop	r21
    1c0c:	4f 91       	pop	r20
    1c0e:	3f 91       	pop	r19
    1c10:	2f 91       	pop	r18
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <G_INT_Enable>:
#include"../../LIB/BIT_MATH.h"
#include"Global_INT_Private.h"
#include"Global_INT_Interface.h"

void G_INT_Enable(void)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_REG_I_BIT);
    1c24:	af e5       	ldi	r26, 0x5F	; 95
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ef e5       	ldi	r30, 0x5F	; 95
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 68       	ori	r24, 0x80	; 128
    1c30:	8c 93       	st	X, r24
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <G_INT_Disable>:
void G_INT_Disable(void)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,SREG_REG_I_BIT);
    1c40:	af e5       	ldi	r26, 0x5F	; 95
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ef e5       	ldi	r30, 0x5F	; 95
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8f 77       	andi	r24, 0x7F	; 127
    1c4c:	8c 93       	st	X, r24
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <GPT_Init>:

void __vector_10(void)__attribute((signal,used));
void __vector_11(void)__attribute((signal,used));

void GPT_Init(GPT_stConfig *Copy_stConfig)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <GPT_Init+0x6>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_stConfig->GPT_Timer == GPT_Timer0)
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	80 81       	ld	r24, Z
    1c68:	88 23       	and	r24, r24
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <GPT_Init+0x1a>
    1c6c:	68 c0       	rjmp	.+208    	; 0x1d3e <GPT_Init+0xea>
	{
		if (Copy_stConfig->GPT_WG_Mode == GPT_Normal)
    1c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c70:	fa 81       	ldd	r31, Y+2	; 0x02
    1c72:	81 81       	ldd	r24, Z+1	; 0x01
    1c74:	88 23       	and	r24, r24
    1c76:	79 f5       	brne	.+94     	; 0x1cd6 <GPT_Init+0x82>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    1c78:	a3 e5       	ldi	r26, 0x53	; 83
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e3 e5       	ldi	r30, 0x53	; 83
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 7b       	andi	r24, 0xBF	; 191
    1c84:	8c 93       	st	X, r24
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    1c86:	a3 e5       	ldi	r26, 0x53	; 83
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e3 e5       	ldi	r30, 0x53	; 83
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	87 7f       	andi	r24, 0xF7	; 247
    1c92:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    1c94:	a3 e5       	ldi	r26, 0x53	; 83
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e3 e5       	ldi	r30, 0x53	; 83
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	90 81       	ld	r25, Z
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	89 2b       	or	r24, r25
    1ca6:	8c 93       	st	X, r24
			Timer_TCNT0_REG = Copy_stConfig->GPT_Preload;
    1ca8:	a2 e5       	ldi	r26, 0x52	; 82
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	83 81       	ldd	r24, Z+3	; 0x03
    1cb2:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    1cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb8:	85 81       	ldd	r24, Z+5	; 0x05
    1cba:	96 81       	ldd	r25, Z+6	; 0x06
    1cbc:	90 93 1a 02 	sts	0x021A, r25
    1cc0:	80 93 19 02 	sts	0x0219, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_TOIE0_BIT);
    1cc4:	a9 e5       	ldi	r26, 0x59	; 89
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e9 e5       	ldi	r30, 0x59	; 89
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	81 60       	ori	r24, 0x01	; 1
    1cd0:	8c 93       	st	X, r24
			G_INT_Enable();
    1cd2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
		}
		if (Copy_stConfig->GPT_WG_Mode == GPT_CTC)
    1cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cda:	81 81       	ldd	r24, Z+1	; 0x01
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	79 f5       	brne	.+94     	; 0x1d3e <GPT_Init+0xea>
		{
			CLR_BIT(Timer_TCCR0_REG, TCCR0_WGM00_BIT);
    1ce0:	a3 e5       	ldi	r26, 0x53	; 83
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e3 e5       	ldi	r30, 0x53	; 83
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7b       	andi	r24, 0xBF	; 191
    1cec:	8c 93       	st	X, r24
			SET_BIT(Timer_TCCR0_REG, TCCR0_WGM01_BIT);
    1cee:	a3 e5       	ldi	r26, 0x53	; 83
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e3 e5       	ldi	r30, 0x53	; 83
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 60       	ori	r24, 0x08	; 8
    1cfa:	8c 93       	st	X, r24
			Timer_TCCR0_REG |= Copy_stConfig->GPT_Prescaler;
    1cfc:	a3 e5       	ldi	r26, 0x53	; 83
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e3 e5       	ldi	r30, 0x53	; 83
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	90 81       	ld	r25, Z
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	89 2b       	or	r24, r25
    1d0e:	8c 93       	st	X, r24
			Timer_OCR0_REG = Copy_stConfig->GPT_COM_Value;
    1d10:	ac e5       	ldi	r26, 0x5C	; 92
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	84 81       	ldd	r24, Z+4	; 0x04
    1d1a:	8c 93       	st	X, r24
			Global_Timer0_CBF = Copy_stConfig->GPT_OVF_CBF;
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	85 81       	ldd	r24, Z+5	; 0x05
    1d22:	96 81       	ldd	r25, Z+6	; 0x06
    1d24:	90 93 1a 02 	sts	0x021A, r25
    1d28:	80 93 19 02 	sts	0x0219, r24
			SET_BIT(Timer_TIMSK_REG, TIMSK_OCIE0_BIT);
    1d2c:	a9 e5       	ldi	r26, 0x59	; 89
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e9 e5       	ldi	r30, 0x59	; 89
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	8c 93       	st	X, r24
			G_INT_Enable();
    1d3a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
	}
	else
	{

	}
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <GPT_Set_Preload>:

void GPT_Set_Preload(u8 Copy_u8Preload)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	0f 92       	push	r0
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01
	Timer_TCNT0_REG = Copy_u8Preload;
    1d54:	e2 e5       	ldi	r30, 0x52	; 82
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	80 83       	st	Z, r24
}
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <__vector_10>:


void __vector_10(void)
{
    1d64:	1f 92       	push	r1
    1d66:	0f 92       	push	r0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	2f 93       	push	r18
    1d70:	3f 93       	push	r19
    1d72:	4f 93       	push	r20
    1d74:	5f 93       	push	r21
    1d76:	6f 93       	push	r22
    1d78:	7f 93       	push	r23
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    1d8e:	80 91 19 02 	lds	r24, 0x0219
    1d92:	90 91 1a 02 	lds	r25, 0x021A
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	29 f0       	breq	.+10     	; 0x1da4 <__vector_10+0x40>
	{
		Global_Timer0_CBF();
    1d9a:	e0 91 19 02 	lds	r30, 0x0219
    1d9e:	f0 91 1a 02 	lds	r31, 0x021A
    1da2:	09 95       	icall
	}
}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	ff 91       	pop	r31
    1daa:	ef 91       	pop	r30
    1dac:	bf 91       	pop	r27
    1dae:	af 91       	pop	r26
    1db0:	9f 91       	pop	r25
    1db2:	8f 91       	pop	r24
    1db4:	7f 91       	pop	r23
    1db6:	6f 91       	pop	r22
    1db8:	5f 91       	pop	r21
    1dba:	4f 91       	pop	r20
    1dbc:	3f 91       	pop	r19
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <__vector_11>:
void __vector_11(void)
{
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	2f 93       	push	r18
    1dd6:	3f 93       	push	r19
    1dd8:	4f 93       	push	r20
    1dda:	5f 93       	push	r21
    1ddc:	6f 93       	push	r22
    1dde:	7f 93       	push	r23
    1de0:	8f 93       	push	r24
    1de2:	9f 93       	push	r25
    1de4:	af 93       	push	r26
    1de6:	bf 93       	push	r27
    1de8:	ef 93       	push	r30
    1dea:	ff 93       	push	r31
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
	if (Global_Timer0_CBF != NULL)
    1df4:	80 91 19 02 	lds	r24, 0x0219
    1df8:	90 91 1a 02 	lds	r25, 0x021A
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	29 f0       	breq	.+10     	; 0x1e0a <__vector_11+0x40>
	{
		Global_Timer0_CBF();
    1e00:	e0 91 19 02 	lds	r30, 0x0219
    1e04:	f0 91 1a 02 	lds	r31, 0x021A
    1e08:	09 95       	icall
	}
}
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	ff 91       	pop	r31
    1e10:	ef 91       	pop	r30
    1e12:	bf 91       	pop	r27
    1e14:	af 91       	pop	r26
    1e16:	9f 91       	pop	r25
    1e18:	8f 91       	pop	r24
    1e1a:	7f 91       	pop	r23
    1e1c:	6f 91       	pop	r22
    1e1e:	5f 91       	pop	r21
    1e20:	4f 91       	pop	r20
    1e22:	3f 91       	pop	r19
    1e24:	2f 91       	pop	r18
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	0f 90       	pop	r0
    1e2c:	1f 90       	pop	r1
    1e2e:	18 95       	reti

00001e30 <EXT_INT_Init>:
void __vector_3(void)__attribute((signal,used));



void EXT_INT_Init(EXTI_St *Copy_EXT_INT_st)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <EXT_INT_Init+0x6>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	9b 83       	std	Y+3, r25	; 0x03
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
	/*The External Interrupt 1 is activated by if the SREG I-bit and the
	corresponding interrupt mask in the GICR are set.*/
	
	u8 check = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    1e44:	ea 81       	ldd	r30, Y+2	; 0x02
    1e46:	fb 81       	ldd	r31, Y+3	; 0x03
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 23       	and	r24, r24
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <EXT_INT_Init+0x20>
    1e4e:	67 c0       	rjmp	.+206    	; 0x1f1e <EXT_INT_Init+0xee>
	{
		
		
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Low_Level_SC)
    1e50:	ea 81       	ldd	r30, Y+2	; 0x02
    1e52:	fb 81       	ldd	r31, Y+3	; 0x03
    1e54:	81 81       	ldd	r24, Z+1	; 0x01
    1e56:	88 23       	and	r24, r24
    1e58:	79 f4       	brne	.+30     	; 0x1e78 <EXT_INT_Init+0x48>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    1e5a:	a5 e5       	ldi	r26, 0x55	; 85
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e5       	ldi	r30, 0x55	; 85
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8e 7f       	andi	r24, 0xFE	; 254
    1e66:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    1e68:	a5 e5       	ldi	r26, 0x55	; 85
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e5       	ldi	r30, 0x55	; 85
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8d 7f       	andi	r24, 0xFD	; 253
    1e74:	8c 93       	st	X, r24
    1e76:	3d c0       	rjmp	.+122    	; 0x1ef2 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Any_Change_SC)
    1e78:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	79 f4       	brne	.+30     	; 0x1ea0 <EXT_INT_Init+0x70>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    1e82:	a5 e5       	ldi	r26, 0x55	; 85
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e5       	ldi	r30, 0x55	; 85
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	81 60       	ori	r24, 0x01	; 1
    1e8e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    1e90:	a5 e5       	ldi	r26, 0x55	; 85
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e5       	ldi	r30, 0x55	; 85
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8d 7f       	andi	r24, 0xFD	; 253
    1e9c:	8c 93       	st	X, r24
    1e9e:	29 c0       	rjmp	.+82     	; 0x1ef2 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Falling_Edge_SC)
    1ea0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea4:	81 81       	ldd	r24, Z+1	; 0x01
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	79 f4       	brne	.+30     	; 0x1ec8 <EXT_INT_Init+0x98>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    1eaa:	a5 e5       	ldi	r26, 0x55	; 85
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e5       	ldi	r30, 0x55	; 85
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e 7f       	andi	r24, 0xFE	; 254
    1eb6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    1eb8:	a5 e5       	ldi	r26, 0x55	; 85
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e5       	ldi	r30, 0x55	; 85
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	8c 93       	st	X, r24
    1ec6:	15 c0       	rjmp	.+42     	; 0x1ef2 <EXT_INT_Init+0xc2>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_0_Rising_Edge_SC)
    1ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eca:	fb 81       	ldd	r31, Y+3	; 0x03
    1ecc:	81 81       	ldd	r24, Z+1	; 0x01
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	79 f4       	brne	.+30     	; 0x1ef0 <EXT_INT_Init+0xc0>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    1ed2:	a5 e5       	ldi	r26, 0x55	; 85
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e5 e5       	ldi	r30, 0x55	; 85
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	81 60       	ori	r24, 0x01	; 1
    1ede:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    1ee0:	a5 e5       	ldi	r26, 0x55	; 85
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e5 e5       	ldi	r30, 0x55	; 85
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	8c 93       	st	X, r24
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <EXT_INT_Init+0xc2>
		}
		else
		{
			check = 0;
    1ef0:	19 82       	std	Y+1, r1	; 0x01
    //Prevent Enable The global interrupt
		}
		if (check == 1)
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <EXT_INT_Init+0xca>
    1ef8:	b3 c0       	rjmp	.+358    	; 0x2060 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    1efa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT0_BIT);
    1efe:	ab e5       	ldi	r26, 0x5B	; 91
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	eb e5       	ldi	r30, 0x5B	; 91
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 64       	ori	r24, 0x40	; 64
    1f0a:	8c 93       	st	X, r24
			
			Global_EXTI0_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    1f0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	90 93 1c 02 	sts	0x021C, r25
    1f18:	80 93 1b 02 	sts	0x021B, r24
    1f1c:	a1 c0       	rjmp	.+322    	; 0x2060 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    1f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f20:	fb 81       	ldd	r31, Y+3	; 0x03
    1f22:	80 81       	ld	r24, Z
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <EXT_INT_Init+0xfa>
    1f28:	67 c0       	rjmp	.+206    	; 0x1ff8 <EXT_INT_Init+0x1c8>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Low_Level_SC)
    1f2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f2e:	81 81       	ldd	r24, Z+1	; 0x01
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	79 f4       	brne	.+30     	; 0x1f52 <EXT_INT_Init+0x122>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    1f34:	a5 e5       	ldi	r26, 0x55	; 85
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e5 e5       	ldi	r30, 0x55	; 85
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8b 7f       	andi	r24, 0xFB	; 251
    1f40:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    1f42:	a5 e5       	ldi	r26, 0x55	; 85
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e5 e5       	ldi	r30, 0x55	; 85
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	87 7f       	andi	r24, 0xF7	; 247
    1f4e:	8c 93       	st	X, r24
    1f50:	3d c0       	rjmp	.+122    	; 0x1fcc <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Any_Change_SC)
    1f52:	ea 81       	ldd	r30, Y+2	; 0x02
    1f54:	fb 81       	ldd	r31, Y+3	; 0x03
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	85 30       	cpi	r24, 0x05	; 5
    1f5a:	79 f4       	brne	.+30     	; 0x1f7a <EXT_INT_Init+0x14a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    1f5c:	a5 e5       	ldi	r26, 0x55	; 85
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e5 e5       	ldi	r30, 0x55	; 85
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	84 60       	ori	r24, 0x04	; 4
    1f68:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    1f6a:	a5 e5       	ldi	r26, 0x55	; 85
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e5 e5       	ldi	r30, 0x55	; 85
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	87 7f       	andi	r24, 0xF7	; 247
    1f76:	8c 93       	st	X, r24
    1f78:	29 c0       	rjmp	.+82     	; 0x1fcc <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Falling_Edge_SC)
    1f7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
    1f80:	86 30       	cpi	r24, 0x06	; 6
    1f82:	79 f4       	brne	.+30     	; 0x1fa2 <EXT_INT_Init+0x172>
		{
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    1f84:	a5 e5       	ldi	r26, 0x55	; 85
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e5       	ldi	r30, 0x55	; 85
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8b 7f       	andi	r24, 0xFB	; 251
    1f90:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    1f92:	a5 e5       	ldi	r26, 0x55	; 85
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e5 e5       	ldi	r30, 0x55	; 85
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 60       	ori	r24, 0x08	; 8
    1f9e:	8c 93       	st	X, r24
    1fa0:	15 c0       	rjmp	.+42     	; 0x1fcc <EXT_INT_Init+0x19c>
		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_1_Rising_Edge_SC)
    1fa2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fa4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fa6:	81 81       	ldd	r24, Z+1	; 0x01
    1fa8:	87 30       	cpi	r24, 0x07	; 7
    1faa:	79 f4       	brne	.+30     	; 0x1fca <EXT_INT_Init+0x19a>
		{
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    1fac:	a5 e5       	ldi	r26, 0x55	; 85
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e5       	ldi	r30, 0x55	; 85
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	84 60       	ori	r24, 0x04	; 4
    1fb8:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    1fba:	a5 e5       	ldi	r26, 0x55	; 85
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e5 e5       	ldi	r30, 0x55	; 85
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 60       	ori	r24, 0x08	; 8
    1fc6:	8c 93       	st	X, r24
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <EXT_INT_Init+0x19c>
		}
		else
		{
			check = 0;
    1fca:	19 82       	std	Y+1, r1	; 0x01

		}
		if (check == 1)
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <EXT_INT_Init+0x1a4>
    1fd2:	46 c0       	rjmp	.+140    	; 0x2060 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    1fd4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT1_BIT);
    1fd8:	ab e5       	ldi	r26, 0x5B	; 91
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	eb e5       	ldi	r30, 0x5B	; 91
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 68       	ori	r24, 0x80	; 128
    1fe4:	8c 93       	st	X, r24
			
			Global_EXTI1_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    1fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	90 93 1e 02 	sts	0x021E, r25
    1ff2:	80 93 1d 02 	sts	0x021D, r24
    1ff6:	34 c0       	rjmp	.+104    	; 0x2060 <EXT_INT_Init+0x230>
		}

	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    1ff8:	ea 81       	ldd	r30, Y+2	; 0x02
    1ffa:	fb 81       	ldd	r31, Y+3	; 0x03
    1ffc:	80 81       	ld	r24, Z
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	79 f5       	brne	.+94     	; 0x2060 <EXT_INT_Init+0x230>
	{
		if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Falling_Edge_SC)
    2002:	ea 81       	ldd	r30, Y+2	; 0x02
    2004:	fb 81       	ldd	r31, Y+3	; 0x03
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	88 30       	cpi	r24, 0x08	; 8
    200a:	41 f4       	brne	.+16     	; 0x201c <EXT_INT_Init+0x1ec>
		{
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    200c:	a4 e5       	ldi	r26, 0x54	; 84
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e4 e5       	ldi	r30, 0x54	; 84
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8f 7b       	andi	r24, 0xBF	; 191
    2018:	8c 93       	st	X, r24
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <EXT_INT_Init+0x208>

		}
		else if (Copy_EXT_INT_st->EXT_INT_SC == EXT_INT_2_Rising_Edge_SC)
    201c:	ea 81       	ldd	r30, Y+2	; 0x02
    201e:	fb 81       	ldd	r31, Y+3	; 0x03
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	89 30       	cpi	r24, 0x09	; 9
    2024:	41 f4       	brne	.+16     	; 0x2036 <EXT_INT_Init+0x206>
		{
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    2026:	a4 e5       	ldi	r26, 0x54	; 84
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e4 e5       	ldi	r30, 0x54	; 84
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 64       	ori	r24, 0x40	; 64
    2032:	8c 93       	st	X, r24
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <EXT_INT_Init+0x208>

		}
		else
		{
			check = 0;
    2036:	19 82       	std	Y+1, r1	; 0x01
		}
		if (check == 1)
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	89 f4       	brne	.+34     	; 0x2060 <EXT_INT_Init+0x230>
		{
			G_INT_Enable();
    203e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <G_INT_Enable>
			SET_BIT(GICR_REG, GICR_INT2_BIT);
    2042:	ab e5       	ldi	r26, 0x5B	; 91
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	eb e5       	ldi	r30, 0x5B	; 91
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 62       	ori	r24, 0x20	; 32
    204e:	8c 93       	st	X, r24
			
			Global_EXTI2_CPF = Copy_EXT_INT_st ->EXT_INT_CBF;
    2050:	ea 81       	ldd	r30, Y+2	; 0x02
    2052:	fb 81       	ldd	r31, Y+3	; 0x03
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	90 93 20 02 	sts	0x0220, r25
    205c:	80 93 1f 02 	sts	0x021F, r24
	}
	else
	{

	}
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <EXT_INT_Disable>:

void EXT_INT_Disable(EXTI_St *Copy_EXT_INT_st)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <EXT_INT_Disable+0x6>
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_EXT_INT_st->EXT_INT == EXT_INT_0)
    207a:	e9 81       	ldd	r30, Y+1	; 0x01
    207c:	fa 81       	ldd	r31, Y+2	; 0x02
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	51 f4       	brne	.+20     	; 0x2098 <EXT_INT_Disable+0x2c>
	{
		G_INT_Disable();
    2084:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT0_BIT);
    2088:	ab e5       	ldi	r26, 0x5B	; 91
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	eb e5       	ldi	r30, 0x5B	; 91
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8f 7b       	andi	r24, 0xBF	; 191
    2094:	8c 93       	st	X, r24
    2096:	1d c0       	rjmp	.+58     	; 0x20d2 <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_1)
    2098:	e9 81       	ldd	r30, Y+1	; 0x01
    209a:	fa 81       	ldd	r31, Y+2	; 0x02
    209c:	80 81       	ld	r24, Z
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	51 f4       	brne	.+20     	; 0x20b6 <EXT_INT_Disable+0x4a>
	{
		G_INT_Disable();
    20a2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT1_BIT);
    20a6:	ab e5       	ldi	r26, 0x5B	; 91
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	eb e5       	ldi	r30, 0x5B	; 91
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	8f 77       	andi	r24, 0x7F	; 127
    20b2:	8c 93       	st	X, r24
    20b4:	0e c0       	rjmp	.+28     	; 0x20d2 <EXT_INT_Disable+0x66>
		
	}
	else if (Copy_EXT_INT_st->EXT_INT == EXT_INT_2)
    20b6:	e9 81       	ldd	r30, Y+1	; 0x01
    20b8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ba:	80 81       	ld	r24, Z
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	49 f4       	brne	.+18     	; 0x20d2 <EXT_INT_Disable+0x66>
	{
		G_INT_Disable();
    20c0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <G_INT_Disable>
		CLR_BIT(GICR_REG, GICR_INT2_BIT);
    20c4:	ab e5       	ldi	r26, 0x5B	; 91
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	eb e5       	ldi	r30, 0x5B	; 91
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	8f 7d       	andi	r24, 0xDF	; 223
    20d0:	8c 93       	st	X, r24
	else
	{

	}

}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <__vector_1>:

void __vector_1(void)
{
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	2f 93       	push	r18
    20e8:	3f 93       	push	r19
    20ea:	4f 93       	push	r20
    20ec:	5f 93       	push	r21
    20ee:	6f 93       	push	r22
    20f0:	7f 93       	push	r23
    20f2:	8f 93       	push	r24
    20f4:	9f 93       	push	r25
    20f6:	af 93       	push	r26
    20f8:	bf 93       	push	r27
    20fa:	ef 93       	push	r30
    20fc:	ff 93       	push	r31
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI0_CPF != NULL)
    2106:	80 91 1b 02 	lds	r24, 0x021B
    210a:	90 91 1c 02 	lds	r25, 0x021C
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	29 f0       	breq	.+10     	; 0x211c <__vector_1+0x40>
	{
		Global_EXTI0_CPF();
    2112:	e0 91 1b 02 	lds	r30, 0x021B
    2116:	f0 91 1c 02 	lds	r31, 0x021C
    211a:	09 95       	icall
	}

}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	bf 91       	pop	r27
    2126:	af 91       	pop	r26
    2128:	9f 91       	pop	r25
    212a:	8f 91       	pop	r24
    212c:	7f 91       	pop	r23
    212e:	6f 91       	pop	r22
    2130:	5f 91       	pop	r21
    2132:	4f 91       	pop	r20
    2134:	3f 91       	pop	r19
    2136:	2f 91       	pop	r18
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	0f 90       	pop	r0
    213e:	1f 90       	pop	r1
    2140:	18 95       	reti

00002142 <__vector_2>:
void __vector_2(void)
{
    2142:	1f 92       	push	r1
    2144:	0f 92       	push	r0
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	0f 92       	push	r0
    214a:	11 24       	eor	r1, r1
    214c:	2f 93       	push	r18
    214e:	3f 93       	push	r19
    2150:	4f 93       	push	r20
    2152:	5f 93       	push	r21
    2154:	6f 93       	push	r22
    2156:	7f 93       	push	r23
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25
    215c:	af 93       	push	r26
    215e:	bf 93       	push	r27
    2160:	ef 93       	push	r30
    2162:	ff 93       	push	r31
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI1_CPF != NULL)
    216c:	80 91 1d 02 	lds	r24, 0x021D
    2170:	90 91 1e 02 	lds	r25, 0x021E
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	29 f0       	breq	.+10     	; 0x2182 <__vector_2+0x40>
		{
		Global_EXTI1_CPF();
    2178:	e0 91 1d 02 	lds	r30, 0x021D
    217c:	f0 91 1e 02 	lds	r31, 0x021E
    2180:	09 95       	icall
		}

}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	ff 91       	pop	r31
    2188:	ef 91       	pop	r30
    218a:	bf 91       	pop	r27
    218c:	af 91       	pop	r26
    218e:	9f 91       	pop	r25
    2190:	8f 91       	pop	r24
    2192:	7f 91       	pop	r23
    2194:	6f 91       	pop	r22
    2196:	5f 91       	pop	r21
    2198:	4f 91       	pop	r20
    219a:	3f 91       	pop	r19
    219c:	2f 91       	pop	r18
    219e:	0f 90       	pop	r0
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	0f 90       	pop	r0
    21a4:	1f 90       	pop	r1
    21a6:	18 95       	reti

000021a8 <__vector_3>:
void __vector_3(void)
{
    21a8:	1f 92       	push	r1
    21aa:	0f 92       	push	r0
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	0f 92       	push	r0
    21b0:	11 24       	eor	r1, r1
    21b2:	2f 93       	push	r18
    21b4:	3f 93       	push	r19
    21b6:	4f 93       	push	r20
    21b8:	5f 93       	push	r21
    21ba:	6f 93       	push	r22
    21bc:	7f 93       	push	r23
    21be:	8f 93       	push	r24
    21c0:	9f 93       	push	r25
    21c2:	af 93       	push	r26
    21c4:	bf 93       	push	r27
    21c6:	ef 93       	push	r30
    21c8:	ff 93       	push	r31
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	if (Global_EXTI2_CPF != NULL)
    21d2:	80 91 1f 02 	lds	r24, 0x021F
    21d6:	90 91 20 02 	lds	r25, 0x0220
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	29 f0       	breq	.+10     	; 0x21e8 <__vector_3+0x40>
		{
		Global_EXTI2_CPF();
    21de:	e0 91 1f 02 	lds	r30, 0x021F
    21e2:	f0 91 20 02 	lds	r31, 0x0220
    21e6:	09 95       	icall
		}

}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	ff 91       	pop	r31
    21ee:	ef 91       	pop	r30
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <EEPROM_VoidWrite>:




void EEPROM_VoidWrite(u16 Address,u8 Data)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <EEPROM_VoidWrite+0x6>
    2214:	0f 92       	push	r0
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	6b 83       	std	Y+3, r22	; 0x03
	if(Address <= 1023)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	24 e0       	ldi	r18, 0x04	; 4
    2226:	80 30       	cpi	r24, 0x00	; 0
    2228:	92 07       	cpc	r25, r18
    222a:	00 f5       	brcc	.+64     	; 0x226c <EEPROM_VoidWrite+0x5e>
	{
		/* Wait for completion of previous write */
		while(GET_BIT(EECR_REG,EECR_EEWE));
    222c:	ec e3       	ldi	r30, 0x3C	; 60
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	86 95       	lsr	r24
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	81 70       	andi	r24, 0x01	; 1
    223a:	90 70       	andi	r25, 0x00	; 0
    223c:	88 23       	and	r24, r24
    223e:	b1 f7       	brne	.-20     	; 0x222c <EEPROM_VoidWrite+0x1e>

		/* Setting up Address and Data Registers */
		EEAR_REG = Address;
    2240:	ef e3       	ldi	r30, 0x3F	; 63
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	80 83       	st	Z, r24
		EEDR_REG = Data;
    2248:	ed e3       	ldi	r30, 0x3D	; 61
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	80 83       	st	Z, r24
		/* Write logical one to EEMWE */
		SET_BIT(EECR_REG,EECR_EEMWE);
    2250:	ac e3       	ldi	r26, 0x3C	; 60
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ec e3       	ldi	r30, 0x3C	; 60
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	84 60       	ori	r24, 0x04	; 4
    225c:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		SET_BIT(EECR_REG,EECR_EEWE);
    225e:	ac e3       	ldi	r26, 0x3C	; 60
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ec e3       	ldi	r30, 0x3C	; 60
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	8c 93       	st	X, r24
	}
	else
	{
		/* Return Error */
	}
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <EEPROM_Read>:

u8 EEPROM_Read(u16 Address)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <EEPROM_Read+0x6>
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
	if(Address <= 1023)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	24 e0       	ldi	r18, 0x04	; 4
    228e:	80 30       	cpi	r24, 0x00	; 0
    2290:	92 07       	cpc	r25, r18
    2292:	d8 f4       	brcc	.+54     	; 0x22ca <EEPROM_Read+0x52>
	{
		/* Wait for completion of previous write */
		while(GET_BIT(EECR_REG,EECR_EEWE));
    2294:	ec e3       	ldi	r30, 0x3C	; 60
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	86 95       	lsr	r24
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	81 70       	andi	r24, 0x01	; 1
    22a2:	90 70       	andi	r25, 0x00	; 0
    22a4:	88 23       	and	r24, r24
    22a6:	b1 f7       	brne	.-20     	; 0x2294 <EEPROM_Read+0x1c>

		/* Setting up Address  */
		EEAR_REG = Address;
    22a8:	ef e3       	ldi	r30, 0x3F	; 63
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	80 83       	st	Z, r24

		/* Start EEPROM read by setting EERE */
		SET_BIT(EECR_REG,EECR_EERE);
    22b0:	ac e3       	ldi	r26, 0x3C	; 60
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	ec e3       	ldi	r30, 0x3C	; 60
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	8c 93       	st	X, r24

		/* Return Data */
		return EEDR_REG;
    22be:	ed e3       	ldi	r30, 0x3D	; 61
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8b 83       	std	Y+3, r24	; 0x03
	}
	else
	{
		/* Return Error */
	}
}
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	00 c0       	rjmp	.+0      	; 0x22ca <EEPROM_Read+0x52>
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <DIO_VoidSetPinDirection>:
{ DIO_PORTA_REG, DIO_PORTB_REG, DIO_PORTC_REG, DIO_PORTD_REG };
volatile u8 *DIO_ArrpVu8_PIN[4] =
{ DIO_PINA_REG, DIO_PINB_REG, DIO_PINC_REG, DIO_PIND_REG };

void DIO_VoidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <DIO_VoidSetPinDirection+0x6>
    22dc:	0f 92       	push	r0
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	6a 83       	std	Y+2, r22	; 0x02
    22e6:	4b 83       	std	Y+3, r20	; 0x03

	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	84 30       	cpi	r24, 0x04	; 4
    22ec:	08 f0       	brcs	.+2      	; 0x22f0 <DIO_VoidSetPinDirection+0x1a>
    22ee:	54 c0       	rjmp	.+168    	; 0x2398 <DIO_VoidSetPinDirection+0xc2>
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	88 30       	cpi	r24, 0x08	; 8
    22f4:	08 f0       	brcs	.+2      	; 0x22f8 <DIO_VoidSetPinDirection+0x22>
    22f6:	50 c0       	rjmp	.+160    	; 0x2398 <DIO_VoidSetPinDirection+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	29 f5       	brne	.+74     	; 0x2348 <DIO_VoidSetPinDirection+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	fc 01       	movw	r30, r24
    230a:	e3 52       	subi	r30, 0x23	; 35
    230c:	fe 4f       	sbci	r31, 0xFE	; 254
    230e:	a0 81       	ld	r26, Z
    2310:	b1 81       	ldd	r27, Z+1	; 0x01
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	fc 01       	movw	r30, r24
    231e:	e3 52       	subi	r30, 0x23	; 35
    2320:	fe 4f       	sbci	r31, 0xFE	; 254
    2322:	01 90       	ld	r0, Z+
    2324:	f0 81       	ld	r31, Z
    2326:	e0 2d       	mov	r30, r0
    2328:	80 81       	ld	r24, Z
    232a:	48 2f       	mov	r20, r24
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_VoidSetPinDirection+0x68>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_VoidSetPinDirection+0x64>
    2342:	84 2b       	or	r24, r20
    2344:	8c 93       	st	X, r24
    2346:	28 c0       	rjmp	.+80     	; 0x2398 <DIO_VoidSetPinDirection+0xc2>
		}
		else if (Copy_u8Direction == DIO_u8PIN_INPUT)
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	88 23       	and	r24, r24
    234c:	29 f5       	brne	.+74     	; 0x2398 <DIO_VoidSetPinDirection+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_DDR[Copy_u8Port], Copy_u8Pin);
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	fc 01       	movw	r30, r24
    235a:	e3 52       	subi	r30, 0x23	; 35
    235c:	fe 4f       	sbci	r31, 0xFE	; 254
    235e:	a0 81       	ld	r26, Z
    2360:	b1 81       	ldd	r27, Z+1	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	fc 01       	movw	r30, r24
    236e:	e3 52       	subi	r30, 0x23	; 35
    2370:	fe 4f       	sbci	r31, 0xFE	; 254
    2372:	01 90       	ld	r0, Z+
    2374:	f0 81       	ld	r31, Z
    2376:	e0 2d       	mov	r30, r0
    2378:	80 81       	ld	r24, Z
    237a:	48 2f       	mov	r20, r24
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	02 2e       	mov	r0, r18
    2388:	02 c0       	rjmp	.+4      	; 0x238e <DIO_VoidSetPinDirection+0xb8>
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	0a 94       	dec	r0
    2390:	e2 f7       	brpl	.-8      	; 0x238a <DIO_VoidSetPinDirection+0xb4>
    2392:	80 95       	com	r24
    2394:	84 23       	and	r24, r20
    2396:	8c 93       	st	X, r24
//			CLR_BIT(DIO_DDRD_REG, Copy_u8Pin);
//			break;
//		}
//	}

}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <DIO_VoidSetPinValue+0x6>
    23aa:	0f 92       	push	r0
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	6a 83       	std	Y+2, r22	; 0x02
    23b4:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	84 30       	cpi	r24, 0x04	; 4
    23ba:	08 f0       	brcs	.+2      	; 0x23be <DIO_VoidSetPinValue+0x1a>
    23bc:	54 c0       	rjmp	.+168    	; 0x2466 <DIO_VoidSetPinValue+0xc2>
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	88 30       	cpi	r24, 0x08	; 8
    23c2:	08 f0       	brcs	.+2      	; 0x23c6 <DIO_VoidSetPinValue+0x22>
    23c4:	50 c0       	rjmp	.+160    	; 0x2466 <DIO_VoidSetPinValue+0xc2>
	{
		/*short to select port and pin */
		if (Copy_u8Value == DIO_u8PIN_HIGH)
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	29 f5       	brne	.+74     	; 0x2416 <DIO_VoidSetPinValue+0x72>
		{
			SET_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	fc 01       	movw	r30, r24
    23d8:	eb 51       	subi	r30, 0x1B	; 27
    23da:	fe 4f       	sbci	r31, 0xFE	; 254
    23dc:	a0 81       	ld	r26, Z
    23de:	b1 81       	ldd	r27, Z+1	; 0x01
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	fc 01       	movw	r30, r24
    23ec:	eb 51       	subi	r30, 0x1B	; 27
    23ee:	fe 4f       	sbci	r31, 0xFE	; 254
    23f0:	01 90       	ld	r0, Z+
    23f2:	f0 81       	ld	r31, Z
    23f4:	e0 2d       	mov	r30, r0
    23f6:	80 81       	ld	r24, Z
    23f8:	48 2f       	mov	r20, r24
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	02 2e       	mov	r0, r18
    2406:	02 c0       	rjmp	.+4      	; 0x240c <DIO_VoidSetPinValue+0x68>
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	0a 94       	dec	r0
    240e:	e2 f7       	brpl	.-8      	; 0x2408 <DIO_VoidSetPinValue+0x64>
    2410:	84 2b       	or	r24, r20
    2412:	8c 93       	st	X, r24
    2414:	28 c0       	rjmp	.+80     	; 0x2466 <DIO_VoidSetPinValue+0xc2>
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	88 23       	and	r24, r24
    241a:	29 f5       	brne	.+74     	; 0x2466 <DIO_VoidSetPinValue+0xc2>
		{
			CLR_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port], Copy_u8Pin);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	fc 01       	movw	r30, r24
    2428:	eb 51       	subi	r30, 0x1B	; 27
    242a:	fe 4f       	sbci	r31, 0xFE	; 254
    242c:	a0 81       	ld	r26, Z
    242e:	b1 81       	ldd	r27, Z+1	; 0x01
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	fc 01       	movw	r30, r24
    243c:	eb 51       	subi	r30, 0x1B	; 27
    243e:	fe 4f       	sbci	r31, 0xFE	; 254
    2440:	01 90       	ld	r0, Z+
    2442:	f0 81       	ld	r31, Z
    2444:	e0 2d       	mov	r30, r0
    2446:	80 81       	ld	r24, Z
    2448:	48 2f       	mov	r20, r24
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 2e       	mov	r0, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <DIO_VoidSetPinValue+0xb8>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	0a 94       	dec	r0
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <DIO_VoidSetPinValue+0xb4>
    2460:	80 95       	com	r24
    2462:	84 23       	and	r24, r20
    2464:	8c 93       	st	X, r24
	else
	{
		/*empty */

	}
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8Return)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <DIO_VoidGetPinValue+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <DIO_VoidGetPinValue+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	6a 83       	std	Y+2, r22	; 0x02
    2482:	5c 83       	std	Y+4, r21	; 0x04
    2484:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	84 30       	cpi	r24, 0x04	; 4
    248a:	f8 f4       	brcc	.+62     	; 0x24ca <DIO_VoidGetPinValue+0x58>
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	88 30       	cpi	r24, 0x08	; 8
    2490:	e0 f4       	brcc	.+56     	; 0x24ca <DIO_VoidGetPinValue+0x58>
     	{

		   *Copy_Pu8Return=GET_BIT(*DIO_ArrpVu8_PIN[Copy_u8Port],Copy_u8Pin);
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	fc 01       	movw	r30, r24
    249e:	e3 51       	subi	r30, 0x13	; 19
    24a0:	fe 4f       	sbci	r31, 0xFE	; 254
    24a2:	01 90       	ld	r0, Z+
    24a4:	f0 81       	ld	r31, Z
    24a6:	e0 2d       	mov	r30, r0
    24a8:	80 81       	ld	r24, Z
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a9 01       	movw	r20, r18
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <DIO_VoidGetPinValue+0x4a>
    24b8:	55 95       	asr	r21
    24ba:	47 95       	ror	r20
    24bc:	8a 95       	dec	r24
    24be:	e2 f7       	brpl	.-8      	; 0x24b8 <DIO_VoidGetPinValue+0x46>
    24c0:	ca 01       	movw	r24, r20
    24c2:	81 70       	andi	r24, 0x01	; 1
    24c4:	eb 81       	ldd	r30, Y+3	; 0x03
    24c6:	fc 81       	ldd	r31, Y+4	; 0x04
    24c8:	80 83       	st	Z, r24
		else
		{
			/*empty */

		}
}
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <DIO_VoidSetPortDirection>:

/*Port Level*/
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <DIO_VoidSetPortDirection+0x6>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	84 30       	cpi	r24, 0x04	; 4
    24ea:	68 f4       	brcc	.+26     	; 0x2506 <DIO_VoidSetPortDirection+0x2e>
	{

		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Direction;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	fc 01       	movw	r30, r24
    24f8:	e3 52       	subi	r30, 0x23	; 35
    24fa:	fe 4f       	sbci	r31, 0xFE	; 254
    24fc:	01 90       	ld	r0, Z+
    24fe:	f0 81       	ld	r31, Z
    2500:	e0 2d       	mov	r30, r0
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	80 83       	st	Z, r24
	}
	else
	{
       /*empty*/
	}
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <DIO_VoidSetPortValue>:

/*Port value*/
void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <DIO_VoidSetPortValue+0x6>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	84 30       	cpi	r24, 0x04	; 4
    2522:	68 f4       	brcc	.+26     	; 0x253e <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ArrpVu8_DDR[Copy_u8Port] = Copy_u8Value;
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	fc 01       	movw	r30, r24
    2530:	e3 52       	subi	r30, 0x23	; 35
    2532:	fe 4f       	sbci	r31, 0xFE	; 254
    2534:	01 90       	ld	r0, Z+
    2536:	f0 81       	ld	r31, Z
    2538:	e0 2d       	mov	r30, r0
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <DIO_VoidGetPortValue>:

void DIO_VoidGetPortValue(u8 Copy_u8Port, u8 *Copy_Pu8Return)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	00 d0       	rcall	.+0      	; 0x254e <DIO_VoidGetPortValue+0x6>
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	7b 83       	std	Y+3, r23	; 0x03
    2558:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Port <= DIO_u8PORTD)
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	84 30       	cpi	r24, 0x04	; 4
    255e:	78 f4       	brcc	.+30     	; 0x257e <DIO_VoidGetPortValue+0x36>
	{
		*Copy_Pu8Return = *DIO_ArrpVu8_PIN[Copy_u8Port];
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	88 2f       	mov	r24, r24
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	fc 01       	movw	r30, r24
    256c:	e3 51       	subi	r30, 0x13	; 19
    256e:	fe 4f       	sbci	r31, 0xFE	; 254
    2570:	01 90       	ld	r0, Z+
    2572:	f0 81       	ld	r31, Z
    2574:	e0 2d       	mov	r30, r0
    2576:	80 81       	ld	r24, Z
    2578:	ea 81       	ldd	r30, Y+2	; 0x02
    257a:	fb 81       	ldd	r31, Y+3	; 0x03
    257c:	80 83       	st	Z, r24
	else
	{
		/*empty*/
	}

}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <DIO_VoidTogglePIN>:

void DIO_VoidTogglePIN(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <DIO_VoidTogglePIN+0x6>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	6a 83       	std	Y+2, r22	; 0x02
	  if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	84 30       	cpi	r24, 0x04	; 4
    259c:	38 f5       	brcc	.+78     	; 0x25ec <DIO_VoidTogglePIN+0x62>
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	88 30       	cpi	r24, 0x08	; 8
    25a2:	20 f5       	brcc	.+72     	; 0x25ec <DIO_VoidTogglePIN+0x62>
		{
		  TOG_BIT(*DIO_ArrpVu8_PORT[Copy_u8Port],Copy_u8Pin);
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	fc 01       	movw	r30, r24
    25b0:	eb 51       	subi	r30, 0x1B	; 27
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	a0 81       	ld	r26, Z
    25b6:	b1 81       	ldd	r27, Z+1	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	fc 01       	movw	r30, r24
    25c4:	eb 51       	subi	r30, 0x1B	; 27
    25c6:	fe 4f       	sbci	r31, 0xFE	; 254
    25c8:	01 90       	ld	r0, Z+
    25ca:	f0 81       	ld	r31, Z
    25cc:	e0 2d       	mov	r30, r0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_VoidTogglePIN+0x5a>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_VoidTogglePIN+0x56>
    25e8:	84 27       	eor	r24, r20
    25ea:	8c 93       	st	X, r24
		}
	  else
	  		  {

	  		  }
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <ADC_voidInit>:
#include"ADC_Config.h"
#include"ADC_Interface.h"



void ADC_voidInit(void){
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62

	/*2- Configure Prescaler*/
	ADC_ADCSRA_REG	|=ADC_PRESCALER;
    25fe:	a6 e2       	ldi	r26, 0x26	; 38
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e6 e2       	ldi	r30, 0x26	; 38
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	87 60       	ori	r24, 0x07	; 7
    260a:	8c 93       	st	X, r24
	/*1-Configuring Voltage Reference*/
	ADC_ADMUX_REG|=(ADC_VOLTAGE_REFRENCE<<ADC_ADMUX_REFS0_BIT);
    260c:	a7 e2       	ldi	r26, 0x27	; 39
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e7 e2       	ldi	r30, 0x27	; 39
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	80 64       	ori	r24, 0x40	; 64
    2618:	8c 93       	st	X, r24
	/*3-SET ADEN*/
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADEN_BIT);
    261a:	a6 e2       	ldi	r26, 0x26	; 38
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e6 e2       	ldi	r30, 0x26	; 38
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	80 68       	ori	r24, 0x80	; 128
    2626:	8c 93       	st	X, r24




}
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <ADC_StartConv>:
void ADC_StartConv(u8 Copy_u8SelectedChannel,u16 *Copy_pu16Return){
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <ADC_StartConv+0x6>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	7b 83       	std	Y+3, r23	; 0x03
    263e:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8SelectedChannel<=ADC_CHANNEL7){
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	88 30       	cpi	r24, 0x08	; 8
    2644:	70 f5       	brcc	.+92     	; 0x26a2 <ADC_StartConv+0x74>
		/*1-Select Channel*/
		ADC_ADMUX_REG|=Copy_u8SelectedChannel;
    2646:	a7 e2       	ldi	r26, 0x27	; 39
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e7 e2       	ldi	r30, 0x27	; 39
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	90 81       	ld	r25, Z
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	89 2b       	or	r24, r25
    2654:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT);
    2656:	a6 e2       	ldi	r26, 0x26	; 38
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e6 e2       	ldi	r30, 0x26	; 38
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	80 64       	ori	r24, 0x40	; 64
    2662:	8c 93       	st	X, r24
		while(GET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADCSC_BIT)==1);
    2664:	e6 e2       	ldi	r30, 0x26	; 38
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	82 95       	swap	r24
    266c:	86 95       	lsr	r24
    266e:	86 95       	lsr	r24
    2670:	83 70       	andi	r24, 0x03	; 3
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	88 23       	and	r24, r24
    267c:	99 f7       	brne	.-26     	; 0x2664 <ADC_StartConv+0x36>
		      *Copy_pu16Return=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    267e:	e4 e2       	ldi	r30, 0x24	; 36
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	e5 e2       	ldi	r30, 0x25	; 37
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	98 2f       	mov	r25, r24
    2694:	88 27       	eor	r24, r24
    2696:	82 2b       	or	r24, r18
    2698:	93 2b       	or	r25, r19
    269a:	ea 81       	ldd	r30, Y+2	; 0x02
    269c:	fb 81       	ldd	r31, Y+3	; 0x03
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
		else
		{
			/*NO OPERATION*/
		}

}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <Init_SM>:
#include<util/delay.h>
#include"../../MCAL/DIO/DIO_Interface.h"
#include"SM_Interface.h"

void Init_SM(SM_st *Copy_SM_st)
{
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	ca 55       	subi	r28, 0x5A	; 90
    26bc:	d1 40       	sbci	r29, 0x01	; 1
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	fe 01       	movw	r30, r28
    26ca:	e7 5a       	subi	r30, 0xA7	; 167
    26cc:	fe 4f       	sbci	r31, 0xFE	; 254
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    26d2:	fe 01       	movw	r30, r28
    26d4:	e7 5a       	subi	r30, 0xA7	; 167
    26d6:	fe 4f       	sbci	r31, 0xFE	; 254
    26d8:	01 90       	ld	r0, Z+
    26da:	f0 81       	ld	r31, Z
    26dc:	e0 2d       	mov	r30, r0
    26de:	80 81       	ld	r24, Z
    26e0:	fe 01       	movw	r30, r28
    26e2:	e7 5a       	subi	r30, 0xA7	; 167
    26e4:	fe 4f       	sbci	r31, 0xFE	; 254
    26e6:	01 90       	ld	r0, Z+
    26e8:	f0 81       	ld	r31, Z
    26ea:	e0 2d       	mov	r30, r0
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	69 2f       	mov	r22, r25
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5a       	subi	r30, 0xA7	; 167
    26fa:	fe 4f       	sbci	r31, 0xFE	; 254
    26fc:	01 90       	ld	r0, Z+
    26fe:	f0 81       	ld	r31, Z
    2700:	e0 2d       	mov	r30, r0
    2702:	80 81       	ld	r24, Z
    2704:	fe 01       	movw	r30, r28
    2706:	e7 5a       	subi	r30, 0xA7	; 167
    2708:	fe 4f       	sbci	r31, 0xFE	; 254
    270a:	01 90       	ld	r0, Z+
    270c:	f0 81       	ld	r31, Z
    270e:	e0 2d       	mov	r30, r0
    2710:	92 81       	ldd	r25, Z+2	; 0x02
    2712:	69 2f       	mov	r22, r25
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    271a:	fe 01       	movw	r30, r28
    271c:	e7 5a       	subi	r30, 0xA7	; 167
    271e:	fe 4f       	sbci	r31, 0xFE	; 254
    2720:	01 90       	ld	r0, Z+
    2722:	f0 81       	ld	r31, Z
    2724:	e0 2d       	mov	r30, r0
    2726:	80 81       	ld	r24, Z
    2728:	fe 01       	movw	r30, r28
    272a:	e7 5a       	subi	r30, 0xA7	; 167
    272c:	fe 4f       	sbci	r31, 0xFE	; 254
    272e:	01 90       	ld	r0, Z+
    2730:	f0 81       	ld	r31, Z
    2732:	e0 2d       	mov	r30, r0
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	69 2f       	mov	r22, r25
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    273e:	fe 01       	movw	r30, r28
    2740:	e7 5a       	subi	r30, 0xA7	; 167
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	01 90       	ld	r0, Z+
    2746:	f0 81       	ld	r31, Z
    2748:	e0 2d       	mov	r30, r0
    274a:	80 81       	ld	r24, Z
    274c:	fe 01       	movw	r30, r28
    274e:	e7 5a       	subi	r30, 0xA7	; 167
    2750:	fe 4f       	sbci	r31, 0xFE	; 254
    2752:	01 90       	ld	r0, Z+
    2754:	f0 81       	ld	r31, Z
    2756:	e0 2d       	mov	r30, r0
    2758:	94 81       	ldd	r25, Z+4	; 0x04
    275a:	69 2f       	mov	r22, r25
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	
	u32 i, j;
	DIO_VoidSetPortDirection(Copy_SM_st->SM_Port, DIO_u8PORT_OUTPUT);
    2762:	fe 01       	movw	r30, r28
    2764:	e7 5a       	subi	r30, 0xA7	; 167
    2766:	fe 4f       	sbci	r31, 0xFE	; 254
    2768:	01 90       	ld	r0, Z+
    276a:	f0 81       	ld	r31, Z
    276c:	e0 2d       	mov	r30, r0
    276e:	80 81       	ld	r24, Z
    2770:	6f ef       	ldi	r22, 0xFF	; 255
    2772:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <DIO_VoidSetPortDirection>
	if (Copy_SM_st->Step_Type == Full_Step)
    2776:	fe 01       	movw	r30, r28
    2778:	e7 5a       	subi	r30, 0xA7	; 167
    277a:	fe 4f       	sbci	r31, 0xFE	; 254
    277c:	01 90       	ld	r0, Z+
    277e:	f0 81       	ld	r31, Z
    2780:	e0 2d       	mov	r30, r0
    2782:	85 81       	ldd	r24, Z+5	; 0x05
    2784:	88 23       	and	r24, r24
    2786:	11 f0       	breq	.+4      	; 0x278c <Init_SM+0xde>
    2788:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <Init_SM+0x12a4>
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
    278c:	fe 01       	movw	r30, r28
    278e:	e7 5a       	subi	r30, 0xA7	; 167
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	01 90       	ld	r0, Z+
    2794:	f0 81       	ld	r31, Z
    2796:	e0 2d       	mov	r30, r0
    2798:	86 81       	ldd	r24, Z+6	; 0x06
    279a:	83 30       	cpi	r24, 0x03	; 3
    279c:	09 f0       	breq	.+2      	; 0x27a0 <Init_SM+0xf2>
    279e:	67 c4       	rjmp	.+2254   	; 0x306e <Init_SM+0x9c0>
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    27a0:	fe 01       	movw	r30, r28
    27a2:	ef 5a       	subi	r30, 0xAF	; 175
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	10 82       	st	Z, r1
    27a8:	11 82       	std	Z+1, r1	; 0x01
    27aa:	12 82       	std	Z+2, r1	; 0x02
    27ac:	13 82       	std	Z+3, r1	; 0x03
    27ae:	fe c3       	rjmp	.+2044   	; 0x2fac <Init_SM+0x8fe>
			{
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 5a       	subi	r30, 0xA7	; 167
    27b4:	fe 4f       	sbci	r31, 0xFE	; 254
    27b6:	01 90       	ld	r0, Z+
    27b8:	f0 81       	ld	r31, Z
    27ba:	e0 2d       	mov	r30, r0
    27bc:	80 81       	ld	r24, Z
    27be:	fe 01       	movw	r30, r28
    27c0:	e7 5a       	subi	r30, 0xA7	; 167
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	01 90       	ld	r0, Z+
    27c6:	f0 81       	ld	r31, Z
    27c8:	e0 2d       	mov	r30, r0
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	69 2f       	mov	r22, r25
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    27d4:	fe 01       	movw	r30, r28
    27d6:	e7 5a       	subi	r30, 0xA7	; 167
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	01 90       	ld	r0, Z+
    27dc:	f0 81       	ld	r31, Z
    27de:	e0 2d       	mov	r30, r0
    27e0:	80 81       	ld	r24, Z
    27e2:	fe 01       	movw	r30, r28
    27e4:	e7 5a       	subi	r30, 0xA7	; 167
    27e6:	fe 4f       	sbci	r31, 0xFE	; 254
    27e8:	01 90       	ld	r0, Z+
    27ea:	f0 81       	ld	r31, Z
    27ec:	e0 2d       	mov	r30, r0
    27ee:	92 81       	ldd	r25, Z+2	; 0x02
    27f0:	69 2f       	mov	r22, r25
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5a       	subi	r30, 0xA7	; 167
    27fc:	fe 4f       	sbci	r31, 0xFE	; 254
    27fe:	01 90       	ld	r0, Z+
    2800:	f0 81       	ld	r31, Z
    2802:	e0 2d       	mov	r30, r0
    2804:	80 81       	ld	r24, Z
    2806:	fe 01       	movw	r30, r28
    2808:	e7 5a       	subi	r30, 0xA7	; 167
    280a:	fe 4f       	sbci	r31, 0xFE	; 254
    280c:	01 90       	ld	r0, Z+
    280e:	f0 81       	ld	r31, Z
    2810:	e0 2d       	mov	r30, r0
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	69 2f       	mov	r22, r25
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    281c:	fe 01       	movw	r30, r28
    281e:	e7 5a       	subi	r30, 0xA7	; 167
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	01 90       	ld	r0, Z+
    2824:	f0 81       	ld	r31, Z
    2826:	e0 2d       	mov	r30, r0
    2828:	80 81       	ld	r24, Z
    282a:	fe 01       	movw	r30, r28
    282c:	e7 5a       	subi	r30, 0xA7	; 167
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	01 90       	ld	r0, Z+
    2832:	f0 81       	ld	r31, Z
    2834:	e0 2d       	mov	r30, r0
    2836:	94 81       	ldd	r25, Z+4	; 0x04
    2838:	69 2f       	mov	r22, r25
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    2840:	fe 01       	movw	r30, r28
    2842:	e3 5b       	subi	r30, 0xB3	; 179
    2844:	fe 4f       	sbci	r31, 0xFE	; 254
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 ea       	ldi	r26, 0xA0	; 160
    284c:	b0 e4       	ldi	r27, 0x40	; 64
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	8e 01       	movw	r16, r28
    2858:	07 5b       	subi	r16, 0xB7	; 183
    285a:	1e 4f       	sbci	r17, 0xFE	; 254
    285c:	fe 01       	movw	r30, r28
    285e:	e3 5b       	subi	r30, 0xB3	; 179
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2884:	fe 01       	movw	r30, r28
    2886:	e7 5b       	subi	r30, 0xB7	; 183
    2888:	fe 4f       	sbci	r31, 0xFE	; 254
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	44 f4       	brge	.+16     	; 0x28b2 <Init_SM+0x204>
		__ticks = 1;
    28a2:	fe 01       	movw	r30, r28
    28a4:	e9 5b       	subi	r30, 0xB9	; 185
    28a6:	fe 4f       	sbci	r31, 0xFE	; 254
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	64 c0       	rjmp	.+200    	; 0x297a <Init_SM+0x2cc>
	else if (__tmp > 65535)
    28b2:	fe 01       	movw	r30, r28
    28b4:	e7 5b       	subi	r30, 0xB7	; 183
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	57 e4       	ldi	r21, 0x47	; 71
    28c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	0c f0       	brlt	.+2      	; 0x28d2 <Init_SM+0x224>
    28d0:	43 c0       	rjmp	.+134    	; 0x2958 <Init_SM+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d2:	fe 01       	movw	r30, r28
    28d4:	e3 5b       	subi	r30, 0xB3	; 179
    28d6:	fe 4f       	sbci	r31, 0xFE	; 254
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8e 01       	movw	r16, r28
    28f2:	09 5b       	subi	r16, 0xB9	; 185
    28f4:	1e 4f       	sbci	r17, 0xFE	; 254
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	f8 01       	movw	r30, r16
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
    2908:	1f c0       	rjmp	.+62     	; 0x2948 <Init_SM+0x29a>
    290a:	fe 01       	movw	r30, r28
    290c:	eb 5b       	subi	r30, 0xBB	; 187
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	88 ec       	ldi	r24, 0xC8	; 200
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2918:	fe 01       	movw	r30, r28
    291a:	eb 5b       	subi	r30, 0xBB	; 187
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <Init_SM+0x274>
    2926:	fe 01       	movw	r30, r28
    2928:	eb 5b       	subi	r30, 0xBB	; 187
    292a:	fe 4f       	sbci	r31, 0xFE	; 254
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	de 01       	movw	r26, r28
    2932:	a9 5b       	subi	r26, 0xB9	; 185
    2934:	be 4f       	sbci	r27, 0xFE	; 254
    2936:	fe 01       	movw	r30, r28
    2938:	e9 5b       	subi	r30, 0xB9	; 185
    293a:	fe 4f       	sbci	r31, 0xFE	; 254
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	11 96       	adiw	r26, 0x01	; 1
    2944:	9c 93       	st	X, r25
    2946:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	fe 01       	movw	r30, r28
    294a:	e9 5b       	subi	r30, 0xB9	; 185
    294c:	fe 4f       	sbci	r31, 0xFE	; 254
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	d1 f6       	brne	.-76     	; 0x290a <Init_SM+0x25c>
    2956:	27 c0       	rjmp	.+78     	; 0x29a6 <Init_SM+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	8e 01       	movw	r16, r28
    295a:	09 5b       	subi	r16, 0xB9	; 185
    295c:	1e 4f       	sbci	r17, 0xFE	; 254
    295e:	fe 01       	movw	r30, r28
    2960:	e7 5b       	subi	r30, 0xB7	; 183
    2962:	fe 4f       	sbci	r31, 0xFE	; 254
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	f8 01       	movw	r30, r16
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	de 01       	movw	r26, r28
    297c:	ad 5b       	subi	r26, 0xBD	; 189
    297e:	be 4f       	sbci	r27, 0xFE	; 254
    2980:	fe 01       	movw	r30, r28
    2982:	e9 5b       	subi	r30, 0xB9	; 185
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	8d 93       	st	X+, r24
    298c:	9c 93       	st	X, r25
    298e:	fe 01       	movw	r30, r28
    2990:	ed 5b       	subi	r30, 0xBD	; 189
    2992:	fe 4f       	sbci	r31, 0xFE	; 254
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <Init_SM+0x2ea>
    299c:	fe 01       	movw	r30, r28
    299e:	ed 5b       	subi	r30, 0xBD	; 189
    29a0:	fe 4f       	sbci	r31, 0xFE	; 254
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    29a6:	fe 01       	movw	r30, r28
    29a8:	e7 5a       	subi	r30, 0xA7	; 167
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	01 90       	ld	r0, Z+
    29ae:	f0 81       	ld	r31, Z
    29b0:	e0 2d       	mov	r30, r0
    29b2:	80 81       	ld	r24, Z
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 5a       	subi	r30, 0xA7	; 167
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	01 90       	ld	r0, Z+
    29bc:	f0 81       	ld	r31, Z
    29be:	e0 2d       	mov	r30, r0
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	69 2f       	mov	r22, r25
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    29ca:	fe 01       	movw	r30, r28
    29cc:	e7 5a       	subi	r30, 0xA7	; 167
    29ce:	fe 4f       	sbci	r31, 0xFE	; 254
    29d0:	01 90       	ld	r0, Z+
    29d2:	f0 81       	ld	r31, Z
    29d4:	e0 2d       	mov	r30, r0
    29d6:	80 81       	ld	r24, Z
    29d8:	fe 01       	movw	r30, r28
    29da:	e7 5a       	subi	r30, 0xA7	; 167
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	01 90       	ld	r0, Z+
    29e0:	f0 81       	ld	r31, Z
    29e2:	e0 2d       	mov	r30, r0
    29e4:	92 81       	ldd	r25, Z+2	; 0x02
    29e6:	69 2f       	mov	r22, r25
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    29ee:	fe 01       	movw	r30, r28
    29f0:	e7 5a       	subi	r30, 0xA7	; 167
    29f2:	fe 4f       	sbci	r31, 0xFE	; 254
    29f4:	01 90       	ld	r0, Z+
    29f6:	f0 81       	ld	r31, Z
    29f8:	e0 2d       	mov	r30, r0
    29fa:	80 81       	ld	r24, Z
    29fc:	fe 01       	movw	r30, r28
    29fe:	e7 5a       	subi	r30, 0xA7	; 167
    2a00:	fe 4f       	sbci	r31, 0xFE	; 254
    2a02:	01 90       	ld	r0, Z+
    2a04:	f0 81       	ld	r31, Z
    2a06:	e0 2d       	mov	r30, r0
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	69 2f       	mov	r22, r25
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    2a12:	fe 01       	movw	r30, r28
    2a14:	e7 5a       	subi	r30, 0xA7	; 167
    2a16:	fe 4f       	sbci	r31, 0xFE	; 254
    2a18:	01 90       	ld	r0, Z+
    2a1a:	f0 81       	ld	r31, Z
    2a1c:	e0 2d       	mov	r30, r0
    2a1e:	80 81       	ld	r24, Z
    2a20:	fe 01       	movw	r30, r28
    2a22:	e7 5a       	subi	r30, 0xA7	; 167
    2a24:	fe 4f       	sbci	r31, 0xFE	; 254
    2a26:	01 90       	ld	r0, Z+
    2a28:	f0 81       	ld	r31, Z
    2a2a:	e0 2d       	mov	r30, r0
    2a2c:	94 81       	ldd	r25, Z+4	; 0x04
    2a2e:	69 2f       	mov	r22, r25
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    2a36:	fe 01       	movw	r30, r28
    2a38:	e1 5c       	subi	r30, 0xC1	; 193
    2a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	a0 ea       	ldi	r26, 0xA0	; 160
    2a42:	b0 e4       	ldi	r27, 0x40	; 64
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	05 5c       	subi	r16, 0xC5	; 197
    2a50:	1e 4f       	sbci	r17, 0xFE	; 254
    2a52:	fe 01       	movw	r30, r28
    2a54:	e1 5c       	subi	r30, 0xC1	; 193
    2a56:	fe 4f       	sbci	r31, 0xFE	; 254
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4a ef       	ldi	r20, 0xFA	; 250
    2a66:	54 e4       	ldi	r21, 0x44	; 68
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	f8 01       	movw	r30, r16
    2a72:	80 83       	st	Z, r24
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	a2 83       	std	Z+2, r26	; 0x02
    2a78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e5 5c       	subi	r30, 0xC5	; 197
    2a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	44 f4       	brge	.+16     	; 0x2aa8 <Init_SM+0x3fa>
		__ticks = 1;
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e7 5c       	subi	r30, 0xC7	; 199
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
    2aa6:	64 c0       	rjmp	.+200    	; 0x2b70 <Init_SM+0x4c2>
	else if (__tmp > 65535)
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e5 5c       	subi	r30, 0xC5	; 197
    2aac:	fe 4f       	sbci	r31, 0xFE	; 254
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	3f ef       	ldi	r19, 0xFF	; 255
    2aba:	4f e7       	ldi	r20, 0x7F	; 127
    2abc:	57 e4       	ldi	r21, 0x47	; 71
    2abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	0c f0       	brlt	.+2      	; 0x2ac8 <Init_SM+0x41a>
    2ac6:	43 c0       	rjmp	.+134    	; 0x2b4e <Init_SM+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e1 5c       	subi	r30, 0xC1	; 193
    2acc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e2       	ldi	r20, 0x20	; 32
    2adc:	51 e4       	ldi	r21, 0x41	; 65
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8e 01       	movw	r16, r28
    2ae8:	07 5c       	subi	r16, 0xC7	; 199
    2aea:	1e 4f       	sbci	r17, 0xFE	; 254
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	f8 01       	movw	r30, r16
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
    2afe:	1f c0       	rjmp	.+62     	; 0x2b3e <Init_SM+0x490>
    2b00:	fe 01       	movw	r30, r28
    2b02:	e9 5c       	subi	r30, 0xC9	; 201
    2b04:	fe 4f       	sbci	r31, 0xFE	; 254
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	80 83       	st	Z, r24
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e9 5c       	subi	r30, 0xC9	; 201
    2b12:	fe 4f       	sbci	r31, 0xFE	; 254
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <Init_SM+0x46a>
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e9 5c       	subi	r30, 0xC9	; 201
    2b20:	fe 4f       	sbci	r31, 0xFE	; 254
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	de 01       	movw	r26, r28
    2b28:	a7 5c       	subi	r26, 0xC7	; 199
    2b2a:	be 4f       	sbci	r27, 0xFE	; 254
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 5c       	subi	r30, 0xC7	; 199
    2b30:	fe 4f       	sbci	r31, 0xFE	; 254
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	11 96       	adiw	r26, 0x01	; 1
    2b3a:	9c 93       	st	X, r25
    2b3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e7 5c       	subi	r30, 0xC7	; 199
    2b42:	fe 4f       	sbci	r31, 0xFE	; 254
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	d1 f6       	brne	.-76     	; 0x2b00 <Init_SM+0x452>
    2b4c:	27 c0       	rjmp	.+78     	; 0x2b9c <Init_SM+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4e:	8e 01       	movw	r16, r28
    2b50:	07 5c       	subi	r16, 0xC7	; 199
    2b52:	1e 4f       	sbci	r17, 0xFE	; 254
    2b54:	fe 01       	movw	r30, r28
    2b56:	e5 5c       	subi	r30, 0xC5	; 197
    2b58:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
    2b70:	de 01       	movw	r26, r28
    2b72:	ab 5c       	subi	r26, 0xCB	; 203
    2b74:	be 4f       	sbci	r27, 0xFE	; 254
    2b76:	fe 01       	movw	r30, r28
    2b78:	e7 5c       	subi	r30, 0xC7	; 199
    2b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	8d 93       	st	X+, r24
    2b82:	9c 93       	st	X, r25
    2b84:	fe 01       	movw	r30, r28
    2b86:	eb 5c       	subi	r30, 0xCB	; 203
    2b88:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <Init_SM+0x4e0>
    2b92:	fe 01       	movw	r30, r28
    2b94:	eb 5c       	subi	r30, 0xCB	; 203
    2b96:	fe 4f       	sbci	r31, 0xFE	; 254
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba2:	01 90       	ld	r0, Z+
    2ba4:	f0 81       	ld	r31, Z
    2ba6:	e0 2d       	mov	r30, r0
    2ba8:	80 81       	ld	r24, Z
    2baa:	fe 01       	movw	r30, r28
    2bac:	e7 5a       	subi	r30, 0xA7	; 167
    2bae:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb0:	01 90       	ld	r0, Z+
    2bb2:	f0 81       	ld	r31, Z
    2bb4:	e0 2d       	mov	r30, r0
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	69 2f       	mov	r22, r25
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e7 5a       	subi	r30, 0xA7	; 167
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	01 90       	ld	r0, Z+
    2bc8:	f0 81       	ld	r31, Z
    2bca:	e0 2d       	mov	r30, r0
    2bcc:	80 81       	ld	r24, Z
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 5a       	subi	r30, 0xA7	; 167
    2bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd4:	01 90       	ld	r0, Z+
    2bd6:	f0 81       	ld	r31, Z
    2bd8:	e0 2d       	mov	r30, r0
    2bda:	92 81       	ldd	r25, Z+2	; 0x02
    2bdc:	69 2f       	mov	r22, r25
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    2be4:	fe 01       	movw	r30, r28
    2be6:	e7 5a       	subi	r30, 0xA7	; 167
    2be8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bea:	01 90       	ld	r0, Z+
    2bec:	f0 81       	ld	r31, Z
    2bee:	e0 2d       	mov	r30, r0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e7 5a       	subi	r30, 0xA7	; 167
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	01 90       	ld	r0, Z+
    2bfa:	f0 81       	ld	r31, Z
    2bfc:	e0 2d       	mov	r30, r0
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	69 2f       	mov	r22, r25
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e7 5a       	subi	r30, 0xA7	; 167
    2c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0e:	01 90       	ld	r0, Z+
    2c10:	f0 81       	ld	r31, Z
    2c12:	e0 2d       	mov	r30, r0
    2c14:	80 81       	ld	r24, Z
    2c16:	fe 01       	movw	r30, r28
    2c18:	e7 5a       	subi	r30, 0xA7	; 167
    2c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1c:	01 90       	ld	r0, Z+
    2c1e:	f0 81       	ld	r31, Z
    2c20:	e0 2d       	mov	r30, r0
    2c22:	94 81       	ldd	r25, Z+4	; 0x04
    2c24:	69 2f       	mov	r22, r25
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ef 5c       	subi	r30, 0xCF	; 207
    2c30:	fe 4f       	sbci	r31, 0xFE	; 254
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 ea       	ldi	r26, 0xA0	; 160
    2c38:	b0 e4       	ldi	r27, 0x40	; 64
    2c3a:	80 83       	st	Z, r24
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	a2 83       	std	Z+2, r26	; 0x02
    2c40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	8e 01       	movw	r16, r28
    2c44:	03 5d       	subi	r16, 0xD3	; 211
    2c46:	1e 4f       	sbci	r17, 0xFE	; 254
    2c48:	fe 01       	movw	r30, r28
    2c4a:	ef 5c       	subi	r30, 0xCF	; 207
    2c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a ef       	ldi	r20, 0xFA	; 250
    2c5c:	54 e4       	ldi	r21, 0x44	; 68
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	f8 01       	movw	r30, r16
    2c68:	80 83       	st	Z, r24
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	a2 83       	std	Z+2, r26	; 0x02
    2c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c70:	fe 01       	movw	r30, r28
    2c72:	e3 5d       	subi	r30, 0xD3	; 211
    2c74:	fe 4f       	sbci	r31, 0xFE	; 254
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	44 f4       	brge	.+16     	; 0x2c9e <Init_SM+0x5f0>
		__ticks = 1;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e5 5d       	subi	r30, 0xD5	; 213
    2c92:	fe 4f       	sbci	r31, 0xFE	; 254
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	64 c0       	rjmp	.+200    	; 0x2d66 <Init_SM+0x6b8>
	else if (__tmp > 65535)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e3 5d       	subi	r30, 0xD3	; 211
    2ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	0c f0       	brlt	.+2      	; 0x2cbe <Init_SM+0x610>
    2cbc:	43 c0       	rjmp	.+134    	; 0x2d44 <Init_SM+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ef 5c       	subi	r30, 0xCF	; 207
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8e 01       	movw	r16, r28
    2cde:	05 5d       	subi	r16, 0xD5	; 213
    2ce0:	1e 4f       	sbci	r17, 0xFE	; 254
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	f8 01       	movw	r30, r16
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	1f c0       	rjmp	.+62     	; 0x2d34 <Init_SM+0x686>
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e7 5d       	subi	r30, 0xD7	; 215
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	88 ec       	ldi	r24, 0xC8	; 200
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
    2d04:	fe 01       	movw	r30, r28
    2d06:	e7 5d       	subi	r30, 0xD7	; 215
    2d08:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <Init_SM+0x660>
    2d12:	fe 01       	movw	r30, r28
    2d14:	e7 5d       	subi	r30, 0xD7	; 215
    2d16:	fe 4f       	sbci	r31, 0xFE	; 254
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	de 01       	movw	r26, r28
    2d1e:	a5 5d       	subi	r26, 0xD5	; 213
    2d20:	be 4f       	sbci	r27, 0xFE	; 254
    2d22:	fe 01       	movw	r30, r28
    2d24:	e5 5d       	subi	r30, 0xD5	; 213
    2d26:	fe 4f       	sbci	r31, 0xFE	; 254
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	9c 93       	st	X, r25
    2d32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	fe 01       	movw	r30, r28
    2d36:	e5 5d       	subi	r30, 0xD5	; 213
    2d38:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	d1 f6       	brne	.-76     	; 0x2cf6 <Init_SM+0x648>
    2d42:	27 c0       	rjmp	.+78     	; 0x2d92 <Init_SM+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d44:	8e 01       	movw	r16, r28
    2d46:	05 5d       	subi	r16, 0xD5	; 213
    2d48:	1e 4f       	sbci	r17, 0xFE	; 254
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e3 5d       	subi	r30, 0xD3	; 211
    2d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d50:	60 81       	ld	r22, Z
    2d52:	71 81       	ldd	r23, Z+1	; 0x01
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	f8 01       	movw	r30, r16
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    2d66:	de 01       	movw	r26, r28
    2d68:	a9 5d       	subi	r26, 0xD9	; 217
    2d6a:	be 4f       	sbci	r27, 0xFE	; 254
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e5 5d       	subi	r30, 0xD5	; 213
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	8d 93       	st	X+, r24
    2d78:	9c 93       	st	X, r25
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e9 5d       	subi	r30, 0xD9	; 217
    2d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <Init_SM+0x6d6>
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e9 5d       	subi	r30, 0xD9	; 217
    2d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    2d92:	fe 01       	movw	r30, r28
    2d94:	e7 5a       	subi	r30, 0xA7	; 167
    2d96:	fe 4f       	sbci	r31, 0xFE	; 254
    2d98:	01 90       	ld	r0, Z+
    2d9a:	f0 81       	ld	r31, Z
    2d9c:	e0 2d       	mov	r30, r0
    2d9e:	80 81       	ld	r24, Z
    2da0:	fe 01       	movw	r30, r28
    2da2:	e7 5a       	subi	r30, 0xA7	; 167
    2da4:	fe 4f       	sbci	r31, 0xFE	; 254
    2da6:	01 90       	ld	r0, Z+
    2da8:	f0 81       	ld	r31, Z
    2daa:	e0 2d       	mov	r30, r0
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	69 2f       	mov	r22, r25
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    2db6:	fe 01       	movw	r30, r28
    2db8:	e7 5a       	subi	r30, 0xA7	; 167
    2dba:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbc:	01 90       	ld	r0, Z+
    2dbe:	f0 81       	ld	r31, Z
    2dc0:	e0 2d       	mov	r30, r0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 5a       	subi	r30, 0xA7	; 167
    2dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dca:	01 90       	ld	r0, Z+
    2dcc:	f0 81       	ld	r31, Z
    2dce:	e0 2d       	mov	r30, r0
    2dd0:	92 81       	ldd	r25, Z+2	; 0x02
    2dd2:	69 2f       	mov	r22, r25
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e7 5a       	subi	r30, 0xA7	; 167
    2dde:	fe 4f       	sbci	r31, 0xFE	; 254
    2de0:	01 90       	ld	r0, Z+
    2de2:	f0 81       	ld	r31, Z
    2de4:	e0 2d       	mov	r30, r0
    2de6:	80 81       	ld	r24, Z
    2de8:	fe 01       	movw	r30, r28
    2dea:	e7 5a       	subi	r30, 0xA7	; 167
    2dec:	fe 4f       	sbci	r31, 0xFE	; 254
    2dee:	01 90       	ld	r0, Z+
    2df0:	f0 81       	ld	r31, Z
    2df2:	e0 2d       	mov	r30, r0
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	69 2f       	mov	r22, r25
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e7 5a       	subi	r30, 0xA7	; 167
    2e02:	fe 4f       	sbci	r31, 0xFE	; 254
    2e04:	01 90       	ld	r0, Z+
    2e06:	f0 81       	ld	r31, Z
    2e08:	e0 2d       	mov	r30, r0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e7 5a       	subi	r30, 0xA7	; 167
    2e10:	fe 4f       	sbci	r31, 0xFE	; 254
    2e12:	01 90       	ld	r0, Z+
    2e14:	f0 81       	ld	r31, Z
    2e16:	e0 2d       	mov	r30, r0
    2e18:	94 81       	ldd	r25, Z+4	; 0x04
    2e1a:	69 2f       	mov	r22, r25
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    2e22:	fe 01       	movw	r30, r28
    2e24:	ed 5d       	subi	r30, 0xDD	; 221
    2e26:	fe 4f       	sbci	r31, 0xFE	; 254
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 ea       	ldi	r26, 0xA0	; 160
    2e2e:	b0 e4       	ldi	r27, 0x40	; 64
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	8e 01       	movw	r16, r28
    2e3a:	01 5e       	subi	r16, 0xE1	; 225
    2e3c:	1e 4f       	sbci	r17, 0xFE	; 254
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ed 5d       	subi	r30, 0xDD	; 221
    2e42:	fe 4f       	sbci	r31, 0xFE	; 254
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	f8 01       	movw	r30, r16
    2e5e:	80 83       	st	Z, r24
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	a2 83       	std	Z+2, r26	; 0x02
    2e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e66:	fe 01       	movw	r30, r28
    2e68:	e1 5e       	subi	r30, 0xE1	; 225
    2e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	44 f4       	brge	.+16     	; 0x2e94 <Init_SM+0x7e6>
		__ticks = 1;
    2e84:	fe 01       	movw	r30, r28
    2e86:	e3 5e       	subi	r30, 0xE3	; 227
    2e88:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	80 83       	st	Z, r24
    2e92:	64 c0       	rjmp	.+200    	; 0x2f5c <Init_SM+0x8ae>
	else if (__tmp > 65535)
    2e94:	fe 01       	movw	r30, r28
    2e96:	e1 5e       	subi	r30, 0xE1	; 225
    2e98:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <Init_SM+0x806>
    2eb2:	43 c0       	rjmp	.+134    	; 0x2f3a <Init_SM+0x88c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ed 5d       	subi	r30, 0xDD	; 221
    2eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	8e 01       	movw	r16, r28
    2ed4:	03 5e       	subi	r16, 0xE3	; 227
    2ed6:	1e 4f       	sbci	r17, 0xFE	; 254
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
    2eea:	1f c0       	rjmp	.+62     	; 0x2f2a <Init_SM+0x87c>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e5 5e       	subi	r30, 0xE5	; 229
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	88 ec       	ldi	r24, 0xC8	; 200
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	fe 01       	movw	r30, r28
    2efc:	e5 5e       	subi	r30, 0xE5	; 229
    2efe:	fe 4f       	sbci	r31, 0xFE	; 254
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <Init_SM+0x856>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e5 5e       	subi	r30, 0xE5	; 229
    2f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	de 01       	movw	r26, r28
    2f14:	a3 5e       	subi	r26, 0xE3	; 227
    2f16:	be 4f       	sbci	r27, 0xFE	; 254
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e3 5e       	subi	r30, 0xE3	; 227
    2f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1e:	80 81       	ld	r24, Z
    2f20:	91 81       	ldd	r25, Z+1	; 0x01
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	11 96       	adiw	r26, 0x01	; 1
    2f26:	9c 93       	st	X, r25
    2f28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e3 5e       	subi	r30, 0xE3	; 227
    2f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	d1 f6       	brne	.-76     	; 0x2eec <Init_SM+0x83e>
    2f38:	27 c0       	rjmp	.+78     	; 0x2f88 <Init_SM+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	03 5e       	subi	r16, 0xE3	; 227
    2f3e:	1e 4f       	sbci	r17, 0xFE	; 254
    2f40:	fe 01       	movw	r30, r28
    2f42:	e1 5e       	subi	r30, 0xE1	; 225
    2f44:	fe 4f       	sbci	r31, 0xFE	; 254
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	f8 01       	movw	r30, r16
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
    2f5c:	de 01       	movw	r26, r28
    2f5e:	a7 5e       	subi	r26, 0xE7	; 231
    2f60:	be 4f       	sbci	r27, 0xFE	; 254
    2f62:	fe 01       	movw	r30, r28
    2f64:	e3 5e       	subi	r30, 0xE3	; 227
    2f66:	fe 4f       	sbci	r31, 0xFE	; 254
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	8d 93       	st	X+, r24
    2f6e:	9c 93       	st	X, r25
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5e       	subi	r30, 0xE7	; 231
    2f74:	fe 4f       	sbci	r31, 0xFE	; 254
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <Init_SM+0x8cc>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e7 5e       	subi	r30, 0xE7	; 231
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
	DIO_VoidSetPortDirection(Copy_SM_st->SM_Port, DIO_u8PORT_OUTPUT);
	if (Copy_SM_st->Step_Type == Full_Step)
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    2f88:	9e 01       	movw	r18, r28
    2f8a:	2f 5a       	subi	r18, 0xAF	; 175
    2f8c:	3e 4f       	sbci	r19, 0xFE	; 254
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ef 5a       	subi	r30, 0xAF	; 175
    2f92:	fe 4f       	sbci	r31, 0xFE	; 254
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	a2 81       	ldd	r26, Z+2	; 0x02
    2f9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	a1 1d       	adc	r26, r1
    2fa0:	b1 1d       	adc	r27, r1
    2fa2:	f9 01       	movw	r30, r18
    2fa4:	80 83       	st	Z, r24
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	a2 83       	std	Z+2, r26	; 0x02
    2faa:	b3 83       	std	Z+3, r27	; 0x03
    2fac:	fe 01       	movw	r30, r28
    2fae:	e7 5a       	subi	r30, 0xA7	; 167
    2fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb2:	01 90       	ld	r0, Z+
    2fb4:	f0 81       	ld	r31, Z
    2fb6:	e0 2d       	mov	r30, r0
    2fb8:	20 85       	ldd	r18, Z+8	; 0x08
    2fba:	31 85       	ldd	r19, Z+9	; 0x09
    2fbc:	42 85       	ldd	r20, Z+10	; 0x0a
    2fbe:	53 85       	ldd	r21, Z+11	; 0x0b
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ef 5a       	subi	r30, 0xAF	; 175
    2fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	a2 81       	ldd	r26, Z+2	; 0x02
    2fcc:	b3 81       	ldd	r27, Z+3	; 0x03
    2fce:	82 17       	cp	r24, r18
    2fd0:	93 07       	cpc	r25, r19
    2fd2:	a4 07       	cpc	r26, r20
    2fd4:	b5 07       	cpc	r27, r21
    2fd6:	08 f4       	brcc	.+2      	; 0x2fda <Init_SM+0x92c>
    2fd8:	eb cb       	rjmp	.-2090   	; 0x27b0 <Init_SM+0x102>
				DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
						DIO_u8PIN_HIGH);
				_delay_ms(5);
			}
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 5a       	subi	r30, 0xA7	; 167
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe0:	01 90       	ld	r0, Z+
    2fe2:	f0 81       	ld	r31, Z
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e7 5a       	subi	r30, 0xA7	; 167
    2fec:	fe 4f       	sbci	r31, 0xFE	; 254
    2fee:	01 90       	ld	r0, Z+
    2ff0:	f0 81       	ld	r31, Z
    2ff2:	e0 2d       	mov	r30, r0
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	69 2f       	mov	r22, r25
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    2ffe:	fe 01       	movw	r30, r28
    3000:	e7 5a       	subi	r30, 0xA7	; 167
    3002:	fe 4f       	sbci	r31, 0xFE	; 254
    3004:	01 90       	ld	r0, Z+
    3006:	f0 81       	ld	r31, Z
    3008:	e0 2d       	mov	r30, r0
    300a:	80 81       	ld	r24, Z
    300c:	fe 01       	movw	r30, r28
    300e:	e7 5a       	subi	r30, 0xA7	; 167
    3010:	fe 4f       	sbci	r31, 0xFE	; 254
    3012:	01 90       	ld	r0, Z+
    3014:	f0 81       	ld	r31, Z
    3016:	e0 2d       	mov	r30, r0
    3018:	92 81       	ldd	r25, Z+2	; 0x02
    301a:	69 2f       	mov	r22, r25
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    3022:	fe 01       	movw	r30, r28
    3024:	e7 5a       	subi	r30, 0xA7	; 167
    3026:	fe 4f       	sbci	r31, 0xFE	; 254
    3028:	01 90       	ld	r0, Z+
    302a:	f0 81       	ld	r31, Z
    302c:	e0 2d       	mov	r30, r0
    302e:	80 81       	ld	r24, Z
    3030:	fe 01       	movw	r30, r28
    3032:	e7 5a       	subi	r30, 0xA7	; 167
    3034:	fe 4f       	sbci	r31, 0xFE	; 254
    3036:	01 90       	ld	r0, Z+
    3038:	f0 81       	ld	r31, Z
    303a:	e0 2d       	mov	r30, r0
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	69 2f       	mov	r22, r25
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    3046:	fe 01       	movw	r30, r28
    3048:	e7 5a       	subi	r30, 0xA7	; 167
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	01 90       	ld	r0, Z+
    304e:	f0 81       	ld	r31, Z
    3050:	e0 2d       	mov	r30, r0
    3052:	80 81       	ld	r24, Z
    3054:	fe 01       	movw	r30, r28
    3056:	e7 5a       	subi	r30, 0xA7	; 167
    3058:	fe 4f       	sbci	r31, 0xFE	; 254
    305a:	01 90       	ld	r0, Z+
    305c:	f0 81       	ld	r31, Z
    305e:	e0 2d       	mov	r30, r0
    3060:	94 81       	ldd	r25, Z+4	; 0x04
    3062:	69 2f       	mov	r22, r25
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    306a:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <Init_SM+0x2b4c>

		}

		else if (Copy_SM_st->SM_Direction == Clock_Wise)
    306e:	fe 01       	movw	r30, r28
    3070:	e7 5a       	subi	r30, 0xA7	; 167
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	01 90       	ld	r0, Z+
    3076:	f0 81       	ld	r31, Z
    3078:	e0 2d       	mov	r30, r0
    307a:	86 81       	ldd	r24, Z+6	; 0x06
    307c:	82 30       	cpi	r24, 0x02	; 2
    307e:	11 f0       	breq	.+4      	; 0x3084 <Init_SM+0x9d6>
    3080:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <Init_SM+0x2b4c>
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    3084:	fe 01       	movw	r30, r28
    3086:	ef 5a       	subi	r30, 0xAF	; 175
    3088:	fe 4f       	sbci	r31, 0xFE	; 254
    308a:	10 82       	st	Z, r1
    308c:	11 82       	std	Z+1, r1	; 0x01
    308e:	12 82       	std	Z+2, r1	; 0x02
    3090:	13 82       	std	Z+3, r1	; 0x03
    3092:	fe c3       	rjmp	.+2044   	; 0x3890 <Init_SM+0x11e2>
			{
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3094:	fe 01       	movw	r30, r28
    3096:	e7 5a       	subi	r30, 0xA7	; 167
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	01 90       	ld	r0, Z+
    309c:	f0 81       	ld	r31, Z
    309e:	e0 2d       	mov	r30, r0
    30a0:	80 81       	ld	r24, Z
    30a2:	fe 01       	movw	r30, r28
    30a4:	e7 5a       	subi	r30, 0xA7	; 167
    30a6:	fe 4f       	sbci	r31, 0xFE	; 254
    30a8:	01 90       	ld	r0, Z+
    30aa:	f0 81       	ld	r31, Z
    30ac:	e0 2d       	mov	r30, r0
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	69 2f       	mov	r22, r25
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    30b8:	fe 01       	movw	r30, r28
    30ba:	e7 5a       	subi	r30, 0xA7	; 167
    30bc:	fe 4f       	sbci	r31, 0xFE	; 254
    30be:	01 90       	ld	r0, Z+
    30c0:	f0 81       	ld	r31, Z
    30c2:	e0 2d       	mov	r30, r0
    30c4:	80 81       	ld	r24, Z
    30c6:	fe 01       	movw	r30, r28
    30c8:	e7 5a       	subi	r30, 0xA7	; 167
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	01 90       	ld	r0, Z+
    30ce:	f0 81       	ld	r31, Z
    30d0:	e0 2d       	mov	r30, r0
    30d2:	92 81       	ldd	r25, Z+2	; 0x02
    30d4:	69 2f       	mov	r22, r25
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 5a       	subi	r30, 0xA7	; 167
    30e0:	fe 4f       	sbci	r31, 0xFE	; 254
    30e2:	01 90       	ld	r0, Z+
    30e4:	f0 81       	ld	r31, Z
    30e6:	e0 2d       	mov	r30, r0
    30e8:	80 81       	ld	r24, Z
    30ea:	fe 01       	movw	r30, r28
    30ec:	e7 5a       	subi	r30, 0xA7	; 167
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	01 90       	ld	r0, Z+
    30f2:	f0 81       	ld	r31, Z
    30f4:	e0 2d       	mov	r30, r0
    30f6:	93 81       	ldd	r25, Z+3	; 0x03
    30f8:	69 2f       	mov	r22, r25
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    3100:	fe 01       	movw	r30, r28
    3102:	e7 5a       	subi	r30, 0xA7	; 167
    3104:	fe 4f       	sbci	r31, 0xFE	; 254
    3106:	01 90       	ld	r0, Z+
    3108:	f0 81       	ld	r31, Z
    310a:	e0 2d       	mov	r30, r0
    310c:	80 81       	ld	r24, Z
    310e:	fe 01       	movw	r30, r28
    3110:	e7 5a       	subi	r30, 0xA7	; 167
    3112:	fe 4f       	sbci	r31, 0xFE	; 254
    3114:	01 90       	ld	r0, Z+
    3116:	f0 81       	ld	r31, Z
    3118:	e0 2d       	mov	r30, r0
    311a:	94 81       	ldd	r25, Z+4	; 0x04
    311c:	69 2f       	mov	r22, r25
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3124:	fe 01       	movw	r30, r28
    3126:	eb 5e       	subi	r30, 0xEB	; 235
    3128:	fe 4f       	sbci	r31, 0xFE	; 254
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	a0 ea       	ldi	r26, 0xA0	; 160
    3130:	b0 e4       	ldi	r27, 0x40	; 64
    3132:	80 83       	st	Z, r24
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	a2 83       	std	Z+2, r26	; 0x02
    3138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	8e 01       	movw	r16, r28
    313c:	0f 5e       	subi	r16, 0xEF	; 239
    313e:	1e 4f       	sbci	r17, 0xFE	; 254
    3140:	fe 01       	movw	r30, r28
    3142:	eb 5e       	subi	r30, 0xEB	; 235
    3144:	fe 4f       	sbci	r31, 0xFE	; 254
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a ef       	ldi	r20, 0xFA	; 250
    3154:	54 e4       	ldi	r21, 0x44	; 68
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	a2 83       	std	Z+2, r26	; 0x02
    3166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3168:	fe 01       	movw	r30, r28
    316a:	ef 5e       	subi	r30, 0xEF	; 239
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	44 f4       	brge	.+16     	; 0x3196 <Init_SM+0xae8>
		__ticks = 1;
    3186:	fe 01       	movw	r30, r28
    3188:	e1 5f       	subi	r30, 0xF1	; 241
    318a:	fe 4f       	sbci	r31, 0xFE	; 254
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	64 c0       	rjmp	.+200    	; 0x325e <Init_SM+0xbb0>
	else if (__tmp > 65535)
    3196:	fe 01       	movw	r30, r28
    3198:	ef 5e       	subi	r30, 0xEF	; 239
    319a:	fe 4f       	sbci	r31, 0xFE	; 254
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <Init_SM+0xb08>
    31b4:	43 c0       	rjmp	.+134    	; 0x323c <Init_SM+0xb8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	fe 01       	movw	r30, r28
    31b8:	eb 5e       	subi	r30, 0xEB	; 235
    31ba:	fe 4f       	sbci	r31, 0xFE	; 254
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8e 01       	movw	r16, r28
    31d6:	01 5f       	subi	r16, 0xF1	; 241
    31d8:	1e 4f       	sbci	r17, 0xFE	; 254
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	80 83       	st	Z, r24
    31ec:	1f c0       	rjmp	.+62     	; 0x322c <Init_SM+0xb7e>
    31ee:	fe 01       	movw	r30, r28
    31f0:	e3 5f       	subi	r30, 0xF3	; 243
    31f2:	fe 4f       	sbci	r31, 0xFE	; 254
    31f4:	88 ec       	ldi	r24, 0xC8	; 200
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	fe 01       	movw	r30, r28
    31fe:	e3 5f       	subi	r30, 0xF3	; 243
    3200:	fe 4f       	sbci	r31, 0xFE	; 254
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <Init_SM+0xb58>
    320a:	fe 01       	movw	r30, r28
    320c:	e3 5f       	subi	r30, 0xF3	; 243
    320e:	fe 4f       	sbci	r31, 0xFE	; 254
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	de 01       	movw	r26, r28
    3216:	a1 5f       	subi	r26, 0xF1	; 241
    3218:	be 4f       	sbci	r27, 0xFE	; 254
    321a:	fe 01       	movw	r30, r28
    321c:	e1 5f       	subi	r30, 0xF1	; 241
    321e:	fe 4f       	sbci	r31, 0xFE	; 254
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	9c 93       	st	X, r25
    322a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	fe 01       	movw	r30, r28
    322e:	e1 5f       	subi	r30, 0xF1	; 241
    3230:	fe 4f       	sbci	r31, 0xFE	; 254
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	d1 f6       	brne	.-76     	; 0x31ee <Init_SM+0xb40>
    323a:	27 c0       	rjmp	.+78     	; 0x328a <Init_SM+0xbdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323c:	8e 01       	movw	r16, r28
    323e:	01 5f       	subi	r16, 0xF1	; 241
    3240:	1e 4f       	sbci	r17, 0xFE	; 254
    3242:	fe 01       	movw	r30, r28
    3244:	ef 5e       	subi	r30, 0xEF	; 239
    3246:	fe 4f       	sbci	r31, 0xFE	; 254
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	de 01       	movw	r26, r28
    3260:	a5 5f       	subi	r26, 0xF5	; 245
    3262:	be 4f       	sbci	r27, 0xFE	; 254
    3264:	fe 01       	movw	r30, r28
    3266:	e1 5f       	subi	r30, 0xF1	; 241
    3268:	fe 4f       	sbci	r31, 0xFE	; 254
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	8d 93       	st	X+, r24
    3270:	9c 93       	st	X, r25
    3272:	fe 01       	movw	r30, r28
    3274:	e5 5f       	subi	r30, 0xF5	; 245
    3276:	fe 4f       	sbci	r31, 0xFE	; 254
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <Init_SM+0xbce>
    3280:	fe 01       	movw	r30, r28
    3282:	e5 5f       	subi	r30, 0xF5	; 245
    3284:	fe 4f       	sbci	r31, 0xFE	; 254
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    328a:	fe 01       	movw	r30, r28
    328c:	e7 5a       	subi	r30, 0xA7	; 167
    328e:	fe 4f       	sbci	r31, 0xFE	; 254
    3290:	01 90       	ld	r0, Z+
    3292:	f0 81       	ld	r31, Z
    3294:	e0 2d       	mov	r30, r0
    3296:	80 81       	ld	r24, Z
    3298:	fe 01       	movw	r30, r28
    329a:	e7 5a       	subi	r30, 0xA7	; 167
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	01 90       	ld	r0, Z+
    32a0:	f0 81       	ld	r31, Z
    32a2:	e0 2d       	mov	r30, r0
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	69 2f       	mov	r22, r25
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 5a       	subi	r30, 0xA7	; 167
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	01 90       	ld	r0, Z+
    32b6:	f0 81       	ld	r31, Z
    32b8:	e0 2d       	mov	r30, r0
    32ba:	80 81       	ld	r24, Z
    32bc:	fe 01       	movw	r30, r28
    32be:	e7 5a       	subi	r30, 0xA7	; 167
    32c0:	fe 4f       	sbci	r31, 0xFE	; 254
    32c2:	01 90       	ld	r0, Z+
    32c4:	f0 81       	ld	r31, Z
    32c6:	e0 2d       	mov	r30, r0
    32c8:	92 81       	ldd	r25, Z+2	; 0x02
    32ca:	69 2f       	mov	r22, r25
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    32d2:	fe 01       	movw	r30, r28
    32d4:	e7 5a       	subi	r30, 0xA7	; 167
    32d6:	fe 4f       	sbci	r31, 0xFE	; 254
    32d8:	01 90       	ld	r0, Z+
    32da:	f0 81       	ld	r31, Z
    32dc:	e0 2d       	mov	r30, r0
    32de:	80 81       	ld	r24, Z
    32e0:	fe 01       	movw	r30, r28
    32e2:	e7 5a       	subi	r30, 0xA7	; 167
    32e4:	fe 4f       	sbci	r31, 0xFE	; 254
    32e6:	01 90       	ld	r0, Z+
    32e8:	f0 81       	ld	r31, Z
    32ea:	e0 2d       	mov	r30, r0
    32ec:	93 81       	ldd	r25, Z+3	; 0x03
    32ee:	69 2f       	mov	r22, r25
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    32f6:	fe 01       	movw	r30, r28
    32f8:	e7 5a       	subi	r30, 0xA7	; 167
    32fa:	fe 4f       	sbci	r31, 0xFE	; 254
    32fc:	01 90       	ld	r0, Z+
    32fe:	f0 81       	ld	r31, Z
    3300:	e0 2d       	mov	r30, r0
    3302:	80 81       	ld	r24, Z
    3304:	fe 01       	movw	r30, r28
    3306:	e7 5a       	subi	r30, 0xA7	; 167
    3308:	fe 4f       	sbci	r31, 0xFE	; 254
    330a:	01 90       	ld	r0, Z+
    330c:	f0 81       	ld	r31, Z
    330e:	e0 2d       	mov	r30, r0
    3310:	94 81       	ldd	r25, Z+4	; 0x04
    3312:	69 2f       	mov	r22, r25
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    331a:	fe 01       	movw	r30, r28
    331c:	e9 5f       	subi	r30, 0xF9	; 249
    331e:	fe 4f       	sbci	r31, 0xFE	; 254
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	a0 ea       	ldi	r26, 0xA0	; 160
    3326:	b0 e4       	ldi	r27, 0x40	; 64
    3328:	80 83       	st	Z, r24
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	a2 83       	std	Z+2, r26	; 0x02
    332e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3330:	8e 01       	movw	r16, r28
    3332:	0d 5f       	subi	r16, 0xFD	; 253
    3334:	1e 4f       	sbci	r17, 0xFE	; 254
    3336:	fe 01       	movw	r30, r28
    3338:	e9 5f       	subi	r30, 0xF9	; 249
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	4a ef       	ldi	r20, 0xFA	; 250
    334a:	54 e4       	ldi	r21, 0x44	; 68
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	f8 01       	movw	r30, r16
    3356:	80 83       	st	Z, r24
    3358:	91 83       	std	Z+1, r25	; 0x01
    335a:	a2 83       	std	Z+2, r26	; 0x02
    335c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    335e:	fe 01       	movw	r30, r28
    3360:	ed 5f       	subi	r30, 0xFD	; 253
    3362:	fe 4f       	sbci	r31, 0xFE	; 254
    3364:	60 81       	ld	r22, Z
    3366:	71 81       	ldd	r23, Z+1	; 0x01
    3368:	82 81       	ldd	r24, Z+2	; 0x02
    336a:	93 81       	ldd	r25, Z+3	; 0x03
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	5f e3       	ldi	r21, 0x3F	; 63
    3374:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3378:	88 23       	and	r24, r24
    337a:	44 f4       	brge	.+16     	; 0x338c <Init_SM+0xcde>
		__ticks = 1;
    337c:	fe 01       	movw	r30, r28
    337e:	ef 5f       	subi	r30, 0xFF	; 255
    3380:	fe 4f       	sbci	r31, 0xFE	; 254
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	80 83       	st	Z, r24
    338a:	64 c0       	rjmp	.+200    	; 0x3454 <Init_SM+0xda6>
	else if (__tmp > 65535)
    338c:	fe 01       	movw	r30, r28
    338e:	ed 5f       	subi	r30, 0xFD	; 253
    3390:	fe 4f       	sbci	r31, 0xFE	; 254
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	3f ef       	ldi	r19, 0xFF	; 255
    339e:	4f e7       	ldi	r20, 0x7F	; 127
    33a0:	57 e4       	ldi	r21, 0x47	; 71
    33a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a6:	18 16       	cp	r1, r24
    33a8:	0c f0       	brlt	.+2      	; 0x33ac <Init_SM+0xcfe>
    33aa:	43 c0       	rjmp	.+134    	; 0x3432 <Init_SM+0xd84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ac:	fe 01       	movw	r30, r28
    33ae:	e9 5f       	subi	r30, 0xF9	; 249
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	60 81       	ld	r22, Z
    33b4:	71 81       	ldd	r23, Z+1	; 0x01
    33b6:	82 81       	ldd	r24, Z+2	; 0x02
    33b8:	93 81       	ldd	r25, Z+3	; 0x03
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e2       	ldi	r20, 0x20	; 32
    33c0:	51 e4       	ldi	r21, 0x41	; 65
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8e 01       	movw	r16, r28
    33cc:	0f 5f       	subi	r16, 0xFF	; 255
    33ce:	1e 4f       	sbci	r17, 0xFE	; 254
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	f8 01       	movw	r30, r16
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	80 83       	st	Z, r24
    33e2:	1f c0       	rjmp	.+62     	; 0x3422 <Init_SM+0xd74>
    33e4:	fe 01       	movw	r30, r28
    33e6:	e1 50       	subi	r30, 0x01	; 1
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	88 ec       	ldi	r24, 0xC8	; 200
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	fe 01       	movw	r30, r28
    33f4:	e1 50       	subi	r30, 0x01	; 1
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	80 81       	ld	r24, Z
    33fa:	91 81       	ldd	r25, Z+1	; 0x01
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <Init_SM+0xd4e>
    3400:	fe 01       	movw	r30, r28
    3402:	e1 50       	subi	r30, 0x01	; 1
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340a:	de 01       	movw	r26, r28
    340c:	af 5f       	subi	r26, 0xFF	; 255
    340e:	be 4f       	sbci	r27, 0xFE	; 254
    3410:	fe 01       	movw	r30, r28
    3412:	ef 5f       	subi	r30, 0xFF	; 255
    3414:	fe 4f       	sbci	r31, 0xFE	; 254
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	11 96       	adiw	r26, 0x01	; 1
    341e:	9c 93       	st	X, r25
    3420:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3422:	fe 01       	movw	r30, r28
    3424:	ef 5f       	subi	r30, 0xFF	; 255
    3426:	fe 4f       	sbci	r31, 0xFE	; 254
    3428:	80 81       	ld	r24, Z
    342a:	91 81       	ldd	r25, Z+1	; 0x01
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	d1 f6       	brne	.-76     	; 0x33e4 <Init_SM+0xd36>
    3430:	27 c0       	rjmp	.+78     	; 0x3480 <Init_SM+0xdd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3432:	8e 01       	movw	r16, r28
    3434:	0f 5f       	subi	r16, 0xFF	; 255
    3436:	1e 4f       	sbci	r17, 0xFE	; 254
    3438:	fe 01       	movw	r30, r28
    343a:	ed 5f       	subi	r30, 0xFD	; 253
    343c:	fe 4f       	sbci	r31, 0xFE	; 254
    343e:	60 81       	ld	r22, Z
    3440:	71 81       	ldd	r23, Z+1	; 0x01
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	93 81       	ldd	r25, Z+3	; 0x03
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	f8 01       	movw	r30, r16
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	80 83       	st	Z, r24
    3454:	de 01       	movw	r26, r28
    3456:	a3 50       	subi	r26, 0x03	; 3
    3458:	bf 4f       	sbci	r27, 0xFF	; 255
    345a:	fe 01       	movw	r30, r28
    345c:	ef 5f       	subi	r30, 0xFF	; 255
    345e:	fe 4f       	sbci	r31, 0xFE	; 254
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	8d 93       	st	X+, r24
    3466:	9c 93       	st	X, r25
    3468:	fe 01       	movw	r30, r28
    346a:	e3 50       	subi	r30, 0x03	; 3
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 81       	ld	r24, Z
    3470:	91 81       	ldd	r25, Z+1	; 0x01
    3472:	01 97       	sbiw	r24, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <Init_SM+0xdc4>
    3476:	fe 01       	movw	r30, r28
    3478:	e3 50       	subi	r30, 0x03	; 3
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
						DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3480:	fe 01       	movw	r30, r28
    3482:	e7 5a       	subi	r30, 0xA7	; 167
    3484:	fe 4f       	sbci	r31, 0xFE	; 254
    3486:	01 90       	ld	r0, Z+
    3488:	f0 81       	ld	r31, Z
    348a:	e0 2d       	mov	r30, r0
    348c:	80 81       	ld	r24, Z
    348e:	fe 01       	movw	r30, r28
    3490:	e7 5a       	subi	r30, 0xA7	; 167
    3492:	fe 4f       	sbci	r31, 0xFE	; 254
    3494:	01 90       	ld	r0, Z+
    3496:	f0 81       	ld	r31, Z
    3498:	e0 2d       	mov	r30, r0
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	69 2f       	mov	r22, r25
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    34a4:	fe 01       	movw	r30, r28
    34a6:	e7 5a       	subi	r30, 0xA7	; 167
    34a8:	fe 4f       	sbci	r31, 0xFE	; 254
    34aa:	01 90       	ld	r0, Z+
    34ac:	f0 81       	ld	r31, Z
    34ae:	e0 2d       	mov	r30, r0
    34b0:	80 81       	ld	r24, Z
    34b2:	fe 01       	movw	r30, r28
    34b4:	e7 5a       	subi	r30, 0xA7	; 167
    34b6:	fe 4f       	sbci	r31, 0xFE	; 254
    34b8:	01 90       	ld	r0, Z+
    34ba:	f0 81       	ld	r31, Z
    34bc:	e0 2d       	mov	r30, r0
    34be:	92 81       	ldd	r25, Z+2	; 0x02
    34c0:	69 2f       	mov	r22, r25
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    34c8:	fe 01       	movw	r30, r28
    34ca:	e7 5a       	subi	r30, 0xA7	; 167
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	01 90       	ld	r0, Z+
    34d0:	f0 81       	ld	r31, Z
    34d2:	e0 2d       	mov	r30, r0
    34d4:	80 81       	ld	r24, Z
    34d6:	fe 01       	movw	r30, r28
    34d8:	e7 5a       	subi	r30, 0xA7	; 167
    34da:	fe 4f       	sbci	r31, 0xFE	; 254
    34dc:	01 90       	ld	r0, Z+
    34de:	f0 81       	ld	r31, Z
    34e0:	e0 2d       	mov	r30, r0
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	69 2f       	mov	r22, r25
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    34ec:	fe 01       	movw	r30, r28
    34ee:	e7 5a       	subi	r30, 0xA7	; 167
    34f0:	fe 4f       	sbci	r31, 0xFE	; 254
    34f2:	01 90       	ld	r0, Z+
    34f4:	f0 81       	ld	r31, Z
    34f6:	e0 2d       	mov	r30, r0
    34f8:	80 81       	ld	r24, Z
    34fa:	fe 01       	movw	r30, r28
    34fc:	e7 5a       	subi	r30, 0xA7	; 167
    34fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3500:	01 90       	ld	r0, Z+
    3502:	f0 81       	ld	r31, Z
    3504:	e0 2d       	mov	r30, r0
    3506:	94 81       	ldd	r25, Z+4	; 0x04
    3508:	69 2f       	mov	r22, r25
    350a:	40 e0       	ldi	r20, 0x00	; 0
    350c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3510:	fe 01       	movw	r30, r28
    3512:	e7 50       	subi	r30, 0x07	; 7
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 ea       	ldi	r26, 0xA0	; 160
    351c:	b0 e4       	ldi	r27, 0x40	; 64
    351e:	80 83       	st	Z, r24
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	a2 83       	std	Z+2, r26	; 0x02
    3524:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	8e 01       	movw	r16, r28
    3528:	0b 50       	subi	r16, 0x0B	; 11
    352a:	1f 4f       	sbci	r17, 0xFF	; 255
    352c:	fe 01       	movw	r30, r28
    352e:	e7 50       	subi	r30, 0x07	; 7
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	4a ef       	ldi	r20, 0xFA	; 250
    3540:	54 e4       	ldi	r21, 0x44	; 68
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	f8 01       	movw	r30, r16
    354c:	80 83       	st	Z, r24
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	a2 83       	std	Z+2, r26	; 0x02
    3552:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3554:	fe 01       	movw	r30, r28
    3556:	eb 50       	subi	r30, 0x0B	; 11
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	60 81       	ld	r22, Z
    355c:	71 81       	ldd	r23, Z+1	; 0x01
    355e:	82 81       	ldd	r24, Z+2	; 0x02
    3560:	93 81       	ldd	r25, Z+3	; 0x03
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	44 f4       	brge	.+16     	; 0x3582 <Init_SM+0xed4>
		__ticks = 1;
    3572:	fe 01       	movw	r30, r28
    3574:	ed 50       	subi	r30, 0x0D	; 13
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
    3580:	64 c0       	rjmp	.+200    	; 0x364a <Init_SM+0xf9c>
	else if (__tmp > 65535)
    3582:	fe 01       	movw	r30, r28
    3584:	eb 50       	subi	r30, 0x0B	; 11
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	3f ef       	ldi	r19, 0xFF	; 255
    3594:	4f e7       	ldi	r20, 0x7F	; 127
    3596:	57 e4       	ldi	r21, 0x47	; 71
    3598:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359c:	18 16       	cp	r1, r24
    359e:	0c f0       	brlt	.+2      	; 0x35a2 <Init_SM+0xef4>
    35a0:	43 c0       	rjmp	.+134    	; 0x3628 <Init_SM+0xf7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	fe 01       	movw	r30, r28
    35a4:	e7 50       	subi	r30, 0x07	; 7
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e2       	ldi	r20, 0x20	; 32
    35b6:	51 e4       	ldi	r21, 0x41	; 65
    35b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	8e 01       	movw	r16, r28
    35c2:	0d 50       	subi	r16, 0x0D	; 13
    35c4:	1f 4f       	sbci	r17, 0xFF	; 255
    35c6:	bc 01       	movw	r22, r24
    35c8:	cd 01       	movw	r24, r26
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	f8 01       	movw	r30, r16
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
    35d8:	1f c0       	rjmp	.+62     	; 0x3618 <Init_SM+0xf6a>
    35da:	fe 01       	movw	r30, r28
    35dc:	ef 50       	subi	r30, 0x0F	; 15
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	88 ec       	ldi	r24, 0xC8	; 200
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
    35e8:	fe 01       	movw	r30, r28
    35ea:	ef 50       	subi	r30, 0x0F	; 15
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <Init_SM+0xf44>
    35f6:	fe 01       	movw	r30, r28
    35f8:	ef 50       	subi	r30, 0x0F	; 15
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3600:	de 01       	movw	r26, r28
    3602:	ad 50       	subi	r26, 0x0D	; 13
    3604:	bf 4f       	sbci	r27, 0xFF	; 255
    3606:	fe 01       	movw	r30, r28
    3608:	ed 50       	subi	r30, 0x0D	; 13
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	11 96       	adiw	r26, 0x01	; 1
    3614:	9c 93       	st	X, r25
    3616:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3618:	fe 01       	movw	r30, r28
    361a:	ed 50       	subi	r30, 0x0D	; 13
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	d1 f6       	brne	.-76     	; 0x35da <Init_SM+0xf2c>
    3626:	27 c0       	rjmp	.+78     	; 0x3676 <Init_SM+0xfc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3628:	8e 01       	movw	r16, r28
    362a:	0d 50       	subi	r16, 0x0D	; 13
    362c:	1f 4f       	sbci	r17, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	eb 50       	subi	r30, 0x0B	; 11
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	f8 01       	movw	r30, r16
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
    364a:	de 01       	movw	r26, r28
    364c:	a1 51       	subi	r26, 0x11	; 17
    364e:	bf 4f       	sbci	r27, 0xFF	; 255
    3650:	fe 01       	movw	r30, r28
    3652:	ed 50       	subi	r30, 0x0D	; 13
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	80 81       	ld	r24, Z
    3658:	91 81       	ldd	r25, Z+1	; 0x01
    365a:	8d 93       	st	X+, r24
    365c:	9c 93       	st	X, r25
    365e:	fe 01       	movw	r30, r28
    3660:	e1 51       	subi	r30, 0x11	; 17
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <Init_SM+0xfba>
    366c:	fe 01       	movw	r30, r28
    366e:	e1 51       	subi	r30, 0x11	; 17
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	80 83       	st	Z, r24
						DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3676:	fe 01       	movw	r30, r28
    3678:	e7 5a       	subi	r30, 0xA7	; 167
    367a:	fe 4f       	sbci	r31, 0xFE	; 254
    367c:	01 90       	ld	r0, Z+
    367e:	f0 81       	ld	r31, Z
    3680:	e0 2d       	mov	r30, r0
    3682:	80 81       	ld	r24, Z
    3684:	fe 01       	movw	r30, r28
    3686:	e7 5a       	subi	r30, 0xA7	; 167
    3688:	fe 4f       	sbci	r31, 0xFE	; 254
    368a:	01 90       	ld	r0, Z+
    368c:	f0 81       	ld	r31, Z
    368e:	e0 2d       	mov	r30, r0
    3690:	91 81       	ldd	r25, Z+1	; 0x01
    3692:	69 2f       	mov	r22, r25
    3694:	41 e0       	ldi	r20, 0x01	; 1
    3696:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_HIGH);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    369a:	fe 01       	movw	r30, r28
    369c:	e7 5a       	subi	r30, 0xA7	; 167
    369e:	fe 4f       	sbci	r31, 0xFE	; 254
    36a0:	01 90       	ld	r0, Z+
    36a2:	f0 81       	ld	r31, Z
    36a4:	e0 2d       	mov	r30, r0
    36a6:	80 81       	ld	r24, Z
    36a8:	fe 01       	movw	r30, r28
    36aa:	e7 5a       	subi	r30, 0xA7	; 167
    36ac:	fe 4f       	sbci	r31, 0xFE	; 254
    36ae:	01 90       	ld	r0, Z+
    36b0:	f0 81       	ld	r31, Z
    36b2:	e0 2d       	mov	r30, r0
    36b4:	92 81       	ldd	r25, Z+2	; 0x02
    36b6:	69 2f       	mov	r22, r25
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    36be:	fe 01       	movw	r30, r28
    36c0:	e7 5a       	subi	r30, 0xA7	; 167
    36c2:	fe 4f       	sbci	r31, 0xFE	; 254
    36c4:	01 90       	ld	r0, Z+
    36c6:	f0 81       	ld	r31, Z
    36c8:	e0 2d       	mov	r30, r0
    36ca:	80 81       	ld	r24, Z
    36cc:	fe 01       	movw	r30, r28
    36ce:	e7 5a       	subi	r30, 0xA7	; 167
    36d0:	fe 4f       	sbci	r31, 0xFE	; 254
    36d2:	01 90       	ld	r0, Z+
    36d4:	f0 81       	ld	r31, Z
    36d6:	e0 2d       	mov	r30, r0
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	69 2f       	mov	r22, r25
    36dc:	40 e0       	ldi	r20, 0x00	; 0
    36de:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
						DIO_u8PIN_LOW);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    36e2:	fe 01       	movw	r30, r28
    36e4:	e7 5a       	subi	r30, 0xA7	; 167
    36e6:	fe 4f       	sbci	r31, 0xFE	; 254
    36e8:	01 90       	ld	r0, Z+
    36ea:	f0 81       	ld	r31, Z
    36ec:	e0 2d       	mov	r30, r0
    36ee:	80 81       	ld	r24, Z
    36f0:	fe 01       	movw	r30, r28
    36f2:	e7 5a       	subi	r30, 0xA7	; 167
    36f4:	fe 4f       	sbci	r31, 0xFE	; 254
    36f6:	01 90       	ld	r0, Z+
    36f8:	f0 81       	ld	r31, Z
    36fa:	e0 2d       	mov	r30, r0
    36fc:	94 81       	ldd	r25, Z+4	; 0x04
    36fe:	69 2f       	mov	r22, r25
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3706:	fe 01       	movw	r30, r28
    3708:	e5 51       	subi	r30, 0x15	; 21
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	a0 ea       	ldi	r26, 0xA0	; 160
    3712:	b0 e4       	ldi	r27, 0x40	; 64
    3714:	80 83       	st	Z, r24
    3716:	91 83       	std	Z+1, r25	; 0x01
    3718:	a2 83       	std	Z+2, r26	; 0x02
    371a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371c:	8e 01       	movw	r16, r28
    371e:	09 51       	subi	r16, 0x19	; 25
    3720:	1f 4f       	sbci	r17, 0xFF	; 255
    3722:	fe 01       	movw	r30, r28
    3724:	e5 51       	subi	r30, 0x15	; 21
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	60 81       	ld	r22, Z
    372a:	71 81       	ldd	r23, Z+1	; 0x01
    372c:	82 81       	ldd	r24, Z+2	; 0x02
    372e:	93 81       	ldd	r25, Z+3	; 0x03
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	4a ef       	ldi	r20, 0xFA	; 250
    3736:	54 e4       	ldi	r21, 0x44	; 68
    3738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	f8 01       	movw	r30, r16
    3742:	80 83       	st	Z, r24
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	a2 83       	std	Z+2, r26	; 0x02
    3748:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    374a:	fe 01       	movw	r30, r28
    374c:	e9 51       	subi	r30, 0x19	; 25
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e8       	ldi	r20, 0x80	; 128
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3764:	88 23       	and	r24, r24
    3766:	44 f4       	brge	.+16     	; 0x3778 <Init_SM+0x10ca>
		__ticks = 1;
    3768:	fe 01       	movw	r30, r28
    376a:	eb 51       	subi	r30, 0x1B	; 27
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	80 83       	st	Z, r24
    3776:	64 c0       	rjmp	.+200    	; 0x3840 <Init_SM+0x1192>
	else if (__tmp > 65535)
    3778:	fe 01       	movw	r30, r28
    377a:	e9 51       	subi	r30, 0x19	; 25
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	0c f0       	brlt	.+2      	; 0x3798 <Init_SM+0x10ea>
    3796:	43 c0       	rjmp	.+134    	; 0x381e <Init_SM+0x1170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3798:	fe 01       	movw	r30, r28
    379a:	e5 51       	subi	r30, 0x15	; 21
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	60 81       	ld	r22, Z
    37a0:	71 81       	ldd	r23, Z+1	; 0x01
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	93 81       	ldd	r25, Z+3	; 0x03
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e2       	ldi	r20, 0x20	; 32
    37ac:	51 e4       	ldi	r21, 0x41	; 65
    37ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	8e 01       	movw	r16, r28
    37b8:	0b 51       	subi	r16, 0x1B	; 27
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	bc 01       	movw	r22, r24
    37be:	cd 01       	movw	r24, r26
    37c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	f8 01       	movw	r30, r16
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
    37ce:	1f c0       	rjmp	.+62     	; 0x380e <Init_SM+0x1160>
    37d0:	fe 01       	movw	r30, r28
    37d2:	ed 51       	subi	r30, 0x1D	; 29
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	88 ec       	ldi	r24, 0xC8	; 200
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	91 83       	std	Z+1, r25	; 0x01
    37dc:	80 83       	st	Z, r24
    37de:	fe 01       	movw	r30, r28
    37e0:	ed 51       	subi	r30, 0x1D	; 29
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <Init_SM+0x113a>
    37ec:	fe 01       	movw	r30, r28
    37ee:	ed 51       	subi	r30, 0x1D	; 29
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	91 83       	std	Z+1, r25	; 0x01
    37f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f6:	de 01       	movw	r26, r28
    37f8:	ab 51       	subi	r26, 0x1B	; 27
    37fa:	bf 4f       	sbci	r27, 0xFF	; 255
    37fc:	fe 01       	movw	r30, r28
    37fe:	eb 51       	subi	r30, 0x1B	; 27
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	11 96       	adiw	r26, 0x01	; 1
    380a:	9c 93       	st	X, r25
    380c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380e:	fe 01       	movw	r30, r28
    3810:	eb 51       	subi	r30, 0x1B	; 27
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	80 81       	ld	r24, Z
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	d1 f6       	brne	.-76     	; 0x37d0 <Init_SM+0x1122>
    381c:	27 c0       	rjmp	.+78     	; 0x386c <Init_SM+0x11be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381e:	8e 01       	movw	r16, r28
    3820:	0b 51       	subi	r16, 0x1B	; 27
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	fe 01       	movw	r30, r28
    3826:	e9 51       	subi	r30, 0x19	; 25
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	60 81       	ld	r22, Z
    382c:	71 81       	ldd	r23, Z+1	; 0x01
    382e:	82 81       	ldd	r24, Z+2	; 0x02
    3830:	93 81       	ldd	r25, Z+3	; 0x03
    3832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	f8 01       	movw	r30, r16
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
    3840:	de 01       	movw	r26, r28
    3842:	af 51       	subi	r26, 0x1F	; 31
    3844:	bf 4f       	sbci	r27, 0xFF	; 255
    3846:	fe 01       	movw	r30, r28
    3848:	eb 51       	subi	r30, 0x1B	; 27
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	8d 93       	st	X+, r24
    3852:	9c 93       	st	X, r25
    3854:	fe 01       	movw	r30, r28
    3856:	ef 51       	subi	r30, 0x1F	; 31
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	80 81       	ld	r24, Z
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <Init_SM+0x11b0>
    3862:	fe 01       	movw	r30, r28
    3864:	ef 51       	subi	r30, 0x1F	; 31
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	91 83       	std	Z+1, r25	; 0x01
    386a:	80 83       	st	Z, r24

		}

		else if (Copy_SM_st->SM_Direction == Clock_Wise)
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Steps; j++)
    386c:	9e 01       	movw	r18, r28
    386e:	2f 5a       	subi	r18, 0xAF	; 175
    3870:	3e 4f       	sbci	r19, 0xFE	; 254
    3872:	fe 01       	movw	r30, r28
    3874:	ef 5a       	subi	r30, 0xAF	; 175
    3876:	fe 4f       	sbci	r31, 0xFE	; 254
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	a2 81       	ldd	r26, Z+2	; 0x02
    387e:	b3 81       	ldd	r27, Z+3	; 0x03
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	a1 1d       	adc	r26, r1
    3884:	b1 1d       	adc	r27, r1
    3886:	f9 01       	movw	r30, r18
    3888:	80 83       	st	Z, r24
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	a2 83       	std	Z+2, r26	; 0x02
    388e:	b3 83       	std	Z+3, r27	; 0x03
    3890:	fe 01       	movw	r30, r28
    3892:	e7 5a       	subi	r30, 0xA7	; 167
    3894:	fe 4f       	sbci	r31, 0xFE	; 254
    3896:	01 90       	ld	r0, Z+
    3898:	f0 81       	ld	r31, Z
    389a:	e0 2d       	mov	r30, r0
    389c:	20 85       	ldd	r18, Z+8	; 0x08
    389e:	31 85       	ldd	r19, Z+9	; 0x09
    38a0:	42 85       	ldd	r20, Z+10	; 0x0a
    38a2:	53 85       	ldd	r21, Z+11	; 0x0b
    38a4:	fe 01       	movw	r30, r28
    38a6:	ef 5a       	subi	r30, 0xAF	; 175
    38a8:	fe 4f       	sbci	r31, 0xFE	; 254
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	a2 81       	ldd	r26, Z+2	; 0x02
    38b0:	b3 81       	ldd	r27, Z+3	; 0x03
    38b2:	82 17       	cp	r24, r18
    38b4:	93 07       	cpc	r25, r19
    38b6:	a4 07       	cpc	r26, r20
    38b8:	b5 07       	cpc	r27, r21
    38ba:	08 f4       	brcc	.+2      	; 0x38be <Init_SM+0x1210>
    38bc:	eb cb       	rjmp	.-2090   	; 0x3094 <Init_SM+0x9e6>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
						DIO_u8PIN_LOW);
				_delay_ms(5);
			
			}
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    38be:	fe 01       	movw	r30, r28
    38c0:	e7 5a       	subi	r30, 0xA7	; 167
    38c2:	fe 4f       	sbci	r31, 0xFE	; 254
    38c4:	01 90       	ld	r0, Z+
    38c6:	f0 81       	ld	r31, Z
    38c8:	e0 2d       	mov	r30, r0
    38ca:	80 81       	ld	r24, Z
    38cc:	fe 01       	movw	r30, r28
    38ce:	e7 5a       	subi	r30, 0xA7	; 167
    38d0:	fe 4f       	sbci	r31, 0xFE	; 254
    38d2:	01 90       	ld	r0, Z+
    38d4:	f0 81       	ld	r31, Z
    38d6:	e0 2d       	mov	r30, r0
    38d8:	91 81       	ldd	r25, Z+1	; 0x01
    38da:	69 2f       	mov	r22, r25
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    38e2:	fe 01       	movw	r30, r28
    38e4:	e7 5a       	subi	r30, 0xA7	; 167
    38e6:	fe 4f       	sbci	r31, 0xFE	; 254
    38e8:	01 90       	ld	r0, Z+
    38ea:	f0 81       	ld	r31, Z
    38ec:	e0 2d       	mov	r30, r0
    38ee:	80 81       	ld	r24, Z
    38f0:	fe 01       	movw	r30, r28
    38f2:	e7 5a       	subi	r30, 0xA7	; 167
    38f4:	fe 4f       	sbci	r31, 0xFE	; 254
    38f6:	01 90       	ld	r0, Z+
    38f8:	f0 81       	ld	r31, Z
    38fa:	e0 2d       	mov	r30, r0
    38fc:	92 81       	ldd	r25, Z+2	; 0x02
    38fe:	69 2f       	mov	r22, r25
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    3906:	fe 01       	movw	r30, r28
    3908:	e7 5a       	subi	r30, 0xA7	; 167
    390a:	fe 4f       	sbci	r31, 0xFE	; 254
    390c:	01 90       	ld	r0, Z+
    390e:	f0 81       	ld	r31, Z
    3910:	e0 2d       	mov	r30, r0
    3912:	80 81       	ld	r24, Z
    3914:	fe 01       	movw	r30, r28
    3916:	e7 5a       	subi	r30, 0xA7	; 167
    3918:	fe 4f       	sbci	r31, 0xFE	; 254
    391a:	01 90       	ld	r0, Z+
    391c:	f0 81       	ld	r31, Z
    391e:	e0 2d       	mov	r30, r0
    3920:	93 81       	ldd	r25, Z+3	; 0x03
    3922:	69 2f       	mov	r22, r25
    3924:	40 e0       	ldi	r20, 0x00	; 0
    3926:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    392a:	fe 01       	movw	r30, r28
    392c:	e7 5a       	subi	r30, 0xA7	; 167
    392e:	fe 4f       	sbci	r31, 0xFE	; 254
    3930:	01 90       	ld	r0, Z+
    3932:	f0 81       	ld	r31, Z
    3934:	e0 2d       	mov	r30, r0
    3936:	80 81       	ld	r24, Z
    3938:	fe 01       	movw	r30, r28
    393a:	e7 5a       	subi	r30, 0xA7	; 167
    393c:	fe 4f       	sbci	r31, 0xFE	; 254
    393e:	01 90       	ld	r0, Z+
    3940:	f0 81       	ld	r31, Z
    3942:	e0 2d       	mov	r30, r0
    3944:	94 81       	ldd	r25, Z+4	; 0x04
    3946:	69 2f       	mov	r22, r25
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    394e:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <Init_SM+0x2b4c>
		}
	}

	else if (Copy_SM_st->Step_Type == Half_Step)
    3952:	fe 01       	movw	r30, r28
    3954:	e7 5a       	subi	r30, 0xA7	; 167
    3956:	fe 4f       	sbci	r31, 0xFE	; 254
    3958:	01 90       	ld	r0, Z+
    395a:	f0 81       	ld	r31, Z
    395c:	e0 2d       	mov	r30, r0
    395e:	85 81       	ldd	r24, Z+5	; 0x05
    3960:	81 30       	cpi	r24, 0x01	; 1
    3962:	11 f0       	breq	.+4      	; 0x3968 <Init_SM+0x12ba>
    3964:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <Init_SM+0x2b4c>
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
    3968:	fe 01       	movw	r30, r28
    396a:	e7 5a       	subi	r30, 0xA7	; 167
    396c:	fe 4f       	sbci	r31, 0xFE	; 254
    396e:	01 90       	ld	r0, Z+
    3970:	f0 81       	ld	r31, Z
    3972:	e0 2d       	mov	r30, r0
    3974:	86 81       	ldd	r24, Z+6	; 0x06
    3976:	83 30       	cpi	r24, 0x03	; 3
    3978:	09 f0       	breq	.+2      	; 0x397c <Init_SM+0x12ce>
    397a:	b4 c6       	rjmp	.+3432   	; 0x46e4 <Init_SM+0x2036>
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    397c:	fe 01       	movw	r30, r28
    397e:	ef 5a       	subi	r30, 0xAF	; 175
    3980:	fe 4f       	sbci	r31, 0xFE	; 254
    3982:	10 82       	st	Z, r1
    3984:	11 82       	std	Z+1, r1	; 0x01
    3986:	12 82       	std	Z+2, r1	; 0x02
    3988:	13 82       	std	Z+3, r1	; 0x03
    398a:	4c c6       	rjmp	.+3224   	; 0x4624 <Init_SM+0x1f76>
			{
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    398c:	fe 01       	movw	r30, r28
    398e:	e7 5a       	subi	r30, 0xA7	; 167
    3990:	fe 4f       	sbci	r31, 0xFE	; 254
    3992:	01 90       	ld	r0, Z+
    3994:	f0 81       	ld	r31, Z
    3996:	e0 2d       	mov	r30, r0
    3998:	80 81       	ld	r24, Z
    399a:	fe 01       	movw	r30, r28
    399c:	e7 5a       	subi	r30, 0xA7	; 167
    399e:	fe 4f       	sbci	r31, 0xFE	; 254
    39a0:	01 90       	ld	r0, Z+
    39a2:	f0 81       	ld	r31, Z
    39a4:	e0 2d       	mov	r30, r0
    39a6:	94 81       	ldd	r25, Z+4	; 0x04
    39a8:	69 2f       	mov	r22, r25
    39aa:	41 e0       	ldi	r20, 0x01	; 1
    39ac:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    39b0:	fe 01       	movw	r30, r28
    39b2:	e3 52       	subi	r30, 0x23	; 35
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	a0 ea       	ldi	r26, 0xA0	; 160
    39bc:	b0 e4       	ldi	r27, 0x40	; 64
    39be:	80 83       	st	Z, r24
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	a2 83       	std	Z+2, r26	; 0x02
    39c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c6:	8e 01       	movw	r16, r28
    39c8:	07 52       	subi	r16, 0x27	; 39
    39ca:	1f 4f       	sbci	r17, 0xFF	; 255
    39cc:	fe 01       	movw	r30, r28
    39ce:	e3 52       	subi	r30, 0x23	; 35
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	60 81       	ld	r22, Z
    39d4:	71 81       	ldd	r23, Z+1	; 0x01
    39d6:	82 81       	ldd	r24, Z+2	; 0x02
    39d8:	93 81       	ldd	r25, Z+3	; 0x03
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	4a ef       	ldi	r20, 0xFA	; 250
    39e0:	54 e4       	ldi	r21, 0x44	; 68
    39e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	f8 01       	movw	r30, r16
    39ec:	80 83       	st	Z, r24
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	a2 83       	std	Z+2, r26	; 0x02
    39f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f4:	fe 01       	movw	r30, r28
    39f6:	e7 52       	subi	r30, 0x27	; 39
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	60 81       	ld	r22, Z
    39fc:	71 81       	ldd	r23, Z+1	; 0x01
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	93 81       	ldd	r25, Z+3	; 0x03
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e8       	ldi	r20, 0x80	; 128
    3a08:	5f e3       	ldi	r21, 0x3F	; 63
    3a0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0e:	88 23       	and	r24, r24
    3a10:	44 f4       	brge	.+16     	; 0x3a22 <Init_SM+0x1374>
		__ticks = 1;
    3a12:	fe 01       	movw	r30, r28
    3a14:	e9 52       	subi	r30, 0x29	; 41
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	80 83       	st	Z, r24
    3a20:	64 c0       	rjmp	.+200    	; 0x3aea <Init_SM+0x143c>
	else if (__tmp > 65535)
    3a22:	fe 01       	movw	r30, r28
    3a24:	e7 52       	subi	r30, 0x27	; 39
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	3f ef       	ldi	r19, 0xFF	; 255
    3a34:	4f e7       	ldi	r20, 0x7F	; 127
    3a36:	57 e4       	ldi	r21, 0x47	; 71
    3a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3c:	18 16       	cp	r1, r24
    3a3e:	0c f0       	brlt	.+2      	; 0x3a42 <Init_SM+0x1394>
    3a40:	43 c0       	rjmp	.+134    	; 0x3ac8 <Init_SM+0x141a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a42:	fe 01       	movw	r30, r28
    3a44:	e3 52       	subi	r30, 0x23	; 35
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e2       	ldi	r20, 0x20	; 32
    3a56:	51 e4       	ldi	r21, 0x41	; 65
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	8e 01       	movw	r16, r28
    3a62:	09 52       	subi	r16, 0x29	; 41
    3a64:	1f 4f       	sbci	r17, 0xFF	; 255
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	f8 01       	movw	r30, r16
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
    3a78:	1f c0       	rjmp	.+62     	; 0x3ab8 <Init_SM+0x140a>
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	eb 52       	subi	r30, 0x2B	; 43
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	88 ec       	ldi	r24, 0xC8	; 200
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	80 83       	st	Z, r24
    3a88:	fe 01       	movw	r30, r28
    3a8a:	eb 52       	subi	r30, 0x2B	; 43
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <Init_SM+0x13e4>
    3a96:	fe 01       	movw	r30, r28
    3a98:	eb 52       	subi	r30, 0x2B	; 43
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	91 83       	std	Z+1, r25	; 0x01
    3a9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa0:	de 01       	movw	r26, r28
    3aa2:	a9 52       	subi	r26, 0x29	; 41
    3aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e9 52       	subi	r30, 0x29	; 41
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	80 81       	ld	r24, Z
    3aae:	91 81       	ldd	r25, Z+1	; 0x01
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	11 96       	adiw	r26, 0x01	; 1
    3ab4:	9c 93       	st	X, r25
    3ab6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e9 52       	subi	r30, 0x29	; 41
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	80 81       	ld	r24, Z
    3ac0:	91 81       	ldd	r25, Z+1	; 0x01
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	d1 f6       	brne	.-76     	; 0x3a7a <Init_SM+0x13cc>
    3ac6:	27 c0       	rjmp	.+78     	; 0x3b16 <Init_SM+0x1468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac8:	8e 01       	movw	r16, r28
    3aca:	09 52       	subi	r16, 0x29	; 41
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e7 52       	subi	r30, 0x27	; 39
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	60 81       	ld	r22, Z
    3ad6:	71 81       	ldd	r23, Z+1	; 0x01
    3ad8:	82 81       	ldd	r24, Z+2	; 0x02
    3ada:	93 81       	ldd	r25, Z+3	; 0x03
    3adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	f8 01       	movw	r30, r16
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	80 83       	st	Z, r24
    3aea:	de 01       	movw	r26, r28
    3aec:	ad 52       	subi	r26, 0x2D	; 45
    3aee:	bf 4f       	sbci	r27, 0xFF	; 255
    3af0:	fe 01       	movw	r30, r28
    3af2:	e9 52       	subi	r30, 0x29	; 41
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	8d 93       	st	X+, r24
    3afc:	9c 93       	st	X, r25
    3afe:	fe 01       	movw	r30, r28
    3b00:	ed 52       	subi	r30, 0x2D	; 45
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <Init_SM+0x145a>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ed 52       	subi	r30, 0x2D	; 45
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    3b16:	fe 01       	movw	r30, r28
    3b18:	e7 5a       	subi	r30, 0xA7	; 167
    3b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1c:	01 90       	ld	r0, Z+
    3b1e:	f0 81       	ld	r31, Z
    3b20:	e0 2d       	mov	r30, r0
    3b22:	80 81       	ld	r24, Z
    3b24:	fe 01       	movw	r30, r28
    3b26:	e7 5a       	subi	r30, 0xA7	; 167
    3b28:	fe 4f       	sbci	r31, 0xFE	; 254
    3b2a:	01 90       	ld	r0, Z+
    3b2c:	f0 81       	ld	r31, Z
    3b2e:	e0 2d       	mov	r30, r0
    3b30:	94 81       	ldd	r25, Z+4	; 0x04
    3b32:	69 2f       	mov	r22, r25
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e1 53       	subi	r30, 0x31	; 49
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	a0 ea       	ldi	r26, 0xA0	; 160
    3b46:	b0 e4       	ldi	r27, 0x40	; 64
    3b48:	80 83       	st	Z, r24
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	a2 83       	std	Z+2, r26	; 0x02
    3b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b50:	8e 01       	movw	r16, r28
    3b52:	05 53       	subi	r16, 0x35	; 53
    3b54:	1f 4f       	sbci	r17, 0xFF	; 255
    3b56:	fe 01       	movw	r30, r28
    3b58:	e1 53       	subi	r30, 0x31	; 49
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a ef       	ldi	r20, 0xFA	; 250
    3b6a:	54 e4       	ldi	r21, 0x44	; 68
    3b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	f8 01       	movw	r30, r16
    3b76:	80 83       	st	Z, r24
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	a2 83       	std	Z+2, r26	; 0x02
    3b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e5 53       	subi	r30, 0x35	; 53
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e8       	ldi	r20, 0x80	; 128
    3b92:	5f e3       	ldi	r21, 0x3F	; 63
    3b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b98:	88 23       	and	r24, r24
    3b9a:	44 f4       	brge	.+16     	; 0x3bac <Init_SM+0x14fe>
		__ticks = 1;
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e7 53       	subi	r30, 0x37	; 55
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	64 c0       	rjmp	.+200    	; 0x3c74 <Init_SM+0x15c6>
	else if (__tmp > 65535)
    3bac:	fe 01       	movw	r30, r28
    3bae:	e5 53       	subi	r30, 0x35	; 53
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f ef       	ldi	r19, 0xFF	; 255
    3bbe:	4f e7       	ldi	r20, 0x7F	; 127
    3bc0:	57 e4       	ldi	r21, 0x47	; 71
    3bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc6:	18 16       	cp	r1, r24
    3bc8:	0c f0       	brlt	.+2      	; 0x3bcc <Init_SM+0x151e>
    3bca:	43 c0       	rjmp	.+134    	; 0x3c52 <Init_SM+0x15a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e1 53       	subi	r30, 0x31	; 49
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	8e 01       	movw	r16, r28
    3bec:	07 53       	subi	r16, 0x37	; 55
    3bee:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	1f c0       	rjmp	.+62     	; 0x3c42 <Init_SM+0x1594>
    3c04:	fe 01       	movw	r30, r28
    3c06:	e9 53       	subi	r30, 0x39	; 57
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	88 ec       	ldi	r24, 0xC8	; 200
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	fe 01       	movw	r30, r28
    3c14:	e9 53       	subi	r30, 0x39	; 57
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <Init_SM+0x156e>
    3c20:	fe 01       	movw	r30, r28
    3c22:	e9 53       	subi	r30, 0x39	; 57
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	de 01       	movw	r26, r28
    3c2c:	a7 53       	subi	r26, 0x37	; 55
    3c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	e7 53       	subi	r30, 0x37	; 55
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	11 96       	adiw	r26, 0x01	; 1
    3c3e:	9c 93       	st	X, r25
    3c40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c42:	fe 01       	movw	r30, r28
    3c44:	e7 53       	subi	r30, 0x37	; 55
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	d1 f6       	brne	.-76     	; 0x3c04 <Init_SM+0x1556>
    3c50:	27 c0       	rjmp	.+78     	; 0x3ca0 <Init_SM+0x15f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c52:	8e 01       	movw	r16, r28
    3c54:	07 53       	subi	r16, 0x37	; 55
    3c56:	1f 4f       	sbci	r17, 0xFF	; 255
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e5 53       	subi	r30, 0x35	; 53
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	f8 01       	movw	r30, r16
    3c70:	91 83       	std	Z+1, r25	; 0x01
    3c72:	80 83       	st	Z, r24
    3c74:	de 01       	movw	r26, r28
    3c76:	ab 53       	subi	r26, 0x3B	; 59
    3c78:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	e7 53       	subi	r30, 0x37	; 55
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	80 81       	ld	r24, Z
    3c82:	91 81       	ldd	r25, Z+1	; 0x01
    3c84:	8d 93       	st	X+, r24
    3c86:	9c 93       	st	X, r25
    3c88:	fe 01       	movw	r30, r28
    3c8a:	eb 53       	subi	r30, 0x3B	; 59
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <Init_SM+0x15e4>
    3c96:	fe 01       	movw	r30, r28
    3c98:	eb 53       	subi	r30, 0x3B	; 59
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e7 5a       	subi	r30, 0xA7	; 167
    3ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca6:	01 90       	ld	r0, Z+
    3ca8:	f0 81       	ld	r31, Z
    3caa:	e0 2d       	mov	r30, r0
    3cac:	80 81       	ld	r24, Z
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e7 5a       	subi	r30, 0xA7	; 167
    3cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb4:	01 90       	ld	r0, Z+
    3cb6:	f0 81       	ld	r31, Z
    3cb8:	e0 2d       	mov	r30, r0
    3cba:	92 81       	ldd	r25, Z+2	; 0x02
    3cbc:	69 2f       	mov	r22, r25
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ef 53       	subi	r30, 0x3F	; 63
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	a0 ea       	ldi	r26, 0xA0	; 160
    3cd0:	b0 e4       	ldi	r27, 0x40	; 64
    3cd2:	80 83       	st	Z, r24
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	a2 83       	std	Z+2, r26	; 0x02
    3cd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cda:	8e 01       	movw	r16, r28
    3cdc:	03 54       	subi	r16, 0x43	; 67
    3cde:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	ef 53       	subi	r30, 0x3F	; 63
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	60 81       	ld	r22, Z
    3ce8:	71 81       	ldd	r23, Z+1	; 0x01
    3cea:	82 81       	ldd	r24, Z+2	; 0x02
    3cec:	93 81       	ldd	r25, Z+3	; 0x03
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	4a ef       	ldi	r20, 0xFA	; 250
    3cf4:	54 e4       	ldi	r21, 0x44	; 68
    3cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	f8 01       	movw	r30, r16
    3d00:	80 83       	st	Z, r24
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	a2 83       	std	Z+2, r26	; 0x02
    3d06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e3 54       	subi	r30, 0x43	; 67
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	60 81       	ld	r22, Z
    3d10:	71 81       	ldd	r23, Z+1	; 0x01
    3d12:	82 81       	ldd	r24, Z+2	; 0x02
    3d14:	93 81       	ldd	r25, Z+3	; 0x03
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	44 f4       	brge	.+16     	; 0x3d36 <Init_SM+0x1688>
		__ticks = 1;
    3d26:	fe 01       	movw	r30, r28
    3d28:	e5 54       	subi	r30, 0x45	; 69
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	91 83       	std	Z+1, r25	; 0x01
    3d32:	80 83       	st	Z, r24
    3d34:	64 c0       	rjmp	.+200    	; 0x3dfe <Init_SM+0x1750>
	else if (__tmp > 65535)
    3d36:	fe 01       	movw	r30, r28
    3d38:	e3 54       	subi	r30, 0x43	; 67
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	3f ef       	ldi	r19, 0xFF	; 255
    3d48:	4f e7       	ldi	r20, 0x7F	; 127
    3d4a:	57 e4       	ldi	r21, 0x47	; 71
    3d4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d50:	18 16       	cp	r1, r24
    3d52:	0c f0       	brlt	.+2      	; 0x3d56 <Init_SM+0x16a8>
    3d54:	43 c0       	rjmp	.+134    	; 0x3ddc <Init_SM+0x172e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d56:	fe 01       	movw	r30, r28
    3d58:	ef 53       	subi	r30, 0x3F	; 63
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	60 81       	ld	r22, Z
    3d5e:	71 81       	ldd	r23, Z+1	; 0x01
    3d60:	82 81       	ldd	r24, Z+2	; 0x02
    3d62:	93 81       	ldd	r25, Z+3	; 0x03
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	8e 01       	movw	r16, r28
    3d76:	05 54       	subi	r16, 0x45	; 69
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	f8 01       	movw	r30, r16
    3d88:	91 83       	std	Z+1, r25	; 0x01
    3d8a:	80 83       	st	Z, r24
    3d8c:	1f c0       	rjmp	.+62     	; 0x3dcc <Init_SM+0x171e>
    3d8e:	fe 01       	movw	r30, r28
    3d90:	e7 54       	subi	r30, 0x47	; 71
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	88 ec       	ldi	r24, 0xC8	; 200
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	80 83       	st	Z, r24
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e7 54       	subi	r30, 0x47	; 71
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	80 81       	ld	r24, Z
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <Init_SM+0x16f8>
    3daa:	fe 01       	movw	r30, r28
    3dac:	e7 54       	subi	r30, 0x47	; 71
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	91 83       	std	Z+1, r25	; 0x01
    3db2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db4:	de 01       	movw	r26, r28
    3db6:	a5 54       	subi	r26, 0x45	; 69
    3db8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e5 54       	subi	r30, 0x45	; 69
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 81       	ld	r24, Z
    3dc2:	91 81       	ldd	r25, Z+1	; 0x01
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	11 96       	adiw	r26, 0x01	; 1
    3dc8:	9c 93       	st	X, r25
    3dca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e5 54       	subi	r30, 0x45	; 69
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	00 97       	sbiw	r24, 0x00	; 0
    3dd8:	d1 f6       	brne	.-76     	; 0x3d8e <Init_SM+0x16e0>
    3dda:	27 c0       	rjmp	.+78     	; 0x3e2a <Init_SM+0x177c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ddc:	8e 01       	movw	r16, r28
    3dde:	05 54       	subi	r16, 0x45	; 69
    3de0:	1f 4f       	sbci	r17, 0xFF	; 255
    3de2:	fe 01       	movw	r30, r28
    3de4:	e3 54       	subi	r30, 0x43	; 67
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	60 81       	ld	r22, Z
    3dea:	71 81       	ldd	r23, Z+1	; 0x01
    3dec:	82 81       	ldd	r24, Z+2	; 0x02
    3dee:	93 81       	ldd	r25, Z+3	; 0x03
    3df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	f8 01       	movw	r30, r16
    3dfa:	91 83       	std	Z+1, r25	; 0x01
    3dfc:	80 83       	st	Z, r24
    3dfe:	de 01       	movw	r26, r28
    3e00:	a9 54       	subi	r26, 0x49	; 73
    3e02:	bf 4f       	sbci	r27, 0xFF	; 255
    3e04:	fe 01       	movw	r30, r28
    3e06:	e5 54       	subi	r30, 0x45	; 69
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	80 81       	ld	r24, Z
    3e0c:	91 81       	ldd	r25, Z+1	; 0x01
    3e0e:	8d 93       	st	X+, r24
    3e10:	9c 93       	st	X, r25
    3e12:	fe 01       	movw	r30, r28
    3e14:	e9 54       	subi	r30, 0x49	; 73
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	01 97       	sbiw	r24, 0x01	; 1
    3e1e:	f1 f7       	brne	.-4      	; 0x3e1c <Init_SM+0x176e>
    3e20:	fe 01       	movw	r30, r28
    3e22:	e9 54       	subi	r30, 0x49	; 73
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 5a       	subi	r30, 0xA7	; 167
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	01 90       	ld	r0, Z+
    3e32:	f0 81       	ld	r31, Z
    3e34:	e0 2d       	mov	r30, r0
    3e36:	80 81       	ld	r24, Z
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e7 5a       	subi	r30, 0xA7	; 167
    3e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3e:	01 90       	ld	r0, Z+
    3e40:	f0 81       	ld	r31, Z
    3e42:	e0 2d       	mov	r30, r0
    3e44:	91 81       	ldd	r25, Z+1	; 0x01
    3e46:	69 2f       	mov	r22, r25
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3e4e:	fe 01       	movw	r30, r28
    3e50:	ed 54       	subi	r30, 0x4D	; 77
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	a0 ea       	ldi	r26, 0xA0	; 160
    3e5a:	b0 e4       	ldi	r27, 0x40	; 64
    3e5c:	80 83       	st	Z, r24
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	a2 83       	std	Z+2, r26	; 0x02
    3e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e64:	8e 01       	movw	r16, r28
    3e66:	01 55       	subi	r16, 0x51	; 81
    3e68:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	ed 54       	subi	r30, 0x4D	; 77
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	60 81       	ld	r22, Z
    3e72:	71 81       	ldd	r23, Z+1	; 0x01
    3e74:	82 81       	ldd	r24, Z+2	; 0x02
    3e76:	93 81       	ldd	r25, Z+3	; 0x03
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	4a ef       	ldi	r20, 0xFA	; 250
    3e7e:	54 e4       	ldi	r21, 0x44	; 68
    3e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	f8 01       	movw	r30, r16
    3e8a:	80 83       	st	Z, r24
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	a2 83       	std	Z+2, r26	; 0x02
    3e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e92:	fe 01       	movw	r30, r28
    3e94:	e1 55       	subi	r30, 0x51	; 81
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
    3e9c:	82 81       	ldd	r24, Z+2	; 0x02
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	40 e8       	ldi	r20, 0x80	; 128
    3ea6:	5f e3       	ldi	r21, 0x3F	; 63
    3ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eac:	88 23       	and	r24, r24
    3eae:	44 f4       	brge	.+16     	; 0x3ec0 <Init_SM+0x1812>
		__ticks = 1;
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e3 55       	subi	r30, 0x53	; 83
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	64 c0       	rjmp	.+200    	; 0x3f88 <Init_SM+0x18da>
	else if (__tmp > 65535)
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e1 55       	subi	r30, 0x51	; 81
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	60 81       	ld	r22, Z
    3ec8:	71 81       	ldd	r23, Z+1	; 0x01
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	3f ef       	ldi	r19, 0xFF	; 255
    3ed2:	4f e7       	ldi	r20, 0x7F	; 127
    3ed4:	57 e4       	ldi	r21, 0x47	; 71
    3ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eda:	18 16       	cp	r1, r24
    3edc:	0c f0       	brlt	.+2      	; 0x3ee0 <Init_SM+0x1832>
    3ede:	43 c0       	rjmp	.+134    	; 0x3f66 <Init_SM+0x18b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	ed 54       	subi	r30, 0x4D	; 77
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	40 e2       	ldi	r20, 0x20	; 32
    3ef4:	51 e4       	ldi	r21, 0x41	; 65
    3ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	8e 01       	movw	r16, r28
    3f00:	03 55       	subi	r16, 0x53	; 83
    3f02:	1f 4f       	sbci	r17, 0xFF	; 255
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	f8 01       	movw	r30, r16
    3f12:	91 83       	std	Z+1, r25	; 0x01
    3f14:	80 83       	st	Z, r24
    3f16:	1f c0       	rjmp	.+62     	; 0x3f56 <Init_SM+0x18a8>
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e5 55       	subi	r30, 0x55	; 85
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	88 ec       	ldi	r24, 0xC8	; 200
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	91 83       	std	Z+1, r25	; 0x01
    3f24:	80 83       	st	Z, r24
    3f26:	fe 01       	movw	r30, r28
    3f28:	e5 55       	subi	r30, 0x55	; 85
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	80 81       	ld	r24, Z
    3f2e:	91 81       	ldd	r25, Z+1	; 0x01
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <Init_SM+0x1882>
    3f34:	fe 01       	movw	r30, r28
    3f36:	e5 55       	subi	r30, 0x55	; 85
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	91 83       	std	Z+1, r25	; 0x01
    3f3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f3e:	de 01       	movw	r26, r28
    3f40:	a3 55       	subi	r26, 0x53	; 83
    3f42:	bf 4f       	sbci	r27, 0xFF	; 255
    3f44:	fe 01       	movw	r30, r28
    3f46:	e3 55       	subi	r30, 0x53	; 83
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	80 81       	ld	r24, Z
    3f4c:	91 81       	ldd	r25, Z+1	; 0x01
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	11 96       	adiw	r26, 0x01	; 1
    3f52:	9c 93       	st	X, r25
    3f54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f56:	fe 01       	movw	r30, r28
    3f58:	e3 55       	subi	r30, 0x53	; 83
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	00 97       	sbiw	r24, 0x00	; 0
    3f62:	d1 f6       	brne	.-76     	; 0x3f18 <Init_SM+0x186a>
    3f64:	27 c0       	rjmp	.+78     	; 0x3fb4 <Init_SM+0x1906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f66:	8e 01       	movw	r16, r28
    3f68:	03 55       	subi	r16, 0x53	; 83
    3f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e1 55       	subi	r30, 0x51	; 81
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	60 81       	ld	r22, Z
    3f74:	71 81       	ldd	r23, Z+1	; 0x01
    3f76:	82 81       	ldd	r24, Z+2	; 0x02
    3f78:	93 81       	ldd	r25, Z+3	; 0x03
    3f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	f8 01       	movw	r30, r16
    3f84:	91 83       	std	Z+1, r25	; 0x01
    3f86:	80 83       	st	Z, r24
    3f88:	de 01       	movw	r26, r28
    3f8a:	a7 55       	subi	r26, 0x57	; 87
    3f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e3 55       	subi	r30, 0x53	; 83
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	8d 93       	st	X+, r24
    3f9a:	9c 93       	st	X, r25
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e7 55       	subi	r30, 0x57	; 87
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <Init_SM+0x18f8>
    3faa:	fe 01       	movw	r30, r28
    3fac:	e7 55       	subi	r30, 0x57	; 87
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e7 5a       	subi	r30, 0xA7	; 167
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	01 90       	ld	r0, Z+
    3fbc:	f0 81       	ld	r31, Z
    3fbe:	e0 2d       	mov	r30, r0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e7 5a       	subi	r30, 0xA7	; 167
    3fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc8:	01 90       	ld	r0, Z+
    3fca:	f0 81       	ld	r31, Z
    3fcc:	e0 2d       	mov	r30, r0
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	69 2f       	mov	r22, r25
    3fd2:	41 e0       	ldi	r20, 0x01	; 1
    3fd4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    3fd8:	fe 01       	movw	r30, r28
    3fda:	eb 55       	subi	r30, 0x5B	; 91
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	a0 ea       	ldi	r26, 0xA0	; 160
    3fe4:	b0 e4       	ldi	r27, 0x40	; 64
    3fe6:	80 83       	st	Z, r24
    3fe8:	91 83       	std	Z+1, r25	; 0x01
    3fea:	a2 83       	std	Z+2, r26	; 0x02
    3fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fee:	8e 01       	movw	r16, r28
    3ff0:	0f 55       	subi	r16, 0x5F	; 95
    3ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	eb 55       	subi	r30, 0x5B	; 91
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	60 81       	ld	r22, Z
    3ffc:	71 81       	ldd	r23, Z+1	; 0x01
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	4a ef       	ldi	r20, 0xFA	; 250
    4008:	54 e4       	ldi	r21, 0x44	; 68
    400a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	f8 01       	movw	r30, r16
    4014:	80 83       	st	Z, r24
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	a2 83       	std	Z+2, r26	; 0x02
    401a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    401c:	fe 01       	movw	r30, r28
    401e:	ef 55       	subi	r30, 0x5F	; 95
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	60 81       	ld	r22, Z
    4024:	71 81       	ldd	r23, Z+1	; 0x01
    4026:	82 81       	ldd	r24, Z+2	; 0x02
    4028:	93 81       	ldd	r25, Z+3	; 0x03
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e8       	ldi	r20, 0x80	; 128
    4030:	5f e3       	ldi	r21, 0x3F	; 63
    4032:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4036:	88 23       	and	r24, r24
    4038:	44 f4       	brge	.+16     	; 0x404a <Init_SM+0x199c>
		__ticks = 1;
    403a:	fe 01       	movw	r30, r28
    403c:	e1 56       	subi	r30, 0x61	; 97
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	91 83       	std	Z+1, r25	; 0x01
    4046:	80 83       	st	Z, r24
    4048:	64 c0       	rjmp	.+200    	; 0x4112 <Init_SM+0x1a64>
	else if (__tmp > 65535)
    404a:	fe 01       	movw	r30, r28
    404c:	ef 55       	subi	r30, 0x5F	; 95
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	3f ef       	ldi	r19, 0xFF	; 255
    405c:	4f e7       	ldi	r20, 0x7F	; 127
    405e:	57 e4       	ldi	r21, 0x47	; 71
    4060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4064:	18 16       	cp	r1, r24
    4066:	0c f0       	brlt	.+2      	; 0x406a <Init_SM+0x19bc>
    4068:	43 c0       	rjmp	.+134    	; 0x40f0 <Init_SM+0x1a42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    406a:	fe 01       	movw	r30, r28
    406c:	eb 55       	subi	r30, 0x5B	; 91
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	60 81       	ld	r22, Z
    4072:	71 81       	ldd	r23, Z+1	; 0x01
    4074:	82 81       	ldd	r24, Z+2	; 0x02
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e2       	ldi	r20, 0x20	; 32
    407e:	51 e4       	ldi	r21, 0x41	; 65
    4080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	8e 01       	movw	r16, r28
    408a:	01 56       	subi	r16, 0x61	; 97
    408c:	1f 4f       	sbci	r17, 0xFF	; 255
    408e:	bc 01       	movw	r22, r24
    4090:	cd 01       	movw	r24, r26
    4092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	f8 01       	movw	r30, r16
    409c:	91 83       	std	Z+1, r25	; 0x01
    409e:	80 83       	st	Z, r24
    40a0:	1f c0       	rjmp	.+62     	; 0x40e0 <Init_SM+0x1a32>
    40a2:	fe 01       	movw	r30, r28
    40a4:	e3 56       	subi	r30, 0x63	; 99
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	88 ec       	ldi	r24, 0xC8	; 200
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	80 83       	st	Z, r24
    40b0:	fe 01       	movw	r30, r28
    40b2:	e3 56       	subi	r30, 0x63	; 99
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	80 81       	ld	r24, Z
    40b8:	91 81       	ldd	r25, Z+1	; 0x01
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	f1 f7       	brne	.-4      	; 0x40ba <Init_SM+0x1a0c>
    40be:	fe 01       	movw	r30, r28
    40c0:	e3 56       	subi	r30, 0x63	; 99
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	de 01       	movw	r26, r28
    40ca:	a1 56       	subi	r26, 0x61	; 97
    40cc:	bf 4f       	sbci	r27, 0xFF	; 255
    40ce:	fe 01       	movw	r30, r28
    40d0:	e1 56       	subi	r30, 0x61	; 97
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	80 81       	ld	r24, Z
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	11 96       	adiw	r26, 0x01	; 1
    40dc:	9c 93       	st	X, r25
    40de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e0:	fe 01       	movw	r30, r28
    40e2:	e1 56       	subi	r30, 0x61	; 97
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	80 81       	ld	r24, Z
    40e8:	91 81       	ldd	r25, Z+1	; 0x01
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	d1 f6       	brne	.-76     	; 0x40a2 <Init_SM+0x19f4>
    40ee:	27 c0       	rjmp	.+78     	; 0x413e <Init_SM+0x1a90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f0:	8e 01       	movw	r16, r28
    40f2:	01 56       	subi	r16, 0x61	; 97
    40f4:	1f 4f       	sbci	r17, 0xFF	; 255
    40f6:	fe 01       	movw	r30, r28
    40f8:	ef 55       	subi	r30, 0x5F	; 95
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	60 81       	ld	r22, Z
    40fe:	71 81       	ldd	r23, Z+1	; 0x01
    4100:	82 81       	ldd	r24, Z+2	; 0x02
    4102:	93 81       	ldd	r25, Z+3	; 0x03
    4104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	f8 01       	movw	r30, r16
    410e:	91 83       	std	Z+1, r25	; 0x01
    4110:	80 83       	st	Z, r24
    4112:	de 01       	movw	r26, r28
    4114:	a5 56       	subi	r26, 0x65	; 101
    4116:	bf 4f       	sbci	r27, 0xFF	; 255
    4118:	fe 01       	movw	r30, r28
    411a:	e1 56       	subi	r30, 0x61	; 97
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	8d 93       	st	X+, r24
    4124:	9c 93       	st	X, r25
    4126:	fe 01       	movw	r30, r28
    4128:	e5 56       	subi	r30, 0x65	; 101
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 81       	ld	r24, Z
    412e:	91 81       	ldd	r25, Z+1	; 0x01
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	f1 f7       	brne	.-4      	; 0x4130 <Init_SM+0x1a82>
    4134:	fe 01       	movw	r30, r28
    4136:	e5 56       	subi	r30, 0x65	; 101
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	91 83       	std	Z+1, r25	; 0x01
    413c:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    413e:	fe 01       	movw	r30, r28
    4140:	e7 5a       	subi	r30, 0xA7	; 167
    4142:	fe 4f       	sbci	r31, 0xFE	; 254
    4144:	01 90       	ld	r0, Z+
    4146:	f0 81       	ld	r31, Z
    4148:	e0 2d       	mov	r30, r0
    414a:	80 81       	ld	r24, Z
    414c:	fe 01       	movw	r30, r28
    414e:	e7 5a       	subi	r30, 0xA7	; 167
    4150:	fe 4f       	sbci	r31, 0xFE	; 254
    4152:	01 90       	ld	r0, Z+
    4154:	f0 81       	ld	r31, Z
    4156:	e0 2d       	mov	r30, r0
    4158:	92 81       	ldd	r25, Z+2	; 0x02
    415a:	69 2f       	mov	r22, r25
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4162:	fe 01       	movw	r30, r28
    4164:	e9 56       	subi	r30, 0x69	; 105
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	a0 ea       	ldi	r26, 0xA0	; 160
    416e:	b0 e4       	ldi	r27, 0x40	; 64
    4170:	80 83       	st	Z, r24
    4172:	91 83       	std	Z+1, r25	; 0x01
    4174:	a2 83       	std	Z+2, r26	; 0x02
    4176:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4178:	8e 01       	movw	r16, r28
    417a:	0d 56       	subi	r16, 0x6D	; 109
    417c:	1f 4f       	sbci	r17, 0xFF	; 255
    417e:	fe 01       	movw	r30, r28
    4180:	e9 56       	subi	r30, 0x69	; 105
    4182:	ff 4f       	sbci	r31, 0xFF	; 255
    4184:	60 81       	ld	r22, Z
    4186:	71 81       	ldd	r23, Z+1	; 0x01
    4188:	82 81       	ldd	r24, Z+2	; 0x02
    418a:	93 81       	ldd	r25, Z+3	; 0x03
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	4a ef       	ldi	r20, 0xFA	; 250
    4192:	54 e4       	ldi	r21, 0x44	; 68
    4194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	f8 01       	movw	r30, r16
    419e:	80 83       	st	Z, r24
    41a0:	91 83       	std	Z+1, r25	; 0x01
    41a2:	a2 83       	std	Z+2, r26	; 0x02
    41a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41a6:	fe 01       	movw	r30, r28
    41a8:	ed 56       	subi	r30, 0x6D	; 109
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e8       	ldi	r20, 0x80	; 128
    41ba:	5f e3       	ldi	r21, 0x3F	; 63
    41bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c0:	88 23       	and	r24, r24
    41c2:	44 f4       	brge	.+16     	; 0x41d4 <Init_SM+0x1b26>
		__ticks = 1;
    41c4:	fe 01       	movw	r30, r28
    41c6:	ef 56       	subi	r30, 0x6F	; 111
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	91 83       	std	Z+1, r25	; 0x01
    41d0:	80 83       	st	Z, r24
    41d2:	64 c0       	rjmp	.+200    	; 0x429c <Init_SM+0x1bee>
	else if (__tmp > 65535)
    41d4:	fe 01       	movw	r30, r28
    41d6:	ed 56       	subi	r30, 0x6D	; 109
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	60 81       	ld	r22, Z
    41dc:	71 81       	ldd	r23, Z+1	; 0x01
    41de:	82 81       	ldd	r24, Z+2	; 0x02
    41e0:	93 81       	ldd	r25, Z+3	; 0x03
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	3f ef       	ldi	r19, 0xFF	; 255
    41e6:	4f e7       	ldi	r20, 0x7F	; 127
    41e8:	57 e4       	ldi	r21, 0x47	; 71
    41ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41ee:	18 16       	cp	r1, r24
    41f0:	0c f0       	brlt	.+2      	; 0x41f4 <Init_SM+0x1b46>
    41f2:	43 c0       	rjmp	.+134    	; 0x427a <Init_SM+0x1bcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f4:	fe 01       	movw	r30, r28
    41f6:	e9 56       	subi	r30, 0x69	; 105
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	60 81       	ld	r22, Z
    41fc:	71 81       	ldd	r23, Z+1	; 0x01
    41fe:	82 81       	ldd	r24, Z+2	; 0x02
    4200:	93 81       	ldd	r25, Z+3	; 0x03
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	51 e4       	ldi	r21, 0x41	; 65
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	8e 01       	movw	r16, r28
    4214:	0f 56       	subi	r16, 0x6F	; 111
    4216:	1f 4f       	sbci	r17, 0xFF	; 255
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	f8 01       	movw	r30, r16
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	1f c0       	rjmp	.+62     	; 0x426a <Init_SM+0x1bbc>
    422c:	fe 01       	movw	r30, r28
    422e:	e1 57       	subi	r30, 0x71	; 113
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	88 ec       	ldi	r24, 0xC8	; 200
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	91 83       	std	Z+1, r25	; 0x01
    4238:	80 83       	st	Z, r24
    423a:	fe 01       	movw	r30, r28
    423c:	e1 57       	subi	r30, 0x71	; 113
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	01 97       	sbiw	r24, 0x01	; 1
    4246:	f1 f7       	brne	.-4      	; 0x4244 <Init_SM+0x1b96>
    4248:	fe 01       	movw	r30, r28
    424a:	e1 57       	subi	r30, 0x71	; 113
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	91 83       	std	Z+1, r25	; 0x01
    4250:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4252:	de 01       	movw	r26, r28
    4254:	af 56       	subi	r26, 0x6F	; 111
    4256:	bf 4f       	sbci	r27, 0xFF	; 255
    4258:	fe 01       	movw	r30, r28
    425a:	ef 56       	subi	r30, 0x6F	; 111
    425c:	ff 4f       	sbci	r31, 0xFF	; 255
    425e:	80 81       	ld	r24, Z
    4260:	91 81       	ldd	r25, Z+1	; 0x01
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	11 96       	adiw	r26, 0x01	; 1
    4266:	9c 93       	st	X, r25
    4268:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426a:	fe 01       	movw	r30, r28
    426c:	ef 56       	subi	r30, 0x6F	; 111
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	d1 f6       	brne	.-76     	; 0x422c <Init_SM+0x1b7e>
    4278:	27 c0       	rjmp	.+78     	; 0x42c8 <Init_SM+0x1c1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427a:	8e 01       	movw	r16, r28
    427c:	0f 56       	subi	r16, 0x6F	; 111
    427e:	1f 4f       	sbci	r17, 0xFF	; 255
    4280:	fe 01       	movw	r30, r28
    4282:	ed 56       	subi	r30, 0x6D	; 109
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	60 81       	ld	r22, Z
    4288:	71 81       	ldd	r23, Z+1	; 0x01
    428a:	82 81       	ldd	r24, Z+2	; 0x02
    428c:	93 81       	ldd	r25, Z+3	; 0x03
    428e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	f8 01       	movw	r30, r16
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	de 01       	movw	r26, r28
    429e:	a3 57       	subi	r26, 0x73	; 115
    42a0:	bf 4f       	sbci	r27, 0xFF	; 255
    42a2:	fe 01       	movw	r30, r28
    42a4:	ef 56       	subi	r30, 0x6F	; 111
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	80 81       	ld	r24, Z
    42aa:	91 81       	ldd	r25, Z+1	; 0x01
    42ac:	8d 93       	st	X+, r24
    42ae:	9c 93       	st	X, r25
    42b0:	fe 01       	movw	r30, r28
    42b2:	e3 57       	subi	r30, 0x73	; 115
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <Init_SM+0x1c0c>
    42be:	fe 01       	movw	r30, r28
    42c0:	e3 57       	subi	r30, 0x73	; 115
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    42c8:	fe 01       	movw	r30, r28
    42ca:	e7 5a       	subi	r30, 0xA7	; 167
    42cc:	fe 4f       	sbci	r31, 0xFE	; 254
    42ce:	01 90       	ld	r0, Z+
    42d0:	f0 81       	ld	r31, Z
    42d2:	e0 2d       	mov	r30, r0
    42d4:	80 81       	ld	r24, Z
    42d6:	fe 01       	movw	r30, r28
    42d8:	e7 5a       	subi	r30, 0xA7	; 167
    42da:	fe 4f       	sbci	r31, 0xFE	; 254
    42dc:	01 90       	ld	r0, Z+
    42de:	f0 81       	ld	r31, Z
    42e0:	e0 2d       	mov	r30, r0
    42e2:	94 81       	ldd	r25, Z+4	; 0x04
    42e4:	69 2f       	mov	r22, r25
    42e6:	41 e0       	ldi	r20, 0x01	; 1
    42e8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    42ec:	fe 01       	movw	r30, r28
    42ee:	e7 57       	subi	r30, 0x77	; 119
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	a0 ea       	ldi	r26, 0xA0	; 160
    42f8:	b0 e4       	ldi	r27, 0x40	; 64
    42fa:	80 83       	st	Z, r24
    42fc:	91 83       	std	Z+1, r25	; 0x01
    42fe:	a2 83       	std	Z+2, r26	; 0x02
    4300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4302:	8e 01       	movw	r16, r28
    4304:	0b 57       	subi	r16, 0x7B	; 123
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	fe 01       	movw	r30, r28
    430a:	e7 57       	subi	r30, 0x77	; 119
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	60 81       	ld	r22, Z
    4310:	71 81       	ldd	r23, Z+1	; 0x01
    4312:	82 81       	ldd	r24, Z+2	; 0x02
    4314:	93 81       	ldd	r25, Z+3	; 0x03
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	4a ef       	ldi	r20, 0xFA	; 250
    431c:	54 e4       	ldi	r21, 0x44	; 68
    431e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	f8 01       	movw	r30, r16
    4328:	80 83       	st	Z, r24
    432a:	91 83       	std	Z+1, r25	; 0x01
    432c:	a2 83       	std	Z+2, r26	; 0x02
    432e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4330:	fe 01       	movw	r30, r28
    4332:	eb 57       	subi	r30, 0x7B	; 123
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	60 81       	ld	r22, Z
    4338:	71 81       	ldd	r23, Z+1	; 0x01
    433a:	82 81       	ldd	r24, Z+2	; 0x02
    433c:	93 81       	ldd	r25, Z+3	; 0x03
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e8       	ldi	r20, 0x80	; 128
    4344:	5f e3       	ldi	r21, 0x3F	; 63
    4346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    434a:	88 23       	and	r24, r24
    434c:	44 f4       	brge	.+16     	; 0x435e <Init_SM+0x1cb0>
		__ticks = 1;
    434e:	fe 01       	movw	r30, r28
    4350:	ed 57       	subi	r30, 0x7D	; 125
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	91 83       	std	Z+1, r25	; 0x01
    435a:	80 83       	st	Z, r24
    435c:	64 c0       	rjmp	.+200    	; 0x4426 <Init_SM+0x1d78>
	else if (__tmp > 65535)
    435e:	fe 01       	movw	r30, r28
    4360:	eb 57       	subi	r30, 0x7B	; 123
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	60 81       	ld	r22, Z
    4366:	71 81       	ldd	r23, Z+1	; 0x01
    4368:	82 81       	ldd	r24, Z+2	; 0x02
    436a:	93 81       	ldd	r25, Z+3	; 0x03
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	3f ef       	ldi	r19, 0xFF	; 255
    4370:	4f e7       	ldi	r20, 0x7F	; 127
    4372:	57 e4       	ldi	r21, 0x47	; 71
    4374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4378:	18 16       	cp	r1, r24
    437a:	0c f0       	brlt	.+2      	; 0x437e <Init_SM+0x1cd0>
    437c:	43 c0       	rjmp	.+134    	; 0x4404 <Init_SM+0x1d56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    437e:	fe 01       	movw	r30, r28
    4380:	e7 57       	subi	r30, 0x77	; 119
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	60 81       	ld	r22, Z
    4386:	71 81       	ldd	r23, Z+1	; 0x01
    4388:	82 81       	ldd	r24, Z+2	; 0x02
    438a:	93 81       	ldd	r25, Z+3	; 0x03
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	40 e2       	ldi	r20, 0x20	; 32
    4392:	51 e4       	ldi	r21, 0x41	; 65
    4394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	8e 01       	movw	r16, r28
    439e:	0d 57       	subi	r16, 0x7D	; 125
    43a0:	1f 4f       	sbci	r17, 0xFF	; 255
    43a2:	bc 01       	movw	r22, r24
    43a4:	cd 01       	movw	r24, r26
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	f8 01       	movw	r30, r16
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	80 83       	st	Z, r24
    43b4:	1f c0       	rjmp	.+62     	; 0x43f4 <Init_SM+0x1d46>
    43b6:	fe 01       	movw	r30, r28
    43b8:	ef 57       	subi	r30, 0x7F	; 127
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	88 ec       	ldi	r24, 0xC8	; 200
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	80 83       	st	Z, r24
    43c4:	fe 01       	movw	r30, r28
    43c6:	ef 57       	subi	r30, 0x7F	; 127
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	80 81       	ld	r24, Z
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	f1 f7       	brne	.-4      	; 0x43ce <Init_SM+0x1d20>
    43d2:	fe 01       	movw	r30, r28
    43d4:	ef 57       	subi	r30, 0x7F	; 127
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	91 83       	std	Z+1, r25	; 0x01
    43da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43dc:	de 01       	movw	r26, r28
    43de:	ad 57       	subi	r26, 0x7D	; 125
    43e0:	bf 4f       	sbci	r27, 0xFF	; 255
    43e2:	fe 01       	movw	r30, r28
    43e4:	ed 57       	subi	r30, 0x7D	; 125
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	80 81       	ld	r24, Z
    43ea:	91 81       	ldd	r25, Z+1	; 0x01
    43ec:	01 97       	sbiw	r24, 0x01	; 1
    43ee:	11 96       	adiw	r26, 0x01	; 1
    43f0:	9c 93       	st	X, r25
    43f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f4:	fe 01       	movw	r30, r28
    43f6:	ed 57       	subi	r30, 0x7D	; 125
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	80 81       	ld	r24, Z
    43fc:	91 81       	ldd	r25, Z+1	; 0x01
    43fe:	00 97       	sbiw	r24, 0x00	; 0
    4400:	d1 f6       	brne	.-76     	; 0x43b6 <Init_SM+0x1d08>
    4402:	27 c0       	rjmp	.+78     	; 0x4452 <Init_SM+0x1da4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4404:	8e 01       	movw	r16, r28
    4406:	0d 57       	subi	r16, 0x7D	; 125
    4408:	1f 4f       	sbci	r17, 0xFF	; 255
    440a:	fe 01       	movw	r30, r28
    440c:	eb 57       	subi	r30, 0x7B	; 123
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	60 81       	ld	r22, Z
    4412:	71 81       	ldd	r23, Z+1	; 0x01
    4414:	82 81       	ldd	r24, Z+2	; 0x02
    4416:	93 81       	ldd	r25, Z+3	; 0x03
    4418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	f8 01       	movw	r30, r16
    4422:	91 83       	std	Z+1, r25	; 0x01
    4424:	80 83       	st	Z, r24
    4426:	de 01       	movw	r26, r28
    4428:	a1 58       	subi	r26, 0x81	; 129
    442a:	bf 4f       	sbci	r27, 0xFF	; 255
    442c:	fe 01       	movw	r30, r28
    442e:	ed 57       	subi	r30, 0x7D	; 125
    4430:	ff 4f       	sbci	r31, 0xFF	; 255
    4432:	80 81       	ld	r24, Z
    4434:	91 81       	ldd	r25, Z+1	; 0x01
    4436:	8d 93       	st	X+, r24
    4438:	9c 93       	st	X, r25
    443a:	fe 01       	movw	r30, r28
    443c:	e1 58       	subi	r30, 0x81	; 129
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	80 81       	ld	r24, Z
    4442:	91 81       	ldd	r25, Z+1	; 0x01
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	f1 f7       	brne	.-4      	; 0x4444 <Init_SM+0x1d96>
    4448:	fe 01       	movw	r30, r28
    444a:	e1 58       	subi	r30, 0x81	; 129
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	91 83       	std	Z+1, r25	; 0x01
    4450:	80 83       	st	Z, r24
						DIO_u8PIN_HIGH);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    4452:	fe 01       	movw	r30, r28
    4454:	e7 5a       	subi	r30, 0xA7	; 167
    4456:	fe 4f       	sbci	r31, 0xFE	; 254
    4458:	01 90       	ld	r0, Z+
    445a:	f0 81       	ld	r31, Z
    445c:	e0 2d       	mov	r30, r0
    445e:	80 81       	ld	r24, Z
    4460:	fe 01       	movw	r30, r28
    4462:	e7 5a       	subi	r30, 0xA7	; 167
    4464:	fe 4f       	sbci	r31, 0xFE	; 254
    4466:	01 90       	ld	r0, Z+
    4468:	f0 81       	ld	r31, Z
    446a:	e0 2d       	mov	r30, r0
    446c:	93 81       	ldd	r25, Z+3	; 0x03
    446e:	69 2f       	mov	r22, r25
    4470:	40 e0       	ldi	r20, 0x00	; 0
    4472:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4476:	fe 01       	movw	r30, r28
    4478:	e5 58       	subi	r30, 0x85	; 133
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	a0 ea       	ldi	r26, 0xA0	; 160
    4482:	b0 e4       	ldi	r27, 0x40	; 64
    4484:	80 83       	st	Z, r24
    4486:	91 83       	std	Z+1, r25	; 0x01
    4488:	a2 83       	std	Z+2, r26	; 0x02
    448a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    448c:	8e 01       	movw	r16, r28
    448e:	09 58       	subi	r16, 0x89	; 137
    4490:	1f 4f       	sbci	r17, 0xFF	; 255
    4492:	fe 01       	movw	r30, r28
    4494:	e5 58       	subi	r30, 0x85	; 133
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	60 81       	ld	r22, Z
    449a:	71 81       	ldd	r23, Z+1	; 0x01
    449c:	82 81       	ldd	r24, Z+2	; 0x02
    449e:	93 81       	ldd	r25, Z+3	; 0x03
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	4a ef       	ldi	r20, 0xFA	; 250
    44a6:	54 e4       	ldi	r21, 0x44	; 68
    44a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	f8 01       	movw	r30, r16
    44b2:	80 83       	st	Z, r24
    44b4:	91 83       	std	Z+1, r25	; 0x01
    44b6:	a2 83       	std	Z+2, r26	; 0x02
    44b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44ba:	fe 01       	movw	r30, r28
    44bc:	e9 58       	subi	r30, 0x89	; 137
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	60 81       	ld	r22, Z
    44c2:	71 81       	ldd	r23, Z+1	; 0x01
    44c4:	82 81       	ldd	r24, Z+2	; 0x02
    44c6:	93 81       	ldd	r25, Z+3	; 0x03
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e8       	ldi	r20, 0x80	; 128
    44ce:	5f e3       	ldi	r21, 0x3F	; 63
    44d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44d4:	88 23       	and	r24, r24
    44d6:	44 f4       	brge	.+16     	; 0x44e8 <Init_SM+0x1e3a>
		__ticks = 1;
    44d8:	fe 01       	movw	r30, r28
    44da:	eb 58       	subi	r30, 0x8B	; 139
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	91 83       	std	Z+1, r25	; 0x01
    44e4:	80 83       	st	Z, r24
    44e6:	64 c0       	rjmp	.+200    	; 0x45b0 <Init_SM+0x1f02>
	else if (__tmp > 65535)
    44e8:	fe 01       	movw	r30, r28
    44ea:	e9 58       	subi	r30, 0x89	; 137
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	60 81       	ld	r22, Z
    44f0:	71 81       	ldd	r23, Z+1	; 0x01
    44f2:	82 81       	ldd	r24, Z+2	; 0x02
    44f4:	93 81       	ldd	r25, Z+3	; 0x03
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	3f ef       	ldi	r19, 0xFF	; 255
    44fa:	4f e7       	ldi	r20, 0x7F	; 127
    44fc:	57 e4       	ldi	r21, 0x47	; 71
    44fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4502:	18 16       	cp	r1, r24
    4504:	0c f0       	brlt	.+2      	; 0x4508 <Init_SM+0x1e5a>
    4506:	43 c0       	rjmp	.+134    	; 0x458e <Init_SM+0x1ee0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4508:	fe 01       	movw	r30, r28
    450a:	e5 58       	subi	r30, 0x85	; 133
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	40 e2       	ldi	r20, 0x20	; 32
    451c:	51 e4       	ldi	r21, 0x41	; 65
    451e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4522:	dc 01       	movw	r26, r24
    4524:	cb 01       	movw	r24, r22
    4526:	8e 01       	movw	r16, r28
    4528:	0b 58       	subi	r16, 0x8B	; 139
    452a:	1f 4f       	sbci	r17, 0xFF	; 255
    452c:	bc 01       	movw	r22, r24
    452e:	cd 01       	movw	r24, r26
    4530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	f8 01       	movw	r30, r16
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	80 83       	st	Z, r24
    453e:	1f c0       	rjmp	.+62     	; 0x457e <Init_SM+0x1ed0>
    4540:	fe 01       	movw	r30, r28
    4542:	ed 58       	subi	r30, 0x8D	; 141
    4544:	ff 4f       	sbci	r31, 0xFF	; 255
    4546:	88 ec       	ldi	r24, 0xC8	; 200
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	91 83       	std	Z+1, r25	; 0x01
    454c:	80 83       	st	Z, r24
    454e:	fe 01       	movw	r30, r28
    4550:	ed 58       	subi	r30, 0x8D	; 141
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	80 81       	ld	r24, Z
    4556:	91 81       	ldd	r25, Z+1	; 0x01
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <Init_SM+0x1eaa>
    455c:	fe 01       	movw	r30, r28
    455e:	ed 58       	subi	r30, 0x8D	; 141
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4566:	de 01       	movw	r26, r28
    4568:	ab 58       	subi	r26, 0x8B	; 139
    456a:	bf 4f       	sbci	r27, 0xFF	; 255
    456c:	fe 01       	movw	r30, r28
    456e:	eb 58       	subi	r30, 0x8B	; 139
    4570:	ff 4f       	sbci	r31, 0xFF	; 255
    4572:	80 81       	ld	r24, Z
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	11 96       	adiw	r26, 0x01	; 1
    457a:	9c 93       	st	X, r25
    457c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457e:	fe 01       	movw	r30, r28
    4580:	eb 58       	subi	r30, 0x8B	; 139
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	80 81       	ld	r24, Z
    4586:	91 81       	ldd	r25, Z+1	; 0x01
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	d1 f6       	brne	.-76     	; 0x4540 <Init_SM+0x1e92>
    458c:	27 c0       	rjmp	.+78     	; 0x45dc <Init_SM+0x1f2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458e:	8e 01       	movw	r16, r28
    4590:	0b 58       	subi	r16, 0x8B	; 139
    4592:	1f 4f       	sbci	r17, 0xFF	; 255
    4594:	fe 01       	movw	r30, r28
    4596:	e9 58       	subi	r30, 0x89	; 137
    4598:	ff 4f       	sbci	r31, 0xFF	; 255
    459a:	60 81       	ld	r22, Z
    459c:	71 81       	ldd	r23, Z+1	; 0x01
    459e:	82 81       	ldd	r24, Z+2	; 0x02
    45a0:	93 81       	ldd	r25, Z+3	; 0x03
    45a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	f8 01       	movw	r30, r16
    45ac:	91 83       	std	Z+1, r25	; 0x01
    45ae:	80 83       	st	Z, r24
    45b0:	de 01       	movw	r26, r28
    45b2:	af 58       	subi	r26, 0x8F	; 143
    45b4:	bf 4f       	sbci	r27, 0xFF	; 255
    45b6:	fe 01       	movw	r30, r28
    45b8:	eb 58       	subi	r30, 0x8B	; 139
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	80 81       	ld	r24, Z
    45be:	91 81       	ldd	r25, Z+1	; 0x01
    45c0:	8d 93       	st	X+, r24
    45c2:	9c 93       	st	X, r25
    45c4:	fe 01       	movw	r30, r28
    45c6:	ef 58       	subi	r30, 0x8F	; 143
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	80 81       	ld	r24, Z
    45cc:	91 81       	ldd	r25, Z+1	; 0x01
    45ce:	01 97       	sbiw	r24, 0x01	; 1
    45d0:	f1 f7       	brne	.-4      	; 0x45ce <Init_SM+0x1f20>
    45d2:	fe 01       	movw	r30, r28
    45d4:	ef 58       	subi	r30, 0x8F	; 143
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	80 83       	st	Z, r24
				DIO_u8PIN_LOW);
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    45dc:	fe 01       	movw	r30, r28
    45de:	e7 5a       	subi	r30, 0xA7	; 167
    45e0:	fe 4f       	sbci	r31, 0xFE	; 254
    45e2:	01 90       	ld	r0, Z+
    45e4:	f0 81       	ld	r31, Z
    45e6:	e0 2d       	mov	r30, r0
    45e8:	80 81       	ld	r24, Z
    45ea:	fe 01       	movw	r30, r28
    45ec:	e7 5a       	subi	r30, 0xA7	; 167
    45ee:	fe 4f       	sbci	r31, 0xFE	; 254
    45f0:	01 90       	ld	r0, Z+
    45f2:	f0 81       	ld	r31, Z
    45f4:	e0 2d       	mov	r30, r0
    45f6:	91 81       	ldd	r25, Z+1	; 0x01
    45f8:	69 2f       	mov	r22, r25
    45fa:	41 e0       	ldi	r20, 0x01	; 1
    45fc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>

	else if (Copy_SM_st->Step_Type == Half_Step)
	{
		if (Copy_SM_st->SM_Direction == Counter_Clock_Wise)
		{
			for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    4600:	9e 01       	movw	r18, r28
    4602:	2f 5a       	subi	r18, 0xAF	; 175
    4604:	3e 4f       	sbci	r19, 0xFE	; 254
    4606:	fe 01       	movw	r30, r28
    4608:	ef 5a       	subi	r30, 0xAF	; 175
    460a:	fe 4f       	sbci	r31, 0xFE	; 254
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	a2 81       	ldd	r26, Z+2	; 0x02
    4612:	b3 81       	ldd	r27, Z+3	; 0x03
    4614:	01 96       	adiw	r24, 0x01	; 1
    4616:	a1 1d       	adc	r26, r1
    4618:	b1 1d       	adc	r27, r1
    461a:	f9 01       	movw	r30, r18
    461c:	80 83       	st	Z, r24
    461e:	91 83       	std	Z+1, r25	; 0x01
    4620:	a2 83       	std	Z+2, r26	; 0x02
    4622:	b3 83       	std	Z+3, r27	; 0x03
    4624:	fe 01       	movw	r30, r28
    4626:	e7 5a       	subi	r30, 0xA7	; 167
    4628:	fe 4f       	sbci	r31, 0xFE	; 254
    462a:	01 90       	ld	r0, Z+
    462c:	f0 81       	ld	r31, Z
    462e:	e0 2d       	mov	r30, r0
    4630:	24 85       	ldd	r18, Z+12	; 0x0c
    4632:	35 85       	ldd	r19, Z+13	; 0x0d
    4634:	46 85       	ldd	r20, Z+14	; 0x0e
    4636:	57 85       	ldd	r21, Z+15	; 0x0f
    4638:	fe 01       	movw	r30, r28
    463a:	ef 5a       	subi	r30, 0xAF	; 175
    463c:	fe 4f       	sbci	r31, 0xFE	; 254
    463e:	80 81       	ld	r24, Z
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	a2 81       	ldd	r26, Z+2	; 0x02
    4644:	b3 81       	ldd	r27, Z+3	; 0x03
    4646:	82 17       	cp	r24, r18
    4648:	93 07       	cpc	r25, r19
    464a:	a4 07       	cpc	r26, r20
    464c:	b5 07       	cpc	r27, r21
    464e:	08 f4       	brcc	.+2      	; 0x4652 <Init_SM+0x1fa4>
    4650:	9d c9       	rjmp	.-3270   	; 0x398c <Init_SM+0x12de>
				_delay_ms(5);
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
						DIO_u8PIN_HIGH);
				
			}
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    4652:	fe 01       	movw	r30, r28
    4654:	e7 5a       	subi	r30, 0xA7	; 167
    4656:	fe 4f       	sbci	r31, 0xFE	; 254
    4658:	01 90       	ld	r0, Z+
    465a:	f0 81       	ld	r31, Z
    465c:	e0 2d       	mov	r30, r0
    465e:	80 81       	ld	r24, Z
    4660:	fe 01       	movw	r30, r28
    4662:	e7 5a       	subi	r30, 0xA7	; 167
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	01 90       	ld	r0, Z+
    4668:	f0 81       	ld	r31, Z
    466a:	e0 2d       	mov	r30, r0
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	69 2f       	mov	r22, r25
    4670:	40 e0       	ldi	r20, 0x00	; 0
    4672:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    4676:	fe 01       	movw	r30, r28
    4678:	e7 5a       	subi	r30, 0xA7	; 167
    467a:	fe 4f       	sbci	r31, 0xFE	; 254
    467c:	01 90       	ld	r0, Z+
    467e:	f0 81       	ld	r31, Z
    4680:	e0 2d       	mov	r30, r0
    4682:	80 81       	ld	r24, Z
    4684:	fe 01       	movw	r30, r28
    4686:	e7 5a       	subi	r30, 0xA7	; 167
    4688:	fe 4f       	sbci	r31, 0xFE	; 254
    468a:	01 90       	ld	r0, Z+
    468c:	f0 81       	ld	r31, Z
    468e:	e0 2d       	mov	r30, r0
    4690:	92 81       	ldd	r25, Z+2	; 0x02
    4692:	69 2f       	mov	r22, r25
    4694:	40 e0       	ldi	r20, 0x00	; 0
    4696:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    469a:	fe 01       	movw	r30, r28
    469c:	e7 5a       	subi	r30, 0xA7	; 167
    469e:	fe 4f       	sbci	r31, 0xFE	; 254
    46a0:	01 90       	ld	r0, Z+
    46a2:	f0 81       	ld	r31, Z
    46a4:	e0 2d       	mov	r30, r0
    46a6:	80 81       	ld	r24, Z
    46a8:	fe 01       	movw	r30, r28
    46aa:	e7 5a       	subi	r30, 0xA7	; 167
    46ac:	fe 4f       	sbci	r31, 0xFE	; 254
    46ae:	01 90       	ld	r0, Z+
    46b0:	f0 81       	ld	r31, Z
    46b2:	e0 2d       	mov	r30, r0
    46b4:	93 81       	ldd	r25, Z+3	; 0x03
    46b6:	69 2f       	mov	r22, r25
    46b8:	40 e0       	ldi	r20, 0x00	; 0
    46ba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
				DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    46be:	fe 01       	movw	r30, r28
    46c0:	e7 5a       	subi	r30, 0xA7	; 167
    46c2:	fe 4f       	sbci	r31, 0xFE	; 254
    46c4:	01 90       	ld	r0, Z+
    46c6:	f0 81       	ld	r31, Z
    46c8:	e0 2d       	mov	r30, r0
    46ca:	80 81       	ld	r24, Z
    46cc:	fe 01       	movw	r30, r28
    46ce:	e7 5a       	subi	r30, 0xA7	; 167
    46d0:	fe 4f       	sbci	r31, 0xFE	; 254
    46d2:	01 90       	ld	r0, Z+
    46d4:	f0 81       	ld	r31, Z
    46d6:	e0 2d       	mov	r30, r0
    46d8:	94 81       	ldd	r25, Z+4	; 0x04
    46da:	69 2f       	mov	r22, r25
    46dc:	40 e0       	ldi	r20, 0x00	; 0
    46de:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    46e2:	8b c5       	rjmp	.+2838   	; 0x51fa <Init_SM+0x2b4c>
		}
	
	

	
		else if (Copy_SM_st->SM_Direction == Clock_Wise)
    46e4:	fe 01       	movw	r30, r28
    46e6:	e7 5a       	subi	r30, 0xA7	; 167
    46e8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ea:	01 90       	ld	r0, Z+
    46ec:	f0 81       	ld	r31, Z
    46ee:	e0 2d       	mov	r30, r0
    46f0:	86 81       	ldd	r24, Z+6	; 0x06
    46f2:	82 30       	cpi	r24, 0x02	; 2
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <Init_SM+0x204a>
    46f6:	81 c5       	rjmp	.+2818   	; 0x51fa <Init_SM+0x2b4c>
	
		{
		for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    46f8:	fe 01       	movw	r30, r28
    46fa:	ef 5a       	subi	r30, 0xAF	; 175
    46fc:	fe 4f       	sbci	r31, 0xFE	; 254
    46fe:	10 82       	st	Z, r1
    4700:	11 82       	std	Z+1, r1	; 0x01
    4702:	12 82       	std	Z+2, r1	; 0x02
    4704:	13 82       	std	Z+3, r1	; 0x03
    4706:	1a c5       	rjmp	.+2612   	; 0x513c <Init_SM+0x2a8e>
		{
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    4708:	fe 01       	movw	r30, r28
    470a:	e7 5a       	subi	r30, 0xA7	; 167
    470c:	fe 4f       	sbci	r31, 0xFE	; 254
    470e:	01 90       	ld	r0, Z+
    4710:	f0 81       	ld	r31, Z
    4712:	e0 2d       	mov	r30, r0
    4714:	80 81       	ld	r24, Z
    4716:	fe 01       	movw	r30, r28
    4718:	e7 5a       	subi	r30, 0xA7	; 167
    471a:	fe 4f       	sbci	r31, 0xFE	; 254
    471c:	01 90       	ld	r0, Z+
    471e:	f0 81       	ld	r31, Z
    4720:	e0 2d       	mov	r30, r0
    4722:	94 81       	ldd	r25, Z+4	; 0x04
    4724:	69 2f       	mov	r22, r25
    4726:	41 e0       	ldi	r20, 0x01	; 1
    4728:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    472c:	fe 01       	movw	r30, r28
    472e:	e3 59       	subi	r30, 0x93	; 147
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	a0 ea       	ldi	r26, 0xA0	; 160
    4738:	b0 e4       	ldi	r27, 0x40	; 64
    473a:	80 83       	st	Z, r24
    473c:	91 83       	std	Z+1, r25	; 0x01
    473e:	a2 83       	std	Z+2, r26	; 0x02
    4740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4742:	8e 01       	movw	r16, r28
    4744:	07 59       	subi	r16, 0x97	; 151
    4746:	1f 4f       	sbci	r17, 0xFF	; 255
    4748:	fe 01       	movw	r30, r28
    474a:	e3 59       	subi	r30, 0x93	; 147
    474c:	ff 4f       	sbci	r31, 0xFF	; 255
    474e:	60 81       	ld	r22, Z
    4750:	71 81       	ldd	r23, Z+1	; 0x01
    4752:	82 81       	ldd	r24, Z+2	; 0x02
    4754:	93 81       	ldd	r25, Z+3	; 0x03
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	4a ef       	ldi	r20, 0xFA	; 250
    475c:	54 e4       	ldi	r21, 0x44	; 68
    475e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	f8 01       	movw	r30, r16
    4768:	80 83       	st	Z, r24
    476a:	91 83       	std	Z+1, r25	; 0x01
    476c:	a2 83       	std	Z+2, r26	; 0x02
    476e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4770:	fe 01       	movw	r30, r28
    4772:	e7 59       	subi	r30, 0x97	; 151
    4774:	ff 4f       	sbci	r31, 0xFF	; 255
    4776:	60 81       	ld	r22, Z
    4778:	71 81       	ldd	r23, Z+1	; 0x01
    477a:	82 81       	ldd	r24, Z+2	; 0x02
    477c:	93 81       	ldd	r25, Z+3	; 0x03
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	40 e8       	ldi	r20, 0x80	; 128
    4784:	5f e3       	ldi	r21, 0x3F	; 63
    4786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    478a:	88 23       	and	r24, r24
    478c:	44 f4       	brge	.+16     	; 0x479e <Init_SM+0x20f0>
		__ticks = 1;
    478e:	fe 01       	movw	r30, r28
    4790:	e9 59       	subi	r30, 0x99	; 153
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	81 e0       	ldi	r24, 0x01	; 1
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	80 83       	st	Z, r24
    479c:	64 c0       	rjmp	.+200    	; 0x4866 <Init_SM+0x21b8>
	else if (__tmp > 65535)
    479e:	fe 01       	movw	r30, r28
    47a0:	e7 59       	subi	r30, 0x97	; 151
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	60 81       	ld	r22, Z
    47a6:	71 81       	ldd	r23, Z+1	; 0x01
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	3f ef       	ldi	r19, 0xFF	; 255
    47b0:	4f e7       	ldi	r20, 0x7F	; 127
    47b2:	57 e4       	ldi	r21, 0x47	; 71
    47b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47b8:	18 16       	cp	r1, r24
    47ba:	0c f0       	brlt	.+2      	; 0x47be <Init_SM+0x2110>
    47bc:	43 c0       	rjmp	.+134    	; 0x4844 <Init_SM+0x2196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47be:	fe 01       	movw	r30, r28
    47c0:	e3 59       	subi	r30, 0x93	; 147
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	82 81       	ldd	r24, Z+2	; 0x02
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	40 e2       	ldi	r20, 0x20	; 32
    47d2:	51 e4       	ldi	r21, 0x41	; 65
    47d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	8e 01       	movw	r16, r28
    47de:	09 59       	subi	r16, 0x99	; 153
    47e0:	1f 4f       	sbci	r17, 0xFF	; 255
    47e2:	bc 01       	movw	r22, r24
    47e4:	cd 01       	movw	r24, r26
    47e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	f8 01       	movw	r30, r16
    47f0:	91 83       	std	Z+1, r25	; 0x01
    47f2:	80 83       	st	Z, r24
    47f4:	1f c0       	rjmp	.+62     	; 0x4834 <Init_SM+0x2186>
    47f6:	fe 01       	movw	r30, r28
    47f8:	eb 59       	subi	r30, 0x9B	; 155
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	88 ec       	ldi	r24, 0xC8	; 200
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	91 83       	std	Z+1, r25	; 0x01
    4802:	80 83       	st	Z, r24
    4804:	fe 01       	movw	r30, r28
    4806:	eb 59       	subi	r30, 0x9B	; 155
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	80 81       	ld	r24, Z
    480c:	91 81       	ldd	r25, Z+1	; 0x01
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	f1 f7       	brne	.-4      	; 0x480e <Init_SM+0x2160>
    4812:	fe 01       	movw	r30, r28
    4814:	eb 59       	subi	r30, 0x9B	; 155
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	91 83       	std	Z+1, r25	; 0x01
    481a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    481c:	de 01       	movw	r26, r28
    481e:	a9 59       	subi	r26, 0x99	; 153
    4820:	bf 4f       	sbci	r27, 0xFF	; 255
    4822:	fe 01       	movw	r30, r28
    4824:	e9 59       	subi	r30, 0x99	; 153
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	80 81       	ld	r24, Z
    482a:	91 81       	ldd	r25, Z+1	; 0x01
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	11 96       	adiw	r26, 0x01	; 1
    4830:	9c 93       	st	X, r25
    4832:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4834:	fe 01       	movw	r30, r28
    4836:	e9 59       	subi	r30, 0x99	; 153
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	d1 f6       	brne	.-76     	; 0x47f6 <Init_SM+0x2148>
    4842:	27 c0       	rjmp	.+78     	; 0x4892 <Init_SM+0x21e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	8e 01       	movw	r16, r28
    4846:	09 59       	subi	r16, 0x99	; 153
    4848:	1f 4f       	sbci	r17, 0xFF	; 255
    484a:	fe 01       	movw	r30, r28
    484c:	e7 59       	subi	r30, 0x97	; 151
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	60 81       	ld	r22, Z
    4852:	71 81       	ldd	r23, Z+1	; 0x01
    4854:	82 81       	ldd	r24, Z+2	; 0x02
    4856:	93 81       	ldd	r25, Z+3	; 0x03
    4858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	f8 01       	movw	r30, r16
    4862:	91 83       	std	Z+1, r25	; 0x01
    4864:	80 83       	st	Z, r24
    4866:	de 01       	movw	r26, r28
    4868:	ad 59       	subi	r26, 0x9D	; 157
    486a:	bf 4f       	sbci	r27, 0xFF	; 255
    486c:	fe 01       	movw	r30, r28
    486e:	e9 59       	subi	r30, 0x99	; 153
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	80 81       	ld	r24, Z
    4874:	91 81       	ldd	r25, Z+1	; 0x01
    4876:	8d 93       	st	X+, r24
    4878:	9c 93       	st	X, r25
    487a:	fe 01       	movw	r30, r28
    487c:	ed 59       	subi	r30, 0x9D	; 157
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	f1 f7       	brne	.-4      	; 0x4884 <Init_SM+0x21d6>
    4888:	fe 01       	movw	r30, r28
    488a:	ed 59       	subi	r30, 0x9D	; 157
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	91 83       	std	Z+1, r25	; 0x01
    4890:	80 83       	st	Z, r24
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    4892:	fe 01       	movw	r30, r28
    4894:	e7 5a       	subi	r30, 0xA7	; 167
    4896:	fe 4f       	sbci	r31, 0xFE	; 254
    4898:	01 90       	ld	r0, Z+
    489a:	f0 81       	ld	r31, Z
    489c:	e0 2d       	mov	r30, r0
    489e:	80 81       	ld	r24, Z
    48a0:	fe 01       	movw	r30, r28
    48a2:	e7 5a       	subi	r30, 0xA7	; 167
    48a4:	fe 4f       	sbci	r31, 0xFE	; 254
    48a6:	01 90       	ld	r0, Z+
    48a8:	f0 81       	ld	r31, Z
    48aa:	e0 2d       	mov	r30, r0
    48ac:	93 81       	ldd	r25, Z+3	; 0x03
    48ae:	69 2f       	mov	r22, r25
    48b0:	41 e0       	ldi	r20, 0x01	; 1
    48b2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    48b6:	fe 01       	movw	r30, r28
    48b8:	e1 5a       	subi	r30, 0xA1	; 161
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	a0 ea       	ldi	r26, 0xA0	; 160
    48c2:	b0 e4       	ldi	r27, 0x40	; 64
    48c4:	80 83       	st	Z, r24
    48c6:	91 83       	std	Z+1, r25	; 0x01
    48c8:	a2 83       	std	Z+2, r26	; 0x02
    48ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48cc:	8e 01       	movw	r16, r28
    48ce:	05 5a       	subi	r16, 0xA5	; 165
    48d0:	1f 4f       	sbci	r17, 0xFF	; 255
    48d2:	fe 01       	movw	r30, r28
    48d4:	e1 5a       	subi	r30, 0xA1	; 161
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	60 81       	ld	r22, Z
    48da:	71 81       	ldd	r23, Z+1	; 0x01
    48dc:	82 81       	ldd	r24, Z+2	; 0x02
    48de:	93 81       	ldd	r25, Z+3	; 0x03
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	4a ef       	ldi	r20, 0xFA	; 250
    48e6:	54 e4       	ldi	r21, 0x44	; 68
    48e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	f8 01       	movw	r30, r16
    48f2:	80 83       	st	Z, r24
    48f4:	91 83       	std	Z+1, r25	; 0x01
    48f6:	a2 83       	std	Z+2, r26	; 0x02
    48f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48fa:	fe 01       	movw	r30, r28
    48fc:	e5 5a       	subi	r30, 0xA5	; 165
    48fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4900:	60 81       	ld	r22, Z
    4902:	71 81       	ldd	r23, Z+1	; 0x01
    4904:	82 81       	ldd	r24, Z+2	; 0x02
    4906:	93 81       	ldd	r25, Z+3	; 0x03
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	40 e8       	ldi	r20, 0x80	; 128
    490e:	5f e3       	ldi	r21, 0x3F	; 63
    4910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4914:	88 23       	and	r24, r24
    4916:	44 f4       	brge	.+16     	; 0x4928 <Init_SM+0x227a>
		__ticks = 1;
    4918:	fe 01       	movw	r30, r28
    491a:	e7 5a       	subi	r30, 0xA7	; 167
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
    4926:	64 c0       	rjmp	.+200    	; 0x49f0 <Init_SM+0x2342>
	else if (__tmp > 65535)
    4928:	fe 01       	movw	r30, r28
    492a:	e5 5a       	subi	r30, 0xA5	; 165
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	60 81       	ld	r22, Z
    4930:	71 81       	ldd	r23, Z+1	; 0x01
    4932:	82 81       	ldd	r24, Z+2	; 0x02
    4934:	93 81       	ldd	r25, Z+3	; 0x03
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	3f ef       	ldi	r19, 0xFF	; 255
    493a:	4f e7       	ldi	r20, 0x7F	; 127
    493c:	57 e4       	ldi	r21, 0x47	; 71
    493e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4942:	18 16       	cp	r1, r24
    4944:	0c f0       	brlt	.+2      	; 0x4948 <Init_SM+0x229a>
    4946:	43 c0       	rjmp	.+134    	; 0x49ce <Init_SM+0x2320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4948:	fe 01       	movw	r30, r28
    494a:	e1 5a       	subi	r30, 0xA1	; 161
    494c:	ff 4f       	sbci	r31, 0xFF	; 255
    494e:	60 81       	ld	r22, Z
    4950:	71 81       	ldd	r23, Z+1	; 0x01
    4952:	82 81       	ldd	r24, Z+2	; 0x02
    4954:	93 81       	ldd	r25, Z+3	; 0x03
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	40 e2       	ldi	r20, 0x20	; 32
    495c:	51 e4       	ldi	r21, 0x41	; 65
    495e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	8e 01       	movw	r16, r28
    4968:	07 5a       	subi	r16, 0xA7	; 167
    496a:	1f 4f       	sbci	r17, 0xFF	; 255
    496c:	bc 01       	movw	r22, r24
    496e:	cd 01       	movw	r24, r26
    4970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	f8 01       	movw	r30, r16
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
    497e:	1f c0       	rjmp	.+62     	; 0x49be <Init_SM+0x2310>
    4980:	fe 01       	movw	r30, r28
    4982:	e9 5a       	subi	r30, 0xA9	; 169
    4984:	ff 4f       	sbci	r31, 0xFF	; 255
    4986:	88 ec       	ldi	r24, 0xC8	; 200
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	91 83       	std	Z+1, r25	; 0x01
    498c:	80 83       	st	Z, r24
    498e:	fe 01       	movw	r30, r28
    4990:	e9 5a       	subi	r30, 0xA9	; 169
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	91 81       	ldd	r25, Z+1	; 0x01
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	f1 f7       	brne	.-4      	; 0x4998 <Init_SM+0x22ea>
    499c:	fe 01       	movw	r30, r28
    499e:	e9 5a       	subi	r30, 0xA9	; 169
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	91 83       	std	Z+1, r25	; 0x01
    49a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a6:	de 01       	movw	r26, r28
    49a8:	a7 5a       	subi	r26, 0xA7	; 167
    49aa:	bf 4f       	sbci	r27, 0xFF	; 255
    49ac:	fe 01       	movw	r30, r28
    49ae:	e7 5a       	subi	r30, 0xA7	; 167
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	80 81       	ld	r24, Z
    49b4:	91 81       	ldd	r25, Z+1	; 0x01
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	11 96       	adiw	r26, 0x01	; 1
    49ba:	9c 93       	st	X, r25
    49bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49be:	fe 01       	movw	r30, r28
    49c0:	e7 5a       	subi	r30, 0xA7	; 167
    49c2:	ff 4f       	sbci	r31, 0xFF	; 255
    49c4:	80 81       	ld	r24, Z
    49c6:	91 81       	ldd	r25, Z+1	; 0x01
    49c8:	00 97       	sbiw	r24, 0x00	; 0
    49ca:	d1 f6       	brne	.-76     	; 0x4980 <Init_SM+0x22d2>
    49cc:	27 c0       	rjmp	.+78     	; 0x4a1c <Init_SM+0x236e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ce:	8e 01       	movw	r16, r28
    49d0:	07 5a       	subi	r16, 0xA7	; 167
    49d2:	1f 4f       	sbci	r17, 0xFF	; 255
    49d4:	fe 01       	movw	r30, r28
    49d6:	e5 5a       	subi	r30, 0xA5	; 165
    49d8:	ff 4f       	sbci	r31, 0xFF	; 255
    49da:	60 81       	ld	r22, Z
    49dc:	71 81       	ldd	r23, Z+1	; 0x01
    49de:	82 81       	ldd	r24, Z+2	; 0x02
    49e0:	93 81       	ldd	r25, Z+3	; 0x03
    49e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e6:	dc 01       	movw	r26, r24
    49e8:	cb 01       	movw	r24, r22
    49ea:	f8 01       	movw	r30, r16
    49ec:	91 83       	std	Z+1, r25	; 0x01
    49ee:	80 83       	st	Z, r24
    49f0:	de 01       	movw	r26, r28
    49f2:	ab 5a       	subi	r26, 0xAB	; 171
    49f4:	bf 4f       	sbci	r27, 0xFF	; 255
    49f6:	fe 01       	movw	r30, r28
    49f8:	e7 5a       	subi	r30, 0xA7	; 167
    49fa:	ff 4f       	sbci	r31, 0xFF	; 255
    49fc:	80 81       	ld	r24, Z
    49fe:	91 81       	ldd	r25, Z+1	; 0x01
    4a00:	8d 93       	st	X+, r24
    4a02:	9c 93       	st	X, r25
    4a04:	fe 01       	movw	r30, r28
    4a06:	eb 5a       	subi	r30, 0xAB	; 171
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	80 81       	ld	r24, Z
    4a0c:	91 81       	ldd	r25, Z+1	; 0x01
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	f1 f7       	brne	.-4      	; 0x4a0e <Init_SM+0x2360>
    4a12:	fe 01       	movw	r30, r28
    4a14:	eb 5a       	subi	r30, 0xAB	; 171
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	91 83       	std	Z+1, r25	; 0x01
    4a1a:	80 83       	st	Z, r24
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e7 5a       	subi	r30, 0xA7	; 167
    4a20:	fe 4f       	sbci	r31, 0xFE	; 254
    4a22:	01 90       	ld	r0, Z+
    4a24:	f0 81       	ld	r31, Z
    4a26:	e0 2d       	mov	r30, r0
    4a28:	80 81       	ld	r24, Z
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	e7 5a       	subi	r30, 0xA7	; 167
    4a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a30:	01 90       	ld	r0, Z+
    4a32:	f0 81       	ld	r31, Z
    4a34:	e0 2d       	mov	r30, r0
    4a36:	94 81       	ldd	r25, Z+4	; 0x04
    4a38:	69 2f       	mov	r22, r25
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4a40:	fe 01       	movw	r30, r28
    4a42:	ef 5a       	subi	r30, 0xAF	; 175
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	a0 ea       	ldi	r26, 0xA0	; 160
    4a4c:	b0 e4       	ldi	r27, 0x40	; 64
    4a4e:	80 83       	st	Z, r24
    4a50:	91 83       	std	Z+1, r25	; 0x01
    4a52:	a2 83       	std	Z+2, r26	; 0x02
    4a54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a56:	8e 01       	movw	r16, r28
    4a58:	03 5b       	subi	r16, 0xB3	; 179
    4a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	ef 5a       	subi	r30, 0xAF	; 175
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	60 81       	ld	r22, Z
    4a64:	71 81       	ldd	r23, Z+1	; 0x01
    4a66:	82 81       	ldd	r24, Z+2	; 0x02
    4a68:	93 81       	ldd	r25, Z+3	; 0x03
    4a6a:	20 e0       	ldi	r18, 0x00	; 0
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	4a ef       	ldi	r20, 0xFA	; 250
    4a70:	54 e4       	ldi	r21, 0x44	; 68
    4a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a76:	dc 01       	movw	r26, r24
    4a78:	cb 01       	movw	r24, r22
    4a7a:	f8 01       	movw	r30, r16
    4a7c:	80 83       	st	Z, r24
    4a7e:	91 83       	std	Z+1, r25	; 0x01
    4a80:	a2 83       	std	Z+2, r26	; 0x02
    4a82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a84:	fe 01       	movw	r30, r28
    4a86:	e3 5b       	subi	r30, 0xB3	; 179
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	60 81       	ld	r22, Z
    4a8c:	71 81       	ldd	r23, Z+1	; 0x01
    4a8e:	82 81       	ldd	r24, Z+2	; 0x02
    4a90:	93 81       	ldd	r25, Z+3	; 0x03
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e8       	ldi	r20, 0x80	; 128
    4a98:	5f e3       	ldi	r21, 0x3F	; 63
    4a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a9e:	88 23       	and	r24, r24
    4aa0:	44 f4       	brge	.+16     	; 0x4ab2 <Init_SM+0x2404>
		__ticks = 1;
    4aa2:	fe 01       	movw	r30, r28
    4aa4:	e5 5b       	subi	r30, 0xB5	; 181
    4aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	91 83       	std	Z+1, r25	; 0x01
    4aae:	80 83       	st	Z, r24
    4ab0:	64 c0       	rjmp	.+200    	; 0x4b7a <Init_SM+0x24cc>
	else if (__tmp > 65535)
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	e3 5b       	subi	r30, 0xB3	; 179
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	60 81       	ld	r22, Z
    4aba:	71 81       	ldd	r23, Z+1	; 0x01
    4abc:	82 81       	ldd	r24, Z+2	; 0x02
    4abe:	93 81       	ldd	r25, Z+3	; 0x03
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	3f ef       	ldi	r19, 0xFF	; 255
    4ac4:	4f e7       	ldi	r20, 0x7F	; 127
    4ac6:	57 e4       	ldi	r21, 0x47	; 71
    4ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4acc:	18 16       	cp	r1, r24
    4ace:	0c f0       	brlt	.+2      	; 0x4ad2 <Init_SM+0x2424>
    4ad0:	43 c0       	rjmp	.+134    	; 0x4b58 <Init_SM+0x24aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	ef 5a       	subi	r30, 0xAF	; 175
    4ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad8:	60 81       	ld	r22, Z
    4ada:	71 81       	ldd	r23, Z+1	; 0x01
    4adc:	82 81       	ldd	r24, Z+2	; 0x02
    4ade:	93 81       	ldd	r25, Z+3	; 0x03
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	40 e2       	ldi	r20, 0x20	; 32
    4ae6:	51 e4       	ldi	r21, 0x41	; 65
    4ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aec:	dc 01       	movw	r26, r24
    4aee:	cb 01       	movw	r24, r22
    4af0:	8e 01       	movw	r16, r28
    4af2:	05 5b       	subi	r16, 0xB5	; 181
    4af4:	1f 4f       	sbci	r17, 0xFF	; 255
    4af6:	bc 01       	movw	r22, r24
    4af8:	cd 01       	movw	r24, r26
    4afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	f8 01       	movw	r30, r16
    4b04:	91 83       	std	Z+1, r25	; 0x01
    4b06:	80 83       	st	Z, r24
    4b08:	1f c0       	rjmp	.+62     	; 0x4b48 <Init_SM+0x249a>
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	e7 5b       	subi	r30, 0xB7	; 183
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	88 ec       	ldi	r24, 0xC8	; 200
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	91 83       	std	Z+1, r25	; 0x01
    4b16:	80 83       	st	Z, r24
    4b18:	fe 01       	movw	r30, r28
    4b1a:	e7 5b       	subi	r30, 0xB7	; 183
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	80 81       	ld	r24, Z
    4b20:	91 81       	ldd	r25, Z+1	; 0x01
    4b22:	01 97       	sbiw	r24, 0x01	; 1
    4b24:	f1 f7       	brne	.-4      	; 0x4b22 <Init_SM+0x2474>
    4b26:	fe 01       	movw	r30, r28
    4b28:	e7 5b       	subi	r30, 0xB7	; 183
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	91 83       	std	Z+1, r25	; 0x01
    4b2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b30:	de 01       	movw	r26, r28
    4b32:	a5 5b       	subi	r26, 0xB5	; 181
    4b34:	bf 4f       	sbci	r27, 0xFF	; 255
    4b36:	fe 01       	movw	r30, r28
    4b38:	e5 5b       	subi	r30, 0xB5	; 181
    4b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3c:	80 81       	ld	r24, Z
    4b3e:	91 81       	ldd	r25, Z+1	; 0x01
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	11 96       	adiw	r26, 0x01	; 1
    4b44:	9c 93       	st	X, r25
    4b46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b48:	fe 01       	movw	r30, r28
    4b4a:	e5 5b       	subi	r30, 0xB5	; 181
    4b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4e:	80 81       	ld	r24, Z
    4b50:	91 81       	ldd	r25, Z+1	; 0x01
    4b52:	00 97       	sbiw	r24, 0x00	; 0
    4b54:	d1 f6       	brne	.-76     	; 0x4b0a <Init_SM+0x245c>
    4b56:	27 c0       	rjmp	.+78     	; 0x4ba6 <Init_SM+0x24f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b58:	8e 01       	movw	r16, r28
    4b5a:	05 5b       	subi	r16, 0xB5	; 181
    4b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5e:	fe 01       	movw	r30, r28
    4b60:	e3 5b       	subi	r30, 0xB3	; 179
    4b62:	ff 4f       	sbci	r31, 0xFF	; 255
    4b64:	60 81       	ld	r22, Z
    4b66:	71 81       	ldd	r23, Z+1	; 0x01
    4b68:	82 81       	ldd	r24, Z+2	; 0x02
    4b6a:	93 81       	ldd	r25, Z+3	; 0x03
    4b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	f8 01       	movw	r30, r16
    4b76:	91 83       	std	Z+1, r25	; 0x01
    4b78:	80 83       	st	Z, r24
    4b7a:	de 01       	movw	r26, r28
    4b7c:	a9 5b       	subi	r26, 0xB9	; 185
    4b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4b80:	fe 01       	movw	r30, r28
    4b82:	e5 5b       	subi	r30, 0xB5	; 181
    4b84:	ff 4f       	sbci	r31, 0xFF	; 255
    4b86:	80 81       	ld	r24, Z
    4b88:	91 81       	ldd	r25, Z+1	; 0x01
    4b8a:	8d 93       	st	X+, r24
    4b8c:	9c 93       	st	X, r25
    4b8e:	fe 01       	movw	r30, r28
    4b90:	e9 5b       	subi	r30, 0xB9	; 185
    4b92:	ff 4f       	sbci	r31, 0xFF	; 255
    4b94:	80 81       	ld	r24, Z
    4b96:	91 81       	ldd	r25, Z+1	; 0x01
    4b98:	01 97       	sbiw	r24, 0x01	; 1
    4b9a:	f1 f7       	brne	.-4      	; 0x4b98 <Init_SM+0x24ea>
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e9 5b       	subi	r30, 0xB9	; 185
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	91 83       	std	Z+1, r25	; 0x01
    4ba4:	80 83       	st	Z, r24
			DIO_u8PIN_LOW);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	e7 5a       	subi	r30, 0xA7	; 167
    4baa:	fe 4f       	sbci	r31, 0xFE	; 254
    4bac:	01 90       	ld	r0, Z+
    4bae:	f0 81       	ld	r31, Z
    4bb0:	e0 2d       	mov	r30, r0
    4bb2:	80 81       	ld	r24, Z
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	e7 5a       	subi	r30, 0xA7	; 167
    4bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bba:	01 90       	ld	r0, Z+
    4bbc:	f0 81       	ld	r31, Z
    4bbe:	e0 2d       	mov	r30, r0
    4bc0:	92 81       	ldd	r25, Z+2	; 0x02
    4bc2:	69 2f       	mov	r22, r25
    4bc4:	41 e0       	ldi	r20, 0x01	; 1
    4bc6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4bca:	fe 01       	movw	r30, r28
    4bcc:	ed 5b       	subi	r30, 0xBD	; 189
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	a0 ea       	ldi	r26, 0xA0	; 160
    4bd6:	b0 e4       	ldi	r27, 0x40	; 64
    4bd8:	80 83       	st	Z, r24
    4bda:	91 83       	std	Z+1, r25	; 0x01
    4bdc:	a2 83       	std	Z+2, r26	; 0x02
    4bde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be0:	8e 01       	movw	r16, r28
    4be2:	01 5c       	subi	r16, 0xC1	; 193
    4be4:	1f 4f       	sbci	r17, 0xFF	; 255
    4be6:	fe 01       	movw	r30, r28
    4be8:	ed 5b       	subi	r30, 0xBD	; 189
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	60 81       	ld	r22, Z
    4bee:	71 81       	ldd	r23, Z+1	; 0x01
    4bf0:	82 81       	ldd	r24, Z+2	; 0x02
    4bf2:	93 81       	ldd	r25, Z+3	; 0x03
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	4a ef       	ldi	r20, 0xFA	; 250
    4bfa:	54 e4       	ldi	r21, 0x44	; 68
    4bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	f8 01       	movw	r30, r16
    4c06:	80 83       	st	Z, r24
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	a2 83       	std	Z+2, r26	; 0x02
    4c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c0e:	fe 01       	movw	r30, r28
    4c10:	ff 96       	adiw	r30, 0x3f	; 63
    4c12:	60 81       	ld	r22, Z
    4c14:	71 81       	ldd	r23, Z+1	; 0x01
    4c16:	82 81       	ldd	r24, Z+2	; 0x02
    4c18:	93 81       	ldd	r25, Z+3	; 0x03
    4c1a:	20 e0       	ldi	r18, 0x00	; 0
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	40 e8       	ldi	r20, 0x80	; 128
    4c20:	5f e3       	ldi	r21, 0x3F	; 63
    4c22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c26:	88 23       	and	r24, r24
    4c28:	2c f4       	brge	.+10     	; 0x4c34 <Init_SM+0x2586>
		__ticks = 1;
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	9e af       	std	Y+62, r25	; 0x3e
    4c30:	8d af       	std	Y+61, r24	; 0x3d
    4c32:	46 c0       	rjmp	.+140    	; 0x4cc0 <Init_SM+0x2612>
	else if (__tmp > 65535)
    4c34:	fe 01       	movw	r30, r28
    4c36:	ff 96       	adiw	r30, 0x3f	; 63
    4c38:	60 81       	ld	r22, Z
    4c3a:	71 81       	ldd	r23, Z+1	; 0x01
    4c3c:	82 81       	ldd	r24, Z+2	; 0x02
    4c3e:	93 81       	ldd	r25, Z+3	; 0x03
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	3f ef       	ldi	r19, 0xFF	; 255
    4c44:	4f e7       	ldi	r20, 0x7F	; 127
    4c46:	57 e4       	ldi	r21, 0x47	; 71
    4c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c4c:	18 16       	cp	r1, r24
    4c4e:	64 f5       	brge	.+88     	; 0x4ca8 <Init_SM+0x25fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c50:	fe 01       	movw	r30, r28
    4c52:	ed 5b       	subi	r30, 0xBD	; 189
    4c54:	ff 4f       	sbci	r31, 0xFF	; 255
    4c56:	60 81       	ld	r22, Z
    4c58:	71 81       	ldd	r23, Z+1	; 0x01
    4c5a:	82 81       	ldd	r24, Z+2	; 0x02
    4c5c:	93 81       	ldd	r25, Z+3	; 0x03
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	40 e2       	ldi	r20, 0x20	; 32
    4c64:	51 e4       	ldi	r21, 0x41	; 65
    4c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	bc 01       	movw	r22, r24
    4c70:	cd 01       	movw	r24, r26
    4c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c76:	dc 01       	movw	r26, r24
    4c78:	cb 01       	movw	r24, r22
    4c7a:	9e af       	std	Y+62, r25	; 0x3e
    4c7c:	8d af       	std	Y+61, r24	; 0x3d
    4c7e:	0f c0       	rjmp	.+30     	; 0x4c9e <Init_SM+0x25f0>
    4c80:	88 ec       	ldi	r24, 0xC8	; 200
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	9c af       	std	Y+60, r25	; 0x3c
    4c86:	8b af       	std	Y+59, r24	; 0x3b
    4c88:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	f1 f7       	brne	.-4      	; 0x4c8c <Init_SM+0x25de>
    4c90:	9c af       	std	Y+60, r25	; 0x3c
    4c92:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c94:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c96:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	9e af       	std	Y+62, r25	; 0x3e
    4c9c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ca0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ca2:	00 97       	sbiw	r24, 0x00	; 0
    4ca4:	69 f7       	brne	.-38     	; 0x4c80 <Init_SM+0x25d2>
    4ca6:	16 c0       	rjmp	.+44     	; 0x4cd4 <Init_SM+0x2626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ca8:	fe 01       	movw	r30, r28
    4caa:	ff 96       	adiw	r30, 0x3f	; 63
    4cac:	60 81       	ld	r22, Z
    4cae:	71 81       	ldd	r23, Z+1	; 0x01
    4cb0:	82 81       	ldd	r24, Z+2	; 0x02
    4cb2:	93 81       	ldd	r25, Z+3	; 0x03
    4cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	9e af       	std	Y+62, r25	; 0x3e
    4cbe:	8d af       	std	Y+61, r24	; 0x3d
    4cc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4cc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4cc4:	9a af       	std	Y+58, r25	; 0x3a
    4cc6:	89 af       	std	Y+57, r24	; 0x39
    4cc8:	89 ad       	ldd	r24, Y+57	; 0x39
    4cca:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <Init_SM+0x261e>
    4cd0:	9a af       	std	Y+58, r25	; 0x3a
    4cd2:	89 af       	std	Y+57, r24	; 0x39
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin,
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	e7 5a       	subi	r30, 0xA7	; 167
    4cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4cda:	01 90       	ld	r0, Z+
    4cdc:	f0 81       	ld	r31, Z
    4cde:	e0 2d       	mov	r30, r0
    4ce0:	80 81       	ld	r24, Z
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e7 5a       	subi	r30, 0xA7	; 167
    4ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce8:	01 90       	ld	r0, Z+
    4cea:	f0 81       	ld	r31, Z
    4cec:	e0 2d       	mov	r30, r0
    4cee:	93 81       	ldd	r25, Z+3	; 0x03
    4cf0:	69 2f       	mov	r22, r25
    4cf2:	40 e0       	ldi	r20, 0x00	; 0
    4cf4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4cf8:	80 e0       	ldi	r24, 0x00	; 0
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	a0 ea       	ldi	r26, 0xA0	; 160
    4cfe:	b0 e4       	ldi	r27, 0x40	; 64
    4d00:	8d ab       	std	Y+53, r24	; 0x35
    4d02:	9e ab       	std	Y+54, r25	; 0x36
    4d04:	af ab       	std	Y+55, r26	; 0x37
    4d06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d08:	6d a9       	ldd	r22, Y+53	; 0x35
    4d0a:	7e a9       	ldd	r23, Y+54	; 0x36
    4d0c:	8f a9       	ldd	r24, Y+55	; 0x37
    4d0e:	98 ad       	ldd	r25, Y+56	; 0x38
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	4a ef       	ldi	r20, 0xFA	; 250
    4d16:	54 e4       	ldi	r21, 0x44	; 68
    4d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	89 ab       	std	Y+49, r24	; 0x31
    4d22:	9a ab       	std	Y+50, r25	; 0x32
    4d24:	ab ab       	std	Y+51, r26	; 0x33
    4d26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d28:	69 a9       	ldd	r22, Y+49	; 0x31
    4d2a:	7a a9       	ldd	r23, Y+50	; 0x32
    4d2c:	8b a9       	ldd	r24, Y+51	; 0x33
    4d2e:	9c a9       	ldd	r25, Y+52	; 0x34
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	40 e8       	ldi	r20, 0x80	; 128
    4d36:	5f e3       	ldi	r21, 0x3F	; 63
    4d38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d3c:	88 23       	and	r24, r24
    4d3e:	2c f4       	brge	.+10     	; 0x4d4a <Init_SM+0x269c>
		__ticks = 1;
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	98 ab       	std	Y+48, r25	; 0x30
    4d46:	8f a7       	std	Y+47, r24	; 0x2f
    4d48:	3f c0       	rjmp	.+126    	; 0x4dc8 <Init_SM+0x271a>
	else if (__tmp > 65535)
    4d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    4d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    4d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    4d50:	9c a9       	ldd	r25, Y+52	; 0x34
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	3f ef       	ldi	r19, 0xFF	; 255
    4d56:	4f e7       	ldi	r20, 0x7F	; 127
    4d58:	57 e4       	ldi	r21, 0x47	; 71
    4d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d5e:	18 16       	cp	r1, r24
    4d60:	4c f5       	brge	.+82     	; 0x4db4 <Init_SM+0x2706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d62:	6d a9       	ldd	r22, Y+53	; 0x35
    4d64:	7e a9       	ldd	r23, Y+54	; 0x36
    4d66:	8f a9       	ldd	r24, Y+55	; 0x37
    4d68:	98 ad       	ldd	r25, Y+56	; 0x38
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	40 e2       	ldi	r20, 0x20	; 32
    4d70:	51 e4       	ldi	r21, 0x41	; 65
    4d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d76:	dc 01       	movw	r26, r24
    4d78:	cb 01       	movw	r24, r22
    4d7a:	bc 01       	movw	r22, r24
    4d7c:	cd 01       	movw	r24, r26
    4d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d82:	dc 01       	movw	r26, r24
    4d84:	cb 01       	movw	r24, r22
    4d86:	98 ab       	std	Y+48, r25	; 0x30
    4d88:	8f a7       	std	Y+47, r24	; 0x2f
    4d8a:	0f c0       	rjmp	.+30     	; 0x4daa <Init_SM+0x26fc>
    4d8c:	88 ec       	ldi	r24, 0xC8	; 200
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	9e a7       	std	Y+46, r25	; 0x2e
    4d92:	8d a7       	std	Y+45, r24	; 0x2d
    4d94:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d96:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d98:	01 97       	sbiw	r24, 0x01	; 1
    4d9a:	f1 f7       	brne	.-4      	; 0x4d98 <Init_SM+0x26ea>
    4d9c:	9e a7       	std	Y+46, r25	; 0x2e
    4d9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4da2:	98 a9       	ldd	r25, Y+48	; 0x30
    4da4:	01 97       	sbiw	r24, 0x01	; 1
    4da6:	98 ab       	std	Y+48, r25	; 0x30
    4da8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dac:	98 a9       	ldd	r25, Y+48	; 0x30
    4dae:	00 97       	sbiw	r24, 0x00	; 0
    4db0:	69 f7       	brne	.-38     	; 0x4d8c <Init_SM+0x26de>
    4db2:	14 c0       	rjmp	.+40     	; 0x4ddc <Init_SM+0x272e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db4:	69 a9       	ldd	r22, Y+49	; 0x31
    4db6:	7a a9       	ldd	r23, Y+50	; 0x32
    4db8:	8b a9       	ldd	r24, Y+51	; 0x33
    4dba:	9c a9       	ldd	r25, Y+52	; 0x34
    4dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	98 ab       	std	Y+48, r25	; 0x30
    4dc6:	8f a7       	std	Y+47, r24	; 0x2f
    4dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dca:	98 a9       	ldd	r25, Y+48	; 0x30
    4dcc:	9c a7       	std	Y+44, r25	; 0x2c
    4dce:	8b a7       	std	Y+43, r24	; 0x2b
    4dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <Init_SM+0x2726>
    4dd8:	9c a7       	std	Y+44, r25	; 0x2c
    4dda:	8b a7       	std	Y+43, r24	; 0x2b
			DIO_u8PIN_LOW);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e7 5a       	subi	r30, 0xA7	; 167
    4de0:	fe 4f       	sbci	r31, 0xFE	; 254
    4de2:	01 90       	ld	r0, Z+
    4de4:	f0 81       	ld	r31, Z
    4de6:	e0 2d       	mov	r30, r0
    4de8:	80 81       	ld	r24, Z
    4dea:	fe 01       	movw	r30, r28
    4dec:	e7 5a       	subi	r30, 0xA7	; 167
    4dee:	fe 4f       	sbci	r31, 0xFE	; 254
    4df0:	01 90       	ld	r0, Z+
    4df2:	f0 81       	ld	r31, Z
    4df4:	e0 2d       	mov	r30, r0
    4df6:	91 81       	ldd	r25, Z+1	; 0x01
    4df8:	69 2f       	mov	r22, r25
    4dfa:	41 e0       	ldi	r20, 0x01	; 1
    4dfc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	a0 ea       	ldi	r26, 0xA0	; 160
    4e06:	b0 e4       	ldi	r27, 0x40	; 64
    4e08:	8f a3       	std	Y+39, r24	; 0x27
    4e0a:	98 a7       	std	Y+40, r25	; 0x28
    4e0c:	a9 a7       	std	Y+41, r26	; 0x29
    4e0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e10:	6f a1       	ldd	r22, Y+39	; 0x27
    4e12:	78 a5       	ldd	r23, Y+40	; 0x28
    4e14:	89 a5       	ldd	r24, Y+41	; 0x29
    4e16:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e18:	20 e0       	ldi	r18, 0x00	; 0
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	4a ef       	ldi	r20, 0xFA	; 250
    4e1e:	54 e4       	ldi	r21, 0x44	; 68
    4e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	8b a3       	std	Y+35, r24	; 0x23
    4e2a:	9c a3       	std	Y+36, r25	; 0x24
    4e2c:	ad a3       	std	Y+37, r26	; 0x25
    4e2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e30:	6b a1       	ldd	r22, Y+35	; 0x23
    4e32:	7c a1       	ldd	r23, Y+36	; 0x24
    4e34:	8d a1       	ldd	r24, Y+37	; 0x25
    4e36:	9e a1       	ldd	r25, Y+38	; 0x26
    4e38:	20 e0       	ldi	r18, 0x00	; 0
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	40 e8       	ldi	r20, 0x80	; 128
    4e3e:	5f e3       	ldi	r21, 0x3F	; 63
    4e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e44:	88 23       	and	r24, r24
    4e46:	2c f4       	brge	.+10     	; 0x4e52 <Init_SM+0x27a4>
		__ticks = 1;
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	9a a3       	std	Y+34, r25	; 0x22
    4e4e:	89 a3       	std	Y+33, r24	; 0x21
    4e50:	3f c0       	rjmp	.+126    	; 0x4ed0 <Init_SM+0x2822>
	else if (__tmp > 65535)
    4e52:	6b a1       	ldd	r22, Y+35	; 0x23
    4e54:	7c a1       	ldd	r23, Y+36	; 0x24
    4e56:	8d a1       	ldd	r24, Y+37	; 0x25
    4e58:	9e a1       	ldd	r25, Y+38	; 0x26
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	3f ef       	ldi	r19, 0xFF	; 255
    4e5e:	4f e7       	ldi	r20, 0x7F	; 127
    4e60:	57 e4       	ldi	r21, 0x47	; 71
    4e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e66:	18 16       	cp	r1, r24
    4e68:	4c f5       	brge	.+82     	; 0x4ebc <Init_SM+0x280e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e6a:	6f a1       	ldd	r22, Y+39	; 0x27
    4e6c:	78 a5       	ldd	r23, Y+40	; 0x28
    4e6e:	89 a5       	ldd	r24, Y+41	; 0x29
    4e70:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	40 e2       	ldi	r20, 0x20	; 32
    4e78:	51 e4       	ldi	r21, 0x41	; 65
    4e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e7e:	dc 01       	movw	r26, r24
    4e80:	cb 01       	movw	r24, r22
    4e82:	bc 01       	movw	r22, r24
    4e84:	cd 01       	movw	r24, r26
    4e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e8a:	dc 01       	movw	r26, r24
    4e8c:	cb 01       	movw	r24, r22
    4e8e:	9a a3       	std	Y+34, r25	; 0x22
    4e90:	89 a3       	std	Y+33, r24	; 0x21
    4e92:	0f c0       	rjmp	.+30     	; 0x4eb2 <Init_SM+0x2804>
    4e94:	88 ec       	ldi	r24, 0xC8	; 200
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	98 a3       	std	Y+32, r25	; 0x20
    4e9a:	8f 8f       	std	Y+31, r24	; 0x1f
    4e9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e9e:	98 a1       	ldd	r25, Y+32	; 0x20
    4ea0:	01 97       	sbiw	r24, 0x01	; 1
    4ea2:	f1 f7       	brne	.-4      	; 0x4ea0 <Init_SM+0x27f2>
    4ea4:	98 a3       	std	Y+32, r25	; 0x20
    4ea6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    4eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    4eac:	01 97       	sbiw	r24, 0x01	; 1
    4eae:	9a a3       	std	Y+34, r25	; 0x22
    4eb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eb2:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb4:	9a a1       	ldd	r25, Y+34	; 0x22
    4eb6:	00 97       	sbiw	r24, 0x00	; 0
    4eb8:	69 f7       	brne	.-38     	; 0x4e94 <Init_SM+0x27e6>
    4eba:	14 c0       	rjmp	.+40     	; 0x4ee4 <Init_SM+0x2836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    4ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    4ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec8:	dc 01       	movw	r26, r24
    4eca:	cb 01       	movw	r24, r22
    4ecc:	9a a3       	std	Y+34, r25	; 0x22
    4ece:	89 a3       	std	Y+33, r24	; 0x21
    4ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ed4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ed6:	8d 8f       	std	Y+29, r24	; 0x1d
    4ed8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4edc:	01 97       	sbiw	r24, 0x01	; 1
    4ede:	f1 f7       	brne	.-4      	; 0x4edc <Init_SM+0x282e>
    4ee0:	9e 8f       	std	Y+30, r25	; 0x1e
    4ee2:	8d 8f       	std	Y+29, r24	; 0x1d
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin,
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e7 5a       	subi	r30, 0xA7	; 167
    4ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    4eea:	01 90       	ld	r0, Z+
    4eec:	f0 81       	ld	r31, Z
    4eee:	e0 2d       	mov	r30, r0
    4ef0:	80 81       	ld	r24, Z
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	e7 5a       	subi	r30, 0xA7	; 167
    4ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ef8:	01 90       	ld	r0, Z+
    4efa:	f0 81       	ld	r31, Z
    4efc:	e0 2d       	mov	r30, r0
    4efe:	92 81       	ldd	r25, Z+2	; 0x02
    4f00:	69 2f       	mov	r22, r25
    4f02:	40 e0       	ldi	r20, 0x00	; 0
    4f04:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	a0 ea       	ldi	r26, 0xA0	; 160
    4f0e:	b0 e4       	ldi	r27, 0x40	; 64
    4f10:	89 8f       	std	Y+25, r24	; 0x19
    4f12:	9a 8f       	std	Y+26, r25	; 0x1a
    4f14:	ab 8f       	std	Y+27, r26	; 0x1b
    4f16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f18:	69 8d       	ldd	r22, Y+25	; 0x19
    4f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	4a ef       	ldi	r20, 0xFA	; 250
    4f26:	54 e4       	ldi	r21, 0x44	; 68
    4f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	cb 01       	movw	r24, r22
    4f30:	8d 8b       	std	Y+21, r24	; 0x15
    4f32:	9e 8b       	std	Y+22, r25	; 0x16
    4f34:	af 8b       	std	Y+23, r26	; 0x17
    4f36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f38:	6d 89       	ldd	r22, Y+21	; 0x15
    4f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e8       	ldi	r20, 0x80	; 128
    4f46:	5f e3       	ldi	r21, 0x3F	; 63
    4f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f4c:	88 23       	and	r24, r24
    4f4e:	2c f4       	brge	.+10     	; 0x4f5a <Init_SM+0x28ac>
		__ticks = 1;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	9c 8b       	std	Y+20, r25	; 0x14
    4f56:	8b 8b       	std	Y+19, r24	; 0x13
    4f58:	3f c0       	rjmp	.+126    	; 0x4fd8 <Init_SM+0x292a>
	else if (__tmp > 65535)
    4f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f60:	98 8d       	ldd	r25, Y+24	; 0x18
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	3f ef       	ldi	r19, 0xFF	; 255
    4f66:	4f e7       	ldi	r20, 0x7F	; 127
    4f68:	57 e4       	ldi	r21, 0x47	; 71
    4f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f6e:	18 16       	cp	r1, r24
    4f70:	4c f5       	brge	.+82     	; 0x4fc4 <Init_SM+0x2916>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f72:	69 8d       	ldd	r22, Y+25	; 0x19
    4f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e2       	ldi	r20, 0x20	; 32
    4f80:	51 e4       	ldi	r21, 0x41	; 65
    4f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	bc 01       	movw	r22, r24
    4f8c:	cd 01       	movw	r24, r26
    4f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	9c 8b       	std	Y+20, r25	; 0x14
    4f98:	8b 8b       	std	Y+19, r24	; 0x13
    4f9a:	0f c0       	rjmp	.+30     	; 0x4fba <Init_SM+0x290c>
    4f9c:	88 ec       	ldi	r24, 0xC8	; 200
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	9a 8b       	std	Y+18, r25	; 0x12
    4fa2:	89 8b       	std	Y+17, r24	; 0x11
    4fa4:	89 89       	ldd	r24, Y+17	; 0x11
    4fa6:	9a 89       	ldd	r25, Y+18	; 0x12
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	f1 f7       	brne	.-4      	; 0x4fa8 <Init_SM+0x28fa>
    4fac:	9a 8b       	std	Y+18, r25	; 0x12
    4fae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    4fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	9c 8b       	std	Y+20, r25	; 0x14
    4fb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fba:	8b 89       	ldd	r24, Y+19	; 0x13
    4fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    4fbe:	00 97       	sbiw	r24, 0x00	; 0
    4fc0:	69 f7       	brne	.-38     	; 0x4f9c <Init_SM+0x28ee>
    4fc2:	14 c0       	rjmp	.+40     	; 0x4fec <Init_SM+0x293e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    4fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    4fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4fca:	98 8d       	ldd	r25, Y+24	; 0x18
    4fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	9c 8b       	std	Y+20, r25	; 0x14
    4fd6:	8b 8b       	std	Y+19, r24	; 0x13
    4fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4fda:	9c 89       	ldd	r25, Y+20	; 0x14
    4fdc:	98 8b       	std	Y+16, r25	; 0x10
    4fde:	8f 87       	std	Y+15, r24	; 0x0f
    4fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fe2:	98 89       	ldd	r25, Y+16	; 0x10
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	f1 f7       	brne	.-4      	; 0x4fe4 <Init_SM+0x2936>
    4fe8:	98 8b       	std	Y+16, r25	; 0x10
    4fea:	8f 87       	std	Y+15, r24	; 0x0f
			DIO_u8PIN_LOW);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin,
    4fec:	fe 01       	movw	r30, r28
    4fee:	e7 5a       	subi	r30, 0xA7	; 167
    4ff0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ff2:	01 90       	ld	r0, Z+
    4ff4:	f0 81       	ld	r31, Z
    4ff6:	e0 2d       	mov	r30, r0
    4ff8:	80 81       	ld	r24, Z
    4ffa:	fe 01       	movw	r30, r28
    4ffc:	e7 5a       	subi	r30, 0xA7	; 167
    4ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    5000:	01 90       	ld	r0, Z+
    5002:	f0 81       	ld	r31, Z
    5004:	e0 2d       	mov	r30, r0
    5006:	94 81       	ldd	r25, Z+4	; 0x04
    5008:	69 2f       	mov	r22, r25
    500a:	41 e0       	ldi	r20, 0x01	; 1
    500c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    5010:	80 e0       	ldi	r24, 0x00	; 0
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	a0 ea       	ldi	r26, 0xA0	; 160
    5016:	b0 e4       	ldi	r27, 0x40	; 64
    5018:	8b 87       	std	Y+11, r24	; 0x0b
    501a:	9c 87       	std	Y+12, r25	; 0x0c
    501c:	ad 87       	std	Y+13, r26	; 0x0d
    501e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5020:	6b 85       	ldd	r22, Y+11	; 0x0b
    5022:	7c 85       	ldd	r23, Y+12	; 0x0c
    5024:	8d 85       	ldd	r24, Y+13	; 0x0d
    5026:	9e 85       	ldd	r25, Y+14	; 0x0e
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	30 e0       	ldi	r19, 0x00	; 0
    502c:	4a ef       	ldi	r20, 0xFA	; 250
    502e:	54 e4       	ldi	r21, 0x44	; 68
    5030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5034:	dc 01       	movw	r26, r24
    5036:	cb 01       	movw	r24, r22
    5038:	8f 83       	std	Y+7, r24	; 0x07
    503a:	98 87       	std	Y+8, r25	; 0x08
    503c:	a9 87       	std	Y+9, r26	; 0x09
    503e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5040:	6f 81       	ldd	r22, Y+7	; 0x07
    5042:	78 85       	ldd	r23, Y+8	; 0x08
    5044:	89 85       	ldd	r24, Y+9	; 0x09
    5046:	9a 85       	ldd	r25, Y+10	; 0x0a
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	40 e8       	ldi	r20, 0x80	; 128
    504e:	5f e3       	ldi	r21, 0x3F	; 63
    5050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5054:	88 23       	and	r24, r24
    5056:	2c f4       	brge	.+10     	; 0x5062 <Init_SM+0x29b4>
		__ticks = 1;
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	9e 83       	std	Y+6, r25	; 0x06
    505e:	8d 83       	std	Y+5, r24	; 0x05
    5060:	3f c0       	rjmp	.+126    	; 0x50e0 <Init_SM+0x2a32>
	else if (__tmp > 65535)
    5062:	6f 81       	ldd	r22, Y+7	; 0x07
    5064:	78 85       	ldd	r23, Y+8	; 0x08
    5066:	89 85       	ldd	r24, Y+9	; 0x09
    5068:	9a 85       	ldd	r25, Y+10	; 0x0a
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	3f ef       	ldi	r19, 0xFF	; 255
    506e:	4f e7       	ldi	r20, 0x7F	; 127
    5070:	57 e4       	ldi	r21, 0x47	; 71
    5072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5076:	18 16       	cp	r1, r24
    5078:	4c f5       	brge	.+82     	; 0x50cc <Init_SM+0x2a1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    507a:	6b 85       	ldd	r22, Y+11	; 0x0b
    507c:	7c 85       	ldd	r23, Y+12	; 0x0c
    507e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5080:	9e 85       	ldd	r25, Y+14	; 0x0e
    5082:	20 e0       	ldi	r18, 0x00	; 0
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	40 e2       	ldi	r20, 0x20	; 32
    5088:	51 e4       	ldi	r21, 0x41	; 65
    508a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	bc 01       	movw	r22, r24
    5094:	cd 01       	movw	r24, r26
    5096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22
    509e:	9e 83       	std	Y+6, r25	; 0x06
    50a0:	8d 83       	std	Y+5, r24	; 0x05
    50a2:	0f c0       	rjmp	.+30     	; 0x50c2 <Init_SM+0x2a14>
    50a4:	88 ec       	ldi	r24, 0xC8	; 200
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	9c 83       	std	Y+4, r25	; 0x04
    50aa:	8b 83       	std	Y+3, r24	; 0x03
    50ac:	8b 81       	ldd	r24, Y+3	; 0x03
    50ae:	9c 81       	ldd	r25, Y+4	; 0x04
    50b0:	01 97       	sbiw	r24, 0x01	; 1
    50b2:	f1 f7       	brne	.-4      	; 0x50b0 <Init_SM+0x2a02>
    50b4:	9c 83       	std	Y+4, r25	; 0x04
    50b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ba:	9e 81       	ldd	r25, Y+6	; 0x06
    50bc:	01 97       	sbiw	r24, 0x01	; 1
    50be:	9e 83       	std	Y+6, r25	; 0x06
    50c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50c2:	8d 81       	ldd	r24, Y+5	; 0x05
    50c4:	9e 81       	ldd	r25, Y+6	; 0x06
    50c6:	00 97       	sbiw	r24, 0x00	; 0
    50c8:	69 f7       	brne	.-38     	; 0x50a4 <Init_SM+0x29f6>
    50ca:	14 c0       	rjmp	.+40     	; 0x50f4 <Init_SM+0x2a46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50cc:	6f 81       	ldd	r22, Y+7	; 0x07
    50ce:	78 85       	ldd	r23, Y+8	; 0x08
    50d0:	89 85       	ldd	r24, Y+9	; 0x09
    50d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    50d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	9e 83       	std	Y+6, r25	; 0x06
    50de:	8d 83       	std	Y+5, r24	; 0x05
    50e0:	8d 81       	ldd	r24, Y+5	; 0x05
    50e2:	9e 81       	ldd	r25, Y+6	; 0x06
    50e4:	9a 83       	std	Y+2, r25	; 0x02
    50e6:	89 83       	std	Y+1, r24	; 0x01
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
    50ea:	9a 81       	ldd	r25, Y+2	; 0x02
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	f1 f7       	brne	.-4      	; 0x50ec <Init_SM+0x2a3e>
    50f0:	9a 83       	std	Y+2, r25	; 0x02
    50f2:	89 83       	std	Y+1, r24	; 0x01
					DIO_u8PIN_HIGH);
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
    50f4:	fe 01       	movw	r30, r28
    50f6:	e7 5a       	subi	r30, 0xA7	; 167
    50f8:	fe 4f       	sbci	r31, 0xFE	; 254
    50fa:	01 90       	ld	r0, Z+
    50fc:	f0 81       	ld	r31, Z
    50fe:	e0 2d       	mov	r30, r0
    5100:	80 81       	ld	r24, Z
    5102:	fe 01       	movw	r30, r28
    5104:	e7 5a       	subi	r30, 0xA7	; 167
    5106:	fe 4f       	sbci	r31, 0xFE	; 254
    5108:	01 90       	ld	r0, Z+
    510a:	f0 81       	ld	r31, Z
    510c:	e0 2d       	mov	r30, r0
    510e:	91 81       	ldd	r25, Z+1	; 0x01
    5110:	69 2f       	mov	r22, r25
    5112:	40 e0       	ldi	r20, 0x00	; 0
    5114:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>

	
		else if (Copy_SM_st->SM_Direction == Clock_Wise)
	
		{
		for (j = 0; j < Copy_SM_st-> SM_No_of_Half_Steps; j++)
    5118:	9e 01       	movw	r18, r28
    511a:	2f 5a       	subi	r18, 0xAF	; 175
    511c:	3e 4f       	sbci	r19, 0xFE	; 254
    511e:	fe 01       	movw	r30, r28
    5120:	ef 5a       	subi	r30, 0xAF	; 175
    5122:	fe 4f       	sbci	r31, 0xFE	; 254
    5124:	80 81       	ld	r24, Z
    5126:	91 81       	ldd	r25, Z+1	; 0x01
    5128:	a2 81       	ldd	r26, Z+2	; 0x02
    512a:	b3 81       	ldd	r27, Z+3	; 0x03
    512c:	01 96       	adiw	r24, 0x01	; 1
    512e:	a1 1d       	adc	r26, r1
    5130:	b1 1d       	adc	r27, r1
    5132:	f9 01       	movw	r30, r18
    5134:	80 83       	st	Z, r24
    5136:	91 83       	std	Z+1, r25	; 0x01
    5138:	a2 83       	std	Z+2, r26	; 0x02
    513a:	b3 83       	std	Z+3, r27	; 0x03
    513c:	fe 01       	movw	r30, r28
    513e:	e7 5a       	subi	r30, 0xA7	; 167
    5140:	fe 4f       	sbci	r31, 0xFE	; 254
    5142:	01 90       	ld	r0, Z+
    5144:	f0 81       	ld	r31, Z
    5146:	e0 2d       	mov	r30, r0
    5148:	24 85       	ldd	r18, Z+12	; 0x0c
    514a:	35 85       	ldd	r19, Z+13	; 0x0d
    514c:	46 85       	ldd	r20, Z+14	; 0x0e
    514e:	57 85       	ldd	r21, Z+15	; 0x0f
    5150:	fe 01       	movw	r30, r28
    5152:	ef 5a       	subi	r30, 0xAF	; 175
    5154:	fe 4f       	sbci	r31, 0xFE	; 254
    5156:	80 81       	ld	r24, Z
    5158:	91 81       	ldd	r25, Z+1	; 0x01
    515a:	a2 81       	ldd	r26, Z+2	; 0x02
    515c:	b3 81       	ldd	r27, Z+3	; 0x03
    515e:	82 17       	cp	r24, r18
    5160:	93 07       	cpc	r25, r19
    5162:	a4 07       	cpc	r26, r20
    5164:	b5 07       	cpc	r27, r21
    5166:	08 f4       	brcc	.+2      	; 0x516a <Init_SM+0x2abc>
    5168:	cf ca       	rjmp	.-2658   	; 0x4708 <Init_SM+0x205a>
			_delay_ms(5);
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin,
			DIO_u8PIN_LOW);
			
		}
		DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Blue_Pin, DIO_u8PIN_LOW);
    516a:	fe 01       	movw	r30, r28
    516c:	e7 5a       	subi	r30, 0xA7	; 167
    516e:	fe 4f       	sbci	r31, 0xFE	; 254
    5170:	01 90       	ld	r0, Z+
    5172:	f0 81       	ld	r31, Z
    5174:	e0 2d       	mov	r30, r0
    5176:	80 81       	ld	r24, Z
    5178:	fe 01       	movw	r30, r28
    517a:	e7 5a       	subi	r30, 0xA7	; 167
    517c:	fe 4f       	sbci	r31, 0xFE	; 254
    517e:	01 90       	ld	r0, Z+
    5180:	f0 81       	ld	r31, Z
    5182:	e0 2d       	mov	r30, r0
    5184:	91 81       	ldd	r25, Z+1	; 0x01
    5186:	69 2f       	mov	r22, r25
    5188:	40 e0       	ldi	r20, 0x00	; 0
    518a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Pink_Pin, DIO_u8PIN_LOW);
    518e:	fe 01       	movw	r30, r28
    5190:	e7 5a       	subi	r30, 0xA7	; 167
    5192:	fe 4f       	sbci	r31, 0xFE	; 254
    5194:	01 90       	ld	r0, Z+
    5196:	f0 81       	ld	r31, Z
    5198:	e0 2d       	mov	r30, r0
    519a:	80 81       	ld	r24, Z
    519c:	fe 01       	movw	r30, r28
    519e:	e7 5a       	subi	r30, 0xA7	; 167
    51a0:	fe 4f       	sbci	r31, 0xFE	; 254
    51a2:	01 90       	ld	r0, Z+
    51a4:	f0 81       	ld	r31, Z
    51a6:	e0 2d       	mov	r30, r0
    51a8:	92 81       	ldd	r25, Z+2	; 0x02
    51aa:	69 2f       	mov	r22, r25
    51ac:	40 e0       	ldi	r20, 0x00	; 0
    51ae:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Yellow_Pin, DIO_u8PIN_LOW);
    51b2:	fe 01       	movw	r30, r28
    51b4:	e7 5a       	subi	r30, 0xA7	; 167
    51b6:	fe 4f       	sbci	r31, 0xFE	; 254
    51b8:	01 90       	ld	r0, Z+
    51ba:	f0 81       	ld	r31, Z
    51bc:	e0 2d       	mov	r30, r0
    51be:	80 81       	ld	r24, Z
    51c0:	fe 01       	movw	r30, r28
    51c2:	e7 5a       	subi	r30, 0xA7	; 167
    51c4:	fe 4f       	sbci	r31, 0xFE	; 254
    51c6:	01 90       	ld	r0, Z+
    51c8:	f0 81       	ld	r31, Z
    51ca:	e0 2d       	mov	r30, r0
    51cc:	93 81       	ldd	r25, Z+3	; 0x03
    51ce:	69 2f       	mov	r22, r25
    51d0:	40 e0       	ldi	r20, 0x00	; 0
    51d2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(Copy_SM_st->SM_Port, Copy_SM_st->Orange_Pin, DIO_u8PIN_LOW);
    51d6:	fe 01       	movw	r30, r28
    51d8:	e7 5a       	subi	r30, 0xA7	; 167
    51da:	fe 4f       	sbci	r31, 0xFE	; 254
    51dc:	01 90       	ld	r0, Z+
    51de:	f0 81       	ld	r31, Z
    51e0:	e0 2d       	mov	r30, r0
    51e2:	80 81       	ld	r24, Z
    51e4:	fe 01       	movw	r30, r28
    51e6:	e7 5a       	subi	r30, 0xA7	; 167
    51e8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ea:	01 90       	ld	r0, Z+
    51ec:	f0 81       	ld	r31, Z
    51ee:	e0 2d       	mov	r30, r0
    51f0:	94 81       	ldd	r25, Z+4	; 0x04
    51f2:	69 2f       	mov	r22, r25
    51f4:	40 e0       	ldi	r20, 0x00	; 0
    51f6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	}
	}

}
    51fa:	c6 5a       	subi	r28, 0xA6	; 166
    51fc:	de 4f       	sbci	r29, 0xFE	; 254
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	cd bf       	out	0x3d, r28	; 61
    5208:	cf 91       	pop	r28
    520a:	df 91       	pop	r29
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	08 95       	ret

00005212 <LM35_voidReadValue>:
#include"LM35_Interface.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"../../MCAL/ADC/ADC_Interface.h"


void LM35_voidReadValue(u8 Copy_u8Pin,u16 *Copy_u16value){
    5212:	df 93       	push	r29
    5214:	cf 93       	push	r28
    5216:	00 d0       	rcall	.+0      	; 0x5218 <LM35_voidReadValue+0x6>
    5218:	0f 92       	push	r0
    521a:	cd b7       	in	r28, 0x3d	; 61
    521c:	de b7       	in	r29, 0x3e	; 62
    521e:	89 83       	std	Y+1, r24	; 0x01
    5220:	7b 83       	std	Y+3, r23	; 0x03
    5222:	6a 83       	std	Y+2, r22	; 0x02


	DIO_VoidSetPinDirection(DIO_u8PORTA,Copy_u8Pin,DIO_u8PIN_INPUT);
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	69 81       	ldd	r22, Y+1	; 0x01
    5228:	40 e0       	ldi	r20, 0x00	; 0
    522a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	ADC_voidInit();
    522e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <ADC_voidInit>
	ADC_StartConv(Copy_u8Pin,Copy_u16value);
    5232:	2a 81       	ldd	r18, Y+2	; 0x02
    5234:	3b 81       	ldd	r19, Y+3	; 0x03
    5236:	89 81       	ldd	r24, Y+1	; 0x01
    5238:	b9 01       	movw	r22, r18
    523a:	0e 94 17 13 	call	0x262e	; 0x262e <ADC_StartConv>
	*Copy_u16value/=(2.00);
    523e:	ea 81       	ldd	r30, Y+2	; 0x02
    5240:	fb 81       	ldd	r31, Y+3	; 0x03
    5242:	80 81       	ld	r24, Z
    5244:	91 81       	ldd	r25, Z+1	; 0x01
    5246:	cc 01       	movw	r24, r24
    5248:	a0 e0       	ldi	r26, 0x00	; 0
    524a:	b0 e0       	ldi	r27, 0x00	; 0
    524c:	bc 01       	movw	r22, r24
    524e:	cd 01       	movw	r24, r26
    5250:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5254:	dc 01       	movw	r26, r24
    5256:	cb 01       	movw	r24, r22
    5258:	bc 01       	movw	r22, r24
    525a:	cd 01       	movw	r24, r26
    525c:	20 e0       	ldi	r18, 0x00	; 0
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	40 e0       	ldi	r20, 0x00	; 0
    5262:	50 e4       	ldi	r21, 0x40	; 64
    5264:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5268:	dc 01       	movw	r26, r24
    526a:	cb 01       	movw	r24, r22
    526c:	bc 01       	movw	r22, r24
    526e:	cd 01       	movw	r24, r26
    5270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5274:	dc 01       	movw	r26, r24
    5276:	cb 01       	movw	r24, r22
    5278:	ea 81       	ldd	r30, Y+2	; 0x02
    527a:	fb 81       	ldd	r31, Y+3	; 0x03
    527c:	91 83       	std	Z+1, r25	; 0x01
    527e:	80 83       	st	Z, r24

}
    5280:	0f 90       	pop	r0
    5282:	0f 90       	pop	r0
    5284:	0f 90       	pop	r0
    5286:	cf 91       	pop	r28
    5288:	df 91       	pop	r29
    528a:	08 95       	ret

0000528c <LCD_TWI_vInit>:




void LCD_TWI_vInit(void)
{
    528c:	0f 93       	push	r16
    528e:	1f 93       	push	r17
    5290:	df 93       	push	r29
    5292:	cf 93       	push	r28
    5294:	cd b7       	in	r28, 0x3d	; 61
    5296:	de b7       	in	r29, 0x3e	; 62
    5298:	c6 54       	subi	r28, 0x46	; 70
    529a:	d0 40       	sbci	r29, 0x00	; 0
    529c:	0f b6       	in	r0, 0x3f	; 63
    529e:	f8 94       	cli
    52a0:	de bf       	out	0x3e, r29	; 62
    52a2:	0f be       	out	0x3f, r0	; 63
    52a4:	cd bf       	out	0x3d, r28	; 61
    52a6:	fe 01       	movw	r30, r28
    52a8:	ed 5b       	subi	r30, 0xBD	; 189
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	a0 e2       	ldi	r26, 0x20	; 32
    52b2:	b2 e4       	ldi	r27, 0x42	; 66
    52b4:	80 83       	st	Z, r24
    52b6:	91 83       	std	Z+1, r25	; 0x01
    52b8:	a2 83       	std	Z+2, r26	; 0x02
    52ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52bc:	8e 01       	movw	r16, r28
    52be:	01 5c       	subi	r16, 0xC1	; 193
    52c0:	1f 4f       	sbci	r17, 0xFF	; 255
    52c2:	fe 01       	movw	r30, r28
    52c4:	ed 5b       	subi	r30, 0xBD	; 189
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	60 81       	ld	r22, Z
    52ca:	71 81       	ldd	r23, Z+1	; 0x01
    52cc:	82 81       	ldd	r24, Z+2	; 0x02
    52ce:	93 81       	ldd	r25, Z+3	; 0x03
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	4a ef       	ldi	r20, 0xFA	; 250
    52d6:	54 e4       	ldi	r21, 0x44	; 68
    52d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	f8 01       	movw	r30, r16
    52e2:	80 83       	st	Z, r24
    52e4:	91 83       	std	Z+1, r25	; 0x01
    52e6:	a2 83       	std	Z+2, r26	; 0x02
    52e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52ea:	fe 01       	movw	r30, r28
    52ec:	ff 96       	adiw	r30, 0x3f	; 63
    52ee:	60 81       	ld	r22, Z
    52f0:	71 81       	ldd	r23, Z+1	; 0x01
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	40 e8       	ldi	r20, 0x80	; 128
    52fc:	5f e3       	ldi	r21, 0x3F	; 63
    52fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5302:	88 23       	and	r24, r24
    5304:	2c f4       	brge	.+10     	; 0x5310 <LCD_TWI_vInit+0x84>
		__ticks = 1;
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	9e af       	std	Y+62, r25	; 0x3e
    530c:	8d af       	std	Y+61, r24	; 0x3d
    530e:	46 c0       	rjmp	.+140    	; 0x539c <LCD_TWI_vInit+0x110>
	else if (__tmp > 65535)
    5310:	fe 01       	movw	r30, r28
    5312:	ff 96       	adiw	r30, 0x3f	; 63
    5314:	60 81       	ld	r22, Z
    5316:	71 81       	ldd	r23, Z+1	; 0x01
    5318:	82 81       	ldd	r24, Z+2	; 0x02
    531a:	93 81       	ldd	r25, Z+3	; 0x03
    531c:	20 e0       	ldi	r18, 0x00	; 0
    531e:	3f ef       	ldi	r19, 0xFF	; 255
    5320:	4f e7       	ldi	r20, 0x7F	; 127
    5322:	57 e4       	ldi	r21, 0x47	; 71
    5324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5328:	18 16       	cp	r1, r24
    532a:	64 f5       	brge	.+88     	; 0x5384 <LCD_TWI_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    532c:	fe 01       	movw	r30, r28
    532e:	ed 5b       	subi	r30, 0xBD	; 189
    5330:	ff 4f       	sbci	r31, 0xFF	; 255
    5332:	60 81       	ld	r22, Z
    5334:	71 81       	ldd	r23, Z+1	; 0x01
    5336:	82 81       	ldd	r24, Z+2	; 0x02
    5338:	93 81       	ldd	r25, Z+3	; 0x03
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	40 e2       	ldi	r20, 0x20	; 32
    5340:	51 e4       	ldi	r21, 0x41	; 65
    5342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	bc 01       	movw	r22, r24
    534c:	cd 01       	movw	r24, r26
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	9e af       	std	Y+62, r25	; 0x3e
    5358:	8d af       	std	Y+61, r24	; 0x3d
    535a:	0f c0       	rjmp	.+30     	; 0x537a <LCD_TWI_vInit+0xee>
    535c:	88 ec       	ldi	r24, 0xC8	; 200
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9c af       	std	Y+60, r25	; 0x3c
    5362:	8b af       	std	Y+59, r24	; 0x3b
    5364:	8b ad       	ldd	r24, Y+59	; 0x3b
    5366:	9c ad       	ldd	r25, Y+60	; 0x3c
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	f1 f7       	brne	.-4      	; 0x5368 <LCD_TWI_vInit+0xdc>
    536c:	9c af       	std	Y+60, r25	; 0x3c
    536e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5370:	8d ad       	ldd	r24, Y+61	; 0x3d
    5372:	9e ad       	ldd	r25, Y+62	; 0x3e
    5374:	01 97       	sbiw	r24, 0x01	; 1
    5376:	9e af       	std	Y+62, r25	; 0x3e
    5378:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    537a:	8d ad       	ldd	r24, Y+61	; 0x3d
    537c:	9e ad       	ldd	r25, Y+62	; 0x3e
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	69 f7       	brne	.-38     	; 0x535c <LCD_TWI_vInit+0xd0>
    5382:	16 c0       	rjmp	.+44     	; 0x53b0 <LCD_TWI_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5384:	fe 01       	movw	r30, r28
    5386:	ff 96       	adiw	r30, 0x3f	; 63
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	9e af       	std	Y+62, r25	; 0x3e
    539a:	8d af       	std	Y+61, r24	; 0x3d
    539c:	8d ad       	ldd	r24, Y+61	; 0x3d
    539e:	9e ad       	ldd	r25, Y+62	; 0x3e
    53a0:	9a af       	std	Y+58, r25	; 0x3a
    53a2:	89 af       	std	Y+57, r24	; 0x39
    53a4:	89 ad       	ldd	r24, Y+57	; 0x39
    53a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    53a8:	01 97       	sbiw	r24, 0x01	; 1
    53aa:	f1 f7       	brne	.-4      	; 0x53a8 <LCD_TWI_vInit+0x11c>
    53ac:	9a af       	std	Y+58, r25	; 0x3a
    53ae:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_TWI_vSendCommand_hf(0x30);
    53b0:	80 e3       	ldi	r24, 0x30	; 48
    53b2:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <LCD_TWI_vSendCommand_hf>
	LCD_TWI_vSendCommand_hf(0x20);
    53b6:	80 e2       	ldi	r24, 0x20	; 32
    53b8:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <LCD_TWI_vSendCommand_hf>
	LCD_TWI_vSendCommand(LCD_TWI_4BIT_FUNCTION_SET);
    53bc:	88 e2       	ldi	r24, 0x28	; 40
    53be:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	a0 e8       	ldi	r26, 0x80	; 128
    53c8:	bf e3       	ldi	r27, 0x3F	; 63
    53ca:	8d ab       	std	Y+53, r24	; 0x35
    53cc:	9e ab       	std	Y+54, r25	; 0x36
    53ce:	af ab       	std	Y+55, r26	; 0x37
    53d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53d2:	6d a9       	ldd	r22, Y+53	; 0x35
    53d4:	7e a9       	ldd	r23, Y+54	; 0x36
    53d6:	8f a9       	ldd	r24, Y+55	; 0x37
    53d8:	98 ad       	ldd	r25, Y+56	; 0x38
    53da:	20 e0       	ldi	r18, 0x00	; 0
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	4a ef       	ldi	r20, 0xFA	; 250
    53e0:	54 e4       	ldi	r21, 0x44	; 68
    53e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e6:	dc 01       	movw	r26, r24
    53e8:	cb 01       	movw	r24, r22
    53ea:	89 ab       	std	Y+49, r24	; 0x31
    53ec:	9a ab       	std	Y+50, r25	; 0x32
    53ee:	ab ab       	std	Y+51, r26	; 0x33
    53f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53f2:	69 a9       	ldd	r22, Y+49	; 0x31
    53f4:	7a a9       	ldd	r23, Y+50	; 0x32
    53f6:	8b a9       	ldd	r24, Y+51	; 0x33
    53f8:	9c a9       	ldd	r25, Y+52	; 0x34
    53fa:	20 e0       	ldi	r18, 0x00	; 0
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	40 e8       	ldi	r20, 0x80	; 128
    5400:	5f e3       	ldi	r21, 0x3F	; 63
    5402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5406:	88 23       	and	r24, r24
    5408:	2c f4       	brge	.+10     	; 0x5414 <LCD_TWI_vInit+0x188>
		__ticks = 1;
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	98 ab       	std	Y+48, r25	; 0x30
    5410:	8f a7       	std	Y+47, r24	; 0x2f
    5412:	3f c0       	rjmp	.+126    	; 0x5492 <LCD_TWI_vInit+0x206>
	else if (__tmp > 65535)
    5414:	69 a9       	ldd	r22, Y+49	; 0x31
    5416:	7a a9       	ldd	r23, Y+50	; 0x32
    5418:	8b a9       	ldd	r24, Y+51	; 0x33
    541a:	9c a9       	ldd	r25, Y+52	; 0x34
    541c:	20 e0       	ldi	r18, 0x00	; 0
    541e:	3f ef       	ldi	r19, 0xFF	; 255
    5420:	4f e7       	ldi	r20, 0x7F	; 127
    5422:	57 e4       	ldi	r21, 0x47	; 71
    5424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5428:	18 16       	cp	r1, r24
    542a:	4c f5       	brge	.+82     	; 0x547e <LCD_TWI_vInit+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    542c:	6d a9       	ldd	r22, Y+53	; 0x35
    542e:	7e a9       	ldd	r23, Y+54	; 0x36
    5430:	8f a9       	ldd	r24, Y+55	; 0x37
    5432:	98 ad       	ldd	r25, Y+56	; 0x38
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	40 e2       	ldi	r20, 0x20	; 32
    543a:	51 e4       	ldi	r21, 0x41	; 65
    543c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	bc 01       	movw	r22, r24
    5446:	cd 01       	movw	r24, r26
    5448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544c:	dc 01       	movw	r26, r24
    544e:	cb 01       	movw	r24, r22
    5450:	98 ab       	std	Y+48, r25	; 0x30
    5452:	8f a7       	std	Y+47, r24	; 0x2f
    5454:	0f c0       	rjmp	.+30     	; 0x5474 <LCD_TWI_vInit+0x1e8>
    5456:	88 ec       	ldi	r24, 0xC8	; 200
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	9e a7       	std	Y+46, r25	; 0x2e
    545c:	8d a7       	std	Y+45, r24	; 0x2d
    545e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5460:	9e a5       	ldd	r25, Y+46	; 0x2e
    5462:	01 97       	sbiw	r24, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <LCD_TWI_vInit+0x1d6>
    5466:	9e a7       	std	Y+46, r25	; 0x2e
    5468:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    546a:	8f a5       	ldd	r24, Y+47	; 0x2f
    546c:	98 a9       	ldd	r25, Y+48	; 0x30
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	98 ab       	std	Y+48, r25	; 0x30
    5472:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5474:	8f a5       	ldd	r24, Y+47	; 0x2f
    5476:	98 a9       	ldd	r25, Y+48	; 0x30
    5478:	00 97       	sbiw	r24, 0x00	; 0
    547a:	69 f7       	brne	.-38     	; 0x5456 <LCD_TWI_vInit+0x1ca>
    547c:	14 c0       	rjmp	.+40     	; 0x54a6 <LCD_TWI_vInit+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547e:	69 a9       	ldd	r22, Y+49	; 0x31
    5480:	7a a9       	ldd	r23, Y+50	; 0x32
    5482:	8b a9       	ldd	r24, Y+51	; 0x33
    5484:	9c a9       	ldd	r25, Y+52	; 0x34
    5486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	98 ab       	std	Y+48, r25	; 0x30
    5490:	8f a7       	std	Y+47, r24	; 0x2f
    5492:	8f a5       	ldd	r24, Y+47	; 0x2f
    5494:	98 a9       	ldd	r25, Y+48	; 0x30
    5496:	9c a7       	std	Y+44, r25	; 0x2c
    5498:	8b a7       	std	Y+43, r24	; 0x2b
    549a:	8b a5       	ldd	r24, Y+43	; 0x2b
    549c:	9c a5       	ldd	r25, Y+44	; 0x2c
    549e:	01 97       	sbiw	r24, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <LCD_TWI_vInit+0x212>
    54a2:	9c a7       	std	Y+44, r25	; 0x2c
    54a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_TWI_vSendCommand(LCD_TWI_DISPLAY_ON_CURSOR_OFF|(LCD_TWI_CURSOR_ENABLE<<1)|(LCD_TWI_BLINK_ENABLE<<0));
    54a6:	8c e0       	ldi	r24, 0x0C	; 12
    54a8:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
    54ac:	80 e0       	ldi	r24, 0x00	; 0
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	a0 e8       	ldi	r26, 0x80	; 128
    54b2:	bf e3       	ldi	r27, 0x3F	; 63
    54b4:	8f a3       	std	Y+39, r24	; 0x27
    54b6:	98 a7       	std	Y+40, r25	; 0x28
    54b8:	a9 a7       	std	Y+41, r26	; 0x29
    54ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54bc:	6f a1       	ldd	r22, Y+39	; 0x27
    54be:	78 a5       	ldd	r23, Y+40	; 0x28
    54c0:	89 a5       	ldd	r24, Y+41	; 0x29
    54c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    54c4:	20 e0       	ldi	r18, 0x00	; 0
    54c6:	30 e0       	ldi	r19, 0x00	; 0
    54c8:	4a ef       	ldi	r20, 0xFA	; 250
    54ca:	54 e4       	ldi	r21, 0x44	; 68
    54cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	8b a3       	std	Y+35, r24	; 0x23
    54d6:	9c a3       	std	Y+36, r25	; 0x24
    54d8:	ad a3       	std	Y+37, r26	; 0x25
    54da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54dc:	6b a1       	ldd	r22, Y+35	; 0x23
    54de:	7c a1       	ldd	r23, Y+36	; 0x24
    54e0:	8d a1       	ldd	r24, Y+37	; 0x25
    54e2:	9e a1       	ldd	r25, Y+38	; 0x26
    54e4:	20 e0       	ldi	r18, 0x00	; 0
    54e6:	30 e0       	ldi	r19, 0x00	; 0
    54e8:	40 e8       	ldi	r20, 0x80	; 128
    54ea:	5f e3       	ldi	r21, 0x3F	; 63
    54ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54f0:	88 23       	and	r24, r24
    54f2:	2c f4       	brge	.+10     	; 0x54fe <LCD_TWI_vInit+0x272>
		__ticks = 1;
    54f4:	81 e0       	ldi	r24, 0x01	; 1
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	9a a3       	std	Y+34, r25	; 0x22
    54fa:	89 a3       	std	Y+33, r24	; 0x21
    54fc:	3f c0       	rjmp	.+126    	; 0x557c <LCD_TWI_vInit+0x2f0>
	else if (__tmp > 65535)
    54fe:	6b a1       	ldd	r22, Y+35	; 0x23
    5500:	7c a1       	ldd	r23, Y+36	; 0x24
    5502:	8d a1       	ldd	r24, Y+37	; 0x25
    5504:	9e a1       	ldd	r25, Y+38	; 0x26
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	3f ef       	ldi	r19, 0xFF	; 255
    550a:	4f e7       	ldi	r20, 0x7F	; 127
    550c:	57 e4       	ldi	r21, 0x47	; 71
    550e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5512:	18 16       	cp	r1, r24
    5514:	4c f5       	brge	.+82     	; 0x5568 <LCD_TWI_vInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5516:	6f a1       	ldd	r22, Y+39	; 0x27
    5518:	78 a5       	ldd	r23, Y+40	; 0x28
    551a:	89 a5       	ldd	r24, Y+41	; 0x29
    551c:	9a a5       	ldd	r25, Y+42	; 0x2a
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	40 e2       	ldi	r20, 0x20	; 32
    5524:	51 e4       	ldi	r21, 0x41	; 65
    5526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    552a:	dc 01       	movw	r26, r24
    552c:	cb 01       	movw	r24, r22
    552e:	bc 01       	movw	r22, r24
    5530:	cd 01       	movw	r24, r26
    5532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5536:	dc 01       	movw	r26, r24
    5538:	cb 01       	movw	r24, r22
    553a:	9a a3       	std	Y+34, r25	; 0x22
    553c:	89 a3       	std	Y+33, r24	; 0x21
    553e:	0f c0       	rjmp	.+30     	; 0x555e <LCD_TWI_vInit+0x2d2>
    5540:	88 ec       	ldi	r24, 0xC8	; 200
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	98 a3       	std	Y+32, r25	; 0x20
    5546:	8f 8f       	std	Y+31, r24	; 0x1f
    5548:	8f 8d       	ldd	r24, Y+31	; 0x1f
    554a:	98 a1       	ldd	r25, Y+32	; 0x20
    554c:	01 97       	sbiw	r24, 0x01	; 1
    554e:	f1 f7       	brne	.-4      	; 0x554c <LCD_TWI_vInit+0x2c0>
    5550:	98 a3       	std	Y+32, r25	; 0x20
    5552:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5554:	89 a1       	ldd	r24, Y+33	; 0x21
    5556:	9a a1       	ldd	r25, Y+34	; 0x22
    5558:	01 97       	sbiw	r24, 0x01	; 1
    555a:	9a a3       	std	Y+34, r25	; 0x22
    555c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    555e:	89 a1       	ldd	r24, Y+33	; 0x21
    5560:	9a a1       	ldd	r25, Y+34	; 0x22
    5562:	00 97       	sbiw	r24, 0x00	; 0
    5564:	69 f7       	brne	.-38     	; 0x5540 <LCD_TWI_vInit+0x2b4>
    5566:	14 c0       	rjmp	.+40     	; 0x5590 <LCD_TWI_vInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5568:	6b a1       	ldd	r22, Y+35	; 0x23
    556a:	7c a1       	ldd	r23, Y+36	; 0x24
    556c:	8d a1       	ldd	r24, Y+37	; 0x25
    556e:	9e a1       	ldd	r25, Y+38	; 0x26
    5570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5574:	dc 01       	movw	r26, r24
    5576:	cb 01       	movw	r24, r22
    5578:	9a a3       	std	Y+34, r25	; 0x22
    557a:	89 a3       	std	Y+33, r24	; 0x21
    557c:	89 a1       	ldd	r24, Y+33	; 0x21
    557e:	9a a1       	ldd	r25, Y+34	; 0x22
    5580:	9e 8f       	std	Y+30, r25	; 0x1e
    5582:	8d 8f       	std	Y+29, r24	; 0x1d
    5584:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5586:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5588:	01 97       	sbiw	r24, 0x01	; 1
    558a:	f1 f7       	brne	.-4      	; 0x5588 <LCD_TWI_vInit+0x2fc>
    558c:	9e 8f       	std	Y+30, r25	; 0x1e
    558e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_TWI_vSendCommand(LCD_TWI_CLEAR);
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
    5596:	80 e0       	ldi	r24, 0x00	; 0
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	a0 e0       	ldi	r26, 0x00	; 0
    559c:	b0 e4       	ldi	r27, 0x40	; 64
    559e:	89 8f       	std	Y+25, r24	; 0x19
    55a0:	9a 8f       	std	Y+26, r25	; 0x1a
    55a2:	ab 8f       	std	Y+27, r26	; 0x1b
    55a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55a6:	69 8d       	ldd	r22, Y+25	; 0x19
    55a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	4a ef       	ldi	r20, 0xFA	; 250
    55b4:	54 e4       	ldi	r21, 0x44	; 68
    55b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ba:	dc 01       	movw	r26, r24
    55bc:	cb 01       	movw	r24, r22
    55be:	8d 8b       	std	Y+21, r24	; 0x15
    55c0:	9e 8b       	std	Y+22, r25	; 0x16
    55c2:	af 8b       	std	Y+23, r26	; 0x17
    55c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55c6:	6d 89       	ldd	r22, Y+21	; 0x15
    55c8:	7e 89       	ldd	r23, Y+22	; 0x16
    55ca:	8f 89       	ldd	r24, Y+23	; 0x17
    55cc:	98 8d       	ldd	r25, Y+24	; 0x18
    55ce:	20 e0       	ldi	r18, 0x00	; 0
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	40 e8       	ldi	r20, 0x80	; 128
    55d4:	5f e3       	ldi	r21, 0x3F	; 63
    55d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55da:	88 23       	and	r24, r24
    55dc:	2c f4       	brge	.+10     	; 0x55e8 <LCD_TWI_vInit+0x35c>
		__ticks = 1;
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	9c 8b       	std	Y+20, r25	; 0x14
    55e4:	8b 8b       	std	Y+19, r24	; 0x13
    55e6:	3f c0       	rjmp	.+126    	; 0x5666 <LCD_TWI_vInit+0x3da>
	else if (__tmp > 65535)
    55e8:	6d 89       	ldd	r22, Y+21	; 0x15
    55ea:	7e 89       	ldd	r23, Y+22	; 0x16
    55ec:	8f 89       	ldd	r24, Y+23	; 0x17
    55ee:	98 8d       	ldd	r25, Y+24	; 0x18
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	3f ef       	ldi	r19, 0xFF	; 255
    55f4:	4f e7       	ldi	r20, 0x7F	; 127
    55f6:	57 e4       	ldi	r21, 0x47	; 71
    55f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55fc:	18 16       	cp	r1, r24
    55fe:	4c f5       	brge	.+82     	; 0x5652 <LCD_TWI_vInit+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5600:	69 8d       	ldd	r22, Y+25	; 0x19
    5602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	40 e2       	ldi	r20, 0x20	; 32
    560e:	51 e4       	ldi	r21, 0x41	; 65
    5610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5614:	dc 01       	movw	r26, r24
    5616:	cb 01       	movw	r24, r22
    5618:	bc 01       	movw	r22, r24
    561a:	cd 01       	movw	r24, r26
    561c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	9c 8b       	std	Y+20, r25	; 0x14
    5626:	8b 8b       	std	Y+19, r24	; 0x13
    5628:	0f c0       	rjmp	.+30     	; 0x5648 <LCD_TWI_vInit+0x3bc>
    562a:	88 ec       	ldi	r24, 0xC8	; 200
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	9a 8b       	std	Y+18, r25	; 0x12
    5630:	89 8b       	std	Y+17, r24	; 0x11
    5632:	89 89       	ldd	r24, Y+17	; 0x11
    5634:	9a 89       	ldd	r25, Y+18	; 0x12
    5636:	01 97       	sbiw	r24, 0x01	; 1
    5638:	f1 f7       	brne	.-4      	; 0x5636 <LCD_TWI_vInit+0x3aa>
    563a:	9a 8b       	std	Y+18, r25	; 0x12
    563c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    563e:	8b 89       	ldd	r24, Y+19	; 0x13
    5640:	9c 89       	ldd	r25, Y+20	; 0x14
    5642:	01 97       	sbiw	r24, 0x01	; 1
    5644:	9c 8b       	std	Y+20, r25	; 0x14
    5646:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5648:	8b 89       	ldd	r24, Y+19	; 0x13
    564a:	9c 89       	ldd	r25, Y+20	; 0x14
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	69 f7       	brne	.-38     	; 0x562a <LCD_TWI_vInit+0x39e>
    5650:	14 c0       	rjmp	.+40     	; 0x567a <LCD_TWI_vInit+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5652:	6d 89       	ldd	r22, Y+21	; 0x15
    5654:	7e 89       	ldd	r23, Y+22	; 0x16
    5656:	8f 89       	ldd	r24, Y+23	; 0x17
    5658:	98 8d       	ldd	r25, Y+24	; 0x18
    565a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    565e:	dc 01       	movw	r26, r24
    5660:	cb 01       	movw	r24, r22
    5662:	9c 8b       	std	Y+20, r25	; 0x14
    5664:	8b 8b       	std	Y+19, r24	; 0x13
    5666:	8b 89       	ldd	r24, Y+19	; 0x13
    5668:	9c 89       	ldd	r25, Y+20	; 0x14
    566a:	98 8b       	std	Y+16, r25	; 0x10
    566c:	8f 87       	std	Y+15, r24	; 0x0f
    566e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5670:	98 89       	ldd	r25, Y+16	; 0x10
    5672:	01 97       	sbiw	r24, 0x01	; 1
    5674:	f1 f7       	brne	.-4      	; 0x5672 <LCD_TWI_vInit+0x3e6>
    5676:	98 8b       	std	Y+16, r25	; 0x10
    5678:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_TWI_vSendCommand(LCD_TWI_ENTRY_MODE_SET);
    567a:	86 e0       	ldi	r24, 0x06	; 6
    567c:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	a0 e8       	ldi	r26, 0x80	; 128
    5686:	bf e3       	ldi	r27, 0x3F	; 63
    5688:	8b 87       	std	Y+11, r24	; 0x0b
    568a:	9c 87       	std	Y+12, r25	; 0x0c
    568c:	ad 87       	std	Y+13, r26	; 0x0d
    568e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5690:	6b 85       	ldd	r22, Y+11	; 0x0b
    5692:	7c 85       	ldd	r23, Y+12	; 0x0c
    5694:	8d 85       	ldd	r24, Y+13	; 0x0d
    5696:	9e 85       	ldd	r25, Y+14	; 0x0e
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	4a ef       	ldi	r20, 0xFA	; 250
    569e:	54 e4       	ldi	r21, 0x44	; 68
    56a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a4:	dc 01       	movw	r26, r24
    56a6:	cb 01       	movw	r24, r22
    56a8:	8f 83       	std	Y+7, r24	; 0x07
    56aa:	98 87       	std	Y+8, r25	; 0x08
    56ac:	a9 87       	std	Y+9, r26	; 0x09
    56ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56b0:	6f 81       	ldd	r22, Y+7	; 0x07
    56b2:	78 85       	ldd	r23, Y+8	; 0x08
    56b4:	89 85       	ldd	r24, Y+9	; 0x09
    56b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	40 e8       	ldi	r20, 0x80	; 128
    56be:	5f e3       	ldi	r21, 0x3F	; 63
    56c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56c4:	88 23       	and	r24, r24
    56c6:	2c f4       	brge	.+10     	; 0x56d2 <LCD_TWI_vInit+0x446>
		__ticks = 1;
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	9e 83       	std	Y+6, r25	; 0x06
    56ce:	8d 83       	std	Y+5, r24	; 0x05
    56d0:	3f c0       	rjmp	.+126    	; 0x5750 <LCD_TWI_vInit+0x4c4>
	else if (__tmp > 65535)
    56d2:	6f 81       	ldd	r22, Y+7	; 0x07
    56d4:	78 85       	ldd	r23, Y+8	; 0x08
    56d6:	89 85       	ldd	r24, Y+9	; 0x09
    56d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	3f ef       	ldi	r19, 0xFF	; 255
    56de:	4f e7       	ldi	r20, 0x7F	; 127
    56e0:	57 e4       	ldi	r21, 0x47	; 71
    56e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56e6:	18 16       	cp	r1, r24
    56e8:	4c f5       	brge	.+82     	; 0x573c <LCD_TWI_vInit+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    56ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    56ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    56f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	30 e0       	ldi	r19, 0x00	; 0
    56f6:	40 e2       	ldi	r20, 0x20	; 32
    56f8:	51 e4       	ldi	r21, 0x41	; 65
    56fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56fe:	dc 01       	movw	r26, r24
    5700:	cb 01       	movw	r24, r22
    5702:	bc 01       	movw	r22, r24
    5704:	cd 01       	movw	r24, r26
    5706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570a:	dc 01       	movw	r26, r24
    570c:	cb 01       	movw	r24, r22
    570e:	9e 83       	std	Y+6, r25	; 0x06
    5710:	8d 83       	std	Y+5, r24	; 0x05
    5712:	0f c0       	rjmp	.+30     	; 0x5732 <LCD_TWI_vInit+0x4a6>
    5714:	88 ec       	ldi	r24, 0xC8	; 200
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	9c 83       	std	Y+4, r25	; 0x04
    571a:	8b 83       	std	Y+3, r24	; 0x03
    571c:	8b 81       	ldd	r24, Y+3	; 0x03
    571e:	9c 81       	ldd	r25, Y+4	; 0x04
    5720:	01 97       	sbiw	r24, 0x01	; 1
    5722:	f1 f7       	brne	.-4      	; 0x5720 <LCD_TWI_vInit+0x494>
    5724:	9c 83       	std	Y+4, r25	; 0x04
    5726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5728:	8d 81       	ldd	r24, Y+5	; 0x05
    572a:	9e 81       	ldd	r25, Y+6	; 0x06
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	9e 83       	std	Y+6, r25	; 0x06
    5730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5732:	8d 81       	ldd	r24, Y+5	; 0x05
    5734:	9e 81       	ldd	r25, Y+6	; 0x06
    5736:	00 97       	sbiw	r24, 0x00	; 0
    5738:	69 f7       	brne	.-38     	; 0x5714 <LCD_TWI_vInit+0x488>
    573a:	14 c0       	rjmp	.+40     	; 0x5764 <LCD_TWI_vInit+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573c:	6f 81       	ldd	r22, Y+7	; 0x07
    573e:	78 85       	ldd	r23, Y+8	; 0x08
    5740:	89 85       	ldd	r24, Y+9	; 0x09
    5742:	9a 85       	ldd	r25, Y+10	; 0x0a
    5744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5748:	dc 01       	movw	r26, r24
    574a:	cb 01       	movw	r24, r22
    574c:	9e 83       	std	Y+6, r25	; 0x06
    574e:	8d 83       	std	Y+5, r24	; 0x05
    5750:	8d 81       	ldd	r24, Y+5	; 0x05
    5752:	9e 81       	ldd	r25, Y+6	; 0x06
    5754:	9a 83       	std	Y+2, r25	; 0x02
    5756:	89 83       	std	Y+1, r24	; 0x01
    5758:	89 81       	ldd	r24, Y+1	; 0x01
    575a:	9a 81       	ldd	r25, Y+2	; 0x02
    575c:	01 97       	sbiw	r24, 0x01	; 1
    575e:	f1 f7       	brne	.-4      	; 0x575c <LCD_TWI_vInit+0x4d0>
    5760:	9a 83       	std	Y+2, r25	; 0x02
    5762:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    5764:	ca 5b       	subi	r28, 0xBA	; 186
    5766:	df 4f       	sbci	r29, 0xFF	; 255
    5768:	0f b6       	in	r0, 0x3f	; 63
    576a:	f8 94       	cli
    576c:	de bf       	out	0x3e, r29	; 62
    576e:	0f be       	out	0x3f, r0	; 63
    5770:	cd bf       	out	0x3d, r28	; 61
    5772:	cf 91       	pop	r28
    5774:	df 91       	pop	r29
    5776:	1f 91       	pop	r17
    5778:	0f 91       	pop	r16
    577a:	08 95       	ret

0000577c <LCD_TWI_vtoggleEnable>:

void LCD_TWI_vtoggleEnable(void)
{
    577c:	df 93       	push	r29
    577e:	cf 93       	push	r28
    5780:	cd b7       	in	r28, 0x3d	; 61
    5782:	de b7       	in	r29, 0x3e	; 62
    5784:	2e 97       	sbiw	r28, 0x0e	; 14
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	de bf       	out	0x3e, r29	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	cd bf       	out	0x3d, r28	; 61
	TWI_TWDR_REG |= 0x02;
    5790:	a3 e2       	ldi	r26, 0x23	; 35
    5792:	b0 e0       	ldi	r27, 0x00	; 0
    5794:	e3 e2       	ldi	r30, 0x23	; 35
    5796:	f0 e0       	ldi	r31, 0x00	; 0
    5798:	80 81       	ld	r24, Z
    579a:	82 60       	ori	r24, 0x02	; 2
    579c:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    579e:	e6 e5       	ldi	r30, 0x56	; 86
    57a0:	f0 e0       	ldi	r31, 0x00	; 0
    57a2:	84 e8       	ldi	r24, 0x84	; 132
    57a4:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    57a6:	e6 e5       	ldi	r30, 0x56	; 86
    57a8:	f0 e0       	ldi	r31, 0x00	; 0
    57aa:	80 81       	ld	r24, Z
    57ac:	88 23       	and	r24, r24
    57ae:	dc f7       	brge	.-10     	; 0x57a6 <LCD_TWI_vtoggleEnable+0x2a>
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	a0 e8       	ldi	r26, 0x80	; 128
    57b6:	bf e3       	ldi	r27, 0x3F	; 63
    57b8:	8b 87       	std	Y+11, r24	; 0x0b
    57ba:	9c 87       	std	Y+12, r25	; 0x0c
    57bc:	ad 87       	std	Y+13, r26	; 0x0d
    57be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    57c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    57c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    57c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	4a ef       	ldi	r20, 0xFA	; 250
    57ce:	54 e4       	ldi	r21, 0x44	; 68
    57d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d4:	dc 01       	movw	r26, r24
    57d6:	cb 01       	movw	r24, r22
    57d8:	8f 83       	std	Y+7, r24	; 0x07
    57da:	98 87       	std	Y+8, r25	; 0x08
    57dc:	a9 87       	std	Y+9, r26	; 0x09
    57de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57e0:	6f 81       	ldd	r22, Y+7	; 0x07
    57e2:	78 85       	ldd	r23, Y+8	; 0x08
    57e4:	89 85       	ldd	r24, Y+9	; 0x09
    57e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	40 e8       	ldi	r20, 0x80	; 128
    57ee:	5f e3       	ldi	r21, 0x3F	; 63
    57f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57f4:	88 23       	and	r24, r24
    57f6:	2c f4       	brge	.+10     	; 0x5802 <LCD_TWI_vtoggleEnable+0x86>
		__ticks = 1;
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	9e 83       	std	Y+6, r25	; 0x06
    57fe:	8d 83       	std	Y+5, r24	; 0x05
    5800:	3f c0       	rjmp	.+126    	; 0x5880 <LCD_TWI_vtoggleEnable+0x104>
	else if (__tmp > 65535)
    5802:	6f 81       	ldd	r22, Y+7	; 0x07
    5804:	78 85       	ldd	r23, Y+8	; 0x08
    5806:	89 85       	ldd	r24, Y+9	; 0x09
    5808:	9a 85       	ldd	r25, Y+10	; 0x0a
    580a:	20 e0       	ldi	r18, 0x00	; 0
    580c:	3f ef       	ldi	r19, 0xFF	; 255
    580e:	4f e7       	ldi	r20, 0x7F	; 127
    5810:	57 e4       	ldi	r21, 0x47	; 71
    5812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5816:	18 16       	cp	r1, r24
    5818:	4c f5       	brge	.+82     	; 0x586c <LCD_TWI_vtoggleEnable+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    581a:	6b 85       	ldd	r22, Y+11	; 0x0b
    581c:	7c 85       	ldd	r23, Y+12	; 0x0c
    581e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5820:	9e 85       	ldd	r25, Y+14	; 0x0e
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	40 e2       	ldi	r20, 0x20	; 32
    5828:	51 e4       	ldi	r21, 0x41	; 65
    582a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    582e:	dc 01       	movw	r26, r24
    5830:	cb 01       	movw	r24, r22
    5832:	bc 01       	movw	r22, r24
    5834:	cd 01       	movw	r24, r26
    5836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    583a:	dc 01       	movw	r26, r24
    583c:	cb 01       	movw	r24, r22
    583e:	9e 83       	std	Y+6, r25	; 0x06
    5840:	8d 83       	std	Y+5, r24	; 0x05
    5842:	0f c0       	rjmp	.+30     	; 0x5862 <LCD_TWI_vtoggleEnable+0xe6>
    5844:	88 ec       	ldi	r24, 0xC8	; 200
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	9c 83       	std	Y+4, r25	; 0x04
    584a:	8b 83       	std	Y+3, r24	; 0x03
    584c:	8b 81       	ldd	r24, Y+3	; 0x03
    584e:	9c 81       	ldd	r25, Y+4	; 0x04
    5850:	01 97       	sbiw	r24, 0x01	; 1
    5852:	f1 f7       	brne	.-4      	; 0x5850 <LCD_TWI_vtoggleEnable+0xd4>
    5854:	9c 83       	std	Y+4, r25	; 0x04
    5856:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5858:	8d 81       	ldd	r24, Y+5	; 0x05
    585a:	9e 81       	ldd	r25, Y+6	; 0x06
    585c:	01 97       	sbiw	r24, 0x01	; 1
    585e:	9e 83       	std	Y+6, r25	; 0x06
    5860:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5862:	8d 81       	ldd	r24, Y+5	; 0x05
    5864:	9e 81       	ldd	r25, Y+6	; 0x06
    5866:	00 97       	sbiw	r24, 0x00	; 0
    5868:	69 f7       	brne	.-38     	; 0x5844 <LCD_TWI_vtoggleEnable+0xc8>
    586a:	14 c0       	rjmp	.+40     	; 0x5894 <LCD_TWI_vtoggleEnable+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    586c:	6f 81       	ldd	r22, Y+7	; 0x07
    586e:	78 85       	ldd	r23, Y+8	; 0x08
    5870:	89 85       	ldd	r24, Y+9	; 0x09
    5872:	9a 85       	ldd	r25, Y+10	; 0x0a
    5874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	9e 83       	std	Y+6, r25	; 0x06
    587e:	8d 83       	std	Y+5, r24	; 0x05
    5880:	8d 81       	ldd	r24, Y+5	; 0x05
    5882:	9e 81       	ldd	r25, Y+6	; 0x06
    5884:	9a 83       	std	Y+2, r25	; 0x02
    5886:	89 83       	std	Y+1, r24	; 0x01
    5888:	89 81       	ldd	r24, Y+1	; 0x01
    588a:	9a 81       	ldd	r25, Y+2	; 0x02
    588c:	01 97       	sbiw	r24, 0x01	; 1
    588e:	f1 f7       	brne	.-4      	; 0x588c <LCD_TWI_vtoggleEnable+0x110>
    5890:	9a 83       	std	Y+2, r25	; 0x02
    5892:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	TWI_TWDR_REG &= ~0x02;
    5894:	a3 e2       	ldi	r26, 0x23	; 35
    5896:	b0 e0       	ldi	r27, 0x00	; 0
    5898:	e3 e2       	ldi	r30, 0x23	; 35
    589a:	f0 e0       	ldi	r31, 0x00	; 0
    589c:	80 81       	ld	r24, Z
    589e:	8d 7f       	andi	r24, 0xFD	; 253
    58a0:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    58a2:	e6 e5       	ldi	r30, 0x56	; 86
    58a4:	f0 e0       	ldi	r31, 0x00	; 0
    58a6:	84 e8       	ldi	r24, 0x84	; 132
    58a8:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    58aa:	e6 e5       	ldi	r30, 0x56	; 86
    58ac:	f0 e0       	ldi	r31, 0x00	; 0
    58ae:	80 81       	ld	r24, Z
    58b0:	88 23       	and	r24, r24
    58b2:	dc f7       	brge	.-10     	; 0x58aa <LCD_TWI_vtoggleEnable+0x12e>
}
    58b4:	2e 96       	adiw	r28, 0x0e	; 14
    58b6:	0f b6       	in	r0, 0x3f	; 63
    58b8:	f8 94       	cli
    58ba:	de bf       	out	0x3e, r29	; 62
    58bc:	0f be       	out	0x3f, r0	; 63
    58be:	cd bf       	out	0x3d, r28	; 61
    58c0:	cf 91       	pop	r28
    58c2:	df 91       	pop	r29
    58c4:	08 95       	ret

000058c6 <LCD_TWI_vSendCommand_hf>:


void LCD_TWI_vSendCommand_hf(u8 command)
{
    58c6:	df 93       	push	r29
    58c8:	cf 93       	push	r28
    58ca:	0f 92       	push	r0
    58cc:	cd b7       	in	r28, 0x3d	; 61
    58ce:	de b7       	in	r29, 0x3e	; 62
    58d0:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWDR_REG &=~0x01;
    58d2:	a3 e2       	ldi	r26, 0x23	; 35
    58d4:	b0 e0       	ldi	r27, 0x00	; 0
    58d6:	e3 e2       	ldi	r30, 0x23	; 35
    58d8:	f0 e0       	ldi	r31, 0x00	; 0
    58da:	80 81       	ld	r24, Z
    58dc:	8e 7f       	andi	r24, 0xFE	; 254
    58de:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    58e0:	e6 e5       	ldi	r30, 0x56	; 86
    58e2:	f0 e0       	ldi	r31, 0x00	; 0
    58e4:	84 e8       	ldi	r24, 0x84	; 132
    58e6:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    58e8:	e6 e5       	ldi	r30, 0x56	; 86
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	80 81       	ld	r24, Z
    58ee:	88 23       	and	r24, r24
    58f0:	dc f7       	brge	.-10     	; 0x58e8 <LCD_TWI_vSendCommand_hf+0x22>
	TWI_TWDR_REG &= 0x0F;
    58f2:	a3 e2       	ldi	r26, 0x23	; 35
    58f4:	b0 e0       	ldi	r27, 0x00	; 0
    58f6:	e3 e2       	ldi	r30, 0x23	; 35
    58f8:	f0 e0       	ldi	r31, 0x00	; 0
    58fa:	80 81       	ld	r24, Z
    58fc:	8f 70       	andi	r24, 0x0F	; 15
    58fe:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5900:	e6 e5       	ldi	r30, 0x56	; 86
    5902:	f0 e0       	ldi	r31, 0x00	; 0
    5904:	84 e8       	ldi	r24, 0x84	; 132
    5906:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5908:	e6 e5       	ldi	r30, 0x56	; 86
    590a:	f0 e0       	ldi	r31, 0x00	; 0
    590c:	80 81       	ld	r24, Z
    590e:	88 23       	and	r24, r24
    5910:	dc f7       	brge	.-10     	; 0x5908 <LCD_TWI_vSendCommand_hf+0x42>
	TWI_TWDR_REG |= (command & 0xF0);
    5912:	a3 e2       	ldi	r26, 0x23	; 35
    5914:	b0 e0       	ldi	r27, 0x00	; 0
    5916:	e3 e2       	ldi	r30, 0x23	; 35
    5918:	f0 e0       	ldi	r31, 0x00	; 0
    591a:	80 81       	ld	r24, Z
    591c:	98 2f       	mov	r25, r24
    591e:	89 81       	ldd	r24, Y+1	; 0x01
    5920:	80 7f       	andi	r24, 0xF0	; 240
    5922:	89 2b       	or	r24, r25
    5924:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5926:	e6 e5       	ldi	r30, 0x56	; 86
    5928:	f0 e0       	ldi	r31, 0x00	; 0
    592a:	84 e8       	ldi	r24, 0x84	; 132
    592c:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    592e:	e6 e5       	ldi	r30, 0x56	; 86
    5930:	f0 e0       	ldi	r31, 0x00	; 0
    5932:	80 81       	ld	r24, Z
    5934:	88 23       	and	r24, r24
    5936:	dc f7       	brge	.-10     	; 0x592e <LCD_TWI_vSendCommand_hf+0x68>
	LCD_TWI_vtoggleEnable();
    5938:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_TWI_vtoggleEnable>
}
    593c:	0f 90       	pop	r0
    593e:	cf 91       	pop	r28
    5940:	df 91       	pop	r29
    5942:	08 95       	ret

00005944 <LCD_TWI_vSendCommand>:


void LCD_TWI_vSendCommand(u8 command)
{
    5944:	df 93       	push	r29
    5946:	cf 93       	push	r28
    5948:	0f 92       	push	r0
    594a:	cd b7       	in	r28, 0x3d	; 61
    594c:	de b7       	in	r29, 0x3e	; 62
    594e:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWDR_REG&=~0x01;								// rs = 0; Selecting register as command register
    5950:	a3 e2       	ldi	r26, 0x23	; 35
    5952:	b0 e0       	ldi	r27, 0x00	; 0
    5954:	e3 e2       	ldi	r30, 0x23	; 35
    5956:	f0 e0       	ldi	r31, 0x00	; 0
    5958:	80 81       	ld	r24, Z
    595a:	8e 7f       	andi	r24, 0xFE	; 254
    595c:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);	// Enable TWI and clear interrupt
    595e:	e6 e5       	ldi	r30, 0x56	; 86
    5960:	f0 e0       	ldi	r31, 0x00	; 0
    5962:	84 e8       	ldi	r24, 0x84	; 132
    5964:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5966:	e6 e5       	ldi	r30, 0x56	; 86
    5968:	f0 e0       	ldi	r31, 0x00	; 0
    596a:	80 81       	ld	r24, Z
    596c:	88 23       	and	r24, r24
    596e:	dc f7       	brge	.-10     	; 0x5966 <LCD_TWI_vSendCommand+0x22>

	TWI_TWDR_REG &= 0x0F;                   			// clearing the Higher 4 bits
    5970:	a3 e2       	ldi	r26, 0x23	; 35
    5972:	b0 e0       	ldi	r27, 0x00	; 0
    5974:	e3 e2       	ldi	r30, 0x23	; 35
    5976:	f0 e0       	ldi	r31, 0x00	; 0
    5978:	80 81       	ld	r24, Z
    597a:	8f 70       	andi	r24, 0x0F	; 15
    597c:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);	// Enable TWI and clear interrupt
    597e:	e6 e5       	ldi	r30, 0x56	; 86
    5980:	f0 e0       	ldi	r31, 0x00	; 0
    5982:	84 e8       	ldi	r24, 0x84	; 132
    5984:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5986:	e6 e5       	ldi	r30, 0x56	; 86
    5988:	f0 e0       	ldi	r31, 0x00	; 0
    598a:	80 81       	ld	r24, Z
    598c:	88 23       	and	r24, r24
    598e:	dc f7       	brge	.-10     	; 0x5986 <LCD_TWI_vSendCommand+0x42>
	TWI_TWDR_REG |= (command & 0xF0);						// Masking higher 4 bits and sending to LCD
    5990:	a3 e2       	ldi	r26, 0x23	; 35
    5992:	b0 e0       	ldi	r27, 0x00	; 0
    5994:	e3 e2       	ldi	r30, 0x23	; 35
    5996:	f0 e0       	ldi	r31, 0x00	; 0
    5998:	80 81       	ld	r24, Z
    599a:	98 2f       	mov	r25, r24
    599c:	89 81       	ldd	r24, Y+1	; 0x01
    599e:	80 7f       	andi	r24, 0xF0	; 240
    59a0:	89 2b       	or	r24, r25
    59a2:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);	//Enable TWI and clear interrupt
    59a4:	e6 e5       	ldi	r30, 0x56	; 86
    59a6:	f0 e0       	ldi	r31, 0x00	; 0
    59a8:	84 e8       	ldi	r24, 0x84	; 132
    59aa:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    59ac:	e6 e5       	ldi	r30, 0x56	; 86
    59ae:	f0 e0       	ldi	r31, 0x00	; 0
    59b0:	80 81       	ld	r24, Z
    59b2:	88 23       	and	r24, r24
    59b4:	dc f7       	brge	.-10     	; 0x59ac <LCD_TWI_vSendCommand+0x68>
	LCD_TWI_vtoggleEnable();
    59b6:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_TWI_vtoggleEnable>

	TWI_TWDR_REG &= 0x0F;                    			// clearing the Higher 4 bits
    59ba:	a3 e2       	ldi	r26, 0x23	; 35
    59bc:	b0 e0       	ldi	r27, 0x00	; 0
    59be:	e3 e2       	ldi	r30, 0x23	; 35
    59c0:	f0 e0       	ldi	r31, 0x00	; 0
    59c2:	80 81       	ld	r24, Z
    59c4:	8f 70       	andi	r24, 0x0F	; 15
    59c6:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);	// Enable TWI and clear interrupt
    59c8:	e6 e5       	ldi	r30, 0x56	; 86
    59ca:	f0 e0       	ldi	r31, 0x00	; 0
    59cc:	84 e8       	ldi	r24, 0x84	; 132
    59ce:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    59d0:	e6 e5       	ldi	r30, 0x56	; 86
    59d2:	f0 e0       	ldi	r31, 0x00	; 0
    59d4:	80 81       	ld	r24, Z
    59d6:	88 23       	and	r24, r24
    59d8:	dc f7       	brge	.-10     	; 0x59d0 <LCD_TWI_vSendCommand+0x8c>
	TWI_TWDR_REG |= ((command & 0x0F)<<4);					// Masking lower 4 bits and sending to LCD
    59da:	a3 e2       	ldi	r26, 0x23	; 35
    59dc:	b0 e0       	ldi	r27, 0x00	; 0
    59de:	e3 e2       	ldi	r30, 0x23	; 35
    59e0:	f0 e0       	ldi	r31, 0x00	; 0
    59e2:	80 81       	ld	r24, Z
    59e4:	28 2f       	mov	r18, r24
    59e6:	89 81       	ldd	r24, Y+1	; 0x01
    59e8:	88 2f       	mov	r24, r24
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	82 95       	swap	r24
    59ee:	92 95       	swap	r25
    59f0:	90 7f       	andi	r25, 0xF0	; 240
    59f2:	98 27       	eor	r25, r24
    59f4:	80 7f       	andi	r24, 0xF0	; 240
    59f6:	98 27       	eor	r25, r24
    59f8:	82 2b       	or	r24, r18
    59fa:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);	// Enable TWI and clear interrupt
    59fc:	e6 e5       	ldi	r30, 0x56	; 86
    59fe:	f0 e0       	ldi	r31, 0x00	; 0
    5a00:	84 e8       	ldi	r24, 0x84	; 132
    5a02:	80 83       	st	Z, r24
	while(!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5a04:	e6 e5       	ldi	r30, 0x56	; 86
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	80 81       	ld	r24, Z
    5a0a:	88 23       	and	r24, r24
    5a0c:	dc f7       	brge	.-10     	; 0x5a04 <LCD_TWI_vSendCommand+0xc0>
	LCD_TWI_vtoggleEnable();
    5a0e:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_TWI_vtoggleEnable>

}
    5a12:	0f 90       	pop	r0
    5a14:	cf 91       	pop	r28
    5a16:	df 91       	pop	r29
    5a18:	08 95       	ret

00005a1a <LCD_TWI_vSendChar>:

void LCD_TWI_vSendChar(u8 character)
{
    5a1a:	df 93       	push	r29
    5a1c:	cf 93       	push	r28
    5a1e:	0f 92       	push	r0
    5a20:	cd b7       	in	r28, 0x3d	; 61
    5a22:	de b7       	in	r29, 0x3e	; 62
    5a24:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWDR_REG|=0x01;
    5a26:	a3 e2       	ldi	r26, 0x23	; 35
    5a28:	b0 e0       	ldi	r27, 0x00	; 0
    5a2a:	e3 e2       	ldi	r30, 0x23	; 35
    5a2c:	f0 e0       	ldi	r31, 0x00	; 0
    5a2e:	80 81       	ld	r24, Z
    5a30:	81 60       	ori	r24, 0x01	; 1
    5a32:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5a34:	e6 e5       	ldi	r30, 0x56	; 86
    5a36:	f0 e0       	ldi	r31, 0x00	; 0
    5a38:	84 e8       	ldi	r24, 0x84	; 132
    5a3a:	80 83       	st	Z, r24
	while  (!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5a3c:	e6 e5       	ldi	r30, 0x56	; 86
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	80 81       	ld	r24, Z
    5a42:	88 23       	and	r24, r24
    5a44:	dc f7       	brge	.-10     	; 0x5a3c <LCD_TWI_vSendChar+0x22>
	TWI_TWDR_REG &= 0x0F;
    5a46:	a3 e2       	ldi	r26, 0x23	; 35
    5a48:	b0 e0       	ldi	r27, 0x00	; 0
    5a4a:	e3 e2       	ldi	r30, 0x23	; 35
    5a4c:	f0 e0       	ldi	r31, 0x00	; 0
    5a4e:	80 81       	ld	r24, Z
    5a50:	8f 70       	andi	r24, 0x0F	; 15
    5a52:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5a54:	e6 e5       	ldi	r30, 0x56	; 86
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	84 e8       	ldi	r24, 0x84	; 132
    5a5a:	80 83       	st	Z, r24
	while  (!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5a5c:	e6 e5       	ldi	r30, 0x56	; 86
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	80 81       	ld	r24, Z
    5a62:	88 23       	and	r24, r24
    5a64:	dc f7       	brge	.-10     	; 0x5a5c <LCD_TWI_vSendChar+0x42>
	TWI_TWDR_REG |= (character & 0xF0);
    5a66:	a3 e2       	ldi	r26, 0x23	; 35
    5a68:	b0 e0       	ldi	r27, 0x00	; 0
    5a6a:	e3 e2       	ldi	r30, 0x23	; 35
    5a6c:	f0 e0       	ldi	r31, 0x00	; 0
    5a6e:	80 81       	ld	r24, Z
    5a70:	98 2f       	mov	r25, r24
    5a72:	89 81       	ldd	r24, Y+1	; 0x01
    5a74:	80 7f       	andi	r24, 0xF0	; 240
    5a76:	89 2b       	or	r24, r25
    5a78:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5a7a:	e6 e5       	ldi	r30, 0x56	; 86
    5a7c:	f0 e0       	ldi	r31, 0x00	; 0
    5a7e:	84 e8       	ldi	r24, 0x84	; 132
    5a80:	80 83       	st	Z, r24
	while  (!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5a82:	e6 e5       	ldi	r30, 0x56	; 86
    5a84:	f0 e0       	ldi	r31, 0x00	; 0
    5a86:	80 81       	ld	r24, Z
    5a88:	88 23       	and	r24, r24
    5a8a:	dc f7       	brge	.-10     	; 0x5a82 <LCD_TWI_vSendChar+0x68>
	LCD_TWI_vtoggleEnable();
    5a8c:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_TWI_vtoggleEnable>

	TWI_TWDR_REG &= 0x0F;
    5a90:	a3 e2       	ldi	r26, 0x23	; 35
    5a92:	b0 e0       	ldi	r27, 0x00	; 0
    5a94:	e3 e2       	ldi	r30, 0x23	; 35
    5a96:	f0 e0       	ldi	r31, 0x00	; 0
    5a98:	80 81       	ld	r24, Z
    5a9a:	8f 70       	andi	r24, 0x0F	; 15
    5a9c:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5a9e:	e6 e5       	ldi	r30, 0x56	; 86
    5aa0:	f0 e0       	ldi	r31, 0x00	; 0
    5aa2:	84 e8       	ldi	r24, 0x84	; 132
    5aa4:	80 83       	st	Z, r24
	while  (!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5aa6:	e6 e5       	ldi	r30, 0x56	; 86
    5aa8:	f0 e0       	ldi	r31, 0x00	; 0
    5aaa:	80 81       	ld	r24, Z
    5aac:	88 23       	and	r24, r24
    5aae:	dc f7       	brge	.-10     	; 0x5aa6 <LCD_TWI_vSendChar+0x8c>
	TWI_TWDR_REG |= ((character & 0x0F)<<4);
    5ab0:	a3 e2       	ldi	r26, 0x23	; 35
    5ab2:	b0 e0       	ldi	r27, 0x00	; 0
    5ab4:	e3 e2       	ldi	r30, 0x23	; 35
    5ab6:	f0 e0       	ldi	r31, 0x00	; 0
    5ab8:	80 81       	ld	r24, Z
    5aba:	28 2f       	mov	r18, r24
    5abc:	89 81       	ldd	r24, Y+1	; 0x01
    5abe:	88 2f       	mov	r24, r24
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	82 95       	swap	r24
    5ac4:	92 95       	swap	r25
    5ac6:	90 7f       	andi	r25, 0xF0	; 240
    5ac8:	98 27       	eor	r25, r24
    5aca:	80 7f       	andi	r24, 0xF0	; 240
    5acc:	98 27       	eor	r25, r24
    5ace:	82 2b       	or	r24, r18
    5ad0:	8c 93       	st	X, r24
	TWI_TWCR_REG = (1<<TWI_TWCR_TWINT_BIT) | (1<<TWI_TWCR_TWEN_BIT);
    5ad2:	e6 e5       	ldi	r30, 0x56	; 86
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
    5ad6:	84 e8       	ldi	r24, 0x84	; 132
    5ad8:	80 83       	st	Z, r24
	while  (!(TWI_TWCR_REG &(1<<TWI_TWCR_TWINT_BIT)));
    5ada:	e6 e5       	ldi	r30, 0x56	; 86
    5adc:	f0 e0       	ldi	r31, 0x00	; 0
    5ade:	80 81       	ld	r24, Z
    5ae0:	88 23       	and	r24, r24
    5ae2:	dc f7       	brge	.-10     	; 0x5ada <LCD_TWI_vSendChar+0xc0>
	LCD_TWI_vtoggleEnable();
    5ae4:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_TWI_vtoggleEnable>
}
    5ae8:	0f 90       	pop	r0
    5aea:	cf 91       	pop	r28
    5aec:	df 91       	pop	r29
    5aee:	08 95       	ret

00005af0 <LCD_TWI_vClear>:




void LCD_TWI_vClear(void)
{
    5af0:	df 93       	push	r29
    5af2:	cf 93       	push	r28
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
	LCD_TWI_vSendCommand(0x01);
    5af8:	81 e0       	ldi	r24, 0x01	; 1
    5afa:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
}
    5afe:	cf 91       	pop	r28
    5b00:	df 91       	pop	r29
    5b02:	08 95       	ret

00005b04 <LCD_TWI_vSendString>:


void LCD_TWI_vSendString(const char *str)
{
    5b04:	df 93       	push	r29
    5b06:	cf 93       	push	r28
    5b08:	00 d0       	rcall	.+0      	; 0x5b0a <LCD_TWI_vSendString+0x6>
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	9a 83       	std	Y+2, r25	; 0x02
    5b10:	89 83       	std	Y+1, r24	; 0x01
    5b12:	0b c0       	rjmp	.+22     	; 0x5b2a <LCD_TWI_vSendString+0x26>
	while(*str != '\0')
	{
		LCD_TWI_vSendChar(*str++);
    5b14:	e9 81       	ldd	r30, Y+1	; 0x01
    5b16:	fa 81       	ldd	r31, Y+2	; 0x02
    5b18:	20 81       	ld	r18, Z
    5b1a:	89 81       	ldd	r24, Y+1	; 0x01
    5b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b1e:	01 96       	adiw	r24, 0x01	; 1
    5b20:	9a 83       	std	Y+2, r25	; 0x02
    5b22:	89 83       	std	Y+1, r24	; 0x01
    5b24:	82 2f       	mov	r24, r18
    5b26:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <LCD_TWI_vSendChar>
}


void LCD_TWI_vSendString(const char *str)
{
	while(*str != '\0')
    5b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    5b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    5b2e:	80 81       	ld	r24, Z
    5b30:	88 23       	and	r24, r24
    5b32:	81 f7       	brne	.-32     	; 0x5b14 <LCD_TWI_vSendString+0x10>
	{
		LCD_TWI_vSendChar(*str++);
	}
}
    5b34:	0f 90       	pop	r0
    5b36:	0f 90       	pop	r0
    5b38:	cf 91       	pop	r28
    5b3a:	df 91       	pop	r29
    5b3c:	08 95       	ret

00005b3e <LCD_TWI_vWriteNumber>:

void LCD_TWI_vWriteNumber(s32 num)//500
{
    5b3e:	ef 92       	push	r14
    5b40:	ff 92       	push	r15
    5b42:	0f 93       	push	r16
    5b44:	1f 93       	push	r17
    5b46:	df 93       	push	r29
    5b48:	cf 93       	push	r28
    5b4a:	cd b7       	in	r28, 0x3d	; 61
    5b4c:	de b7       	in	r29, 0x3e	; 62
    5b4e:	2c 97       	sbiw	r28, 0x0c	; 12
    5b50:	0f b6       	in	r0, 0x3f	; 63
    5b52:	f8 94       	cli
    5b54:	de bf       	out	0x3e, r29	; 62
    5b56:	0f be       	out	0x3f, r0	; 63
    5b58:	cd bf       	out	0x3d, r28	; 61
    5b5a:	69 87       	std	Y+9, r22	; 0x09
    5b5c:	7a 87       	std	Y+10, r23	; 0x0a
    5b5e:	8b 87       	std	Y+11, r24	; 0x0b
    5b60:	9c 87       	std	Y+12, r25	; 0x0c
	s32 reverse = 0, count = 0;
    5b62:	1d 82       	std	Y+5, r1	; 0x05
    5b64:	1e 82       	std	Y+6, r1	; 0x06
    5b66:	1f 82       	std	Y+7, r1	; 0x07
    5b68:	18 86       	std	Y+8, r1	; 0x08
    5b6a:	19 82       	std	Y+1, r1	; 0x01
    5b6c:	1a 82       	std	Y+2, r1	; 0x02
    5b6e:	1b 82       	std	Y+3, r1	; 0x03
    5b70:	1c 82       	std	Y+4, r1	; 0x04
	if(num == 0)
    5b72:	89 85       	ldd	r24, Y+9	; 0x09
    5b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b76:	ab 85       	ldd	r26, Y+11	; 0x0b
    5b78:	bc 85       	ldd	r27, Y+12	; 0x0c
    5b7a:	00 97       	sbiw	r24, 0x00	; 0
    5b7c:	a1 05       	cpc	r26, r1
    5b7e:	b1 05       	cpc	r27, r1
    5b80:	09 f0       	breq	.+2      	; 0x5b84 <LCD_TWI_vWriteNumber+0x46>
    5b82:	45 c0       	rjmp	.+138    	; 0x5c0e <LCD_TWI_vWriteNumber+0xd0>
	{
		LCD_TWI_vSendChar('0');
    5b84:	80 e3       	ldi	r24, 0x30	; 48
    5b86:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <LCD_TWI_vSendChar>
    5b8a:	82 c0       	rjmp	.+260    	; 0x5c90 <LCD_TWI_vWriteNumber+0x152>
	}
	else
	{
		while(num)
		{
			reverse = reverse * 10 + num % 10;
    5b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b90:	af 81       	ldd	r26, Y+7	; 0x07
    5b92:	b8 85       	ldd	r27, Y+8	; 0x08
    5b94:	2a e0       	ldi	r18, 0x0A	; 10
    5b96:	30 e0       	ldi	r19, 0x00	; 0
    5b98:	40 e0       	ldi	r20, 0x00	; 0
    5b9a:	50 e0       	ldi	r21, 0x00	; 0
    5b9c:	bc 01       	movw	r22, r24
    5b9e:	cd 01       	movw	r24, r26
    5ba0:	0e 94 ab 3c 	call	0x7956	; 0x7956 <__mulsi3>
    5ba4:	7b 01       	movw	r14, r22
    5ba6:	8c 01       	movw	r16, r24
    5ba8:	89 85       	ldd	r24, Y+9	; 0x09
    5baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bac:	ab 85       	ldd	r26, Y+11	; 0x0b
    5bae:	bc 85       	ldd	r27, Y+12	; 0x0c
    5bb0:	2a e0       	ldi	r18, 0x0A	; 10
    5bb2:	30 e0       	ldi	r19, 0x00	; 0
    5bb4:	40 e0       	ldi	r20, 0x00	; 0
    5bb6:	50 e0       	ldi	r21, 0x00	; 0
    5bb8:	bc 01       	movw	r22, r24
    5bba:	cd 01       	movw	r24, r26
    5bbc:	0e 94 de 3c 	call	0x79bc	; 0x79bc <__divmodsi4>
    5bc0:	dc 01       	movw	r26, r24
    5bc2:	cb 01       	movw	r24, r22
    5bc4:	8e 0d       	add	r24, r14
    5bc6:	9f 1d       	adc	r25, r15
    5bc8:	a0 1f       	adc	r26, r16
    5bca:	b1 1f       	adc	r27, r17
    5bcc:	8d 83       	std	Y+5, r24	; 0x05
    5bce:	9e 83       	std	Y+6, r25	; 0x06
    5bd0:	af 83       	std	Y+7, r26	; 0x07
    5bd2:	b8 87       	std	Y+8, r27	; 0x08
			num/=10;
    5bd4:	89 85       	ldd	r24, Y+9	; 0x09
    5bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bd8:	ab 85       	ldd	r26, Y+11	; 0x0b
    5bda:	bc 85       	ldd	r27, Y+12	; 0x0c
    5bdc:	2a e0       	ldi	r18, 0x0A	; 10
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	40 e0       	ldi	r20, 0x00	; 0
    5be2:	50 e0       	ldi	r21, 0x00	; 0
    5be4:	bc 01       	movw	r22, r24
    5be6:	cd 01       	movw	r24, r26
    5be8:	0e 94 de 3c 	call	0x79bc	; 0x79bc <__divmodsi4>
    5bec:	da 01       	movw	r26, r20
    5bee:	c9 01       	movw	r24, r18
    5bf0:	89 87       	std	Y+9, r24	; 0x09
    5bf2:	9a 87       	std	Y+10, r25	; 0x0a
    5bf4:	ab 87       	std	Y+11, r26	; 0x0b
    5bf6:	bc 87       	std	Y+12, r27	; 0x0c
			count++;
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfc:	ab 81       	ldd	r26, Y+3	; 0x03
    5bfe:	bc 81       	ldd	r27, Y+4	; 0x04
    5c00:	01 96       	adiw	r24, 0x01	; 1
    5c02:	a1 1d       	adc	r26, r1
    5c04:	b1 1d       	adc	r27, r1
    5c06:	89 83       	std	Y+1, r24	; 0x01
    5c08:	9a 83       	std	Y+2, r25	; 0x02
    5c0a:	ab 83       	std	Y+3, r26	; 0x03
    5c0c:	bc 83       	std	Y+4, r27	; 0x04
	{
		LCD_TWI_vSendChar('0');
	}
	else
	{
		while(num)
    5c0e:	89 85       	ldd	r24, Y+9	; 0x09
    5c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c12:	ab 85       	ldd	r26, Y+11	; 0x0b
    5c14:	bc 85       	ldd	r27, Y+12	; 0x0c
    5c16:	00 97       	sbiw	r24, 0x00	; 0
    5c18:	a1 05       	cpc	r26, r1
    5c1a:	b1 05       	cpc	r27, r1
    5c1c:	09 f0       	breq	.+2      	; 0x5c20 <LCD_TWI_vWriteNumber+0xe2>
    5c1e:	b6 cf       	rjmp	.-148    	; 0x5b8c <LCD_TWI_vWriteNumber+0x4e>
    5c20:	2e c0       	rjmp	.+92     	; 0x5c7e <LCD_TWI_vWriteNumber+0x140>
			count++;
		}

		while(count > 0)//005
		{
			LCD_TWI_vSendChar((reverse%10) + '0');
    5c22:	8d 81       	ldd	r24, Y+5	; 0x05
    5c24:	9e 81       	ldd	r25, Y+6	; 0x06
    5c26:	af 81       	ldd	r26, Y+7	; 0x07
    5c28:	b8 85       	ldd	r27, Y+8	; 0x08
    5c2a:	2a e0       	ldi	r18, 0x0A	; 10
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	40 e0       	ldi	r20, 0x00	; 0
    5c30:	50 e0       	ldi	r21, 0x00	; 0
    5c32:	bc 01       	movw	r22, r24
    5c34:	cd 01       	movw	r24, r26
    5c36:	0e 94 de 3c 	call	0x79bc	; 0x79bc <__divmodsi4>
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	80 5d       	subi	r24, 0xD0	; 208
    5c40:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <LCD_TWI_vSendChar>
			reverse/=10;
    5c44:	8d 81       	ldd	r24, Y+5	; 0x05
    5c46:	9e 81       	ldd	r25, Y+6	; 0x06
    5c48:	af 81       	ldd	r26, Y+7	; 0x07
    5c4a:	b8 85       	ldd	r27, Y+8	; 0x08
    5c4c:	2a e0       	ldi	r18, 0x0A	; 10
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	40 e0       	ldi	r20, 0x00	; 0
    5c52:	50 e0       	ldi	r21, 0x00	; 0
    5c54:	bc 01       	movw	r22, r24
    5c56:	cd 01       	movw	r24, r26
    5c58:	0e 94 de 3c 	call	0x79bc	; 0x79bc <__divmodsi4>
    5c5c:	da 01       	movw	r26, r20
    5c5e:	c9 01       	movw	r24, r18
    5c60:	8d 83       	std	Y+5, r24	; 0x05
    5c62:	9e 83       	std	Y+6, r25	; 0x06
    5c64:	af 83       	std	Y+7, r26	; 0x07
    5c66:	b8 87       	std	Y+8, r27	; 0x08
			count--;
    5c68:	89 81       	ldd	r24, Y+1	; 0x01
    5c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    5c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    5c70:	01 97       	sbiw	r24, 0x01	; 1
    5c72:	a1 09       	sbc	r26, r1
    5c74:	b1 09       	sbc	r27, r1
    5c76:	89 83       	std	Y+1, r24	; 0x01
    5c78:	9a 83       	std	Y+2, r25	; 0x02
    5c7a:	ab 83       	std	Y+3, r26	; 0x03
    5c7c:	bc 83       	std	Y+4, r27	; 0x04
			reverse = reverse * 10 + num % 10;
			num/=10;
			count++;
		}

		while(count > 0)//005
    5c7e:	89 81       	ldd	r24, Y+1	; 0x01
    5c80:	9a 81       	ldd	r25, Y+2	; 0x02
    5c82:	ab 81       	ldd	r26, Y+3	; 0x03
    5c84:	bc 81       	ldd	r27, Y+4	; 0x04
    5c86:	18 16       	cp	r1, r24
    5c88:	19 06       	cpc	r1, r25
    5c8a:	1a 06       	cpc	r1, r26
    5c8c:	1b 06       	cpc	r1, r27
    5c8e:	4c f2       	brlt	.-110    	; 0x5c22 <LCD_TWI_vWriteNumber+0xe4>
			LCD_TWI_vSendChar((reverse%10) + '0');
			reverse/=10;
			count--;
		}
	}
}
    5c90:	2c 96       	adiw	r28, 0x0c	; 12
    5c92:	0f b6       	in	r0, 0x3f	; 63
    5c94:	f8 94       	cli
    5c96:	de bf       	out	0x3e, r29	; 62
    5c98:	0f be       	out	0x3f, r0	; 63
    5c9a:	cd bf       	out	0x3d, r28	; 61
    5c9c:	cf 91       	pop	r28
    5c9e:	df 91       	pop	r29
    5ca0:	1f 91       	pop	r17
    5ca2:	0f 91       	pop	r16
    5ca4:	ff 90       	pop	r15
    5ca6:	ef 90       	pop	r14
    5ca8:	08 95       	ret

00005caa <LCD_TWI_vSendNumber>:
void LCD_TWI_vSendNumber(s32 num)
{
    5caa:	df 93       	push	r29
    5cac:	cf 93       	push	r28
    5cae:	00 d0       	rcall	.+0      	; 0x5cb0 <LCD_TWI_vSendNumber+0x6>
    5cb0:	00 d0       	rcall	.+0      	; 0x5cb2 <LCD_TWI_vSendNumber+0x8>
    5cb2:	cd b7       	in	r28, 0x3d	; 61
    5cb4:	de b7       	in	r29, 0x3e	; 62
    5cb6:	69 83       	std	Y+1, r22	; 0x01
    5cb8:	7a 83       	std	Y+2, r23	; 0x02
    5cba:	8b 83       	std	Y+3, r24	; 0x03
    5cbc:	9c 83       	std	Y+4, r25	; 0x04
	if(num >= 0)
    5cbe:	89 81       	ldd	r24, Y+1	; 0x01
    5cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc2:	ab 81       	ldd	r26, Y+3	; 0x03
    5cc4:	bc 81       	ldd	r27, Y+4	; 0x04
    5cc6:	bb 23       	and	r27, r27
    5cc8:	4c f0       	brlt	.+18     	; 0x5cdc <LCD_TWI_vSendNumber+0x32>
	{
		LCD_TWI_vWriteNumber(num);
    5cca:	89 81       	ldd	r24, Y+1	; 0x01
    5ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    5cce:	ab 81       	ldd	r26, Y+3	; 0x03
    5cd0:	bc 81       	ldd	r27, Y+4	; 0x04
    5cd2:	bc 01       	movw	r22, r24
    5cd4:	cd 01       	movw	r24, r26
    5cd6:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <LCD_TWI_vWriteNumber>
    5cda:	12 c0       	rjmp	.+36     	; 0x5d00 <LCD_TWI_vSendNumber+0x56>
	}
	else
	{
		LCD_TWI_vSendChar('-');
    5cdc:	8d e2       	ldi	r24, 0x2D	; 45
    5cde:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <LCD_TWI_vSendChar>
		LCD_TWI_vWriteNumber(-1*num);
    5ce2:	89 81       	ldd	r24, Y+1	; 0x01
    5ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ce8:	bc 81       	ldd	r27, Y+4	; 0x04
    5cea:	b0 95       	com	r27
    5cec:	a0 95       	com	r26
    5cee:	90 95       	com	r25
    5cf0:	81 95       	neg	r24
    5cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf4:	af 4f       	sbci	r26, 0xFF	; 255
    5cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    5cf8:	bc 01       	movw	r22, r24
    5cfa:	cd 01       	movw	r24, r26
    5cfc:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <LCD_TWI_vWriteNumber>
	}
}
    5d00:	0f 90       	pop	r0
    5d02:	0f 90       	pop	r0
    5d04:	0f 90       	pop	r0
    5d06:	0f 90       	pop	r0
    5d08:	cf 91       	pop	r28
    5d0a:	df 91       	pop	r29
    5d0c:	08 95       	ret

00005d0e <LCD_TWI_vDisplayCustomChar>:

void LCD_TWI_vDisplayCustomChar(u8 charId)
{
    5d0e:	df 93       	push	r29
    5d10:	cf 93       	push	r28
    5d12:	0f 92       	push	r0
    5d14:	cd b7       	in	r28, 0x3d	; 61
    5d16:	de b7       	in	r29, 0x3e	; 62
    5d18:	89 83       	std	Y+1, r24	; 0x01
	if(charId < 8)
    5d1a:	89 81       	ldd	r24, Y+1	; 0x01
    5d1c:	88 30       	cpi	r24, 0x08	; 8
    5d1e:	18 f4       	brcc	.+6      	; 0x5d26 <LCD_TWI_vDisplayCustomChar+0x18>
	{
		LCD_TWI_vSendChar(charId);
    5d20:	89 81       	ldd	r24, Y+1	; 0x01
    5d22:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <LCD_TWI_vSendChar>
	}
	else
	{
		//Error
	}
}
    5d26:	0f 90       	pop	r0
    5d28:	cf 91       	pop	r28
    5d2a:	df 91       	pop	r29
    5d2c:	08 95       	ret

00005d2e <LCD_TWI_vSaveCustomChar>:

void LCD_TWI_vSaveCustomChar(u8* charArr, u8 charId)
{
    5d2e:	df 93       	push	r29
    5d30:	cf 93       	push	r28
    5d32:	00 d0       	rcall	.+0      	; 0x5d34 <LCD_TWI_vSaveCustomChar+0x6>
    5d34:	00 d0       	rcall	.+0      	; 0x5d36 <LCD_TWI_vSaveCustomChar+0x8>
    5d36:	cd b7       	in	r28, 0x3d	; 61
    5d38:	de b7       	in	r29, 0x3e	; 62
    5d3a:	9b 83       	std	Y+3, r25	; 0x03
    5d3c:	8a 83       	std	Y+2, r24	; 0x02
    5d3e:	6c 83       	std	Y+4, r22	; 0x04
	if(charId < 8)
    5d40:	8c 81       	ldd	r24, Y+4	; 0x04
    5d42:	88 30       	cpi	r24, 0x08	; 8
    5d44:	10 f5       	brcc	.+68     	; 0x5d8a <LCD_TWI_vSaveCustomChar+0x5c>
	{
		LCD_TWI_vSendCommand(LCD_TWI_CGRAM_BASE_ADDRESS + (charId * 8));
    5d46:	8c 81       	ldd	r24, Y+4	; 0x04
    5d48:	88 2f       	mov	r24, r24
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	08 96       	adiw	r24, 0x08	; 8
    5d4e:	88 0f       	add	r24, r24
    5d50:	99 1f       	adc	r25, r25
    5d52:	88 0f       	add	r24, r24
    5d54:	99 1f       	adc	r25, r25
    5d56:	88 0f       	add	r24, r24
    5d58:	99 1f       	adc	r25, r25
    5d5a:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
		for(u8 i=0; i<8; i++)
    5d5e:	19 82       	std	Y+1, r1	; 0x01
    5d60:	0e c0       	rjmp	.+28     	; 0x5d7e <LCD_TWI_vSaveCustomChar+0x50>
		{
			LCD_TWI_vSendChar(charArr[i]);
    5d62:	89 81       	ldd	r24, Y+1	; 0x01
    5d64:	28 2f       	mov	r18, r24
    5d66:	30 e0       	ldi	r19, 0x00	; 0
    5d68:	8a 81       	ldd	r24, Y+2	; 0x02
    5d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	e2 0f       	add	r30, r18
    5d70:	f3 1f       	adc	r31, r19
    5d72:	80 81       	ld	r24, Z
    5d74:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <LCD_TWI_vSendChar>
void LCD_TWI_vSaveCustomChar(u8* charArr, u8 charId)
{
	if(charId < 8)
	{
		LCD_TWI_vSendCommand(LCD_TWI_CGRAM_BASE_ADDRESS + (charId * 8));
		for(u8 i=0; i<8; i++)
    5d78:	89 81       	ldd	r24, Y+1	; 0x01
    5d7a:	8f 5f       	subi	r24, 0xFF	; 255
    5d7c:	89 83       	std	Y+1, r24	; 0x01
    5d7e:	89 81       	ldd	r24, Y+1	; 0x01
    5d80:	88 30       	cpi	r24, 0x08	; 8
    5d82:	78 f3       	brcs	.-34     	; 0x5d62 <LCD_TWI_vSaveCustomChar+0x34>
		{
			LCD_TWI_vSendChar(charArr[i]);
		}
		LCD_TWI_vSendCommand(LCD_TWI_DDRAM_BASE_ADDRESS);
    5d84:	80 e8       	ldi	r24, 0x80	; 128
    5d86:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
	}
	else
	{
		//Error
	}
}
    5d8a:	0f 90       	pop	r0
    5d8c:	0f 90       	pop	r0
    5d8e:	0f 90       	pop	r0
    5d90:	0f 90       	pop	r0
    5d92:	cf 91       	pop	r28
    5d94:	df 91       	pop	r29
    5d96:	08 95       	ret

00005d98 <LCD_TWI_vSetCursorPosition>:

void LCD_TWI_vSetCursorPosition(u8 xPos,u8 yPos)
{
    5d98:	df 93       	push	r29
    5d9a:	cf 93       	push	r28
    5d9c:	00 d0       	rcall	.+0      	; 0x5d9e <LCD_TWI_vSetCursorPosition+0x6>
    5d9e:	cd b7       	in	r28, 0x3d	; 61
    5da0:	de b7       	in	r29, 0x3e	; 62
    5da2:	89 83       	std	Y+1, r24	; 0x01
    5da4:	6a 83       	std	Y+2, r22	; 0x02
	//Location is at first line
	if(xPos==0)
    5da6:	89 81       	ldd	r24, Y+1	; 0x01
    5da8:	88 23       	and	r24, r24
    5daa:	29 f4       	brne	.+10     	; 0x5db6 <LCD_TWI_vSetCursorPosition+0x1e>
	{
		LCD_TWI_vSendCommand(0x80 + yPos);
    5dac:	8a 81       	ldd	r24, Y+2	; 0x02
    5dae:	80 58       	subi	r24, 0x80	; 128
    5db0:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
    5db4:	07 c0       	rjmp	.+14     	; 0x5dc4 <LCD_TWI_vSetCursorPosition+0x2c>
	}
	//Location is at second line
	else if(xPos == 1)
    5db6:	89 81       	ldd	r24, Y+1	; 0x01
    5db8:	81 30       	cpi	r24, 0x01	; 1
    5dba:	21 f4       	brne	.+8      	; 0x5dc4 <LCD_TWI_vSetCursorPosition+0x2c>
	{
		LCD_TWI_vSendCommand(0x80 + 0x40 + yPos);
    5dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    5dbe:	80 54       	subi	r24, 0x40	; 64
    5dc0:	0e 94 a2 2c 	call	0x5944	; 0x5944 <LCD_TWI_vSendCommand>
	}
	else
	{
		//Error
	}
}
    5dc4:	0f 90       	pop	r0
    5dc6:	0f 90       	pop	r0
    5dc8:	cf 91       	pop	r28
    5dca:	df 91       	pop	r29
    5dcc:	08 95       	ret

00005dce <LCD_Init>:

#include <util/delay.h>

/* ====================== Functions Definitions ===================== */
void LCD_Init(void)
{
    5dce:	df 93       	push	r29
    5dd0:	cf 93       	push	r28
    5dd2:	cd b7       	in	r28, 0x3d	; 61
    5dd4:	de b7       	in	r29, 0x3e	; 62
    5dd6:	6c 97       	sbiw	r28, 0x1c	; 28
    5dd8:	0f b6       	in	r0, 0x3f	; 63
    5dda:	f8 94       	cli
    5ddc:	de bf       	out	0x3e, r29	; 62
    5dde:	0f be       	out	0x3f, r0	; 63
    5de0:	cd bf       	out	0x3d, r28	; 61
	//Set direction

	DIO_VoidSetPortDirection(LCD_PORT,DIO_u8PORT_OUTPUT);
    5de2:	83 e0       	ldi	r24, 0x03	; 3
    5de4:	6f ef       	ldi	r22, 0xFF	; 255
    5de6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <DIO_VoidSetPortDirection>
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	a8 e4       	ldi	r26, 0x48	; 72
    5df0:	b2 e4       	ldi	r27, 0x42	; 66
    5df2:	89 8f       	std	Y+25, r24	; 0x19
    5df4:	9a 8f       	std	Y+26, r25	; 0x1a
    5df6:	ab 8f       	std	Y+27, r26	; 0x1b
    5df8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    5dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	4a ef       	ldi	r20, 0xFA	; 250
    5e08:	54 e4       	ldi	r21, 0x44	; 68
    5e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e0e:	dc 01       	movw	r26, r24
    5e10:	cb 01       	movw	r24, r22
    5e12:	8d 8b       	std	Y+21, r24	; 0x15
    5e14:	9e 8b       	std	Y+22, r25	; 0x16
    5e16:	af 8b       	std	Y+23, r26	; 0x17
    5e18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    5e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    5e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    5e20:	98 8d       	ldd	r25, Y+24	; 0x18
    5e22:	20 e0       	ldi	r18, 0x00	; 0
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	40 e8       	ldi	r20, 0x80	; 128
    5e28:	5f e3       	ldi	r21, 0x3F	; 63
    5e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e2e:	88 23       	and	r24, r24
    5e30:	2c f4       	brge	.+10     	; 0x5e3c <LCD_Init+0x6e>
		__ticks = 1;
    5e32:	81 e0       	ldi	r24, 0x01	; 1
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	9c 8b       	std	Y+20, r25	; 0x14
    5e38:	8b 8b       	std	Y+19, r24	; 0x13
    5e3a:	3f c0       	rjmp	.+126    	; 0x5eba <LCD_Init+0xec>
	else if (__tmp > 65535)
    5e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    5e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    5e40:	8f 89       	ldd	r24, Y+23	; 0x17
    5e42:	98 8d       	ldd	r25, Y+24	; 0x18
    5e44:	20 e0       	ldi	r18, 0x00	; 0
    5e46:	3f ef       	ldi	r19, 0xFF	; 255
    5e48:	4f e7       	ldi	r20, 0x7F	; 127
    5e4a:	57 e4       	ldi	r21, 0x47	; 71
    5e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e50:	18 16       	cp	r1, r24
    5e52:	4c f5       	brge	.+82     	; 0x5ea6 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e54:	69 8d       	ldd	r22, Y+25	; 0x19
    5e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e5c:	20 e0       	ldi	r18, 0x00	; 0
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	40 e2       	ldi	r20, 0x20	; 32
    5e62:	51 e4       	ldi	r21, 0x41	; 65
    5e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e68:	dc 01       	movw	r26, r24
    5e6a:	cb 01       	movw	r24, r22
    5e6c:	bc 01       	movw	r22, r24
    5e6e:	cd 01       	movw	r24, r26
    5e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e74:	dc 01       	movw	r26, r24
    5e76:	cb 01       	movw	r24, r22
    5e78:	9c 8b       	std	Y+20, r25	; 0x14
    5e7a:	8b 8b       	std	Y+19, r24	; 0x13
    5e7c:	0f c0       	rjmp	.+30     	; 0x5e9c <LCD_Init+0xce>
    5e7e:	88 ec       	ldi	r24, 0xC8	; 200
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	9a 8b       	std	Y+18, r25	; 0x12
    5e84:	89 8b       	std	Y+17, r24	; 0x11
    5e86:	89 89       	ldd	r24, Y+17	; 0x11
    5e88:	9a 89       	ldd	r25, Y+18	; 0x12
    5e8a:	01 97       	sbiw	r24, 0x01	; 1
    5e8c:	f1 f7       	brne	.-4      	; 0x5e8a <LCD_Init+0xbc>
    5e8e:	9a 8b       	std	Y+18, r25	; 0x12
    5e90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e92:	8b 89       	ldd	r24, Y+19	; 0x13
    5e94:	9c 89       	ldd	r25, Y+20	; 0x14
    5e96:	01 97       	sbiw	r24, 0x01	; 1
    5e98:	9c 8b       	std	Y+20, r25	; 0x14
    5e9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    5e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    5ea0:	00 97       	sbiw	r24, 0x00	; 0
    5ea2:	69 f7       	brne	.-38     	; 0x5e7e <LCD_Init+0xb0>
    5ea4:	14 c0       	rjmp	.+40     	; 0x5ece <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    5ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    5eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    5eac:	98 8d       	ldd	r25, Y+24	; 0x18
    5eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eb2:	dc 01       	movw	r26, r24
    5eb4:	cb 01       	movw	r24, r22
    5eb6:	9c 8b       	std	Y+20, r25	; 0x14
    5eb8:	8b 8b       	std	Y+19, r24	; 0x13
    5eba:	8b 89       	ldd	r24, Y+19	; 0x13
    5ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    5ebe:	98 8b       	std	Y+16, r25	; 0x10
    5ec0:	8f 87       	std	Y+15, r24	; 0x0f
    5ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ec4:	98 89       	ldd	r25, Y+16	; 0x10
    5ec6:	01 97       	sbiw	r24, 0x01	; 1
    5ec8:	f1 f7       	brne	.-4      	; 0x5ec6 <LCD_Init+0xf8>
    5eca:	98 8b       	std	Y+16, r25	; 0x10
    5ecc:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(50);
	 /* Send 4Bit mode command */
	 LCD_WriteCommand(_4_BIT_MODE_COMMAND);
    5ece:	82 e0       	ldi	r24, 0x02	; 2
    5ed0:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>

	 /* Set the interface data length , number of lines */
	 LCD_WriteCommand(FUNCTION_SET_MASK);
    5ed4:	88 e2       	ldi	r24, 0x28	; 40
    5ed6:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>

	 /* Display ON/OFF Control */
	 LCD_WriteCommand(DISPLAY_ON_OFF_MASK);
    5eda:	8c e0       	ldi	r24, 0x0C	; 12
    5edc:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>

	 /* Clear the Screen */
	 LCD_WriteCommand(CLEAR_SCREEN);
    5ee0:	81 e0       	ldi	r24, 0x01	; 1
    5ee2:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>
    5ee6:	80 e0       	ldi	r24, 0x00	; 0
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	a0 e8       	ldi	r26, 0x80	; 128
    5eec:	bf e3       	ldi	r27, 0x3F	; 63
    5eee:	8b 87       	std	Y+11, r24	; 0x0b
    5ef0:	9c 87       	std	Y+12, r25	; 0x0c
    5ef2:	ad 87       	std	Y+13, r26	; 0x0d
    5ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    5efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5efe:	20 e0       	ldi	r18, 0x00	; 0
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	4a ef       	ldi	r20, 0xFA	; 250
    5f04:	54 e4       	ldi	r21, 0x44	; 68
    5f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f0a:	dc 01       	movw	r26, r24
    5f0c:	cb 01       	movw	r24, r22
    5f0e:	8f 83       	std	Y+7, r24	; 0x07
    5f10:	98 87       	std	Y+8, r25	; 0x08
    5f12:	a9 87       	std	Y+9, r26	; 0x09
    5f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5f16:	6f 81       	ldd	r22, Y+7	; 0x07
    5f18:	78 85       	ldd	r23, Y+8	; 0x08
    5f1a:	89 85       	ldd	r24, Y+9	; 0x09
    5f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f1e:	20 e0       	ldi	r18, 0x00	; 0
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	40 e8       	ldi	r20, 0x80	; 128
    5f24:	5f e3       	ldi	r21, 0x3F	; 63
    5f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f2a:	88 23       	and	r24, r24
    5f2c:	2c f4       	brge	.+10     	; 0x5f38 <LCD_Init+0x16a>
		__ticks = 1;
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	9e 83       	std	Y+6, r25	; 0x06
    5f34:	8d 83       	std	Y+5, r24	; 0x05
    5f36:	3f c0       	rjmp	.+126    	; 0x5fb6 <LCD_Init+0x1e8>
	else if (__tmp > 65535)
    5f38:	6f 81       	ldd	r22, Y+7	; 0x07
    5f3a:	78 85       	ldd	r23, Y+8	; 0x08
    5f3c:	89 85       	ldd	r24, Y+9	; 0x09
    5f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f40:	20 e0       	ldi	r18, 0x00	; 0
    5f42:	3f ef       	ldi	r19, 0xFF	; 255
    5f44:	4f e7       	ldi	r20, 0x7F	; 127
    5f46:	57 e4       	ldi	r21, 0x47	; 71
    5f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f4c:	18 16       	cp	r1, r24
    5f4e:	4c f5       	brge	.+82     	; 0x5fa2 <LCD_Init+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f58:	20 e0       	ldi	r18, 0x00	; 0
    5f5a:	30 e0       	ldi	r19, 0x00	; 0
    5f5c:	40 e2       	ldi	r20, 0x20	; 32
    5f5e:	51 e4       	ldi	r21, 0x41	; 65
    5f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f64:	dc 01       	movw	r26, r24
    5f66:	cb 01       	movw	r24, r22
    5f68:	bc 01       	movw	r22, r24
    5f6a:	cd 01       	movw	r24, r26
    5f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f70:	dc 01       	movw	r26, r24
    5f72:	cb 01       	movw	r24, r22
    5f74:	9e 83       	std	Y+6, r25	; 0x06
    5f76:	8d 83       	std	Y+5, r24	; 0x05
    5f78:	0f c0       	rjmp	.+30     	; 0x5f98 <LCD_Init+0x1ca>
    5f7a:	88 ec       	ldi	r24, 0xC8	; 200
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	9c 83       	std	Y+4, r25	; 0x04
    5f80:	8b 83       	std	Y+3, r24	; 0x03
    5f82:	8b 81       	ldd	r24, Y+3	; 0x03
    5f84:	9c 81       	ldd	r25, Y+4	; 0x04
    5f86:	01 97       	sbiw	r24, 0x01	; 1
    5f88:	f1 f7       	brne	.-4      	; 0x5f86 <LCD_Init+0x1b8>
    5f8a:	9c 83       	std	Y+4, r25	; 0x04
    5f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f90:	9e 81       	ldd	r25, Y+6	; 0x06
    5f92:	01 97       	sbiw	r24, 0x01	; 1
    5f94:	9e 83       	std	Y+6, r25	; 0x06
    5f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f98:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    5f9c:	00 97       	sbiw	r24, 0x00	; 0
    5f9e:	69 f7       	brne	.-38     	; 0x5f7a <LCD_Init+0x1ac>
    5fa0:	14 c0       	rjmp	.+40     	; 0x5fca <LCD_Init+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    5fa4:	78 85       	ldd	r23, Y+8	; 0x08
    5fa6:	89 85       	ldd	r24, Y+9	; 0x09
    5fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fae:	dc 01       	movw	r26, r24
    5fb0:	cb 01       	movw	r24, r22
    5fb2:	9e 83       	std	Y+6, r25	; 0x06
    5fb4:	8d 83       	std	Y+5, r24	; 0x05
    5fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    5fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    5fba:	9a 83       	std	Y+2, r25	; 0x02
    5fbc:	89 83       	std	Y+1, r24	; 0x01
    5fbe:	89 81       	ldd	r24, Y+1	; 0x01
    5fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc2:	01 97       	sbiw	r24, 0x01	; 1
    5fc4:	f1 f7       	brne	.-4      	; 0x5fc2 <LCD_Init+0x1f4>
    5fc6:	9a 83       	std	Y+2, r25	; 0x02
    5fc8:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);

	 /* Entry Mode Set */
	 LCD_WriteCommand(ENTRY_MODE_SET);
    5fca:	86 e0       	ldi	r24, 0x06	; 6
    5fcc:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>


}
    5fd0:	6c 96       	adiw	r28, 0x1c	; 28
    5fd2:	0f b6       	in	r0, 0x3f	; 63
    5fd4:	f8 94       	cli
    5fd6:	de bf       	out	0x3e, r29	; 62
    5fd8:	0f be       	out	0x3f, r0	; 63
    5fda:	cd bf       	out	0x3d, r28	; 61
    5fdc:	cf 91       	pop	r28
    5fde:	df 91       	pop	r29
    5fe0:	08 95       	ret

00005fe2 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Copy_u8Command)
{
    5fe2:	df 93       	push	r29
    5fe4:	cf 93       	push	r28
    5fe6:	cd b7       	in	r28, 0x3d	; 61
    5fe8:	de b7       	in	r29, 0x3e	; 62
    5fea:	e9 97       	sbiw	r28, 0x39	; 57
    5fec:	0f b6       	in	r0, 0x3f	; 63
    5fee:	f8 94       	cli
    5ff0:	de bf       	out	0x3e, r29	; 62
    5ff2:	0f be       	out	0x3f, r0	; 63
    5ff4:	cd bf       	out	0x3d, r28	; 61
    5ff6:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_LOW); //RS = 0
    5ff8:	83 e0       	ldi	r24, 0x03	; 3
    5ffa:	60 e0       	ldi	r22, 0x00	; 0
    5ffc:	40 e0       	ldi	r20, 0x00	; 0
    5ffe:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    6002:	83 e0       	ldi	r24, 0x03	; 3
    6004:	61 e0       	ldi	r22, 0x01	; 1
    6006:	40 e0       	ldi	r20, 0x00	; 0
    6008:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,4)); //DB4
    600c:	89 ad       	ldd	r24, Y+57	; 0x39
    600e:	82 95       	swap	r24
    6010:	8f 70       	andi	r24, 0x0F	; 15
    6012:	98 2f       	mov	r25, r24
    6014:	91 70       	andi	r25, 0x01	; 1
    6016:	83 e0       	ldi	r24, 0x03	; 3
    6018:	64 e0       	ldi	r22, 0x04	; 4
    601a:	49 2f       	mov	r20, r25
    601c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,5)); //DB5
    6020:	89 ad       	ldd	r24, Y+57	; 0x39
    6022:	82 95       	swap	r24
    6024:	86 95       	lsr	r24
    6026:	87 70       	andi	r24, 0x07	; 7
    6028:	98 2f       	mov	r25, r24
    602a:	91 70       	andi	r25, 0x01	; 1
    602c:	83 e0       	ldi	r24, 0x03	; 3
    602e:	65 e0       	ldi	r22, 0x05	; 5
    6030:	49 2f       	mov	r20, r25
    6032:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,6)); //DB5
    6036:	89 ad       	ldd	r24, Y+57	; 0x39
    6038:	82 95       	swap	r24
    603a:	86 95       	lsr	r24
    603c:	86 95       	lsr	r24
    603e:	83 70       	andi	r24, 0x03	; 3
    6040:	98 2f       	mov	r25, r24
    6042:	91 70       	andi	r25, 0x01	; 1
    6044:	83 e0       	ldi	r24, 0x03	; 3
    6046:	66 e0       	ldi	r22, 0x06	; 6
    6048:	49 2f       	mov	r20, r25
    604a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,7)); //DB7
    604e:	89 ad       	ldd	r24, Y+57	; 0x39
    6050:	98 2f       	mov	r25, r24
    6052:	99 1f       	adc	r25, r25
    6054:	99 27       	eor	r25, r25
    6056:	99 1f       	adc	r25, r25
    6058:	83 e0       	ldi	r24, 0x03	; 3
    605a:	67 e0       	ldi	r22, 0x07	; 7
    605c:	49 2f       	mov	r20, r25
    605e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    6062:	83 e0       	ldi	r24, 0x03	; 3
    6064:	62 e0       	ldi	r22, 0x02	; 2
    6066:	41 e0       	ldi	r20, 0x01	; 1
    6068:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	a0 e8       	ldi	r26, 0x80	; 128
    6072:	bf e3       	ldi	r27, 0x3F	; 63
    6074:	8d ab       	std	Y+53, r24	; 0x35
    6076:	9e ab       	std	Y+54, r25	; 0x36
    6078:	af ab       	std	Y+55, r26	; 0x37
    607a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    607c:	6d a9       	ldd	r22, Y+53	; 0x35
    607e:	7e a9       	ldd	r23, Y+54	; 0x36
    6080:	8f a9       	ldd	r24, Y+55	; 0x37
    6082:	98 ad       	ldd	r25, Y+56	; 0x38
    6084:	20 e0       	ldi	r18, 0x00	; 0
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	4a ef       	ldi	r20, 0xFA	; 250
    608a:	54 e4       	ldi	r21, 0x44	; 68
    608c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6090:	dc 01       	movw	r26, r24
    6092:	cb 01       	movw	r24, r22
    6094:	89 ab       	std	Y+49, r24	; 0x31
    6096:	9a ab       	std	Y+50, r25	; 0x32
    6098:	ab ab       	std	Y+51, r26	; 0x33
    609a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    609c:	69 a9       	ldd	r22, Y+49	; 0x31
    609e:	7a a9       	ldd	r23, Y+50	; 0x32
    60a0:	8b a9       	ldd	r24, Y+51	; 0x33
    60a2:	9c a9       	ldd	r25, Y+52	; 0x34
    60a4:	20 e0       	ldi	r18, 0x00	; 0
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	40 e8       	ldi	r20, 0x80	; 128
    60aa:	5f e3       	ldi	r21, 0x3F	; 63
    60ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60b0:	88 23       	and	r24, r24
    60b2:	2c f4       	brge	.+10     	; 0x60be <LCD_WriteCommand+0xdc>
		__ticks = 1;
    60b4:	81 e0       	ldi	r24, 0x01	; 1
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	98 ab       	std	Y+48, r25	; 0x30
    60ba:	8f a7       	std	Y+47, r24	; 0x2f
    60bc:	3f c0       	rjmp	.+126    	; 0x613c <LCD_WriteCommand+0x15a>
	else if (__tmp > 65535)
    60be:	69 a9       	ldd	r22, Y+49	; 0x31
    60c0:	7a a9       	ldd	r23, Y+50	; 0x32
    60c2:	8b a9       	ldd	r24, Y+51	; 0x33
    60c4:	9c a9       	ldd	r25, Y+52	; 0x34
    60c6:	20 e0       	ldi	r18, 0x00	; 0
    60c8:	3f ef       	ldi	r19, 0xFF	; 255
    60ca:	4f e7       	ldi	r20, 0x7F	; 127
    60cc:	57 e4       	ldi	r21, 0x47	; 71
    60ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60d2:	18 16       	cp	r1, r24
    60d4:	4c f5       	brge	.+82     	; 0x6128 <LCD_WriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60d6:	6d a9       	ldd	r22, Y+53	; 0x35
    60d8:	7e a9       	ldd	r23, Y+54	; 0x36
    60da:	8f a9       	ldd	r24, Y+55	; 0x37
    60dc:	98 ad       	ldd	r25, Y+56	; 0x38
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	40 e2       	ldi	r20, 0x20	; 32
    60e4:	51 e4       	ldi	r21, 0x41	; 65
    60e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	bc 01       	movw	r22, r24
    60f0:	cd 01       	movw	r24, r26
    60f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f6:	dc 01       	movw	r26, r24
    60f8:	cb 01       	movw	r24, r22
    60fa:	98 ab       	std	Y+48, r25	; 0x30
    60fc:	8f a7       	std	Y+47, r24	; 0x2f
    60fe:	0f c0       	rjmp	.+30     	; 0x611e <LCD_WriteCommand+0x13c>
    6100:	88 ec       	ldi	r24, 0xC8	; 200
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	9e a7       	std	Y+46, r25	; 0x2e
    6106:	8d a7       	std	Y+45, r24	; 0x2d
    6108:	8d a5       	ldd	r24, Y+45	; 0x2d
    610a:	9e a5       	ldd	r25, Y+46	; 0x2e
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f1 f7       	brne	.-4      	; 0x610c <LCD_WriteCommand+0x12a>
    6110:	9e a7       	std	Y+46, r25	; 0x2e
    6112:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6114:	8f a5       	ldd	r24, Y+47	; 0x2f
    6116:	98 a9       	ldd	r25, Y+48	; 0x30
    6118:	01 97       	sbiw	r24, 0x01	; 1
    611a:	98 ab       	std	Y+48, r25	; 0x30
    611c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    611e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6120:	98 a9       	ldd	r25, Y+48	; 0x30
    6122:	00 97       	sbiw	r24, 0x00	; 0
    6124:	69 f7       	brne	.-38     	; 0x6100 <LCD_WriteCommand+0x11e>
    6126:	14 c0       	rjmp	.+40     	; 0x6150 <LCD_WriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6128:	69 a9       	ldd	r22, Y+49	; 0x31
    612a:	7a a9       	ldd	r23, Y+50	; 0x32
    612c:	8b a9       	ldd	r24, Y+51	; 0x33
    612e:	9c a9       	ldd	r25, Y+52	; 0x34
    6130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6134:	dc 01       	movw	r26, r24
    6136:	cb 01       	movw	r24, r22
    6138:	98 ab       	std	Y+48, r25	; 0x30
    613a:	8f a7       	std	Y+47, r24	; 0x2f
    613c:	8f a5       	ldd	r24, Y+47	; 0x2f
    613e:	98 a9       	ldd	r25, Y+48	; 0x30
    6140:	9c a7       	std	Y+44, r25	; 0x2c
    6142:	8b a7       	std	Y+43, r24	; 0x2b
    6144:	8b a5       	ldd	r24, Y+43	; 0x2b
    6146:	9c a5       	ldd	r25, Y+44	; 0x2c
    6148:	01 97       	sbiw	r24, 0x01	; 1
    614a:	f1 f7       	brne	.-4      	; 0x6148 <LCD_WriteCommand+0x166>
    614c:	9c a7       	std	Y+44, r25	; 0x2c
    614e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    6150:	83 e0       	ldi	r24, 0x03	; 3
    6152:	62 e0       	ldi	r22, 0x02	; 2
    6154:	40 e0       	ldi	r20, 0x00	; 0
    6156:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    615a:	80 e0       	ldi	r24, 0x00	; 0
    615c:	90 e0       	ldi	r25, 0x00	; 0
    615e:	a0 e8       	ldi	r26, 0x80	; 128
    6160:	bf e3       	ldi	r27, 0x3F	; 63
    6162:	8f a3       	std	Y+39, r24	; 0x27
    6164:	98 a7       	std	Y+40, r25	; 0x28
    6166:	a9 a7       	std	Y+41, r26	; 0x29
    6168:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    616a:	6f a1       	ldd	r22, Y+39	; 0x27
    616c:	78 a5       	ldd	r23, Y+40	; 0x28
    616e:	89 a5       	ldd	r24, Y+41	; 0x29
    6170:	9a a5       	ldd	r25, Y+42	; 0x2a
    6172:	20 e0       	ldi	r18, 0x00	; 0
    6174:	30 e0       	ldi	r19, 0x00	; 0
    6176:	4a ef       	ldi	r20, 0xFA	; 250
    6178:	54 e4       	ldi	r21, 0x44	; 68
    617a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    617e:	dc 01       	movw	r26, r24
    6180:	cb 01       	movw	r24, r22
    6182:	8b a3       	std	Y+35, r24	; 0x23
    6184:	9c a3       	std	Y+36, r25	; 0x24
    6186:	ad a3       	std	Y+37, r26	; 0x25
    6188:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    618a:	6b a1       	ldd	r22, Y+35	; 0x23
    618c:	7c a1       	ldd	r23, Y+36	; 0x24
    618e:	8d a1       	ldd	r24, Y+37	; 0x25
    6190:	9e a1       	ldd	r25, Y+38	; 0x26
    6192:	20 e0       	ldi	r18, 0x00	; 0
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	40 e8       	ldi	r20, 0x80	; 128
    6198:	5f e3       	ldi	r21, 0x3F	; 63
    619a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    619e:	88 23       	and	r24, r24
    61a0:	2c f4       	brge	.+10     	; 0x61ac <LCD_WriteCommand+0x1ca>
		__ticks = 1;
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	9a a3       	std	Y+34, r25	; 0x22
    61a8:	89 a3       	std	Y+33, r24	; 0x21
    61aa:	3f c0       	rjmp	.+126    	; 0x622a <LCD_WriteCommand+0x248>
	else if (__tmp > 65535)
    61ac:	6b a1       	ldd	r22, Y+35	; 0x23
    61ae:	7c a1       	ldd	r23, Y+36	; 0x24
    61b0:	8d a1       	ldd	r24, Y+37	; 0x25
    61b2:	9e a1       	ldd	r25, Y+38	; 0x26
    61b4:	20 e0       	ldi	r18, 0x00	; 0
    61b6:	3f ef       	ldi	r19, 0xFF	; 255
    61b8:	4f e7       	ldi	r20, 0x7F	; 127
    61ba:	57 e4       	ldi	r21, 0x47	; 71
    61bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61c0:	18 16       	cp	r1, r24
    61c2:	4c f5       	brge	.+82     	; 0x6216 <LCD_WriteCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61c4:	6f a1       	ldd	r22, Y+39	; 0x27
    61c6:	78 a5       	ldd	r23, Y+40	; 0x28
    61c8:	89 a5       	ldd	r24, Y+41	; 0x29
    61ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    61cc:	20 e0       	ldi	r18, 0x00	; 0
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	40 e2       	ldi	r20, 0x20	; 32
    61d2:	51 e4       	ldi	r21, 0x41	; 65
    61d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61d8:	dc 01       	movw	r26, r24
    61da:	cb 01       	movw	r24, r22
    61dc:	bc 01       	movw	r22, r24
    61de:	cd 01       	movw	r24, r26
    61e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61e4:	dc 01       	movw	r26, r24
    61e6:	cb 01       	movw	r24, r22
    61e8:	9a a3       	std	Y+34, r25	; 0x22
    61ea:	89 a3       	std	Y+33, r24	; 0x21
    61ec:	0f c0       	rjmp	.+30     	; 0x620c <LCD_WriteCommand+0x22a>
    61ee:	88 ec       	ldi	r24, 0xC8	; 200
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	98 a3       	std	Y+32, r25	; 0x20
    61f4:	8f 8f       	std	Y+31, r24	; 0x1f
    61f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    61f8:	98 a1       	ldd	r25, Y+32	; 0x20
    61fa:	01 97       	sbiw	r24, 0x01	; 1
    61fc:	f1 f7       	brne	.-4      	; 0x61fa <LCD_WriteCommand+0x218>
    61fe:	98 a3       	std	Y+32, r25	; 0x20
    6200:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6202:	89 a1       	ldd	r24, Y+33	; 0x21
    6204:	9a a1       	ldd	r25, Y+34	; 0x22
    6206:	01 97       	sbiw	r24, 0x01	; 1
    6208:	9a a3       	std	Y+34, r25	; 0x22
    620a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    620c:	89 a1       	ldd	r24, Y+33	; 0x21
    620e:	9a a1       	ldd	r25, Y+34	; 0x22
    6210:	00 97       	sbiw	r24, 0x00	; 0
    6212:	69 f7       	brne	.-38     	; 0x61ee <LCD_WriteCommand+0x20c>
    6214:	14 c0       	rjmp	.+40     	; 0x623e <LCD_WriteCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6216:	6b a1       	ldd	r22, Y+35	; 0x23
    6218:	7c a1       	ldd	r23, Y+36	; 0x24
    621a:	8d a1       	ldd	r24, Y+37	; 0x25
    621c:	9e a1       	ldd	r25, Y+38	; 0x26
    621e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6222:	dc 01       	movw	r26, r24
    6224:	cb 01       	movw	r24, r22
    6226:	9a a3       	std	Y+34, r25	; 0x22
    6228:	89 a3       	std	Y+33, r24	; 0x21
    622a:	89 a1       	ldd	r24, Y+33	; 0x21
    622c:	9a a1       	ldd	r25, Y+34	; 0x22
    622e:	9e 8f       	std	Y+30, r25	; 0x1e
    6230:	8d 8f       	std	Y+29, r24	; 0x1d
    6232:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6234:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6236:	01 97       	sbiw	r24, 0x01	; 1
    6238:	f1 f7       	brne	.-4      	; 0x6236 <LCD_WriteCommand+0x254>
    623a:	9e 8f       	std	Y+30, r25	; 0x1e
    623c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

		  /* Second Half */
	  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Command,0)); //DB4
    623e:	89 ad       	ldd	r24, Y+57	; 0x39
    6240:	98 2f       	mov	r25, r24
    6242:	91 70       	andi	r25, 0x01	; 1
    6244:	83 e0       	ldi	r24, 0x03	; 3
    6246:	64 e0       	ldi	r22, 0x04	; 4
    6248:	49 2f       	mov	r20, r25
    624a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Command,1)); //DB5
    624e:	89 ad       	ldd	r24, Y+57	; 0x39
    6250:	86 95       	lsr	r24
    6252:	98 2f       	mov	r25, r24
    6254:	91 70       	andi	r25, 0x01	; 1
    6256:	83 e0       	ldi	r24, 0x03	; 3
    6258:	65 e0       	ldi	r22, 0x05	; 5
    625a:	49 2f       	mov	r20, r25
    625c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Command,2)); //DB6
    6260:	89 ad       	ldd	r24, Y+57	; 0x39
    6262:	86 95       	lsr	r24
    6264:	86 95       	lsr	r24
    6266:	98 2f       	mov	r25, r24
    6268:	91 70       	andi	r25, 0x01	; 1
    626a:	83 e0       	ldi	r24, 0x03	; 3
    626c:	66 e0       	ldi	r22, 0x06	; 6
    626e:	49 2f       	mov	r20, r25
    6270:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Command,3)); //DB7
    6274:	89 ad       	ldd	r24, Y+57	; 0x39
    6276:	86 95       	lsr	r24
    6278:	86 95       	lsr	r24
    627a:	86 95       	lsr	r24
    627c:	98 2f       	mov	r25, r24
    627e:	91 70       	andi	r25, 0x01	; 1
    6280:	83 e0       	ldi	r24, 0x03	; 3
    6282:	67 e0       	ldi	r22, 0x07	; 7
    6284:	49 2f       	mov	r20, r25
    6286:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    628a:	83 e0       	ldi	r24, 0x03	; 3
    628c:	62 e0       	ldi	r22, 0x02	; 2
    628e:	41 e0       	ldi	r20, 0x01	; 1
    6290:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    6294:	80 e0       	ldi	r24, 0x00	; 0
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	a0 e8       	ldi	r26, 0x80	; 128
    629a:	bf e3       	ldi	r27, 0x3F	; 63
    629c:	89 8f       	std	Y+25, r24	; 0x19
    629e:	9a 8f       	std	Y+26, r25	; 0x1a
    62a0:	ab 8f       	std	Y+27, r26	; 0x1b
    62a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62a4:	69 8d       	ldd	r22, Y+25	; 0x19
    62a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62ac:	20 e0       	ldi	r18, 0x00	; 0
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	4a ef       	ldi	r20, 0xFA	; 250
    62b2:	54 e4       	ldi	r21, 0x44	; 68
    62b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62b8:	dc 01       	movw	r26, r24
    62ba:	cb 01       	movw	r24, r22
    62bc:	8d 8b       	std	Y+21, r24	; 0x15
    62be:	9e 8b       	std	Y+22, r25	; 0x16
    62c0:	af 8b       	std	Y+23, r26	; 0x17
    62c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    62c4:	6d 89       	ldd	r22, Y+21	; 0x15
    62c6:	7e 89       	ldd	r23, Y+22	; 0x16
    62c8:	8f 89       	ldd	r24, Y+23	; 0x17
    62ca:	98 8d       	ldd	r25, Y+24	; 0x18
    62cc:	20 e0       	ldi	r18, 0x00	; 0
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	40 e8       	ldi	r20, 0x80	; 128
    62d2:	5f e3       	ldi	r21, 0x3F	; 63
    62d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62d8:	88 23       	and	r24, r24
    62da:	2c f4       	brge	.+10     	; 0x62e6 <LCD_WriteCommand+0x304>
		__ticks = 1;
    62dc:	81 e0       	ldi	r24, 0x01	; 1
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	9c 8b       	std	Y+20, r25	; 0x14
    62e2:	8b 8b       	std	Y+19, r24	; 0x13
    62e4:	3f c0       	rjmp	.+126    	; 0x6364 <LCD_WriteCommand+0x382>
	else if (__tmp > 65535)
    62e6:	6d 89       	ldd	r22, Y+21	; 0x15
    62e8:	7e 89       	ldd	r23, Y+22	; 0x16
    62ea:	8f 89       	ldd	r24, Y+23	; 0x17
    62ec:	98 8d       	ldd	r25, Y+24	; 0x18
    62ee:	20 e0       	ldi	r18, 0x00	; 0
    62f0:	3f ef       	ldi	r19, 0xFF	; 255
    62f2:	4f e7       	ldi	r20, 0x7F	; 127
    62f4:	57 e4       	ldi	r21, 0x47	; 71
    62f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62fa:	18 16       	cp	r1, r24
    62fc:	4c f5       	brge	.+82     	; 0x6350 <LCD_WriteCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62fe:	69 8d       	ldd	r22, Y+25	; 0x19
    6300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6306:	20 e0       	ldi	r18, 0x00	; 0
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	40 e2       	ldi	r20, 0x20	; 32
    630c:	51 e4       	ldi	r21, 0x41	; 65
    630e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6312:	dc 01       	movw	r26, r24
    6314:	cb 01       	movw	r24, r22
    6316:	bc 01       	movw	r22, r24
    6318:	cd 01       	movw	r24, r26
    631a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    631e:	dc 01       	movw	r26, r24
    6320:	cb 01       	movw	r24, r22
    6322:	9c 8b       	std	Y+20, r25	; 0x14
    6324:	8b 8b       	std	Y+19, r24	; 0x13
    6326:	0f c0       	rjmp	.+30     	; 0x6346 <LCD_WriteCommand+0x364>
    6328:	88 ec       	ldi	r24, 0xC8	; 200
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	9a 8b       	std	Y+18, r25	; 0x12
    632e:	89 8b       	std	Y+17, r24	; 0x11
    6330:	89 89       	ldd	r24, Y+17	; 0x11
    6332:	9a 89       	ldd	r25, Y+18	; 0x12
    6334:	01 97       	sbiw	r24, 0x01	; 1
    6336:	f1 f7       	brne	.-4      	; 0x6334 <LCD_WriteCommand+0x352>
    6338:	9a 8b       	std	Y+18, r25	; 0x12
    633a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    633c:	8b 89       	ldd	r24, Y+19	; 0x13
    633e:	9c 89       	ldd	r25, Y+20	; 0x14
    6340:	01 97       	sbiw	r24, 0x01	; 1
    6342:	9c 8b       	std	Y+20, r25	; 0x14
    6344:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6346:	8b 89       	ldd	r24, Y+19	; 0x13
    6348:	9c 89       	ldd	r25, Y+20	; 0x14
    634a:	00 97       	sbiw	r24, 0x00	; 0
    634c:	69 f7       	brne	.-38     	; 0x6328 <LCD_WriteCommand+0x346>
    634e:	14 c0       	rjmp	.+40     	; 0x6378 <LCD_WriteCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6350:	6d 89       	ldd	r22, Y+21	; 0x15
    6352:	7e 89       	ldd	r23, Y+22	; 0x16
    6354:	8f 89       	ldd	r24, Y+23	; 0x17
    6356:	98 8d       	ldd	r25, Y+24	; 0x18
    6358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    635c:	dc 01       	movw	r26, r24
    635e:	cb 01       	movw	r24, r22
    6360:	9c 8b       	std	Y+20, r25	; 0x14
    6362:	8b 8b       	std	Y+19, r24	; 0x13
    6364:	8b 89       	ldd	r24, Y+19	; 0x13
    6366:	9c 89       	ldd	r25, Y+20	; 0x14
    6368:	98 8b       	std	Y+16, r25	; 0x10
    636a:	8f 87       	std	Y+15, r24	; 0x0f
    636c:	8f 85       	ldd	r24, Y+15	; 0x0f
    636e:	98 89       	ldd	r25, Y+16	; 0x10
    6370:	01 97       	sbiw	r24, 0x01	; 1
    6372:	f1 f7       	brne	.-4      	; 0x6370 <LCD_WriteCommand+0x38e>
    6374:	98 8b       	std	Y+16, r25	; 0x10
    6376:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    6378:	83 e0       	ldi	r24, 0x03	; 3
    637a:	62 e0       	ldi	r22, 0x02	; 2
    637c:	40 e0       	ldi	r20, 0x00	; 0
    637e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	a0 e8       	ldi	r26, 0x80	; 128
    6388:	bf e3       	ldi	r27, 0x3F	; 63
    638a:	8b 87       	std	Y+11, r24	; 0x0b
    638c:	9c 87       	std	Y+12, r25	; 0x0c
    638e:	ad 87       	std	Y+13, r26	; 0x0d
    6390:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6392:	6b 85       	ldd	r22, Y+11	; 0x0b
    6394:	7c 85       	ldd	r23, Y+12	; 0x0c
    6396:	8d 85       	ldd	r24, Y+13	; 0x0d
    6398:	9e 85       	ldd	r25, Y+14	; 0x0e
    639a:	20 e0       	ldi	r18, 0x00	; 0
    639c:	30 e0       	ldi	r19, 0x00	; 0
    639e:	4a ef       	ldi	r20, 0xFA	; 250
    63a0:	54 e4       	ldi	r21, 0x44	; 68
    63a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63a6:	dc 01       	movw	r26, r24
    63a8:	cb 01       	movw	r24, r22
    63aa:	8f 83       	std	Y+7, r24	; 0x07
    63ac:	98 87       	std	Y+8, r25	; 0x08
    63ae:	a9 87       	std	Y+9, r26	; 0x09
    63b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    63b2:	6f 81       	ldd	r22, Y+7	; 0x07
    63b4:	78 85       	ldd	r23, Y+8	; 0x08
    63b6:	89 85       	ldd	r24, Y+9	; 0x09
    63b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ba:	20 e0       	ldi	r18, 0x00	; 0
    63bc:	30 e0       	ldi	r19, 0x00	; 0
    63be:	40 e8       	ldi	r20, 0x80	; 128
    63c0:	5f e3       	ldi	r21, 0x3F	; 63
    63c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63c6:	88 23       	and	r24, r24
    63c8:	2c f4       	brge	.+10     	; 0x63d4 <LCD_WriteCommand+0x3f2>
		__ticks = 1;
    63ca:	81 e0       	ldi	r24, 0x01	; 1
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	9e 83       	std	Y+6, r25	; 0x06
    63d0:	8d 83       	std	Y+5, r24	; 0x05
    63d2:	3f c0       	rjmp	.+126    	; 0x6452 <LCD_WriteCommand+0x470>
	else if (__tmp > 65535)
    63d4:	6f 81       	ldd	r22, Y+7	; 0x07
    63d6:	78 85       	ldd	r23, Y+8	; 0x08
    63d8:	89 85       	ldd	r24, Y+9	; 0x09
    63da:	9a 85       	ldd	r25, Y+10	; 0x0a
    63dc:	20 e0       	ldi	r18, 0x00	; 0
    63de:	3f ef       	ldi	r19, 0xFF	; 255
    63e0:	4f e7       	ldi	r20, 0x7F	; 127
    63e2:	57 e4       	ldi	r21, 0x47	; 71
    63e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63e8:	18 16       	cp	r1, r24
    63ea:	4c f5       	brge	.+82     	; 0x643e <LCD_WriteCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    63ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    63f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    63f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    63f4:	20 e0       	ldi	r18, 0x00	; 0
    63f6:	30 e0       	ldi	r19, 0x00	; 0
    63f8:	40 e2       	ldi	r20, 0x20	; 32
    63fa:	51 e4       	ldi	r21, 0x41	; 65
    63fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6400:	dc 01       	movw	r26, r24
    6402:	cb 01       	movw	r24, r22
    6404:	bc 01       	movw	r22, r24
    6406:	cd 01       	movw	r24, r26
    6408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    640c:	dc 01       	movw	r26, r24
    640e:	cb 01       	movw	r24, r22
    6410:	9e 83       	std	Y+6, r25	; 0x06
    6412:	8d 83       	std	Y+5, r24	; 0x05
    6414:	0f c0       	rjmp	.+30     	; 0x6434 <LCD_WriteCommand+0x452>
    6416:	88 ec       	ldi	r24, 0xC8	; 200
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	9c 83       	std	Y+4, r25	; 0x04
    641c:	8b 83       	std	Y+3, r24	; 0x03
    641e:	8b 81       	ldd	r24, Y+3	; 0x03
    6420:	9c 81       	ldd	r25, Y+4	; 0x04
    6422:	01 97       	sbiw	r24, 0x01	; 1
    6424:	f1 f7       	brne	.-4      	; 0x6422 <LCD_WriteCommand+0x440>
    6426:	9c 83       	std	Y+4, r25	; 0x04
    6428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    642a:	8d 81       	ldd	r24, Y+5	; 0x05
    642c:	9e 81       	ldd	r25, Y+6	; 0x06
    642e:	01 97       	sbiw	r24, 0x01	; 1
    6430:	9e 83       	std	Y+6, r25	; 0x06
    6432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6434:	8d 81       	ldd	r24, Y+5	; 0x05
    6436:	9e 81       	ldd	r25, Y+6	; 0x06
    6438:	00 97       	sbiw	r24, 0x00	; 0
    643a:	69 f7       	brne	.-38     	; 0x6416 <LCD_WriteCommand+0x434>
    643c:	14 c0       	rjmp	.+40     	; 0x6466 <LCD_WriteCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    643e:	6f 81       	ldd	r22, Y+7	; 0x07
    6440:	78 85       	ldd	r23, Y+8	; 0x08
    6442:	89 85       	ldd	r24, Y+9	; 0x09
    6444:	9a 85       	ldd	r25, Y+10	; 0x0a
    6446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    644a:	dc 01       	movw	r26, r24
    644c:	cb 01       	movw	r24, r22
    644e:	9e 83       	std	Y+6, r25	; 0x06
    6450:	8d 83       	std	Y+5, r24	; 0x05
    6452:	8d 81       	ldd	r24, Y+5	; 0x05
    6454:	9e 81       	ldd	r25, Y+6	; 0x06
    6456:	9a 83       	std	Y+2, r25	; 0x02
    6458:	89 83       	std	Y+1, r24	; 0x01
    645a:	89 81       	ldd	r24, Y+1	; 0x01
    645c:	9a 81       	ldd	r25, Y+2	; 0x02
    645e:	01 97       	sbiw	r24, 0x01	; 1
    6460:	f1 f7       	brne	.-4      	; 0x645e <LCD_WriteCommand+0x47c>
    6462:	9a 83       	std	Y+2, r25	; 0x02
    6464:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    6466:	e9 96       	adiw	r28, 0x39	; 57
    6468:	0f b6       	in	r0, 0x3f	; 63
    646a:	f8 94       	cli
    646c:	de bf       	out	0x3e, r29	; 62
    646e:	0f be       	out	0x3f, r0	; 63
    6470:	cd bf       	out	0x3d, r28	; 61
    6472:	cf 91       	pop	r28
    6474:	df 91       	pop	r29
    6476:	08 95       	ret

00006478 <LCD_WriteData>:
void LCD_WriteData(u8 Copy_u8Data)
{
    6478:	df 93       	push	r29
    647a:	cf 93       	push	r28
    647c:	cd b7       	in	r28, 0x3d	; 61
    647e:	de b7       	in	r29, 0x3e	; 62
    6480:	e9 97       	sbiw	r28, 0x39	; 57
    6482:	0f b6       	in	r0, 0x3f	; 63
    6484:	f8 94       	cli
    6486:	de bf       	out	0x3e, r29	; 62
    6488:	0f be       	out	0x3f, r0	; 63
    648a:	cd bf       	out	0x3d, r28	; 61
    648c:	89 af       	std	Y+57, r24	; 0x39
	/* First Half */
    /* Clear RS pin and RW pin to send Command */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN0,DIO_u8PIN_HIGH); //RS = 1
    648e:	83 e0       	ldi	r24, 0x03	; 3
    6490:	60 e0       	ldi	r22, 0x00	; 0
    6492:	41 e0       	ldi	r20, 0x01	; 1
    6494:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN1,DIO_u8PIN_LOW); //RW = 0
    6498:	83 e0       	ldi	r24, 0x03	; 3
    649a:	61 e0       	ldi	r22, 0x01	; 1
    649c:	40 e0       	ldi	r20, 0x00	; 0
    649e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,4)); //DB4
    64a2:	89 ad       	ldd	r24, Y+57	; 0x39
    64a4:	82 95       	swap	r24
    64a6:	8f 70       	andi	r24, 0x0F	; 15
    64a8:	98 2f       	mov	r25, r24
    64aa:	91 70       	andi	r25, 0x01	; 1
    64ac:	83 e0       	ldi	r24, 0x03	; 3
    64ae:	64 e0       	ldi	r22, 0x04	; 4
    64b0:	49 2f       	mov	r20, r25
    64b2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,5)); //DB4
    64b6:	89 ad       	ldd	r24, Y+57	; 0x39
    64b8:	82 95       	swap	r24
    64ba:	86 95       	lsr	r24
    64bc:	87 70       	andi	r24, 0x07	; 7
    64be:	98 2f       	mov	r25, r24
    64c0:	91 70       	andi	r25, 0x01	; 1
    64c2:	83 e0       	ldi	r24, 0x03	; 3
    64c4:	65 e0       	ldi	r22, 0x05	; 5
    64c6:	49 2f       	mov	r20, r25
    64c8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,6)); //DB4
    64cc:	89 ad       	ldd	r24, Y+57	; 0x39
    64ce:	82 95       	swap	r24
    64d0:	86 95       	lsr	r24
    64d2:	86 95       	lsr	r24
    64d4:	83 70       	andi	r24, 0x03	; 3
    64d6:	98 2f       	mov	r25, r24
    64d8:	91 70       	andi	r25, 0x01	; 1
    64da:	83 e0       	ldi	r24, 0x03	; 3
    64dc:	66 e0       	ldi	r22, 0x06	; 6
    64de:	49 2f       	mov	r20, r25
    64e0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,7)); //DB4
    64e4:	89 ad       	ldd	r24, Y+57	; 0x39
    64e6:	98 2f       	mov	r25, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	99 27       	eor	r25, r25
    64ec:	99 1f       	adc	r25, r25
    64ee:	83 e0       	ldi	r24, 0x03	; 3
    64f0:	67 e0       	ldi	r22, 0x07	; 7
    64f2:	49 2f       	mov	r20, r25
    64f4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	
	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    64f8:	83 e0       	ldi	r24, 0x03	; 3
    64fa:	62 e0       	ldi	r22, 0x02	; 2
    64fc:	41 e0       	ldi	r20, 0x01	; 1
    64fe:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    6502:	80 e0       	ldi	r24, 0x00	; 0
    6504:	90 e0       	ldi	r25, 0x00	; 0
    6506:	a0 e8       	ldi	r26, 0x80	; 128
    6508:	bf e3       	ldi	r27, 0x3F	; 63
    650a:	8d ab       	std	Y+53, r24	; 0x35
    650c:	9e ab       	std	Y+54, r25	; 0x36
    650e:	af ab       	std	Y+55, r26	; 0x37
    6510:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6512:	6d a9       	ldd	r22, Y+53	; 0x35
    6514:	7e a9       	ldd	r23, Y+54	; 0x36
    6516:	8f a9       	ldd	r24, Y+55	; 0x37
    6518:	98 ad       	ldd	r25, Y+56	; 0x38
    651a:	20 e0       	ldi	r18, 0x00	; 0
    651c:	30 e0       	ldi	r19, 0x00	; 0
    651e:	4a ef       	ldi	r20, 0xFA	; 250
    6520:	54 e4       	ldi	r21, 0x44	; 68
    6522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6526:	dc 01       	movw	r26, r24
    6528:	cb 01       	movw	r24, r22
    652a:	89 ab       	std	Y+49, r24	; 0x31
    652c:	9a ab       	std	Y+50, r25	; 0x32
    652e:	ab ab       	std	Y+51, r26	; 0x33
    6530:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6532:	69 a9       	ldd	r22, Y+49	; 0x31
    6534:	7a a9       	ldd	r23, Y+50	; 0x32
    6536:	8b a9       	ldd	r24, Y+51	; 0x33
    6538:	9c a9       	ldd	r25, Y+52	; 0x34
    653a:	20 e0       	ldi	r18, 0x00	; 0
    653c:	30 e0       	ldi	r19, 0x00	; 0
    653e:	40 e8       	ldi	r20, 0x80	; 128
    6540:	5f e3       	ldi	r21, 0x3F	; 63
    6542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6546:	88 23       	and	r24, r24
    6548:	2c f4       	brge	.+10     	; 0x6554 <LCD_WriteData+0xdc>
		__ticks = 1;
    654a:	81 e0       	ldi	r24, 0x01	; 1
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	98 ab       	std	Y+48, r25	; 0x30
    6550:	8f a7       	std	Y+47, r24	; 0x2f
    6552:	3f c0       	rjmp	.+126    	; 0x65d2 <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    6554:	69 a9       	ldd	r22, Y+49	; 0x31
    6556:	7a a9       	ldd	r23, Y+50	; 0x32
    6558:	8b a9       	ldd	r24, Y+51	; 0x33
    655a:	9c a9       	ldd	r25, Y+52	; 0x34
    655c:	20 e0       	ldi	r18, 0x00	; 0
    655e:	3f ef       	ldi	r19, 0xFF	; 255
    6560:	4f e7       	ldi	r20, 0x7F	; 127
    6562:	57 e4       	ldi	r21, 0x47	; 71
    6564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6568:	18 16       	cp	r1, r24
    656a:	4c f5       	brge	.+82     	; 0x65be <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    656c:	6d a9       	ldd	r22, Y+53	; 0x35
    656e:	7e a9       	ldd	r23, Y+54	; 0x36
    6570:	8f a9       	ldd	r24, Y+55	; 0x37
    6572:	98 ad       	ldd	r25, Y+56	; 0x38
    6574:	20 e0       	ldi	r18, 0x00	; 0
    6576:	30 e0       	ldi	r19, 0x00	; 0
    6578:	40 e2       	ldi	r20, 0x20	; 32
    657a:	51 e4       	ldi	r21, 0x41	; 65
    657c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6580:	dc 01       	movw	r26, r24
    6582:	cb 01       	movw	r24, r22
    6584:	bc 01       	movw	r22, r24
    6586:	cd 01       	movw	r24, r26
    6588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    658c:	dc 01       	movw	r26, r24
    658e:	cb 01       	movw	r24, r22
    6590:	98 ab       	std	Y+48, r25	; 0x30
    6592:	8f a7       	std	Y+47, r24	; 0x2f
    6594:	0f c0       	rjmp	.+30     	; 0x65b4 <LCD_WriteData+0x13c>
    6596:	88 ec       	ldi	r24, 0xC8	; 200
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	9e a7       	std	Y+46, r25	; 0x2e
    659c:	8d a7       	std	Y+45, r24	; 0x2d
    659e:	8d a5       	ldd	r24, Y+45	; 0x2d
    65a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    65a2:	01 97       	sbiw	r24, 0x01	; 1
    65a4:	f1 f7       	brne	.-4      	; 0x65a2 <LCD_WriteData+0x12a>
    65a6:	9e a7       	std	Y+46, r25	; 0x2e
    65a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    65ac:	98 a9       	ldd	r25, Y+48	; 0x30
    65ae:	01 97       	sbiw	r24, 0x01	; 1
    65b0:	98 ab       	std	Y+48, r25	; 0x30
    65b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    65b6:	98 a9       	ldd	r25, Y+48	; 0x30
    65b8:	00 97       	sbiw	r24, 0x00	; 0
    65ba:	69 f7       	brne	.-38     	; 0x6596 <LCD_WriteData+0x11e>
    65bc:	14 c0       	rjmp	.+40     	; 0x65e6 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65be:	69 a9       	ldd	r22, Y+49	; 0x31
    65c0:	7a a9       	ldd	r23, Y+50	; 0x32
    65c2:	8b a9       	ldd	r24, Y+51	; 0x33
    65c4:	9c a9       	ldd	r25, Y+52	; 0x34
    65c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65ca:	dc 01       	movw	r26, r24
    65cc:	cb 01       	movw	r24, r22
    65ce:	98 ab       	std	Y+48, r25	; 0x30
    65d0:	8f a7       	std	Y+47, r24	; 0x2f
    65d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    65d4:	98 a9       	ldd	r25, Y+48	; 0x30
    65d6:	9c a7       	std	Y+44, r25	; 0x2c
    65d8:	8b a7       	std	Y+43, r24	; 0x2b
    65da:	8b a5       	ldd	r24, Y+43	; 0x2b
    65dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    65de:	01 97       	sbiw	r24, 0x01	; 1
    65e0:	f1 f7       	brne	.-4      	; 0x65de <LCD_WriteData+0x166>
    65e2:	9c a7       	std	Y+44, r25	; 0x2c
    65e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    65e6:	83 e0       	ldi	r24, 0x03	; 3
    65e8:	62 e0       	ldi	r22, 0x02	; 2
    65ea:	40 e0       	ldi	r20, 0x00	; 0
    65ec:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    65f0:	80 e0       	ldi	r24, 0x00	; 0
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	a0 e8       	ldi	r26, 0x80	; 128
    65f6:	bf e3       	ldi	r27, 0x3F	; 63
    65f8:	8f a3       	std	Y+39, r24	; 0x27
    65fa:	98 a7       	std	Y+40, r25	; 0x28
    65fc:	a9 a7       	std	Y+41, r26	; 0x29
    65fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6600:	6f a1       	ldd	r22, Y+39	; 0x27
    6602:	78 a5       	ldd	r23, Y+40	; 0x28
    6604:	89 a5       	ldd	r24, Y+41	; 0x29
    6606:	9a a5       	ldd	r25, Y+42	; 0x2a
    6608:	20 e0       	ldi	r18, 0x00	; 0
    660a:	30 e0       	ldi	r19, 0x00	; 0
    660c:	4a ef       	ldi	r20, 0xFA	; 250
    660e:	54 e4       	ldi	r21, 0x44	; 68
    6610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6614:	dc 01       	movw	r26, r24
    6616:	cb 01       	movw	r24, r22
    6618:	8b a3       	std	Y+35, r24	; 0x23
    661a:	9c a3       	std	Y+36, r25	; 0x24
    661c:	ad a3       	std	Y+37, r26	; 0x25
    661e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6620:	6b a1       	ldd	r22, Y+35	; 0x23
    6622:	7c a1       	ldd	r23, Y+36	; 0x24
    6624:	8d a1       	ldd	r24, Y+37	; 0x25
    6626:	9e a1       	ldd	r25, Y+38	; 0x26
    6628:	20 e0       	ldi	r18, 0x00	; 0
    662a:	30 e0       	ldi	r19, 0x00	; 0
    662c:	40 e8       	ldi	r20, 0x80	; 128
    662e:	5f e3       	ldi	r21, 0x3F	; 63
    6630:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6634:	88 23       	and	r24, r24
    6636:	2c f4       	brge	.+10     	; 0x6642 <LCD_WriteData+0x1ca>
		__ticks = 1;
    6638:	81 e0       	ldi	r24, 0x01	; 1
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	9a a3       	std	Y+34, r25	; 0x22
    663e:	89 a3       	std	Y+33, r24	; 0x21
    6640:	3f c0       	rjmp	.+126    	; 0x66c0 <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    6642:	6b a1       	ldd	r22, Y+35	; 0x23
    6644:	7c a1       	ldd	r23, Y+36	; 0x24
    6646:	8d a1       	ldd	r24, Y+37	; 0x25
    6648:	9e a1       	ldd	r25, Y+38	; 0x26
    664a:	20 e0       	ldi	r18, 0x00	; 0
    664c:	3f ef       	ldi	r19, 0xFF	; 255
    664e:	4f e7       	ldi	r20, 0x7F	; 127
    6650:	57 e4       	ldi	r21, 0x47	; 71
    6652:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6656:	18 16       	cp	r1, r24
    6658:	4c f5       	brge	.+82     	; 0x66ac <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    665a:	6f a1       	ldd	r22, Y+39	; 0x27
    665c:	78 a5       	ldd	r23, Y+40	; 0x28
    665e:	89 a5       	ldd	r24, Y+41	; 0x29
    6660:	9a a5       	ldd	r25, Y+42	; 0x2a
    6662:	20 e0       	ldi	r18, 0x00	; 0
    6664:	30 e0       	ldi	r19, 0x00	; 0
    6666:	40 e2       	ldi	r20, 0x20	; 32
    6668:	51 e4       	ldi	r21, 0x41	; 65
    666a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    666e:	dc 01       	movw	r26, r24
    6670:	cb 01       	movw	r24, r22
    6672:	bc 01       	movw	r22, r24
    6674:	cd 01       	movw	r24, r26
    6676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    667a:	dc 01       	movw	r26, r24
    667c:	cb 01       	movw	r24, r22
    667e:	9a a3       	std	Y+34, r25	; 0x22
    6680:	89 a3       	std	Y+33, r24	; 0x21
    6682:	0f c0       	rjmp	.+30     	; 0x66a2 <LCD_WriteData+0x22a>
    6684:	88 ec       	ldi	r24, 0xC8	; 200
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	98 a3       	std	Y+32, r25	; 0x20
    668a:	8f 8f       	std	Y+31, r24	; 0x1f
    668c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    668e:	98 a1       	ldd	r25, Y+32	; 0x20
    6690:	01 97       	sbiw	r24, 0x01	; 1
    6692:	f1 f7       	brne	.-4      	; 0x6690 <LCD_WriteData+0x218>
    6694:	98 a3       	std	Y+32, r25	; 0x20
    6696:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6698:	89 a1       	ldd	r24, Y+33	; 0x21
    669a:	9a a1       	ldd	r25, Y+34	; 0x22
    669c:	01 97       	sbiw	r24, 0x01	; 1
    669e:	9a a3       	std	Y+34, r25	; 0x22
    66a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66a2:	89 a1       	ldd	r24, Y+33	; 0x21
    66a4:	9a a1       	ldd	r25, Y+34	; 0x22
    66a6:	00 97       	sbiw	r24, 0x00	; 0
    66a8:	69 f7       	brne	.-38     	; 0x6684 <LCD_WriteData+0x20c>
    66aa:	14 c0       	rjmp	.+40     	; 0x66d4 <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66ac:	6b a1       	ldd	r22, Y+35	; 0x23
    66ae:	7c a1       	ldd	r23, Y+36	; 0x24
    66b0:	8d a1       	ldd	r24, Y+37	; 0x25
    66b2:	9e a1       	ldd	r25, Y+38	; 0x26
    66b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66b8:	dc 01       	movw	r26, r24
    66ba:	cb 01       	movw	r24, r22
    66bc:	9a a3       	std	Y+34, r25	; 0x22
    66be:	89 a3       	std	Y+33, r24	; 0x21
    66c0:	89 a1       	ldd	r24, Y+33	; 0x21
    66c2:	9a a1       	ldd	r25, Y+34	; 0x22
    66c4:	9e 8f       	std	Y+30, r25	; 0x1e
    66c6:	8d 8f       	std	Y+29, r24	; 0x1d
    66c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66cc:	01 97       	sbiw	r24, 0x01	; 1
    66ce:	f1 f7       	brne	.-4      	; 0x66cc <LCD_WriteData+0x254>
    66d0:	9e 8f       	std	Y+30, r25	; 0x1e
    66d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
		  /* Second Half */
		  /* Sending the command to the LCD */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN4,GET_BIT(Copy_u8Data,0)); //DB4
    66d4:	89 ad       	ldd	r24, Y+57	; 0x39
    66d6:	98 2f       	mov	r25, r24
    66d8:	91 70       	andi	r25, 0x01	; 1
    66da:	83 e0       	ldi	r24, 0x03	; 3
    66dc:	64 e0       	ldi	r22, 0x04	; 4
    66de:	49 2f       	mov	r20, r25
    66e0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN5,GET_BIT(Copy_u8Data,1)); //DB4
    66e4:	89 ad       	ldd	r24, Y+57	; 0x39
    66e6:	86 95       	lsr	r24
    66e8:	98 2f       	mov	r25, r24
    66ea:	91 70       	andi	r25, 0x01	; 1
    66ec:	83 e0       	ldi	r24, 0x03	; 3
    66ee:	65 e0       	ldi	r22, 0x05	; 5
    66f0:	49 2f       	mov	r20, r25
    66f2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN6,GET_BIT(Copy_u8Data,2)); //DB4
    66f6:	89 ad       	ldd	r24, Y+57	; 0x39
    66f8:	86 95       	lsr	r24
    66fa:	86 95       	lsr	r24
    66fc:	98 2f       	mov	r25, r24
    66fe:	91 70       	andi	r25, 0x01	; 1
    6700:	83 e0       	ldi	r24, 0x03	; 3
    6702:	66 e0       	ldi	r22, 0x06	; 6
    6704:	49 2f       	mov	r20, r25
    6706:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN7,GET_BIT(Copy_u8Data,3)); //DB4
    670a:	89 ad       	ldd	r24, Y+57	; 0x39
    670c:	86 95       	lsr	r24
    670e:	86 95       	lsr	r24
    6710:	86 95       	lsr	r24
    6712:	98 2f       	mov	r25, r24
    6714:	91 70       	andi	r25, 0x01	; 1
    6716:	83 e0       	ldi	r24, 0x03	; 3
    6718:	67 e0       	ldi	r22, 0x07	; 7
    671a:	49 2f       	mov	r20, r25
    671c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>

	/* Trigger the EN bit */
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_HIGH);
    6720:	83 e0       	ldi	r24, 0x03	; 3
    6722:	62 e0       	ldi	r22, 0x02	; 2
    6724:	41 e0       	ldi	r20, 0x01	; 1
    6726:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    672a:	80 e0       	ldi	r24, 0x00	; 0
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	a0 e8       	ldi	r26, 0x80	; 128
    6730:	bf e3       	ldi	r27, 0x3F	; 63
    6732:	89 8f       	std	Y+25, r24	; 0x19
    6734:	9a 8f       	std	Y+26, r25	; 0x1a
    6736:	ab 8f       	std	Y+27, r26	; 0x1b
    6738:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    673a:	69 8d       	ldd	r22, Y+25	; 0x19
    673c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    673e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6740:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6742:	20 e0       	ldi	r18, 0x00	; 0
    6744:	30 e0       	ldi	r19, 0x00	; 0
    6746:	4a ef       	ldi	r20, 0xFA	; 250
    6748:	54 e4       	ldi	r21, 0x44	; 68
    674a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    674e:	dc 01       	movw	r26, r24
    6750:	cb 01       	movw	r24, r22
    6752:	8d 8b       	std	Y+21, r24	; 0x15
    6754:	9e 8b       	std	Y+22, r25	; 0x16
    6756:	af 8b       	std	Y+23, r26	; 0x17
    6758:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    675a:	6d 89       	ldd	r22, Y+21	; 0x15
    675c:	7e 89       	ldd	r23, Y+22	; 0x16
    675e:	8f 89       	ldd	r24, Y+23	; 0x17
    6760:	98 8d       	ldd	r25, Y+24	; 0x18
    6762:	20 e0       	ldi	r18, 0x00	; 0
    6764:	30 e0       	ldi	r19, 0x00	; 0
    6766:	40 e8       	ldi	r20, 0x80	; 128
    6768:	5f e3       	ldi	r21, 0x3F	; 63
    676a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    676e:	88 23       	and	r24, r24
    6770:	2c f4       	brge	.+10     	; 0x677c <LCD_WriteData+0x304>
		__ticks = 1;
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	9c 8b       	std	Y+20, r25	; 0x14
    6778:	8b 8b       	std	Y+19, r24	; 0x13
    677a:	3f c0       	rjmp	.+126    	; 0x67fa <LCD_WriteData+0x382>
	else if (__tmp > 65535)
    677c:	6d 89       	ldd	r22, Y+21	; 0x15
    677e:	7e 89       	ldd	r23, Y+22	; 0x16
    6780:	8f 89       	ldd	r24, Y+23	; 0x17
    6782:	98 8d       	ldd	r25, Y+24	; 0x18
    6784:	20 e0       	ldi	r18, 0x00	; 0
    6786:	3f ef       	ldi	r19, 0xFF	; 255
    6788:	4f e7       	ldi	r20, 0x7F	; 127
    678a:	57 e4       	ldi	r21, 0x47	; 71
    678c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6790:	18 16       	cp	r1, r24
    6792:	4c f5       	brge	.+82     	; 0x67e6 <LCD_WriteData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6794:	69 8d       	ldd	r22, Y+25	; 0x19
    6796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    679a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    679c:	20 e0       	ldi	r18, 0x00	; 0
    679e:	30 e0       	ldi	r19, 0x00	; 0
    67a0:	40 e2       	ldi	r20, 0x20	; 32
    67a2:	51 e4       	ldi	r21, 0x41	; 65
    67a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67a8:	dc 01       	movw	r26, r24
    67aa:	cb 01       	movw	r24, r22
    67ac:	bc 01       	movw	r22, r24
    67ae:	cd 01       	movw	r24, r26
    67b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67b4:	dc 01       	movw	r26, r24
    67b6:	cb 01       	movw	r24, r22
    67b8:	9c 8b       	std	Y+20, r25	; 0x14
    67ba:	8b 8b       	std	Y+19, r24	; 0x13
    67bc:	0f c0       	rjmp	.+30     	; 0x67dc <LCD_WriteData+0x364>
    67be:	88 ec       	ldi	r24, 0xC8	; 200
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	9a 8b       	std	Y+18, r25	; 0x12
    67c4:	89 8b       	std	Y+17, r24	; 0x11
    67c6:	89 89       	ldd	r24, Y+17	; 0x11
    67c8:	9a 89       	ldd	r25, Y+18	; 0x12
    67ca:	01 97       	sbiw	r24, 0x01	; 1
    67cc:	f1 f7       	brne	.-4      	; 0x67ca <LCD_WriteData+0x352>
    67ce:	9a 8b       	std	Y+18, r25	; 0x12
    67d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67d2:	8b 89       	ldd	r24, Y+19	; 0x13
    67d4:	9c 89       	ldd	r25, Y+20	; 0x14
    67d6:	01 97       	sbiw	r24, 0x01	; 1
    67d8:	9c 8b       	std	Y+20, r25	; 0x14
    67da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67dc:	8b 89       	ldd	r24, Y+19	; 0x13
    67de:	9c 89       	ldd	r25, Y+20	; 0x14
    67e0:	00 97       	sbiw	r24, 0x00	; 0
    67e2:	69 f7       	brne	.-38     	; 0x67be <LCD_WriteData+0x346>
    67e4:	14 c0       	rjmp	.+40     	; 0x680e <LCD_WriteData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67e6:	6d 89       	ldd	r22, Y+21	; 0x15
    67e8:	7e 89       	ldd	r23, Y+22	; 0x16
    67ea:	8f 89       	ldd	r24, Y+23	; 0x17
    67ec:	98 8d       	ldd	r25, Y+24	; 0x18
    67ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67f2:	dc 01       	movw	r26, r24
    67f4:	cb 01       	movw	r24, r22
    67f6:	9c 8b       	std	Y+20, r25	; 0x14
    67f8:	8b 8b       	std	Y+19, r24	; 0x13
    67fa:	8b 89       	ldd	r24, Y+19	; 0x13
    67fc:	9c 89       	ldd	r25, Y+20	; 0x14
    67fe:	98 8b       	std	Y+16, r25	; 0x10
    6800:	8f 87       	std	Y+15, r24	; 0x0f
    6802:	8f 85       	ldd	r24, Y+15	; 0x0f
    6804:	98 89       	ldd	r25, Y+16	; 0x10
    6806:	01 97       	sbiw	r24, 0x01	; 1
    6808:	f1 f7       	brne	.-4      	; 0x6806 <LCD_WriteData+0x38e>
    680a:	98 8b       	std	Y+16, r25	; 0x10
    680c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(LCD_PORT,DIO_u8PIN2,DIO_u8PIN_LOW);
    680e:	83 e0       	ldi	r24, 0x03	; 3
    6810:	62 e0       	ldi	r22, 0x02	; 2
    6812:	40 e0       	ldi	r20, 0x00	; 0
    6814:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
    6818:	80 e0       	ldi	r24, 0x00	; 0
    681a:	90 e0       	ldi	r25, 0x00	; 0
    681c:	a0 e8       	ldi	r26, 0x80	; 128
    681e:	bf e3       	ldi	r27, 0x3F	; 63
    6820:	8b 87       	std	Y+11, r24	; 0x0b
    6822:	9c 87       	std	Y+12, r25	; 0x0c
    6824:	ad 87       	std	Y+13, r26	; 0x0d
    6826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6828:	6b 85       	ldd	r22, Y+11	; 0x0b
    682a:	7c 85       	ldd	r23, Y+12	; 0x0c
    682c:	8d 85       	ldd	r24, Y+13	; 0x0d
    682e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6830:	20 e0       	ldi	r18, 0x00	; 0
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	4a ef       	ldi	r20, 0xFA	; 250
    6836:	54 e4       	ldi	r21, 0x44	; 68
    6838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    683c:	dc 01       	movw	r26, r24
    683e:	cb 01       	movw	r24, r22
    6840:	8f 83       	std	Y+7, r24	; 0x07
    6842:	98 87       	std	Y+8, r25	; 0x08
    6844:	a9 87       	std	Y+9, r26	; 0x09
    6846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6848:	6f 81       	ldd	r22, Y+7	; 0x07
    684a:	78 85       	ldd	r23, Y+8	; 0x08
    684c:	89 85       	ldd	r24, Y+9	; 0x09
    684e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6850:	20 e0       	ldi	r18, 0x00	; 0
    6852:	30 e0       	ldi	r19, 0x00	; 0
    6854:	40 e8       	ldi	r20, 0x80	; 128
    6856:	5f e3       	ldi	r21, 0x3F	; 63
    6858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    685c:	88 23       	and	r24, r24
    685e:	2c f4       	brge	.+10     	; 0x686a <LCD_WriteData+0x3f2>
		__ticks = 1;
    6860:	81 e0       	ldi	r24, 0x01	; 1
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	9e 83       	std	Y+6, r25	; 0x06
    6866:	8d 83       	std	Y+5, r24	; 0x05
    6868:	3f c0       	rjmp	.+126    	; 0x68e8 <LCD_WriteData+0x470>
	else if (__tmp > 65535)
    686a:	6f 81       	ldd	r22, Y+7	; 0x07
    686c:	78 85       	ldd	r23, Y+8	; 0x08
    686e:	89 85       	ldd	r24, Y+9	; 0x09
    6870:	9a 85       	ldd	r25, Y+10	; 0x0a
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	3f ef       	ldi	r19, 0xFF	; 255
    6876:	4f e7       	ldi	r20, 0x7F	; 127
    6878:	57 e4       	ldi	r21, 0x47	; 71
    687a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    687e:	18 16       	cp	r1, r24
    6880:	4c f5       	brge	.+82     	; 0x68d4 <LCD_WriteData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6882:	6b 85       	ldd	r22, Y+11	; 0x0b
    6884:	7c 85       	ldd	r23, Y+12	; 0x0c
    6886:	8d 85       	ldd	r24, Y+13	; 0x0d
    6888:	9e 85       	ldd	r25, Y+14	; 0x0e
    688a:	20 e0       	ldi	r18, 0x00	; 0
    688c:	30 e0       	ldi	r19, 0x00	; 0
    688e:	40 e2       	ldi	r20, 0x20	; 32
    6890:	51 e4       	ldi	r21, 0x41	; 65
    6892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6896:	dc 01       	movw	r26, r24
    6898:	cb 01       	movw	r24, r22
    689a:	bc 01       	movw	r22, r24
    689c:	cd 01       	movw	r24, r26
    689e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68a2:	dc 01       	movw	r26, r24
    68a4:	cb 01       	movw	r24, r22
    68a6:	9e 83       	std	Y+6, r25	; 0x06
    68a8:	8d 83       	std	Y+5, r24	; 0x05
    68aa:	0f c0       	rjmp	.+30     	; 0x68ca <LCD_WriteData+0x452>
    68ac:	88 ec       	ldi	r24, 0xC8	; 200
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	9c 83       	std	Y+4, r25	; 0x04
    68b2:	8b 83       	std	Y+3, r24	; 0x03
    68b4:	8b 81       	ldd	r24, Y+3	; 0x03
    68b6:	9c 81       	ldd	r25, Y+4	; 0x04
    68b8:	01 97       	sbiw	r24, 0x01	; 1
    68ba:	f1 f7       	brne	.-4      	; 0x68b8 <LCD_WriteData+0x440>
    68bc:	9c 83       	std	Y+4, r25	; 0x04
    68be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68c0:	8d 81       	ldd	r24, Y+5	; 0x05
    68c2:	9e 81       	ldd	r25, Y+6	; 0x06
    68c4:	01 97       	sbiw	r24, 0x01	; 1
    68c6:	9e 83       	std	Y+6, r25	; 0x06
    68c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68ca:	8d 81       	ldd	r24, Y+5	; 0x05
    68cc:	9e 81       	ldd	r25, Y+6	; 0x06
    68ce:	00 97       	sbiw	r24, 0x00	; 0
    68d0:	69 f7       	brne	.-38     	; 0x68ac <LCD_WriteData+0x434>
    68d2:	14 c0       	rjmp	.+40     	; 0x68fc <LCD_WriteData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68d4:	6f 81       	ldd	r22, Y+7	; 0x07
    68d6:	78 85       	ldd	r23, Y+8	; 0x08
    68d8:	89 85       	ldd	r24, Y+9	; 0x09
    68da:	9a 85       	ldd	r25, Y+10	; 0x0a
    68dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68e0:	dc 01       	movw	r26, r24
    68e2:	cb 01       	movw	r24, r22
    68e4:	9e 83       	std	Y+6, r25	; 0x06
    68e6:	8d 83       	std	Y+5, r24	; 0x05
    68e8:	8d 81       	ldd	r24, Y+5	; 0x05
    68ea:	9e 81       	ldd	r25, Y+6	; 0x06
    68ec:	9a 83       	std	Y+2, r25	; 0x02
    68ee:	89 83       	std	Y+1, r24	; 0x01
    68f0:	89 81       	ldd	r24, Y+1	; 0x01
    68f2:	9a 81       	ldd	r25, Y+2	; 0x02
    68f4:	01 97       	sbiw	r24, 0x01	; 1
    68f6:	f1 f7       	brne	.-4      	; 0x68f4 <LCD_WriteData+0x47c>
    68f8:	9a 83       	std	Y+2, r25	; 0x02
    68fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    68fc:	e9 96       	adiw	r28, 0x39	; 57
    68fe:	0f b6       	in	r0, 0x3f	; 63
    6900:	f8 94       	cli
    6902:	de bf       	out	0x3e, r29	; 62
    6904:	0f be       	out	0x3f, r0	; 63
    6906:	cd bf       	out	0x3d, r28	; 61
    6908:	cf 91       	pop	r28
    690a:	df 91       	pop	r29
    690c:	08 95       	ret

0000690e <LCD_WriteString>:
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
    690e:	df 93       	push	r29
    6910:	cf 93       	push	r28
    6912:	00 d0       	rcall	.+0      	; 0x6914 <LCD_WriteString+0x6>
    6914:	0f 92       	push	r0
    6916:	cd b7       	in	r28, 0x3d	; 61
    6918:	de b7       	in	r29, 0x3e	; 62
    691a:	9b 83       	std	Y+3, r25	; 0x03
    691c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    691e:	19 82       	std	Y+1, r1	; 0x01
    6920:	0e c0       	rjmp	.+28     	; 0x693e <LCD_WriteString+0x30>
	while(Copy_u8PtrString[i] !='\0')
	{
		LCD_WriteData(Copy_u8PtrString[i]);
    6922:	89 81       	ldd	r24, Y+1	; 0x01
    6924:	28 2f       	mov	r18, r24
    6926:	30 e0       	ldi	r19, 0x00	; 0
    6928:	8a 81       	ldd	r24, Y+2	; 0x02
    692a:	9b 81       	ldd	r25, Y+3	; 0x03
    692c:	fc 01       	movw	r30, r24
    692e:	e2 0f       	add	r30, r18
    6930:	f3 1f       	adc	r31, r19
    6932:	80 81       	ld	r24, Z
    6934:	0e 94 3c 32 	call	0x6478	; 0x6478 <LCD_WriteData>
		i++;
    6938:	89 81       	ldd	r24, Y+1	; 0x01
    693a:	8f 5f       	subi	r24, 0xFF	; 255
    693c:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WriteString ( u8 *Copy_u8PtrString)
{
	u8 i=0;
	while(Copy_u8PtrString[i] !='\0')
    693e:	89 81       	ldd	r24, Y+1	; 0x01
    6940:	28 2f       	mov	r18, r24
    6942:	30 e0       	ldi	r19, 0x00	; 0
    6944:	8a 81       	ldd	r24, Y+2	; 0x02
    6946:	9b 81       	ldd	r25, Y+3	; 0x03
    6948:	fc 01       	movw	r30, r24
    694a:	e2 0f       	add	r30, r18
    694c:	f3 1f       	adc	r31, r19
    694e:	80 81       	ld	r24, Z
    6950:	88 23       	and	r24, r24
    6952:	39 f7       	brne	.-50     	; 0x6922 <LCD_WriteString+0x14>
	{
		LCD_WriteData(Copy_u8PtrString[i]);
		i++;
	}

}
    6954:	0f 90       	pop	r0
    6956:	0f 90       	pop	r0
    6958:	0f 90       	pop	r0
    695a:	cf 91       	pop	r28
    695c:	df 91       	pop	r29
    695e:	08 95       	ret

00006960 <LCD_GoTo>:

u8 LCD_GoTo(u8 Copy_u8Line, u8 Copy_u8Cell)
{
    6960:	df 93       	push	r29
    6962:	cf 93       	push	r28
    6964:	cd b7       	in	r28, 0x3d	; 61
    6966:	de b7       	in	r29, 0x3e	; 62
    6968:	e3 97       	sbiw	r28, 0x33	; 51
    696a:	0f b6       	in	r0, 0x3f	; 63
    696c:	f8 94       	cli
    696e:	de bf       	out	0x3e, r29	; 62
    6970:	0f be       	out	0x3f, r0	; 63
    6972:	cd bf       	out	0x3d, r28	; 61
    6974:	8a ab       	std	Y+50, r24	; 0x32
    6976:	6b ab       	std	Y+51, r22	; 0x33
    u8 Ret = E_OK;
    6978:	81 e0       	ldi	r24, 0x01	; 1
    697a:	89 ab       	std	Y+49, r24	; 0x31

    if(Copy_u8Line == 0)
    697c:	8a a9       	ldd	r24, Y+50	; 0x32
    697e:	88 23       	and	r24, r24
    6980:	09 f0       	breq	.+2      	; 0x6984 <LCD_GoTo+0x24>
    6982:	c3 c0       	rjmp	.+390    	; 0x6b0a <LCD_GoTo+0x1aa>
    {
        LCD_WriteCommand(0x80 + Copy_u8Cell);
    6984:	8b a9       	ldd	r24, Y+51	; 0x33
    6986:	80 58       	subi	r24, 0x80	; 128
    6988:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>
    698c:	80 e0       	ldi	r24, 0x00	; 0
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	a0 e2       	ldi	r26, 0x20	; 32
    6992:	b2 e4       	ldi	r27, 0x42	; 66
    6994:	8d a7       	std	Y+45, r24	; 0x2d
    6996:	9e a7       	std	Y+46, r25	; 0x2e
    6998:	af a7       	std	Y+47, r26	; 0x2f
    699a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    699c:	6d a5       	ldd	r22, Y+45	; 0x2d
    699e:	7e a5       	ldd	r23, Y+46	; 0x2e
    69a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    69a2:	98 a9       	ldd	r25, Y+48	; 0x30
    69a4:	2b ea       	ldi	r18, 0xAB	; 171
    69a6:	3a ea       	ldi	r19, 0xAA	; 170
    69a8:	4a e2       	ldi	r20, 0x2A	; 42
    69aa:	50 e4       	ldi	r21, 0x40	; 64
    69ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69b0:	dc 01       	movw	r26, r24
    69b2:	cb 01       	movw	r24, r22
    69b4:	89 a7       	std	Y+41, r24	; 0x29
    69b6:	9a a7       	std	Y+42, r25	; 0x2a
    69b8:	ab a7       	std	Y+43, r26	; 0x2b
    69ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    69bc:	69 a5       	ldd	r22, Y+41	; 0x29
    69be:	7a a5       	ldd	r23, Y+42	; 0x2a
    69c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    69c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	40 e8       	ldi	r20, 0x80	; 128
    69ca:	5f e3       	ldi	r21, 0x3F	; 63
    69cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    69d0:	88 23       	and	r24, r24
    69d2:	1c f4       	brge	.+6      	; 0x69da <LCD_GoTo+0x7a>
		__ticks = 1;
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	88 a7       	std	Y+40, r24	; 0x28
    69d8:	91 c0       	rjmp	.+290    	; 0x6afc <LCD_GoTo+0x19c>
	else if (__tmp > 255)
    69da:	69 a5       	ldd	r22, Y+41	; 0x29
    69dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    69de:	8b a5       	ldd	r24, Y+43	; 0x2b
    69e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    69e2:	20 e0       	ldi	r18, 0x00	; 0
    69e4:	30 e0       	ldi	r19, 0x00	; 0
    69e6:	4f e7       	ldi	r20, 0x7F	; 127
    69e8:	53 e4       	ldi	r21, 0x43	; 67
    69ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    69ee:	18 16       	cp	r1, r24
    69f0:	0c f0       	brlt	.+2      	; 0x69f4 <LCD_GoTo+0x94>
    69f2:	7b c0       	rjmp	.+246    	; 0x6aea <LCD_GoTo+0x18a>
	{
		_delay_ms(__us / 1000.0);
    69f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    69f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    69f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    69fa:	98 a9       	ldd	r25, Y+48	; 0x30
    69fc:	20 e0       	ldi	r18, 0x00	; 0
    69fe:	30 e0       	ldi	r19, 0x00	; 0
    6a00:	4a e7       	ldi	r20, 0x7A	; 122
    6a02:	54 e4       	ldi	r21, 0x44	; 68
    6a04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6a08:	dc 01       	movw	r26, r24
    6a0a:	cb 01       	movw	r24, r22
    6a0c:	8c a3       	std	Y+36, r24	; 0x24
    6a0e:	9d a3       	std	Y+37, r25	; 0x25
    6a10:	ae a3       	std	Y+38, r26	; 0x26
    6a12:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a14:	6c a1       	ldd	r22, Y+36	; 0x24
    6a16:	7d a1       	ldd	r23, Y+37	; 0x25
    6a18:	8e a1       	ldd	r24, Y+38	; 0x26
    6a1a:	9f a1       	ldd	r25, Y+39	; 0x27
    6a1c:	20 e0       	ldi	r18, 0x00	; 0
    6a1e:	30 e0       	ldi	r19, 0x00	; 0
    6a20:	4a ef       	ldi	r20, 0xFA	; 250
    6a22:	54 e4       	ldi	r21, 0x44	; 68
    6a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a28:	dc 01       	movw	r26, r24
    6a2a:	cb 01       	movw	r24, r22
    6a2c:	88 a3       	std	Y+32, r24	; 0x20
    6a2e:	99 a3       	std	Y+33, r25	; 0x21
    6a30:	aa a3       	std	Y+34, r26	; 0x22
    6a32:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    6a34:	68 a1       	ldd	r22, Y+32	; 0x20
    6a36:	79 a1       	ldd	r23, Y+33	; 0x21
    6a38:	8a a1       	ldd	r24, Y+34	; 0x22
    6a3a:	9b a1       	ldd	r25, Y+35	; 0x23
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	30 e0       	ldi	r19, 0x00	; 0
    6a40:	40 e8       	ldi	r20, 0x80	; 128
    6a42:	5f e3       	ldi	r21, 0x3F	; 63
    6a44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a48:	88 23       	and	r24, r24
    6a4a:	2c f4       	brge	.+10     	; 0x6a56 <LCD_GoTo+0xf6>
		__ticks = 1;
    6a4c:	81 e0       	ldi	r24, 0x01	; 1
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	9f 8f       	std	Y+31, r25	; 0x1f
    6a52:	8e 8f       	std	Y+30, r24	; 0x1e
    6a54:	3f c0       	rjmp	.+126    	; 0x6ad4 <LCD_GoTo+0x174>
	else if (__tmp > 65535)
    6a56:	68 a1       	ldd	r22, Y+32	; 0x20
    6a58:	79 a1       	ldd	r23, Y+33	; 0x21
    6a5a:	8a a1       	ldd	r24, Y+34	; 0x22
    6a5c:	9b a1       	ldd	r25, Y+35	; 0x23
    6a5e:	20 e0       	ldi	r18, 0x00	; 0
    6a60:	3f ef       	ldi	r19, 0xFF	; 255
    6a62:	4f e7       	ldi	r20, 0x7F	; 127
    6a64:	57 e4       	ldi	r21, 0x47	; 71
    6a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a6a:	18 16       	cp	r1, r24
    6a6c:	4c f5       	brge	.+82     	; 0x6ac0 <LCD_GoTo+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a6e:	6c a1       	ldd	r22, Y+36	; 0x24
    6a70:	7d a1       	ldd	r23, Y+37	; 0x25
    6a72:	8e a1       	ldd	r24, Y+38	; 0x26
    6a74:	9f a1       	ldd	r25, Y+39	; 0x27
    6a76:	20 e0       	ldi	r18, 0x00	; 0
    6a78:	30 e0       	ldi	r19, 0x00	; 0
    6a7a:	40 e2       	ldi	r20, 0x20	; 32
    6a7c:	51 e4       	ldi	r21, 0x41	; 65
    6a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a82:	dc 01       	movw	r26, r24
    6a84:	cb 01       	movw	r24, r22
    6a86:	bc 01       	movw	r22, r24
    6a88:	cd 01       	movw	r24, r26
    6a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a8e:	dc 01       	movw	r26, r24
    6a90:	cb 01       	movw	r24, r22
    6a92:	9f 8f       	std	Y+31, r25	; 0x1f
    6a94:	8e 8f       	std	Y+30, r24	; 0x1e
    6a96:	0f c0       	rjmp	.+30     	; 0x6ab6 <LCD_GoTo+0x156>
    6a98:	88 ec       	ldi	r24, 0xC8	; 200
    6a9a:	90 e0       	ldi	r25, 0x00	; 0
    6a9c:	9d 8f       	std	Y+29, r25	; 0x1d
    6a9e:	8c 8f       	std	Y+28, r24	; 0x1c
    6aa0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6aa2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6aa4:	01 97       	sbiw	r24, 0x01	; 1
    6aa6:	f1 f7       	brne	.-4      	; 0x6aa4 <LCD_GoTo+0x144>
    6aa8:	9d 8f       	std	Y+29, r25	; 0x1d
    6aaa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6aac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6aae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6ab0:	01 97       	sbiw	r24, 0x01	; 1
    6ab2:	9f 8f       	std	Y+31, r25	; 0x1f
    6ab4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ab6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6ab8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6aba:	00 97       	sbiw	r24, 0x00	; 0
    6abc:	69 f7       	brne	.-38     	; 0x6a98 <LCD_GoTo+0x138>
    6abe:	fb c0       	rjmp	.+502    	; 0x6cb6 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ac0:	68 a1       	ldd	r22, Y+32	; 0x20
    6ac2:	79 a1       	ldd	r23, Y+33	; 0x21
    6ac4:	8a a1       	ldd	r24, Y+34	; 0x22
    6ac6:	9b a1       	ldd	r25, Y+35	; 0x23
    6ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6acc:	dc 01       	movw	r26, r24
    6ace:	cb 01       	movw	r24, r22
    6ad0:	9f 8f       	std	Y+31, r25	; 0x1f
    6ad2:	8e 8f       	std	Y+30, r24	; 0x1e
    6ad4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6ad6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6ad8:	9b 8f       	std	Y+27, r25	; 0x1b
    6ada:	8a 8f       	std	Y+26, r24	; 0x1a
    6adc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6ade:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6ae0:	01 97       	sbiw	r24, 0x01	; 1
    6ae2:	f1 f7       	brne	.-4      	; 0x6ae0 <LCD_GoTo+0x180>
    6ae4:	9b 8f       	std	Y+27, r25	; 0x1b
    6ae6:	8a 8f       	std	Y+26, r24	; 0x1a
    6ae8:	e6 c0       	rjmp	.+460    	; 0x6cb6 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6aea:	69 a5       	ldd	r22, Y+41	; 0x29
    6aec:	7a a5       	ldd	r23, Y+42	; 0x2a
    6aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    6af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    6af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6af6:	dc 01       	movw	r26, r24
    6af8:	cb 01       	movw	r24, r22
    6afa:	88 a7       	std	Y+40, r24	; 0x28
    6afc:	88 a5       	ldd	r24, Y+40	; 0x28
    6afe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6b00:	89 8d       	ldd	r24, Y+25	; 0x19
    6b02:	8a 95       	dec	r24
    6b04:	f1 f7       	brne	.-4      	; 0x6b02 <LCD_GoTo+0x1a2>
    6b06:	89 8f       	std	Y+25, r24	; 0x19
    6b08:	d6 c0       	rjmp	.+428    	; 0x6cb6 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 1)
    6b0a:	8a a9       	ldd	r24, Y+50	; 0x32
    6b0c:	81 30       	cpi	r24, 0x01	; 1
    6b0e:	09 f0       	breq	.+2      	; 0x6b12 <LCD_GoTo+0x1b2>
    6b10:	c3 c0       	rjmp	.+390    	; 0x6c98 <LCD_GoTo+0x338>
    {
        LCD_WriteCommand(0xC0 + Copy_u8Cell);
    6b12:	8b a9       	ldd	r24, Y+51	; 0x33
    6b14:	80 54       	subi	r24, 0x40	; 64
    6b16:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>
    6b1a:	80 e0       	ldi	r24, 0x00	; 0
    6b1c:	90 e0       	ldi	r25, 0x00	; 0
    6b1e:	a0 e2       	ldi	r26, 0x20	; 32
    6b20:	b2 e4       	ldi	r27, 0x42	; 66
    6b22:	8d 8b       	std	Y+21, r24	; 0x15
    6b24:	9e 8b       	std	Y+22, r25	; 0x16
    6b26:	af 8b       	std	Y+23, r26	; 0x17
    6b28:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    6b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    6b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    6b30:	98 8d       	ldd	r25, Y+24	; 0x18
    6b32:	2b ea       	ldi	r18, 0xAB	; 171
    6b34:	3a ea       	ldi	r19, 0xAA	; 170
    6b36:	4a e2       	ldi	r20, 0x2A	; 42
    6b38:	50 e4       	ldi	r21, 0x40	; 64
    6b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b3e:	dc 01       	movw	r26, r24
    6b40:	cb 01       	movw	r24, r22
    6b42:	89 8b       	std	Y+17, r24	; 0x11
    6b44:	9a 8b       	std	Y+18, r25	; 0x12
    6b46:	ab 8b       	std	Y+19, r26	; 0x13
    6b48:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6b4a:	69 89       	ldd	r22, Y+17	; 0x11
    6b4c:	7a 89       	ldd	r23, Y+18	; 0x12
    6b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b50:	9c 89       	ldd	r25, Y+20	; 0x14
    6b52:	20 e0       	ldi	r18, 0x00	; 0
    6b54:	30 e0       	ldi	r19, 0x00	; 0
    6b56:	40 e8       	ldi	r20, 0x80	; 128
    6b58:	5f e3       	ldi	r21, 0x3F	; 63
    6b5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b5e:	88 23       	and	r24, r24
    6b60:	1c f4       	brge	.+6      	; 0x6b68 <LCD_GoTo+0x208>
		__ticks = 1;
    6b62:	81 e0       	ldi	r24, 0x01	; 1
    6b64:	88 8b       	std	Y+16, r24	; 0x10
    6b66:	91 c0       	rjmp	.+290    	; 0x6c8a <LCD_GoTo+0x32a>
	else if (__tmp > 255)
    6b68:	69 89       	ldd	r22, Y+17	; 0x11
    6b6a:	7a 89       	ldd	r23, Y+18	; 0x12
    6b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    6b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    6b70:	20 e0       	ldi	r18, 0x00	; 0
    6b72:	30 e0       	ldi	r19, 0x00	; 0
    6b74:	4f e7       	ldi	r20, 0x7F	; 127
    6b76:	53 e4       	ldi	r21, 0x43	; 67
    6b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b7c:	18 16       	cp	r1, r24
    6b7e:	0c f0       	brlt	.+2      	; 0x6b82 <LCD_GoTo+0x222>
    6b80:	7b c0       	rjmp	.+246    	; 0x6c78 <LCD_GoTo+0x318>
	{
		_delay_ms(__us / 1000.0);
    6b82:	6d 89       	ldd	r22, Y+21	; 0x15
    6b84:	7e 89       	ldd	r23, Y+22	; 0x16
    6b86:	8f 89       	ldd	r24, Y+23	; 0x17
    6b88:	98 8d       	ldd	r25, Y+24	; 0x18
    6b8a:	20 e0       	ldi	r18, 0x00	; 0
    6b8c:	30 e0       	ldi	r19, 0x00	; 0
    6b8e:	4a e7       	ldi	r20, 0x7A	; 122
    6b90:	54 e4       	ldi	r21, 0x44	; 68
    6b92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6b96:	dc 01       	movw	r26, r24
    6b98:	cb 01       	movw	r24, r22
    6b9a:	8c 87       	std	Y+12, r24	; 0x0c
    6b9c:	9d 87       	std	Y+13, r25	; 0x0d
    6b9e:	ae 87       	std	Y+14, r26	; 0x0e
    6ba0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ba2:	6c 85       	ldd	r22, Y+12	; 0x0c
    6ba4:	7d 85       	ldd	r23, Y+13	; 0x0d
    6ba6:	8e 85       	ldd	r24, Y+14	; 0x0e
    6ba8:	9f 85       	ldd	r25, Y+15	; 0x0f
    6baa:	20 e0       	ldi	r18, 0x00	; 0
    6bac:	30 e0       	ldi	r19, 0x00	; 0
    6bae:	4a ef       	ldi	r20, 0xFA	; 250
    6bb0:	54 e4       	ldi	r21, 0x44	; 68
    6bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	cb 01       	movw	r24, r22
    6bba:	88 87       	std	Y+8, r24	; 0x08
    6bbc:	99 87       	std	Y+9, r25	; 0x09
    6bbe:	aa 87       	std	Y+10, r26	; 0x0a
    6bc0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6bc2:	68 85       	ldd	r22, Y+8	; 0x08
    6bc4:	79 85       	ldd	r23, Y+9	; 0x09
    6bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    6bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    6bca:	20 e0       	ldi	r18, 0x00	; 0
    6bcc:	30 e0       	ldi	r19, 0x00	; 0
    6bce:	40 e8       	ldi	r20, 0x80	; 128
    6bd0:	5f e3       	ldi	r21, 0x3F	; 63
    6bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6bd6:	88 23       	and	r24, r24
    6bd8:	2c f4       	brge	.+10     	; 0x6be4 <LCD_GoTo+0x284>
		__ticks = 1;
    6bda:	81 e0       	ldi	r24, 0x01	; 1
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	9f 83       	std	Y+7, r25	; 0x07
    6be0:	8e 83       	std	Y+6, r24	; 0x06
    6be2:	3f c0       	rjmp	.+126    	; 0x6c62 <LCD_GoTo+0x302>
	else if (__tmp > 65535)
    6be4:	68 85       	ldd	r22, Y+8	; 0x08
    6be6:	79 85       	ldd	r23, Y+9	; 0x09
    6be8:	8a 85       	ldd	r24, Y+10	; 0x0a
    6bea:	9b 85       	ldd	r25, Y+11	; 0x0b
    6bec:	20 e0       	ldi	r18, 0x00	; 0
    6bee:	3f ef       	ldi	r19, 0xFF	; 255
    6bf0:	4f e7       	ldi	r20, 0x7F	; 127
    6bf2:	57 e4       	ldi	r21, 0x47	; 71
    6bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6bf8:	18 16       	cp	r1, r24
    6bfa:	4c f5       	brge	.+82     	; 0x6c4e <LCD_GoTo+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bfc:	6c 85       	ldd	r22, Y+12	; 0x0c
    6bfe:	7d 85       	ldd	r23, Y+13	; 0x0d
    6c00:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c02:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	40 e2       	ldi	r20, 0x20	; 32
    6c0a:	51 e4       	ldi	r21, 0x41	; 65
    6c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c10:	dc 01       	movw	r26, r24
    6c12:	cb 01       	movw	r24, r22
    6c14:	bc 01       	movw	r22, r24
    6c16:	cd 01       	movw	r24, r26
    6c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c1c:	dc 01       	movw	r26, r24
    6c1e:	cb 01       	movw	r24, r22
    6c20:	9f 83       	std	Y+7, r25	; 0x07
    6c22:	8e 83       	std	Y+6, r24	; 0x06
    6c24:	0f c0       	rjmp	.+30     	; 0x6c44 <LCD_GoTo+0x2e4>
    6c26:	88 ec       	ldi	r24, 0xC8	; 200
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	9d 83       	std	Y+5, r25	; 0x05
    6c2c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    6c30:	9d 81       	ldd	r25, Y+5	; 0x05
    6c32:	01 97       	sbiw	r24, 0x01	; 1
    6c34:	f1 f7       	brne	.-4      	; 0x6c32 <LCD_GoTo+0x2d2>
    6c36:	9d 83       	std	Y+5, r25	; 0x05
    6c38:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    6c3c:	9f 81       	ldd	r25, Y+7	; 0x07
    6c3e:	01 97       	sbiw	r24, 0x01	; 1
    6c40:	9f 83       	std	Y+7, r25	; 0x07
    6c42:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c44:	8e 81       	ldd	r24, Y+6	; 0x06
    6c46:	9f 81       	ldd	r25, Y+7	; 0x07
    6c48:	00 97       	sbiw	r24, 0x00	; 0
    6c4a:	69 f7       	brne	.-38     	; 0x6c26 <LCD_GoTo+0x2c6>
    6c4c:	34 c0       	rjmp	.+104    	; 0x6cb6 <LCD_GoTo+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c4e:	68 85       	ldd	r22, Y+8	; 0x08
    6c50:	79 85       	ldd	r23, Y+9	; 0x09
    6c52:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c54:	9b 85       	ldd	r25, Y+11	; 0x0b
    6c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c5a:	dc 01       	movw	r26, r24
    6c5c:	cb 01       	movw	r24, r22
    6c5e:	9f 83       	std	Y+7, r25	; 0x07
    6c60:	8e 83       	std	Y+6, r24	; 0x06
    6c62:	8e 81       	ldd	r24, Y+6	; 0x06
    6c64:	9f 81       	ldd	r25, Y+7	; 0x07
    6c66:	9b 83       	std	Y+3, r25	; 0x03
    6c68:	8a 83       	std	Y+2, r24	; 0x02
    6c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    6c6e:	01 97       	sbiw	r24, 0x01	; 1
    6c70:	f1 f7       	brne	.-4      	; 0x6c6e <LCD_GoTo+0x30e>
    6c72:	9b 83       	std	Y+3, r25	; 0x03
    6c74:	8a 83       	std	Y+2, r24	; 0x02
    6c76:	1f c0       	rjmp	.+62     	; 0x6cb6 <LCD_GoTo+0x356>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6c78:	69 89       	ldd	r22, Y+17	; 0x11
    6c7a:	7a 89       	ldd	r23, Y+18	; 0x12
    6c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    6c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    6c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c84:	dc 01       	movw	r26, r24
    6c86:	cb 01       	movw	r24, r22
    6c88:	88 8b       	std	Y+16, r24	; 0x10
    6c8a:	88 89       	ldd	r24, Y+16	; 0x10
    6c8c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6c8e:	89 81       	ldd	r24, Y+1	; 0x01
    6c90:	8a 95       	dec	r24
    6c92:	f1 f7       	brne	.-4      	; 0x6c90 <LCD_GoTo+0x330>
    6c94:	89 83       	std	Y+1, r24	; 0x01
    6c96:	0f c0       	rjmp	.+30     	; 0x6cb6 <LCD_GoTo+0x356>
        _delay_us(40);
    }
    else if(Copy_u8Line == 2)
    6c98:	8a a9       	ldd	r24, Y+50	; 0x32
    6c9a:	82 30       	cpi	r24, 0x02	; 2
    6c9c:	29 f4       	brne	.+10     	; 0x6ca8 <LCD_GoTo+0x348>
    {
        LCD_WriteCommand(0x94 + Copy_u8Cell);
    6c9e:	8b a9       	ldd	r24, Y+51	; 0x33
    6ca0:	8c 56       	subi	r24, 0x6C	; 108
    6ca2:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>
    6ca6:	07 c0       	rjmp	.+14     	; 0x6cb6 <LCD_GoTo+0x356>
    }
    else if(Copy_u8Line == 3)
    6ca8:	8a a9       	ldd	r24, Y+50	; 0x32
    6caa:	83 30       	cpi	r24, 0x03	; 3
    6cac:	21 f4       	brne	.+8      	; 0x6cb6 <LCD_GoTo+0x356>
    {
        LCD_WriteCommand(0xD4 + Copy_u8Cell);
    6cae:	8b a9       	ldd	r24, Y+51	; 0x33
    6cb0:	8c 52       	subi	r24, 0x2C	; 44
    6cb2:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>
    }

    return Ret;
    6cb6:	89 a9       	ldd	r24, Y+49	; 0x31
}
    6cb8:	e3 96       	adiw	r28, 0x33	; 51
    6cba:	0f b6       	in	r0, 0x3f	; 63
    6cbc:	f8 94       	cli
    6cbe:	de bf       	out	0x3e, r29	; 62
    6cc0:	0f be       	out	0x3f, r0	; 63
    6cc2:	cd bf       	out	0x3d, r28	; 61
    6cc4:	cf 91       	pop	r28
    6cc6:	df 91       	pop	r29
    6cc8:	08 95       	ret

00006cca <LCD_ClearDisplay>:
void LCD_ClearDisplay(void)
{
    6cca:	df 93       	push	r29
    6ccc:	cf 93       	push	r28
    6cce:	cd b7       	in	r28, 0x3d	; 61
    6cd0:	de b7       	in	r29, 0x3e	; 62
    6cd2:	2e 97       	sbiw	r28, 0x0e	; 14
    6cd4:	0f b6       	in	r0, 0x3f	; 63
    6cd6:	f8 94       	cli
    6cd8:	de bf       	out	0x3e, r29	; 62
    6cda:	0f be       	out	0x3f, r0	; 63
    6cdc:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(CLEAR_SCREEN);
    6cde:	81 e0       	ldi	r24, 0x01	; 1
    6ce0:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LCD_WriteCommand>
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	a0 e8       	ldi	r26, 0x80	; 128
    6cea:	bf e3       	ldi	r27, 0x3F	; 63
    6cec:	8b 87       	std	Y+11, r24	; 0x0b
    6cee:	9c 87       	std	Y+12, r25	; 0x0c
    6cf0:	ad 87       	std	Y+13, r26	; 0x0d
    6cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cfc:	20 e0       	ldi	r18, 0x00	; 0
    6cfe:	30 e0       	ldi	r19, 0x00	; 0
    6d00:	4a ef       	ldi	r20, 0xFA	; 250
    6d02:	54 e4       	ldi	r21, 0x44	; 68
    6d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d08:	dc 01       	movw	r26, r24
    6d0a:	cb 01       	movw	r24, r22
    6d0c:	8f 83       	std	Y+7, r24	; 0x07
    6d0e:	98 87       	std	Y+8, r25	; 0x08
    6d10:	a9 87       	std	Y+9, r26	; 0x09
    6d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d14:	6f 81       	ldd	r22, Y+7	; 0x07
    6d16:	78 85       	ldd	r23, Y+8	; 0x08
    6d18:	89 85       	ldd	r24, Y+9	; 0x09
    6d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d1c:	20 e0       	ldi	r18, 0x00	; 0
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	40 e8       	ldi	r20, 0x80	; 128
    6d22:	5f e3       	ldi	r21, 0x3F	; 63
    6d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d28:	88 23       	and	r24, r24
    6d2a:	2c f4       	brge	.+10     	; 0x6d36 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	9e 83       	std	Y+6, r25	; 0x06
    6d32:	8d 83       	std	Y+5, r24	; 0x05
    6d34:	3f c0       	rjmp	.+126    	; 0x6db4 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    6d36:	6f 81       	ldd	r22, Y+7	; 0x07
    6d38:	78 85       	ldd	r23, Y+8	; 0x08
    6d3a:	89 85       	ldd	r24, Y+9	; 0x09
    6d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d3e:	20 e0       	ldi	r18, 0x00	; 0
    6d40:	3f ef       	ldi	r19, 0xFF	; 255
    6d42:	4f e7       	ldi	r20, 0x7F	; 127
    6d44:	57 e4       	ldi	r21, 0x47	; 71
    6d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d4a:	18 16       	cp	r1, r24
    6d4c:	4c f5       	brge	.+82     	; 0x6da0 <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	40 e2       	ldi	r20, 0x20	; 32
    6d5c:	51 e4       	ldi	r21, 0x41	; 65
    6d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d62:	dc 01       	movw	r26, r24
    6d64:	cb 01       	movw	r24, r22
    6d66:	bc 01       	movw	r22, r24
    6d68:	cd 01       	movw	r24, r26
    6d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d6e:	dc 01       	movw	r26, r24
    6d70:	cb 01       	movw	r24, r22
    6d72:	9e 83       	std	Y+6, r25	; 0x06
    6d74:	8d 83       	std	Y+5, r24	; 0x05
    6d76:	0f c0       	rjmp	.+30     	; 0x6d96 <LCD_ClearDisplay+0xcc>
    6d78:	88 ec       	ldi	r24, 0xC8	; 200
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	9c 83       	std	Y+4, r25	; 0x04
    6d7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6d80:	8b 81       	ldd	r24, Y+3	; 0x03
    6d82:	9c 81       	ldd	r25, Y+4	; 0x04
    6d84:	01 97       	sbiw	r24, 0x01	; 1
    6d86:	f1 f7       	brne	.-4      	; 0x6d84 <LCD_ClearDisplay+0xba>
    6d88:	9c 83       	std	Y+4, r25	; 0x04
    6d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    6d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    6d90:	01 97       	sbiw	r24, 0x01	; 1
    6d92:	9e 83       	std	Y+6, r25	; 0x06
    6d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d96:	8d 81       	ldd	r24, Y+5	; 0x05
    6d98:	9e 81       	ldd	r25, Y+6	; 0x06
    6d9a:	00 97       	sbiw	r24, 0x00	; 0
    6d9c:	69 f7       	brne	.-38     	; 0x6d78 <LCD_ClearDisplay+0xae>
    6d9e:	14 c0       	rjmp	.+40     	; 0x6dc8 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6da0:	6f 81       	ldd	r22, Y+7	; 0x07
    6da2:	78 85       	ldd	r23, Y+8	; 0x08
    6da4:	89 85       	ldd	r24, Y+9	; 0x09
    6da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dac:	dc 01       	movw	r26, r24
    6dae:	cb 01       	movw	r24, r22
    6db0:	9e 83       	std	Y+6, r25	; 0x06
    6db2:	8d 83       	std	Y+5, r24	; 0x05
    6db4:	8d 81       	ldd	r24, Y+5	; 0x05
    6db6:	9e 81       	ldd	r25, Y+6	; 0x06
    6db8:	9a 83       	std	Y+2, r25	; 0x02
    6dba:	89 83       	std	Y+1, r24	; 0x01
    6dbc:	89 81       	ldd	r24, Y+1	; 0x01
    6dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    6dc0:	01 97       	sbiw	r24, 0x01	; 1
    6dc2:	f1 f7       	brne	.-4      	; 0x6dc0 <LCD_ClearDisplay+0xf6>
    6dc4:	9a 83       	std	Y+2, r25	; 0x02
    6dc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    6dc8:	2e 96       	adiw	r28, 0x0e	; 14
    6dca:	0f b6       	in	r0, 0x3f	; 63
    6dcc:	f8 94       	cli
    6dce:	de bf       	out	0x3e, r29	; 62
    6dd0:	0f be       	out	0x3f, r0	; 63
    6dd2:	cd bf       	out	0x3d, r28	; 61
    6dd4:	cf 91       	pop	r28
    6dd6:	df 91       	pop	r29
    6dd8:	08 95       	ret

00006dda <LCD_WriteChar>:
u8	LCD_WriteChar(u8 Copy_u8Char)
{
    6dda:	df 93       	push	r29
    6ddc:	cf 93       	push	r28
    6dde:	00 d0       	rcall	.+0      	; 0x6de0 <LCD_WriteChar+0x6>
    6de0:	cd b7       	in	r28, 0x3d	; 61
    6de2:	de b7       	in	r29, 0x3e	; 62
    6de4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = E_OK;
    6de6:	81 e0       	ldi	r24, 0x01	; 1
    6de8:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(Copy_u8Char);
    6dea:	8a 81       	ldd	r24, Y+2	; 0x02
    6dec:	0e 94 3c 32 	call	0x6478	; 0x6478 <LCD_WriteData>
	return Ret;
    6df0:	89 81       	ldd	r24, Y+1	; 0x01
}
    6df2:	0f 90       	pop	r0
    6df4:	0f 90       	pop	r0
    6df6:	cf 91       	pop	r28
    6df8:	df 91       	pop	r29
    6dfa:	08 95       	ret

00006dfc <LCD_WriteNumber>:
s32 LCD_WriteNumber(s32 Copy_s32Num)
{
    6dfc:	0f 93       	push	r16
    6dfe:	1f 93       	push	r17
    6e00:	df 93       	push	r29
    6e02:	cf 93       	push	r28
    6e04:	cd b7       	in	r28, 0x3d	; 61
    6e06:	de b7       	in	r29, 0x3e	; 62
    6e08:	c5 59       	subi	r28, 0x95	; 149
    6e0a:	d0 40       	sbci	r29, 0x00	; 0
    6e0c:	0f b6       	in	r0, 0x3f	; 63
    6e0e:	f8 94       	cli
    6e10:	de bf       	out	0x3e, r29	; 62
    6e12:	0f be       	out	0x3f, r0	; 63
    6e14:	cd bf       	out	0x3d, r28	; 61
    6e16:	fe 01       	movw	r30, r28
    6e18:	e2 57       	subi	r30, 0x72	; 114
    6e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e1c:	60 83       	st	Z, r22
    6e1e:	71 83       	std	Z+1, r23	; 0x01
    6e20:	82 83       	std	Z+2, r24	; 0x02
    6e22:	93 83       	std	Z+3, r25	; 0x03
	u8 Ret = E_OK;
    6e24:	81 e0       	ldi	r24, 0x01	; 1
    6e26:	89 a7       	std	Y+41, r24	; 0x29

	u8 iterator = 0 ,Rem = 0;
    6e28:	18 a6       	std	Y+40, r1	; 0x28
    6e2a:	1f a2       	std	Y+39, r1	; 0x27
	u8 Str[100];

	/* if the user send 0 */
	if(Copy_s32Num == 0)
    6e2c:	fe 01       	movw	r30, r28
    6e2e:	e2 57       	subi	r30, 0x72	; 114
    6e30:	ff 4f       	sbci	r31, 0xFF	; 255
    6e32:	80 81       	ld	r24, Z
    6e34:	91 81       	ldd	r25, Z+1	; 0x01
    6e36:	a2 81       	ldd	r26, Z+2	; 0x02
    6e38:	b3 81       	ldd	r27, Z+3	; 0x03
    6e3a:	00 97       	sbiw	r24, 0x00	; 0
    6e3c:	a1 05       	cpc	r26, r1
    6e3e:	b1 05       	cpc	r27, r1
    6e40:	09 f0       	breq	.+2      	; 0x6e44 <LCD_WriteNumber+0x48>
    6e42:	83 c0       	rjmp	.+262    	; 0x6f4a <LCD_WriteNumber+0x14e>
	{
		LCD_WriteChar('0');
    6e44:	80 e3       	ldi	r24, 0x30	; 48
    6e46:	0e 94 ed 36 	call	0x6dda	; 0x6dda <LCD_WriteChar>
    6e4a:	80 e0       	ldi	r24, 0x00	; 0
    6e4c:	90 e0       	ldi	r25, 0x00	; 0
    6e4e:	a0 e8       	ldi	r26, 0x80	; 128
    6e50:	bf e3       	ldi	r27, 0x3F	; 63
    6e52:	8b a3       	std	Y+35, r24	; 0x23
    6e54:	9c a3       	std	Y+36, r25	; 0x24
    6e56:	ad a3       	std	Y+37, r26	; 0x25
    6e58:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    6e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    6e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    6e60:	9e a1       	ldd	r25, Y+38	; 0x26
    6e62:	20 e0       	ldi	r18, 0x00	; 0
    6e64:	30 e0       	ldi	r19, 0x00	; 0
    6e66:	4a ef       	ldi	r20, 0xFA	; 250
    6e68:	54 e4       	ldi	r21, 0x44	; 68
    6e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e6e:	dc 01       	movw	r26, r24
    6e70:	cb 01       	movw	r24, r22
    6e72:	8f 8f       	std	Y+31, r24	; 0x1f
    6e74:	98 a3       	std	Y+32, r25	; 0x20
    6e76:	a9 a3       	std	Y+33, r26	; 0x21
    6e78:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    6e7a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6e7c:	78 a1       	ldd	r23, Y+32	; 0x20
    6e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    6e80:	9a a1       	ldd	r25, Y+34	; 0x22
    6e82:	20 e0       	ldi	r18, 0x00	; 0
    6e84:	30 e0       	ldi	r19, 0x00	; 0
    6e86:	40 e8       	ldi	r20, 0x80	; 128
    6e88:	5f e3       	ldi	r21, 0x3F	; 63
    6e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e8e:	88 23       	and	r24, r24
    6e90:	2c f4       	brge	.+10     	; 0x6e9c <LCD_WriteNumber+0xa0>
		__ticks = 1;
    6e92:	81 e0       	ldi	r24, 0x01	; 1
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	9e 8f       	std	Y+30, r25	; 0x1e
    6e98:	8d 8f       	std	Y+29, r24	; 0x1d
    6e9a:	3f c0       	rjmp	.+126    	; 0x6f1a <LCD_WriteNumber+0x11e>
	else if (__tmp > 65535)
    6e9c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6e9e:	78 a1       	ldd	r23, Y+32	; 0x20
    6ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    6ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    6ea4:	20 e0       	ldi	r18, 0x00	; 0
    6ea6:	3f ef       	ldi	r19, 0xFF	; 255
    6ea8:	4f e7       	ldi	r20, 0x7F	; 127
    6eaa:	57 e4       	ldi	r21, 0x47	; 71
    6eac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6eb0:	18 16       	cp	r1, r24
    6eb2:	4c f5       	brge	.+82     	; 0x6f06 <LCD_WriteNumber+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    6eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    6eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    6eba:	9e a1       	ldd	r25, Y+38	; 0x26
    6ebc:	20 e0       	ldi	r18, 0x00	; 0
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	40 e2       	ldi	r20, 0x20	; 32
    6ec2:	51 e4       	ldi	r21, 0x41	; 65
    6ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ec8:	dc 01       	movw	r26, r24
    6eca:	cb 01       	movw	r24, r22
    6ecc:	bc 01       	movw	r22, r24
    6ece:	cd 01       	movw	r24, r26
    6ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ed4:	dc 01       	movw	r26, r24
    6ed6:	cb 01       	movw	r24, r22
    6ed8:	9e 8f       	std	Y+30, r25	; 0x1e
    6eda:	8d 8f       	std	Y+29, r24	; 0x1d
    6edc:	0f c0       	rjmp	.+30     	; 0x6efc <LCD_WriteNumber+0x100>
    6ede:	88 ec       	ldi	r24, 0xC8	; 200
    6ee0:	90 e0       	ldi	r25, 0x00	; 0
    6ee2:	9c 8f       	std	Y+28, r25	; 0x1c
    6ee4:	8b 8f       	std	Y+27, r24	; 0x1b
    6ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6eea:	01 97       	sbiw	r24, 0x01	; 1
    6eec:	f1 f7       	brne	.-4      	; 0x6eea <LCD_WriteNumber+0xee>
    6eee:	9c 8f       	std	Y+28, r25	; 0x1c
    6ef0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ef4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6ef6:	01 97       	sbiw	r24, 0x01	; 1
    6ef8:	9e 8f       	std	Y+30, r25	; 0x1e
    6efa:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6efe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6f00:	00 97       	sbiw	r24, 0x00	; 0
    6f02:	69 f7       	brne	.-38     	; 0x6ede <LCD_WriteNumber+0xe2>
    6f04:	14 c0       	rjmp	.+40     	; 0x6f2e <LCD_WriteNumber+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6f08:	78 a1       	ldd	r23, Y+32	; 0x20
    6f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    6f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    6f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f12:	dc 01       	movw	r26, r24
    6f14:	cb 01       	movw	r24, r22
    6f16:	9e 8f       	std	Y+30, r25	; 0x1e
    6f18:	8d 8f       	std	Y+29, r24	; 0x1d
    6f1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6f1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6f1e:	9a 8f       	std	Y+26, r25	; 0x1a
    6f20:	89 8f       	std	Y+25, r24	; 0x19
    6f22:	89 8d       	ldd	r24, Y+25	; 0x19
    6f24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6f26:	01 97       	sbiw	r24, 0x01	; 1
    6f28:	f1 f7       	brne	.-4      	; 0x6f26 <LCD_WriteNumber+0x12a>
    6f2a:	9a 8f       	std	Y+26, r25	; 0x1a
    6f2c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(1);
		return Ret;
    6f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    6f30:	28 2f       	mov	r18, r24
    6f32:	30 e0       	ldi	r19, 0x00	; 0
    6f34:	40 e0       	ldi	r20, 0x00	; 0
    6f36:	50 e0       	ldi	r21, 0x00	; 0
    6f38:	ce 56       	subi	r28, 0x6E	; 110
    6f3a:	df 4f       	sbci	r29, 0xFF	; 255
    6f3c:	28 83       	st	Y, r18
    6f3e:	39 83       	std	Y+1, r19	; 0x01
    6f40:	4a 83       	std	Y+2, r20	; 0x02
    6f42:	5b 83       	std	Y+3, r21	; 0x03
    6f44:	c2 59       	subi	r28, 0x92	; 146
    6f46:	d0 40       	sbci	r29, 0x00	; 0
    6f48:	4c c1       	rjmp	.+664    	; 0x71e2 <LCD_WriteNumber+0x3e6>
	}

	/* if the user send negative number */
	if(Copy_s32Num < 0)
    6f4a:	fe 01       	movw	r30, r28
    6f4c:	e2 57       	subi	r30, 0x72	; 114
    6f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f50:	80 81       	ld	r24, Z
    6f52:	91 81       	ldd	r25, Z+1	; 0x01
    6f54:	a2 81       	ldd	r26, Z+2	; 0x02
    6f56:	b3 81       	ldd	r27, Z+3	; 0x03
    6f58:	bb 23       	and	r27, r27
    6f5a:	0c f0       	brlt	.+2      	; 0x6f5e <LCD_WriteNumber+0x162>
    6f5c:	54 c0       	rjmp	.+168    	; 0x7006 <LCD_WriteNumber+0x20a>
	{
		Copy_s32Num *= -1;
    6f5e:	9e 01       	movw	r18, r28
    6f60:	22 57       	subi	r18, 0x72	; 114
    6f62:	3f 4f       	sbci	r19, 0xFF	; 255
    6f64:	fe 01       	movw	r30, r28
    6f66:	e2 57       	subi	r30, 0x72	; 114
    6f68:	ff 4f       	sbci	r31, 0xFF	; 255
    6f6a:	80 81       	ld	r24, Z
    6f6c:	91 81       	ldd	r25, Z+1	; 0x01
    6f6e:	a2 81       	ldd	r26, Z+2	; 0x02
    6f70:	b3 81       	ldd	r27, Z+3	; 0x03
    6f72:	b0 95       	com	r27
    6f74:	a0 95       	com	r26
    6f76:	90 95       	com	r25
    6f78:	81 95       	neg	r24
    6f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f7c:	af 4f       	sbci	r26, 0xFF	; 255
    6f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    6f80:	f9 01       	movw	r30, r18
    6f82:	80 83       	st	Z, r24
    6f84:	91 83       	std	Z+1, r25	; 0x01
    6f86:	a2 83       	std	Z+2, r26	; 0x02
    6f88:	b3 83       	std	Z+3, r27	; 0x03
		LCD_WriteChar('-');
    6f8a:	8d e2       	ldi	r24, 0x2D	; 45
    6f8c:	0e 94 ed 36 	call	0x6dda	; 0x6dda <LCD_WriteChar>
    6f90:	3a c0       	rjmp	.+116    	; 0x7006 <LCD_WriteNumber+0x20a>

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
	{
		/* Getting Remainder "Last Digit" */
		Rem = Copy_s32Num % 10;
    6f92:	fe 01       	movw	r30, r28
    6f94:	e2 57       	subi	r30, 0x72	; 114
    6f96:	ff 4f       	sbci	r31, 0xFF	; 255
    6f98:	80 81       	ld	r24, Z
    6f9a:	91 81       	ldd	r25, Z+1	; 0x01
    6f9c:	a2 81       	ldd	r26, Z+2	; 0x02
    6f9e:	b3 81       	ldd	r27, Z+3	; 0x03
    6fa0:	2a e0       	ldi	r18, 0x0A	; 10
    6fa2:	30 e0       	ldi	r19, 0x00	; 0
    6fa4:	40 e0       	ldi	r20, 0x00	; 0
    6fa6:	50 e0       	ldi	r21, 0x00	; 0
    6fa8:	bc 01       	movw	r22, r24
    6faa:	cd 01       	movw	r24, r26
    6fac:	0e 94 de 3c 	call	0x79bc	; 0x79bc <__divmodsi4>
    6fb0:	dc 01       	movw	r26, r24
    6fb2:	cb 01       	movw	r24, r22
    6fb4:	8f a3       	std	Y+39, r24	; 0x27

		/* Assigning the Last Digit to the String */
		Str[iterator] = Rem + '0';
    6fb6:	88 a5       	ldd	r24, Y+40	; 0x28
    6fb8:	28 2f       	mov	r18, r24
    6fba:	30 e0       	ldi	r19, 0x00	; 0
    6fbc:	8f a1       	ldd	r24, Y+39	; 0x27
    6fbe:	48 2f       	mov	r20, r24
    6fc0:	40 5d       	subi	r20, 0xD0	; 208
    6fc2:	ce 01       	movw	r24, r28
    6fc4:	8a 96       	adiw	r24, 0x2a	; 42
    6fc6:	fc 01       	movw	r30, r24
    6fc8:	e2 0f       	add	r30, r18
    6fca:	f3 1f       	adc	r31, r19
    6fcc:	40 83       	st	Z, r20
		/* Increasing the iterator of the string */
		iterator++;
    6fce:	88 a5       	ldd	r24, Y+40	; 0x28
    6fd0:	8f 5f       	subi	r24, 0xFF	; 255
    6fd2:	88 a7       	std	Y+40, r24	; 0x28

		/* Deleting the last digit from the number */
		Copy_s32Num /= 10;
    6fd4:	8e 01       	movw	r16, r28
    6fd6:	02 57       	subi	r16, 0x72	; 114
    6fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    6fda:	fe 01       	movw	r30, r28
    6fdc:	e2 57       	subi	r30, 0x72	; 114
    6fde:	ff 4f       	sbci	r31, 0xFF	; 255
    6fe0:	80 81       	ld	r24, Z
    6fe2:	91 81       	ldd	r25, Z+1	; 0x01
    6fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    6fe6:	b3 81       	ldd	r27, Z+3	; 0x03
    6fe8:	2a e0       	ldi	r18, 0x0A	; 10
    6fea:	30 e0       	ldi	r19, 0x00	; 0
    6fec:	40 e0       	ldi	r20, 0x00	; 0
    6fee:	50 e0       	ldi	r21, 0x00	; 0
    6ff0:	bc 01       	movw	r22, r24
    6ff2:	cd 01       	movw	r24, r26
    6ff4:	0e 94 de 3c 	call	0x79bc	; 0x79bc <__divmodsi4>
    6ff8:	da 01       	movw	r26, r20
    6ffa:	c9 01       	movw	r24, r18
    6ffc:	f8 01       	movw	r30, r16
    6ffe:	80 83       	st	Z, r24
    7000:	91 83       	std	Z+1, r25	; 0x01
    7002:	a2 83       	std	Z+2, r26	; 0x02
    7004:	b3 83       	std	Z+3, r27	; 0x03
		Copy_s32Num *= -1;
		LCD_WriteChar('-');
	}

	/* Convert the number to string "But Reversed" */
	while(Copy_s32Num > 0)
    7006:	fe 01       	movw	r30, r28
    7008:	e2 57       	subi	r30, 0x72	; 114
    700a:	ff 4f       	sbci	r31, 0xFF	; 255
    700c:	80 81       	ld	r24, Z
    700e:	91 81       	ldd	r25, Z+1	; 0x01
    7010:	a2 81       	ldd	r26, Z+2	; 0x02
    7012:	b3 81       	ldd	r27, Z+3	; 0x03
    7014:	18 16       	cp	r1, r24
    7016:	19 06       	cpc	r1, r25
    7018:	1a 06       	cpc	r1, r26
    701a:	1b 06       	cpc	r1, r27
    701c:	0c f4       	brge	.+2      	; 0x7020 <LCD_WriteNumber+0x224>
    701e:	b9 cf       	rjmp	.-142    	; 0x6f92 <LCD_WriteNumber+0x196>
    7020:	cf c0       	rjmp	.+414    	; 0x71c0 <LCD_WriteNumber+0x3c4>

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
	{
		LCD_WriteChar(Str[iterator-1]);
    7022:	88 a5       	ldd	r24, Y+40	; 0x28
    7024:	88 2f       	mov	r24, r24
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	9c 01       	movw	r18, r24
    702a:	21 50       	subi	r18, 0x01	; 1
    702c:	30 40       	sbci	r19, 0x00	; 0
    702e:	ce 01       	movw	r24, r28
    7030:	8a 96       	adiw	r24, 0x2a	; 42
    7032:	fc 01       	movw	r30, r24
    7034:	e2 0f       	add	r30, r18
    7036:	f3 1f       	adc	r31, r19
    7038:	80 81       	ld	r24, Z
    703a:	0e 94 ed 36 	call	0x6dda	; 0x6dda <LCD_WriteChar>
    703e:	80 e0       	ldi	r24, 0x00	; 0
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	a0 e8       	ldi	r26, 0x80	; 128
    7044:	bf e3       	ldi	r27, 0x3F	; 63
    7046:	8d 8b       	std	Y+21, r24	; 0x15
    7048:	9e 8b       	std	Y+22, r25	; 0x16
    704a:	af 8b       	std	Y+23, r26	; 0x17
    704c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    704e:	6d 89       	ldd	r22, Y+21	; 0x15
    7050:	7e 89       	ldd	r23, Y+22	; 0x16
    7052:	8f 89       	ldd	r24, Y+23	; 0x17
    7054:	98 8d       	ldd	r25, Y+24	; 0x18
    7056:	2b ea       	ldi	r18, 0xAB	; 171
    7058:	3a ea       	ldi	r19, 0xAA	; 170
    705a:	4a e2       	ldi	r20, 0x2A	; 42
    705c:	50 e4       	ldi	r21, 0x40	; 64
    705e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7062:	dc 01       	movw	r26, r24
    7064:	cb 01       	movw	r24, r22
    7066:	89 8b       	std	Y+17, r24	; 0x11
    7068:	9a 8b       	std	Y+18, r25	; 0x12
    706a:	ab 8b       	std	Y+19, r26	; 0x13
    706c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    706e:	69 89       	ldd	r22, Y+17	; 0x11
    7070:	7a 89       	ldd	r23, Y+18	; 0x12
    7072:	8b 89       	ldd	r24, Y+19	; 0x13
    7074:	9c 89       	ldd	r25, Y+20	; 0x14
    7076:	20 e0       	ldi	r18, 0x00	; 0
    7078:	30 e0       	ldi	r19, 0x00	; 0
    707a:	40 e8       	ldi	r20, 0x80	; 128
    707c:	5f e3       	ldi	r21, 0x3F	; 63
    707e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7082:	88 23       	and	r24, r24
    7084:	1c f4       	brge	.+6      	; 0x708c <LCD_WriteNumber+0x290>
		__ticks = 1;
    7086:	81 e0       	ldi	r24, 0x01	; 1
    7088:	88 8b       	std	Y+16, r24	; 0x10
    708a:	91 c0       	rjmp	.+290    	; 0x71ae <LCD_WriteNumber+0x3b2>
	else if (__tmp > 255)
    708c:	69 89       	ldd	r22, Y+17	; 0x11
    708e:	7a 89       	ldd	r23, Y+18	; 0x12
    7090:	8b 89       	ldd	r24, Y+19	; 0x13
    7092:	9c 89       	ldd	r25, Y+20	; 0x14
    7094:	20 e0       	ldi	r18, 0x00	; 0
    7096:	30 e0       	ldi	r19, 0x00	; 0
    7098:	4f e7       	ldi	r20, 0x7F	; 127
    709a:	53 e4       	ldi	r21, 0x43	; 67
    709c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    70a0:	18 16       	cp	r1, r24
    70a2:	0c f0       	brlt	.+2      	; 0x70a6 <LCD_WriteNumber+0x2aa>
    70a4:	7b c0       	rjmp	.+246    	; 0x719c <LCD_WriteNumber+0x3a0>
	{
		_delay_ms(__us / 1000.0);
    70a6:	6d 89       	ldd	r22, Y+21	; 0x15
    70a8:	7e 89       	ldd	r23, Y+22	; 0x16
    70aa:	8f 89       	ldd	r24, Y+23	; 0x17
    70ac:	98 8d       	ldd	r25, Y+24	; 0x18
    70ae:	20 e0       	ldi	r18, 0x00	; 0
    70b0:	30 e0       	ldi	r19, 0x00	; 0
    70b2:	4a e7       	ldi	r20, 0x7A	; 122
    70b4:	54 e4       	ldi	r21, 0x44	; 68
    70b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    70ba:	dc 01       	movw	r26, r24
    70bc:	cb 01       	movw	r24, r22
    70be:	8c 87       	std	Y+12, r24	; 0x0c
    70c0:	9d 87       	std	Y+13, r25	; 0x0d
    70c2:	ae 87       	std	Y+14, r26	; 0x0e
    70c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    70c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    70ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    70cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    70ce:	20 e0       	ldi	r18, 0x00	; 0
    70d0:	30 e0       	ldi	r19, 0x00	; 0
    70d2:	4a ef       	ldi	r20, 0xFA	; 250
    70d4:	54 e4       	ldi	r21, 0x44	; 68
    70d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70da:	dc 01       	movw	r26, r24
    70dc:	cb 01       	movw	r24, r22
    70de:	88 87       	std	Y+8, r24	; 0x08
    70e0:	99 87       	std	Y+9, r25	; 0x09
    70e2:	aa 87       	std	Y+10, r26	; 0x0a
    70e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    70e6:	68 85       	ldd	r22, Y+8	; 0x08
    70e8:	79 85       	ldd	r23, Y+9	; 0x09
    70ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    70ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    70ee:	20 e0       	ldi	r18, 0x00	; 0
    70f0:	30 e0       	ldi	r19, 0x00	; 0
    70f2:	40 e8       	ldi	r20, 0x80	; 128
    70f4:	5f e3       	ldi	r21, 0x3F	; 63
    70f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70fa:	88 23       	and	r24, r24
    70fc:	2c f4       	brge	.+10     	; 0x7108 <LCD_WriteNumber+0x30c>
		__ticks = 1;
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	9f 83       	std	Y+7, r25	; 0x07
    7104:	8e 83       	std	Y+6, r24	; 0x06
    7106:	3f c0       	rjmp	.+126    	; 0x7186 <LCD_WriteNumber+0x38a>
	else if (__tmp > 65535)
    7108:	68 85       	ldd	r22, Y+8	; 0x08
    710a:	79 85       	ldd	r23, Y+9	; 0x09
    710c:	8a 85       	ldd	r24, Y+10	; 0x0a
    710e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7110:	20 e0       	ldi	r18, 0x00	; 0
    7112:	3f ef       	ldi	r19, 0xFF	; 255
    7114:	4f e7       	ldi	r20, 0x7F	; 127
    7116:	57 e4       	ldi	r21, 0x47	; 71
    7118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    711c:	18 16       	cp	r1, r24
    711e:	4c f5       	brge	.+82     	; 0x7172 <LCD_WriteNumber+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7120:	6c 85       	ldd	r22, Y+12	; 0x0c
    7122:	7d 85       	ldd	r23, Y+13	; 0x0d
    7124:	8e 85       	ldd	r24, Y+14	; 0x0e
    7126:	9f 85       	ldd	r25, Y+15	; 0x0f
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	30 e0       	ldi	r19, 0x00	; 0
    712c:	40 e2       	ldi	r20, 0x20	; 32
    712e:	51 e4       	ldi	r21, 0x41	; 65
    7130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7134:	dc 01       	movw	r26, r24
    7136:	cb 01       	movw	r24, r22
    7138:	bc 01       	movw	r22, r24
    713a:	cd 01       	movw	r24, r26
    713c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7140:	dc 01       	movw	r26, r24
    7142:	cb 01       	movw	r24, r22
    7144:	9f 83       	std	Y+7, r25	; 0x07
    7146:	8e 83       	std	Y+6, r24	; 0x06
    7148:	0f c0       	rjmp	.+30     	; 0x7168 <LCD_WriteNumber+0x36c>
    714a:	88 ec       	ldi	r24, 0xC8	; 200
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	9d 83       	std	Y+5, r25	; 0x05
    7150:	8c 83       	std	Y+4, r24	; 0x04
    7152:	8c 81       	ldd	r24, Y+4	; 0x04
    7154:	9d 81       	ldd	r25, Y+5	; 0x05
    7156:	01 97       	sbiw	r24, 0x01	; 1
    7158:	f1 f7       	brne	.-4      	; 0x7156 <LCD_WriteNumber+0x35a>
    715a:	9d 83       	std	Y+5, r25	; 0x05
    715c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    715e:	8e 81       	ldd	r24, Y+6	; 0x06
    7160:	9f 81       	ldd	r25, Y+7	; 0x07
    7162:	01 97       	sbiw	r24, 0x01	; 1
    7164:	9f 83       	std	Y+7, r25	; 0x07
    7166:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7168:	8e 81       	ldd	r24, Y+6	; 0x06
    716a:	9f 81       	ldd	r25, Y+7	; 0x07
    716c:	00 97       	sbiw	r24, 0x00	; 0
    716e:	69 f7       	brne	.-38     	; 0x714a <LCD_WriteNumber+0x34e>
    7170:	24 c0       	rjmp	.+72     	; 0x71ba <LCD_WriteNumber+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7172:	68 85       	ldd	r22, Y+8	; 0x08
    7174:	79 85       	ldd	r23, Y+9	; 0x09
    7176:	8a 85       	ldd	r24, Y+10	; 0x0a
    7178:	9b 85       	ldd	r25, Y+11	; 0x0b
    717a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    717e:	dc 01       	movw	r26, r24
    7180:	cb 01       	movw	r24, r22
    7182:	9f 83       	std	Y+7, r25	; 0x07
    7184:	8e 83       	std	Y+6, r24	; 0x06
    7186:	8e 81       	ldd	r24, Y+6	; 0x06
    7188:	9f 81       	ldd	r25, Y+7	; 0x07
    718a:	9b 83       	std	Y+3, r25	; 0x03
    718c:	8a 83       	std	Y+2, r24	; 0x02
    718e:	8a 81       	ldd	r24, Y+2	; 0x02
    7190:	9b 81       	ldd	r25, Y+3	; 0x03
    7192:	01 97       	sbiw	r24, 0x01	; 1
    7194:	f1 f7       	brne	.-4      	; 0x7192 <LCD_WriteNumber+0x396>
    7196:	9b 83       	std	Y+3, r25	; 0x03
    7198:	8a 83       	std	Y+2, r24	; 0x02
    719a:	0f c0       	rjmp	.+30     	; 0x71ba <LCD_WriteNumber+0x3be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    719c:	69 89       	ldd	r22, Y+17	; 0x11
    719e:	7a 89       	ldd	r23, Y+18	; 0x12
    71a0:	8b 89       	ldd	r24, Y+19	; 0x13
    71a2:	9c 89       	ldd	r25, Y+20	; 0x14
    71a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71a8:	dc 01       	movw	r26, r24
    71aa:	cb 01       	movw	r24, r22
    71ac:	88 8b       	std	Y+16, r24	; 0x10
    71ae:	88 89       	ldd	r24, Y+16	; 0x10
    71b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    71b2:	89 81       	ldd	r24, Y+1	; 0x01
    71b4:	8a 95       	dec	r24
    71b6:	f1 f7       	brne	.-4      	; 0x71b4 <LCD_WriteNumber+0x3b8>
    71b8:	89 83       	std	Y+1, r24	; 0x01
		Copy_s32Num /= 10;
	}

	/* Printing every character of the string */
	/* In a reverse order because the array was reversed already */
	for(; iterator>0 ; iterator--)
    71ba:	88 a5       	ldd	r24, Y+40	; 0x28
    71bc:	81 50       	subi	r24, 0x01	; 1
    71be:	88 a7       	std	Y+40, r24	; 0x28
    71c0:	88 a5       	ldd	r24, Y+40	; 0x28
    71c2:	88 23       	and	r24, r24
    71c4:	09 f0       	breq	.+2      	; 0x71c8 <LCD_WriteNumber+0x3cc>
    71c6:	2d cf       	rjmp	.-422    	; 0x7022 <LCD_WriteNumber+0x226>
	{
		LCD_WriteChar(Str[iterator-1]);
		_delay_us(1);
	}

	return Ret;
    71c8:	89 a5       	ldd	r24, Y+41	; 0x29
    71ca:	28 2f       	mov	r18, r24
    71cc:	30 e0       	ldi	r19, 0x00	; 0
    71ce:	40 e0       	ldi	r20, 0x00	; 0
    71d0:	50 e0       	ldi	r21, 0x00	; 0
    71d2:	ce 56       	subi	r28, 0x6E	; 110
    71d4:	df 4f       	sbci	r29, 0xFF	; 255
    71d6:	28 83       	st	Y, r18
    71d8:	39 83       	std	Y+1, r19	; 0x01
    71da:	4a 83       	std	Y+2, r20	; 0x02
    71dc:	5b 83       	std	Y+3, r21	; 0x03
    71de:	c2 59       	subi	r28, 0x92	; 146
    71e0:	d0 40       	sbci	r29, 0x00	; 0
    71e2:	ce 56       	subi	r28, 0x6E	; 110
    71e4:	df 4f       	sbci	r29, 0xFF	; 255
    71e6:	88 81       	ld	r24, Y
    71e8:	99 81       	ldd	r25, Y+1	; 0x01
    71ea:	aa 81       	ldd	r26, Y+2	; 0x02
    71ec:	bb 81       	ldd	r27, Y+3	; 0x03
    71ee:	c2 59       	subi	r28, 0x92	; 146
    71f0:	d0 40       	sbci	r29, 0x00	; 0
}
    71f2:	bc 01       	movw	r22, r24
    71f4:	cd 01       	movw	r24, r26
    71f6:	cb 56       	subi	r28, 0x6B	; 107
    71f8:	df 4f       	sbci	r29, 0xFF	; 255
    71fa:	0f b6       	in	r0, 0x3f	; 63
    71fc:	f8 94       	cli
    71fe:	de bf       	out	0x3e, r29	; 62
    7200:	0f be       	out	0x3f, r0	; 63
    7202:	cd bf       	out	0x3d, r28	; 61
    7204:	cf 91       	pop	r28
    7206:	df 91       	pop	r29
    7208:	1f 91       	pop	r17
    720a:	0f 91       	pop	r16
    720c:	08 95       	ret

0000720e <LCD_WriteFloat>:

u8 LCD_WriteFloat(u16 Copy_u16Num)
{
    720e:	df 93       	push	r29
    7210:	cf 93       	push	r28
    7212:	00 d0       	rcall	.+0      	; 0x7214 <LCD_WriteFloat+0x6>
    7214:	0f 92       	push	r0
    7216:	cd b7       	in	r28, 0x3d	; 61
    7218:	de b7       	in	r29, 0x3e	; 62
    721a:	9b 83       	std	Y+3, r25	; 0x03
    721c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = E_OK;
    721e:	81 e0       	ldi	r24, 0x01	; 1
    7220:	89 83       	std	Y+1, r24	; 0x01

	LCD_WriteNumber(Copy_u16Num/10);
    7222:	8a 81       	ldd	r24, Y+2	; 0x02
    7224:	9b 81       	ldd	r25, Y+3	; 0x03
    7226:	2a e0       	ldi	r18, 0x0A	; 10
    7228:	30 e0       	ldi	r19, 0x00	; 0
    722a:	b9 01       	movw	r22, r18
    722c:	0e 94 ca 3c 	call	0x7994	; 0x7994 <__udivmodhi4>
    7230:	cb 01       	movw	r24, r22
    7232:	cc 01       	movw	r24, r24
    7234:	a0 e0       	ldi	r26, 0x00	; 0
    7236:	b0 e0       	ldi	r27, 0x00	; 0
    7238:	bc 01       	movw	r22, r24
    723a:	cd 01       	movw	r24, r26
    723c:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <LCD_WriteNumber>
	LCD_WriteChar('.');
    7240:	8e e2       	ldi	r24, 0x2E	; 46
    7242:	0e 94 ed 36 	call	0x6dda	; 0x6dda <LCD_WriteChar>
	LCD_WriteNumber(Copy_u16Num%10);
    7246:	8a 81       	ldd	r24, Y+2	; 0x02
    7248:	9b 81       	ldd	r25, Y+3	; 0x03
    724a:	2a e0       	ldi	r18, 0x0A	; 10
    724c:	30 e0       	ldi	r19, 0x00	; 0
    724e:	b9 01       	movw	r22, r18
    7250:	0e 94 ca 3c 	call	0x7994	; 0x7994 <__udivmodhi4>
    7254:	cc 01       	movw	r24, r24
    7256:	a0 e0       	ldi	r26, 0x00	; 0
    7258:	b0 e0       	ldi	r27, 0x00	; 0
    725a:	bc 01       	movw	r22, r24
    725c:	cd 01       	movw	r24, r26
    725e:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <LCD_WriteNumber>

	return Ret;
    7262:	89 81       	ldd	r24, Y+1	; 0x01
}
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
    7268:	0f 90       	pop	r0
    726a:	cf 91       	pop	r28
    726c:	df 91       	pop	r29
    726e:	08 95       	ret

00007270 <LCD_GoToWriteNumber>:
u8 LCD_GoToWriteNumber(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_s32Num)
{
    7270:	df 93       	push	r29
    7272:	cf 93       	push	r28
    7274:	00 d0       	rcall	.+0      	; 0x7276 <LCD_GoToWriteNumber+0x6>
    7276:	00 d0       	rcall	.+0      	; 0x7278 <LCD_GoToWriteNumber+0x8>
    7278:	cd b7       	in	r28, 0x3d	; 61
    727a:	de b7       	in	r29, 0x3e	; 62
    727c:	8a 83       	std	Y+2, r24	; 0x02
    727e:	6b 83       	std	Y+3, r22	; 0x03
    7280:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    7286:	8a 81       	ldd	r24, Y+2	; 0x02
    7288:	6b 81       	ldd	r22, Y+3	; 0x03
    728a:	0e 94 b0 34 	call	0x6960	; 0x6960 <LCD_GoTo>
	LCD_WriteNumber(Copy_s32Num);
    728e:	8c 81       	ldd	r24, Y+4	; 0x04
    7290:	88 2f       	mov	r24, r24
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	a0 e0       	ldi	r26, 0x00	; 0
    7296:	b0 e0       	ldi	r27, 0x00	; 0
    7298:	bc 01       	movw	r22, r24
    729a:	cd 01       	movw	r24, r26
    729c:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <LCD_WriteNumber>

	return Ret;
    72a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    72a2:	0f 90       	pop	r0
    72a4:	0f 90       	pop	r0
    72a6:	0f 90       	pop	r0
    72a8:	0f 90       	pop	r0
    72aa:	cf 91       	pop	r28
    72ac:	df 91       	pop	r29
    72ae:	08 95       	ret

000072b0 <LCD_GoToClear>:
u8 LCD_GoToClear(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8NumCells)
{
    72b0:	df 93       	push	r29
    72b2:	cf 93       	push	r28
    72b4:	00 d0       	rcall	.+0      	; 0x72b6 <LCD_GoToClear+0x6>
    72b6:	00 d0       	rcall	.+0      	; 0x72b8 <LCD_GoToClear+0x8>
    72b8:	0f 92       	push	r0
    72ba:	cd b7       	in	r28, 0x3d	; 61
    72bc:	de b7       	in	r29, 0x3e	; 62
    72be:	8b 83       	std	Y+3, r24	; 0x03
    72c0:	6c 83       	std	Y+4, r22	; 0x04
    72c2:	4d 83       	std	Y+5, r20	; 0x05
	u8 Ret = E_OK;
    72c4:	81 e0       	ldi	r24, 0x01	; 1
    72c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator = 0;
    72c8:	19 82       	std	Y+1, r1	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    72ca:	8b 81       	ldd	r24, Y+3	; 0x03
    72cc:	6c 81       	ldd	r22, Y+4	; 0x04
    72ce:	0e 94 b0 34 	call	0x6960	; 0x6960 <LCD_GoTo>
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    72d2:	19 82       	std	Y+1, r1	; 0x01
    72d4:	06 c0       	rjmp	.+12     	; 0x72e2 <LCD_GoToClear+0x32>
	{
		LCD_WriteChar(' ');
    72d6:	80 e2       	ldi	r24, 0x20	; 32
    72d8:	0e 94 ed 36 	call	0x6dda	; 0x6dda <LCD_WriteChar>
{
	u8 Ret = E_OK;
	u8 iterator = 0;

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
	for(iterator = 0; iterator < Copy_u8NumCells; iterator++)
    72dc:	89 81       	ldd	r24, Y+1	; 0x01
    72de:	8f 5f       	subi	r24, 0xFF	; 255
    72e0:	89 83       	std	Y+1, r24	; 0x01
    72e2:	99 81       	ldd	r25, Y+1	; 0x01
    72e4:	8d 81       	ldd	r24, Y+5	; 0x05
    72e6:	98 17       	cp	r25, r24
    72e8:	b0 f3       	brcs	.-20     	; 0x72d6 <LCD_GoToClear+0x26>
	{
		LCD_WriteChar(' ');
	}

	return Ret;
    72ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    72ec:	0f 90       	pop	r0
    72ee:	0f 90       	pop	r0
    72f0:	0f 90       	pop	r0
    72f2:	0f 90       	pop	r0
    72f4:	0f 90       	pop	r0
    72f6:	cf 91       	pop	r28
    72f8:	df 91       	pop	r29
    72fa:	08 95       	ret

000072fc <LCD_GoToWriteChar>:

u8 LCD_GoToWriteChar(u8 Copy_u8Line, u8 Copy_u8Cell, u8 Copy_u8Char)
{
    72fc:	df 93       	push	r29
    72fe:	cf 93       	push	r28
    7300:	00 d0       	rcall	.+0      	; 0x7302 <LCD_GoToWriteChar+0x6>
    7302:	00 d0       	rcall	.+0      	; 0x7304 <LCD_GoToWriteChar+0x8>
    7304:	cd b7       	in	r28, 0x3d	; 61
    7306:	de b7       	in	r29, 0x3e	; 62
    7308:	8a 83       	std	Y+2, r24	; 0x02
    730a:	6b 83       	std	Y+3, r22	; 0x03
    730c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    730e:	81 e0       	ldi	r24, 0x01	; 1
    7310:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    7312:	8a 81       	ldd	r24, Y+2	; 0x02
    7314:	6b 81       	ldd	r22, Y+3	; 0x03
    7316:	0e 94 b0 34 	call	0x6960	; 0x6960 <LCD_GoTo>
	LCD_WriteChar(Copy_u8Char);
    731a:	8c 81       	ldd	r24, Y+4	; 0x04
    731c:	0e 94 ed 36 	call	0x6dda	; 0x6dda <LCD_WriteChar>

	return Ret;
    7320:	89 81       	ldd	r24, Y+1	; 0x01
}
    7322:	0f 90       	pop	r0
    7324:	0f 90       	pop	r0
    7326:	0f 90       	pop	r0
    7328:	0f 90       	pop	r0
    732a:	cf 91       	pop	r28
    732c:	df 91       	pop	r29
    732e:	08 95       	ret

00007330 <LCD_GoToWriteString>:


u8 LCD_GoToWriteString(u8 Copy_u8Line, u8 Copy_u8Cell, const u8 *Copy_u8PtrString)
{
    7330:	df 93       	push	r29
    7332:	cf 93       	push	r28
    7334:	00 d0       	rcall	.+0      	; 0x7336 <LCD_GoToWriteString+0x6>
    7336:	00 d0       	rcall	.+0      	; 0x7338 <LCD_GoToWriteString+0x8>
    7338:	0f 92       	push	r0
    733a:	cd b7       	in	r28, 0x3d	; 61
    733c:	de b7       	in	r29, 0x3e	; 62
    733e:	8a 83       	std	Y+2, r24	; 0x02
    7340:	6b 83       	std	Y+3, r22	; 0x03
    7342:	5d 83       	std	Y+5, r21	; 0x05
    7344:	4c 83       	std	Y+4, r20	; 0x04
	u8 Ret = E_OK;
    7346:	81 e0       	ldi	r24, 0x01	; 1
    7348:	89 83       	std	Y+1, r24	; 0x01

	LCD_GoTo(Copy_u8Line,Copy_u8Cell);
    734a:	8a 81       	ldd	r24, Y+2	; 0x02
    734c:	6b 81       	ldd	r22, Y+3	; 0x03
    734e:	0e 94 b0 34 	call	0x6960	; 0x6960 <LCD_GoTo>
	LCD_WriteString(Copy_u8PtrString);
    7352:	8c 81       	ldd	r24, Y+4	; 0x04
    7354:	9d 81       	ldd	r25, Y+5	; 0x05
    7356:	0e 94 87 34 	call	0x690e	; 0x690e <LCD_WriteString>

	return Ret;
    735a:	89 81       	ldd	r24, Y+1	; 0x01
}
    735c:	0f 90       	pop	r0
    735e:	0f 90       	pop	r0
    7360:	0f 90       	pop	r0
    7362:	0f 90       	pop	r0
    7364:	0f 90       	pop	r0
    7366:	cf 91       	pop	r28
    7368:	df 91       	pop	r29
    736a:	08 95       	ret

0000736c <LCD_BCD_To_Char>:
void LCD_BCD_To_Char(u8 Copy_u8Data)
{
    736c:	df 93       	push	r29
    736e:	cf 93       	push	r28
    7370:	cd b7       	in	r28, 0x3d	; 61
    7372:	de b7       	in	r29, 0x3e	; 62
    7374:	2f 97       	sbiw	r28, 0x0f	; 15
    7376:	0f b6       	in	r0, 0x3f	; 63
    7378:	f8 94       	cli
    737a:	de bf       	out	0x3e, r29	; 62
    737c:	0f be       	out	0x3f, r0	; 63
    737e:	cd bf       	out	0x3d, r28	; 61
    7380:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteData(0x30+(Copy_u8Data>>4));
    7382:	8f 85       	ldd	r24, Y+15	; 0x0f
    7384:	82 95       	swap	r24
    7386:	8f 70       	andi	r24, 0x0F	; 15
    7388:	80 5d       	subi	r24, 0xD0	; 208
    738a:	0e 94 3c 32 	call	0x6478	; 0x6478 <LCD_WriteData>
    738e:	80 e0       	ldi	r24, 0x00	; 0
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	a0 e8       	ldi	r26, 0x80	; 128
    7394:	bf e3       	ldi	r27, 0x3F	; 63
    7396:	8b 87       	std	Y+11, r24	; 0x0b
    7398:	9c 87       	std	Y+12, r25	; 0x0c
    739a:	ad 87       	std	Y+13, r26	; 0x0d
    739c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    739e:	6b 85       	ldd	r22, Y+11	; 0x0b
    73a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    73a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    73a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    73a6:	20 e0       	ldi	r18, 0x00	; 0
    73a8:	30 e0       	ldi	r19, 0x00	; 0
    73aa:	4a ef       	ldi	r20, 0xFA	; 250
    73ac:	54 e4       	ldi	r21, 0x44	; 68
    73ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73b2:	dc 01       	movw	r26, r24
    73b4:	cb 01       	movw	r24, r22
    73b6:	8f 83       	std	Y+7, r24	; 0x07
    73b8:	98 87       	std	Y+8, r25	; 0x08
    73ba:	a9 87       	std	Y+9, r26	; 0x09
    73bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    73be:	6f 81       	ldd	r22, Y+7	; 0x07
    73c0:	78 85       	ldd	r23, Y+8	; 0x08
    73c2:	89 85       	ldd	r24, Y+9	; 0x09
    73c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    73c6:	20 e0       	ldi	r18, 0x00	; 0
    73c8:	30 e0       	ldi	r19, 0x00	; 0
    73ca:	40 e8       	ldi	r20, 0x80	; 128
    73cc:	5f e3       	ldi	r21, 0x3F	; 63
    73ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    73d2:	88 23       	and	r24, r24
    73d4:	2c f4       	brge	.+10     	; 0x73e0 <LCD_BCD_To_Char+0x74>
		__ticks = 1;
    73d6:	81 e0       	ldi	r24, 0x01	; 1
    73d8:	90 e0       	ldi	r25, 0x00	; 0
    73da:	9e 83       	std	Y+6, r25	; 0x06
    73dc:	8d 83       	std	Y+5, r24	; 0x05
    73de:	3f c0       	rjmp	.+126    	; 0x745e <LCD_BCD_To_Char+0xf2>
	else if (__tmp > 65535)
    73e0:	6f 81       	ldd	r22, Y+7	; 0x07
    73e2:	78 85       	ldd	r23, Y+8	; 0x08
    73e4:	89 85       	ldd	r24, Y+9	; 0x09
    73e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    73e8:	20 e0       	ldi	r18, 0x00	; 0
    73ea:	3f ef       	ldi	r19, 0xFF	; 255
    73ec:	4f e7       	ldi	r20, 0x7F	; 127
    73ee:	57 e4       	ldi	r21, 0x47	; 71
    73f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    73f4:	18 16       	cp	r1, r24
    73f6:	4c f5       	brge	.+82     	; 0x744a <LCD_BCD_To_Char+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    73fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    73fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    73fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    7400:	20 e0       	ldi	r18, 0x00	; 0
    7402:	30 e0       	ldi	r19, 0x00	; 0
    7404:	40 e2       	ldi	r20, 0x20	; 32
    7406:	51 e4       	ldi	r21, 0x41	; 65
    7408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    740c:	dc 01       	movw	r26, r24
    740e:	cb 01       	movw	r24, r22
    7410:	bc 01       	movw	r22, r24
    7412:	cd 01       	movw	r24, r26
    7414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7418:	dc 01       	movw	r26, r24
    741a:	cb 01       	movw	r24, r22
    741c:	9e 83       	std	Y+6, r25	; 0x06
    741e:	8d 83       	std	Y+5, r24	; 0x05
    7420:	0f c0       	rjmp	.+30     	; 0x7440 <LCD_BCD_To_Char+0xd4>
    7422:	88 ec       	ldi	r24, 0xC8	; 200
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	9c 83       	std	Y+4, r25	; 0x04
    7428:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    742a:	8b 81       	ldd	r24, Y+3	; 0x03
    742c:	9c 81       	ldd	r25, Y+4	; 0x04
    742e:	01 97       	sbiw	r24, 0x01	; 1
    7430:	f1 f7       	brne	.-4      	; 0x742e <LCD_BCD_To_Char+0xc2>
    7432:	9c 83       	std	Y+4, r25	; 0x04
    7434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7436:	8d 81       	ldd	r24, Y+5	; 0x05
    7438:	9e 81       	ldd	r25, Y+6	; 0x06
    743a:	01 97       	sbiw	r24, 0x01	; 1
    743c:	9e 83       	std	Y+6, r25	; 0x06
    743e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7440:	8d 81       	ldd	r24, Y+5	; 0x05
    7442:	9e 81       	ldd	r25, Y+6	; 0x06
    7444:	00 97       	sbiw	r24, 0x00	; 0
    7446:	69 f7       	brne	.-38     	; 0x7422 <LCD_BCD_To_Char+0xb6>
    7448:	14 c0       	rjmp	.+40     	; 0x7472 <LCD_BCD_To_Char+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    744a:	6f 81       	ldd	r22, Y+7	; 0x07
    744c:	78 85       	ldd	r23, Y+8	; 0x08
    744e:	89 85       	ldd	r24, Y+9	; 0x09
    7450:	9a 85       	ldd	r25, Y+10	; 0x0a
    7452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7456:	dc 01       	movw	r26, r24
    7458:	cb 01       	movw	r24, r22
    745a:	9e 83       	std	Y+6, r25	; 0x06
    745c:	8d 83       	std	Y+5, r24	; 0x05
    745e:	8d 81       	ldd	r24, Y+5	; 0x05
    7460:	9e 81       	ldd	r25, Y+6	; 0x06
    7462:	9a 83       	std	Y+2, r25	; 0x02
    7464:	89 83       	std	Y+1, r24	; 0x01
    7466:	89 81       	ldd	r24, Y+1	; 0x01
    7468:	9a 81       	ldd	r25, Y+2	; 0x02
    746a:	01 97       	sbiw	r24, 0x01	; 1
    746c:	f1 f7       	brne	.-4      	; 0x746a <LCD_BCD_To_Char+0xfe>
    746e:	9a 83       	std	Y+2, r25	; 0x02
    7470:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_WriteData(0x30+(Copy_u8Data&0x0F));
    7472:	8f 85       	ldd	r24, Y+15	; 0x0f
    7474:	8f 70       	andi	r24, 0x0F	; 15
    7476:	80 5d       	subi	r24, 0xD0	; 208
    7478:	0e 94 3c 32 	call	0x6478	; 0x6478 <LCD_WriteData>
}
    747c:	2f 96       	adiw	r28, 0x0f	; 15
    747e:	0f b6       	in	r0, 0x3f	; 63
    7480:	f8 94       	cli
    7482:	de bf       	out	0x3e, r29	; 62
    7484:	0f be       	out	0x3f, r0	; 63
    7486:	cd bf       	out	0x3d, r28	; 61
    7488:	cf 91       	pop	r28
    748a:	df 91       	pop	r29
    748c:	08 95       	ret

0000748e <Init_KP>:
#include"../../LIB/BIT_MATH.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"KP_Config.h"
#include"KP_Interface.h"
void Init_KP(KP_stConfiguration *Copy_pstConfig)
{
    748e:	df 93       	push	r29
    7490:	cf 93       	push	r28
    7492:	00 d0       	rcall	.+0      	; 0x7494 <Init_KP+0x6>
    7494:	cd b7       	in	r28, 0x3d	; 61
    7496:	de b7       	in	r29, 0x3e	; 62
    7498:	9a 83       	std	Y+2, r25	; 0x02
    749a:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum1_PIN,DIO_u8PIN_OUTPUT);
    749c:	e9 81       	ldd	r30, Y+1	; 0x01
    749e:	fa 81       	ldd	r31, Y+2	; 0x02
    74a0:	80 81       	ld	r24, Z
    74a2:	e9 81       	ldd	r30, Y+1	; 0x01
    74a4:	fa 81       	ldd	r31, Y+2	; 0x02
    74a6:	90 85       	ldd	r25, Z+8	; 0x08
    74a8:	69 2f       	mov	r22, r25
    74aa:	41 e0       	ldi	r20, 0x01	; 1
    74ac:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum2_PIN,DIO_u8PIN_OUTPUT);
    74b0:	e9 81       	ldd	r30, Y+1	; 0x01
    74b2:	fa 81       	ldd	r31, Y+2	; 0x02
    74b4:	81 81       	ldd	r24, Z+1	; 0x01
    74b6:	e9 81       	ldd	r30, Y+1	; 0x01
    74b8:	fa 81       	ldd	r31, Y+2	; 0x02
    74ba:	91 85       	ldd	r25, Z+9	; 0x09
    74bc:	69 2f       	mov	r22, r25
    74be:	41 e0       	ldi	r20, 0x01	; 1
    74c0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum3_PIN,DIO_u8PIN_OUTPUT);
    74c4:	e9 81       	ldd	r30, Y+1	; 0x01
    74c6:	fa 81       	ldd	r31, Y+2	; 0x02
    74c8:	82 81       	ldd	r24, Z+2	; 0x02
    74ca:	e9 81       	ldd	r30, Y+1	; 0x01
    74cc:	fa 81       	ldd	r31, Y+2	; 0x02
    74ce:	92 85       	ldd	r25, Z+10	; 0x0a
    74d0:	69 2f       	mov	r22, r25
    74d2:	41 e0       	ldi	r20, 0x01	; 1
    74d4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Colum4_PORT,Copy_pstConfig->KP_Colum4_PIN,DIO_u8PIN_OUTPUT);
    74d8:	e9 81       	ldd	r30, Y+1	; 0x01
    74da:	fa 81       	ldd	r31, Y+2	; 0x02
    74dc:	83 81       	ldd	r24, Z+3	; 0x03
    74de:	e9 81       	ldd	r30, Y+1	; 0x01
    74e0:	fa 81       	ldd	r31, Y+2	; 0x02
    74e2:	93 85       	ldd	r25, Z+11	; 0x0b
    74e4:	69 2f       	mov	r22, r25
    74e6:	41 e0       	ldi	r20, 0x01	; 1
    74e8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row1_PIN,DIO_u8PIN_INPUT);
    74ec:	e9 81       	ldd	r30, Y+1	; 0x01
    74ee:	fa 81       	ldd	r31, Y+2	; 0x02
    74f0:	84 81       	ldd	r24, Z+4	; 0x04
    74f2:	e9 81       	ldd	r30, Y+1	; 0x01
    74f4:	fa 81       	ldd	r31, Y+2	; 0x02
    74f6:	94 85       	ldd	r25, Z+12	; 0x0c
    74f8:	69 2f       	mov	r22, r25
    74fa:	40 e0       	ldi	r20, 0x00	; 0
    74fc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row2_PIN,DIO_u8PIN_INPUT);
    7500:	e9 81       	ldd	r30, Y+1	; 0x01
    7502:	fa 81       	ldd	r31, Y+2	; 0x02
    7504:	85 81       	ldd	r24, Z+5	; 0x05
    7506:	e9 81       	ldd	r30, Y+1	; 0x01
    7508:	fa 81       	ldd	r31, Y+2	; 0x02
    750a:	95 85       	ldd	r25, Z+13	; 0x0d
    750c:	69 2f       	mov	r22, r25
    750e:	40 e0       	ldi	r20, 0x00	; 0
    7510:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row3_PIN,DIO_u8PIN_INPUT);
    7514:	e9 81       	ldd	r30, Y+1	; 0x01
    7516:	fa 81       	ldd	r31, Y+2	; 0x02
    7518:	86 81       	ldd	r24, Z+6	; 0x06
    751a:	e9 81       	ldd	r30, Y+1	; 0x01
    751c:	fa 81       	ldd	r31, Y+2	; 0x02
    751e:	96 85       	ldd	r25, Z+14	; 0x0e
    7520:	69 2f       	mov	r22, r25
    7522:	40 e0       	ldi	r20, 0x00	; 0
    7524:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(Copy_pstConfig->KP_Row4_PORT,Copy_pstConfig->KP_Row4_PIN,DIO_u8PIN_INPUT);
    7528:	e9 81       	ldd	r30, Y+1	; 0x01
    752a:	fa 81       	ldd	r31, Y+2	; 0x02
    752c:	87 81       	ldd	r24, Z+7	; 0x07
    752e:	e9 81       	ldd	r30, Y+1	; 0x01
    7530:	fa 81       	ldd	r31, Y+2	; 0x02
    7532:	97 85       	ldd	r25, Z+15	; 0x0f
    7534:	69 2f       	mov	r22, r25
    7536:	40 e0       	ldi	r20, 0x00	; 0
    7538:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <DIO_VoidSetPinDirection>
	
}
    753c:	0f 90       	pop	r0
    753e:	0f 90       	pop	r0
    7540:	cf 91       	pop	r28
    7542:	df 91       	pop	r29
    7544:	08 95       	ret

00007546 <Read_KP>:
u8 Read_KP(KP_stConfiguration *Copy_pstConfig)
{
    7546:	df 93       	push	r29
    7548:	cf 93       	push	r28
    754a:	cd b7       	in	r28, 0x3d	; 61
    754c:	de b7       	in	r29, 0x3e	; 62
    754e:	a0 97       	sbiw	r28, 0x20	; 32
    7550:	0f b6       	in	r0, 0x3f	; 63
    7552:	f8 94       	cli
    7554:	de bf       	out	0x3e, r29	; 62
    7556:	0f be       	out	0x3f, r0	; 63
    7558:	cd bf       	out	0x3d, r28	; 61
    755a:	98 a3       	std	Y+32, r25	; 0x20
    755c:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Pressed_key = KP_Not_Pressed;
    755e:	8f ef       	ldi	r24, 0xFF	; 255
    7560:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_KP_Arr[Columns_NUM][Rows_NUM] = KP_Arr;
    7562:	8c e0       	ldi	r24, 0x0C	; 12
    7564:	fe 01       	movw	r30, r28
    7566:	34 96       	adiw	r30, 0x04	; 4
    7568:	df 01       	movw	r26, r30
    756a:	98 2f       	mov	r25, r24
    756c:	1d 92       	st	X+, r1
    756e:	9a 95       	dec	r25
    7570:	e9 f7       	brne	.-6      	; 0x756c <Read_KP+0x26>
    7572:	87 e0       	ldi	r24, 0x07	; 7
    7574:	8c 83       	std	Y+4, r24	; 0x04
    7576:	88 e0       	ldi	r24, 0x08	; 8
    7578:	8d 83       	std	Y+5, r24	; 0x05
    757a:	89 e0       	ldi	r24, 0x09	; 9
    757c:	8e 83       	std	Y+6, r24	; 0x06
    757e:	84 e0       	ldi	r24, 0x04	; 4
    7580:	88 87       	std	Y+8, r24	; 0x08
    7582:	85 e0       	ldi	r24, 0x05	; 5
    7584:	89 87       	std	Y+9, r24	; 0x09
    7586:	86 e0       	ldi	r24, 0x06	; 6
    7588:	8a 87       	std	Y+10, r24	; 0x0a
    758a:	81 e0       	ldi	r24, 0x01	; 1
    758c:	8c 87       	std	Y+12, r24	; 0x0c
    758e:	82 e0       	ldi	r24, 0x02	; 2
    7590:	8d 87       	std	Y+13, r24	; 0x0d
    7592:	83 e0       	ldi	r24, 0x03	; 3
    7594:	8e 87       	std	Y+14, r24	; 0x0e
	u8 Colum_Index ,Row_Index ;
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
    7596:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7598:	f8 a1       	ldd	r31, Y+32	; 0x20
    759a:	90 81       	ld	r25, Z
    759c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    759e:	f8 a1       	ldd	r31, Y+32	; 0x20
    75a0:	21 81       	ldd	r18, Z+1	; 0x01
    75a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75a4:	f8 a1       	ldd	r31, Y+32	; 0x20
    75a6:	82 81       	ldd	r24, Z+2	; 0x02
    75a8:	98 8b       	std	Y+16, r25	; 0x10
    75aa:	29 8b       	std	Y+17, r18	; 0x11
    75ac:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
    75ae:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75b0:	f8 a1       	ldd	r31, Y+32	; 0x20
    75b2:	24 81       	ldd	r18, Z+4	; 0x04
    75b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75b6:	f8 a1       	ldd	r31, Y+32	; 0x20
    75b8:	35 81       	ldd	r19, Z+5	; 0x05
    75ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    75be:	86 81       	ldd	r24, Z+6	; 0x06
    75c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75c2:	f8 a1       	ldd	r31, Y+32	; 0x20
    75c4:	97 81       	ldd	r25, Z+7	; 0x07
    75c6:	2b 8b       	std	Y+19, r18	; 0x13
    75c8:	3c 8b       	std	Y+20, r19	; 0x14
    75ca:	8d 8b       	std	Y+21, r24	; 0x15
    75cc:	9e 8b       	std	Y+22, r25	; 0x16
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
    75ce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75d0:	f8 a1       	ldd	r31, Y+32	; 0x20
    75d2:	90 85       	ldd	r25, Z+8	; 0x08
    75d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75d6:	f8 a1       	ldd	r31, Y+32	; 0x20
    75d8:	21 85       	ldd	r18, Z+9	; 0x09
    75da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75dc:	f8 a1       	ldd	r31, Y+32	; 0x20
    75de:	82 85       	ldd	r24, Z+10	; 0x0a
    75e0:	9f 8b       	std	Y+23, r25	; 0x17
    75e2:	28 8f       	std	Y+24, r18	; 0x18
    75e4:	89 8f       	std	Y+25, r24	; 0x19
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
    75e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75e8:	f8 a1       	ldd	r31, Y+32	; 0x20
    75ea:	24 85       	ldd	r18, Z+12	; 0x0c
    75ec:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75ee:	f8 a1       	ldd	r31, Y+32	; 0x20
    75f0:	35 85       	ldd	r19, Z+13	; 0x0d
    75f2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75f4:	f8 a1       	ldd	r31, Y+32	; 0x20
    75f6:	86 85       	ldd	r24, Z+14	; 0x0e
    75f8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    75fa:	f8 a1       	ldd	r31, Y+32	; 0x20
    75fc:	97 85       	ldd	r25, Z+15	; 0x0f
    75fe:	2a 8f       	std	Y+26, r18	; 0x1a
    7600:	3b 8f       	std	Y+27, r19	; 0x1b
    7602:	8c 8f       	std	Y+28, r24	; 0x1c
    7604:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 State = 0;
    7606:	1e 8e       	std	Y+30, r1	; 0x1e
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    7608:	1a 82       	std	Y+2, r1	; 0x02
    760a:	1a c0       	rjmp	.+52     	; 0x7640 <Read_KP+0xfa>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
    760c:	8a 81       	ldd	r24, Y+2	; 0x02
    760e:	28 2f       	mov	r18, r24
    7610:	30 e0       	ldi	r19, 0x00	; 0
    7612:	ce 01       	movw	r24, r28
    7614:	40 96       	adiw	r24, 0x10	; 16
    7616:	fc 01       	movw	r30, r24
    7618:	e2 0f       	add	r30, r18
    761a:	f3 1f       	adc	r31, r19
    761c:	40 81       	ld	r20, Z
    761e:	8a 81       	ldd	r24, Y+2	; 0x02
    7620:	28 2f       	mov	r18, r24
    7622:	30 e0       	ldi	r19, 0x00	; 0
    7624:	ce 01       	movw	r24, r28
    7626:	47 96       	adiw	r24, 0x17	; 23
    7628:	fc 01       	movw	r30, r24
    762a:	e2 0f       	add	r30, r18
    762c:	f3 1f       	adc	r31, r19
    762e:	90 81       	ld	r25, Z
    7630:	84 2f       	mov	r24, r20
    7632:	69 2f       	mov	r22, r25
    7634:	41 e0       	ldi	r20, 0x01	; 1
    7636:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	u8 Colum_PORT_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PORT,Copy_pstConfig->KP_Colum2_PORT,Copy_pstConfig->KP_Colum3_PORT,Copy_pstConfig->KP_Colum4_PORT};
	u8 Row_PORT_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PORT,Copy_pstConfig->KP_Row2_PORT,Copy_pstConfig->KP_Row3_PORT,Copy_pstConfig->KP_Row4_PORT};
	u8 Colum_Pin_Arr [Columns_NUM] = {Copy_pstConfig->KP_Colum1_PIN,Copy_pstConfig->KP_Colum2_PIN,Copy_pstConfig->KP_Colum3_PIN,Copy_pstConfig->KP_Colum4_PIN};
	u8 Row_Pin_Arr [Rows_NUM] = {Copy_pstConfig->KP_Row1_PIN,Copy_pstConfig->KP_Row2_PIN,Copy_pstConfig->KP_Row3_PIN,Copy_pstConfig->KP_Row4_PIN};
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    763a:	8a 81       	ldd	r24, Y+2	; 0x02
    763c:	8f 5f       	subi	r24, 0xFF	; 255
    763e:	8a 83       	std	Y+2, r24	; 0x02
    7640:	8a 81       	ldd	r24, Y+2	; 0x02
    7642:	83 30       	cpi	r24, 0x03	; 3
    7644:	18 f3       	brcs	.-58     	; 0x760c <Read_KP+0xc6>
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    7646:	19 82       	std	Y+1, r1	; 0x01
    7648:	1a c0       	rjmp	.+52     	; 0x767e <Read_KP+0x138>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
    764a:	89 81       	ldd	r24, Y+1	; 0x01
    764c:	28 2f       	mov	r18, r24
    764e:	30 e0       	ldi	r19, 0x00	; 0
    7650:	ce 01       	movw	r24, r28
    7652:	43 96       	adiw	r24, 0x13	; 19
    7654:	fc 01       	movw	r30, r24
    7656:	e2 0f       	add	r30, r18
    7658:	f3 1f       	adc	r31, r19
    765a:	40 81       	ld	r20, Z
    765c:	89 81       	ldd	r24, Y+1	; 0x01
    765e:	28 2f       	mov	r18, r24
    7660:	30 e0       	ldi	r19, 0x00	; 0
    7662:	ce 01       	movw	r24, r28
    7664:	4a 96       	adiw	r24, 0x1a	; 26
    7666:	fc 01       	movw	r30, r24
    7668:	e2 0f       	add	r30, r18
    766a:	f3 1f       	adc	r31, r19
    766c:	90 81       	ld	r25, Z
    766e:	84 2f       	mov	r24, r20
    7670:	69 2f       	mov	r22, r25
    7672:	41 e0       	ldi	r20, 0x01	; 1
    7674:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	u8 State = 0;
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
		{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
		}
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
    7678:	89 81       	ldd	r24, Y+1	; 0x01
    767a:	8f 5f       	subi	r24, 0xFF	; 255
    767c:	89 83       	std	Y+1, r24	; 0x01
    767e:	89 81       	ldd	r24, Y+1	; 0x01
    7680:	84 30       	cpi	r24, 0x04	; 4
    7682:	18 f3       	brcs	.-58     	; 0x764a <Read_KP+0x104>
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}
	
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    7684:	1a 82       	std	Y+2, r1	; 0x02
    7686:	89 c0       	rjmp	.+274    	; 0x779a <Read_KP+0x254>
	{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_LOW);
    7688:	8a 81       	ldd	r24, Y+2	; 0x02
    768a:	28 2f       	mov	r18, r24
    768c:	30 e0       	ldi	r19, 0x00	; 0
    768e:	ce 01       	movw	r24, r28
    7690:	40 96       	adiw	r24, 0x10	; 16
    7692:	fc 01       	movw	r30, r24
    7694:	e2 0f       	add	r30, r18
    7696:	f3 1f       	adc	r31, r19
    7698:	40 81       	ld	r20, Z
    769a:	8a 81       	ldd	r24, Y+2	; 0x02
    769c:	28 2f       	mov	r18, r24
    769e:	30 e0       	ldi	r19, 0x00	; 0
    76a0:	ce 01       	movw	r24, r28
    76a2:	47 96       	adiw	r24, 0x17	; 23
    76a4:	fc 01       	movw	r30, r24
    76a6:	e2 0f       	add	r30, r18
    76a8:	f3 1f       	adc	r31, r19
    76aa:	90 81       	ld	r25, Z
    76ac:	84 2f       	mov	r24, r20
    76ae:	69 2f       	mov	r22, r25
    76b0:	40 e0       	ldi	r20, 0x00	; 0
    76b2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
		for(Row_Index = 0;Row_Index < Rows_NUM; Row_Index++)
    76b6:	19 82       	std	Y+1, r1	; 0x01
    76b8:	52 c0       	rjmp	.+164    	; 0x775e <Read_KP+0x218>
		{
			DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],&State);
    76ba:	89 81       	ldd	r24, Y+1	; 0x01
    76bc:	28 2f       	mov	r18, r24
    76be:	30 e0       	ldi	r19, 0x00	; 0
    76c0:	ce 01       	movw	r24, r28
    76c2:	43 96       	adiw	r24, 0x13	; 19
    76c4:	fc 01       	movw	r30, r24
    76c6:	e2 0f       	add	r30, r18
    76c8:	f3 1f       	adc	r31, r19
    76ca:	40 81       	ld	r20, Z
    76cc:	89 81       	ldd	r24, Y+1	; 0x01
    76ce:	28 2f       	mov	r18, r24
    76d0:	30 e0       	ldi	r19, 0x00	; 0
    76d2:	ce 01       	movw	r24, r28
    76d4:	4a 96       	adiw	r24, 0x1a	; 26
    76d6:	fc 01       	movw	r30, r24
    76d8:	e2 0f       	add	r30, r18
    76da:	f3 1f       	adc	r31, r19
    76dc:	90 81       	ld	r25, Z
    76de:	9e 01       	movw	r18, r28
    76e0:	22 5e       	subi	r18, 0xE2	; 226
    76e2:	3f 4f       	sbci	r19, 0xFF	; 255
    76e4:	84 2f       	mov	r24, r20
    76e6:	69 2f       	mov	r22, r25
    76e8:	a9 01       	movw	r20, r18
    76ea:	0e 94 39 12 	call	0x2472	; 0x2472 <DIO_VoidGetPinValue>
			if(State == DIO_u8PIN_LOW)
    76ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    76f0:	88 23       	and	r24, r24
    76f2:	91 f5       	brne	.+100    	; 0x7758 <Read_KP+0x212>
    76f4:	1a c0       	rjmp	.+52     	; 0x772a <Read_KP+0x1e4>
			{
				while(State == DIO_u8PIN_LOW)
				{
					DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],&State);
    76f6:	89 81       	ldd	r24, Y+1	; 0x01
    76f8:	28 2f       	mov	r18, r24
    76fa:	30 e0       	ldi	r19, 0x00	; 0
    76fc:	ce 01       	movw	r24, r28
    76fe:	43 96       	adiw	r24, 0x13	; 19
    7700:	fc 01       	movw	r30, r24
    7702:	e2 0f       	add	r30, r18
    7704:	f3 1f       	adc	r31, r19
    7706:	40 81       	ld	r20, Z
    7708:	89 81       	ldd	r24, Y+1	; 0x01
    770a:	28 2f       	mov	r18, r24
    770c:	30 e0       	ldi	r19, 0x00	; 0
    770e:	ce 01       	movw	r24, r28
    7710:	4a 96       	adiw	r24, 0x1a	; 26
    7712:	fc 01       	movw	r30, r24
    7714:	e2 0f       	add	r30, r18
    7716:	f3 1f       	adc	r31, r19
    7718:	90 81       	ld	r25, Z
    771a:	9e 01       	movw	r18, r28
    771c:	22 5e       	subi	r18, 0xE2	; 226
    771e:	3f 4f       	sbci	r19, 0xFF	; 255
    7720:	84 2f       	mov	r24, r20
    7722:	69 2f       	mov	r22, r25
    7724:	a9 01       	movw	r20, r18
    7726:	0e 94 39 12 	call	0x2472	; 0x2472 <DIO_VoidGetPinValue>
		for(Row_Index = 0;Row_Index < Rows_NUM; Row_Index++)
		{
			DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],&State);
			if(State == DIO_u8PIN_LOW)
			{
				while(State == DIO_u8PIN_LOW)
    772a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    772c:	88 23       	and	r24, r24
    772e:	19 f3       	breq	.-58     	; 0x76f6 <Read_KP+0x1b0>
				{
					DIO_VoidGetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],&State);
				}
				Pressed_key = Local_KP_Arr[Row_Index][Colum_Index];
    7730:	89 81       	ldd	r24, Y+1	; 0x01
    7732:	28 2f       	mov	r18, r24
    7734:	30 e0       	ldi	r19, 0x00	; 0
    7736:	8a 81       	ldd	r24, Y+2	; 0x02
    7738:	48 2f       	mov	r20, r24
    773a:	50 e0       	ldi	r21, 0x00	; 0
    773c:	22 0f       	add	r18, r18
    773e:	33 1f       	adc	r19, r19
    7740:	22 0f       	add	r18, r18
    7742:	33 1f       	adc	r19, r19
    7744:	ce 01       	movw	r24, r28
    7746:	01 96       	adiw	r24, 0x01	; 1
    7748:	82 0f       	add	r24, r18
    774a:	93 1f       	adc	r25, r19
    774c:	84 0f       	add	r24, r20
    774e:	95 1f       	adc	r25, r21
    7750:	fc 01       	movw	r30, r24
    7752:	33 96       	adiw	r30, 0x03	; 3
    7754:	80 81       	ld	r24, Z
    7756:	8b 83       	std	Y+3, r24	; 0x03
		}
	
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
	{
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_LOW);
		for(Row_Index = 0;Row_Index < Rows_NUM; Row_Index++)
    7758:	89 81       	ldd	r24, Y+1	; 0x01
    775a:	8f 5f       	subi	r24, 0xFF	; 255
    775c:	89 83       	std	Y+1, r24	; 0x01
    775e:	89 81       	ldd	r24, Y+1	; 0x01
    7760:	84 30       	cpi	r24, 0x04	; 4
    7762:	08 f4       	brcc	.+2      	; 0x7766 <Read_KP+0x220>
    7764:	aa cf       	rjmp	.-172    	; 0x76ba <Read_KP+0x174>
				}
				Pressed_key = Local_KP_Arr[Row_Index][Colum_Index];
				
			}
		}
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
    7766:	8a 81       	ldd	r24, Y+2	; 0x02
    7768:	28 2f       	mov	r18, r24
    776a:	30 e0       	ldi	r19, 0x00	; 0
    776c:	ce 01       	movw	r24, r28
    776e:	40 96       	adiw	r24, 0x10	; 16
    7770:	fc 01       	movw	r30, r24
    7772:	e2 0f       	add	r30, r18
    7774:	f3 1f       	adc	r31, r19
    7776:	40 81       	ld	r20, Z
    7778:	8a 81       	ldd	r24, Y+2	; 0x02
    777a:	28 2f       	mov	r18, r24
    777c:	30 e0       	ldi	r19, 0x00	; 0
    777e:	ce 01       	movw	r24, r28
    7780:	47 96       	adiw	r24, 0x17	; 23
    7782:	fc 01       	movw	r30, r24
    7784:	e2 0f       	add	r30, r18
    7786:	f3 1f       	adc	r31, r19
    7788:	90 81       	ld	r25, Z
    778a:	84 2f       	mov	r24, r20
    778c:	69 2f       	mov	r22, r25
    778e:	41 e0       	ldi	r20, 0x01	; 1
    7790:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_VoidSetPinValue>
	for(Row_Index = 0; Row_Index < Rows_NUM;Row_Index ++ )
		{
			DIO_VoidSetPinValue(Row_PORT_Arr[Row_Index],Row_Pin_Arr[Row_Index],DIO_u8PIN_HIGH);
		}
	
	for(Colum_Index = 0; Colum_Index < Columns_NUM;Colum_Index ++ )
    7794:	8a 81       	ldd	r24, Y+2	; 0x02
    7796:	8f 5f       	subi	r24, 0xFF	; 255
    7798:	8a 83       	std	Y+2, r24	; 0x02
    779a:	8a 81       	ldd	r24, Y+2	; 0x02
    779c:	83 30       	cpi	r24, 0x03	; 3
    779e:	08 f4       	brcc	.+2      	; 0x77a2 <Read_KP+0x25c>
    77a0:	73 cf       	rjmp	.-282    	; 0x7688 <Read_KP+0x142>
				
			}
		}
		DIO_VoidSetPinValue(Colum_PORT_Arr[Colum_Index],Colum_Pin_Arr[Colum_Index],DIO_u8PIN_HIGH);
	}
	return Pressed_key;
    77a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    77a4:	a0 96       	adiw	r28, 0x20	; 32
    77a6:	0f b6       	in	r0, 0x3f	; 63
    77a8:	f8 94       	cli
    77aa:	de bf       	out	0x3e, r29	; 62
    77ac:	0f be       	out	0x3f, r0	; 63
    77ae:	cd bf       	out	0x3d, r28	; 61
    77b0:	cf 91       	pop	r28
    77b2:	df 91       	pop	r29
    77b4:	08 95       	ret

000077b6 <EEPROM_voidSendData>:
#include"EEPROM_Interface.h"
#include<util/delay.h>



void EEPROM_voidSendData(u16 Copy_u16Address,u8 Copy_u8Data){
    77b6:	df 93       	push	r29
    77b8:	cf 93       	push	r28
    77ba:	cd b7       	in	r28, 0x3d	; 61
    77bc:	de b7       	in	r29, 0x3e	; 62
    77be:	61 97       	sbiw	r28, 0x11	; 17
    77c0:	0f b6       	in	r0, 0x3f	; 63
    77c2:	f8 94       	cli
    77c4:	de bf       	out	0x3e, r29	; 62
    77c6:	0f be       	out	0x3f, r0	; 63
    77c8:	cd bf       	out	0x3d, r28	; 61
    77ca:	98 8b       	std	Y+16, r25	; 0x10
    77cc:	8f 87       	std	Y+15, r24	; 0x0f
    77ce:	69 8b       	std	Y+17, r22	; 0x11
	/*1-Send Start Condition*/
	TWI_voidStartCond();
    77d0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    77d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    77d6:	98 89       	ldd	r25, Y+16	; 0x10
    77d8:	89 2f       	mov	r24, r25
    77da:	99 27       	eor	r25, r25
    77dc:	80 65       	ori	r24, 0x50	; 80
    77de:	0e 94 13 0b 	call	0x1626	; 0x1626 <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    77e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    77e4:	0e 94 2e 0b 	call	0x165c	; 0x165c <TWI_voidMasterWriteData>
	/*4-Send Data*/
	TWI_voidMasterWriteData(Copy_u8Data);
    77e8:	89 89       	ldd	r24, Y+17	; 0x11
    77ea:	0e 94 2e 0b 	call	0x165c	; 0x165c <TWI_voidMasterWriteData>
	/*5-Send Stop Condition*/
	TWI_voidStopCond();
    77ee:	0e 94 6d 0b 	call	0x16da	; 0x16da <TWI_voidStopCond>
    77f2:	80 e0       	ldi	r24, 0x00	; 0
    77f4:	90 e0       	ldi	r25, 0x00	; 0
    77f6:	a8 e4       	ldi	r26, 0x48	; 72
    77f8:	b3 e4       	ldi	r27, 0x43	; 67
    77fa:	8b 87       	std	Y+11, r24	; 0x0b
    77fc:	9c 87       	std	Y+12, r25	; 0x0c
    77fe:	ad 87       	std	Y+13, r26	; 0x0d
    7800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7802:	6b 85       	ldd	r22, Y+11	; 0x0b
    7804:	7c 85       	ldd	r23, Y+12	; 0x0c
    7806:	8d 85       	ldd	r24, Y+13	; 0x0d
    7808:	9e 85       	ldd	r25, Y+14	; 0x0e
    780a:	20 e0       	ldi	r18, 0x00	; 0
    780c:	30 e0       	ldi	r19, 0x00	; 0
    780e:	4a ef       	ldi	r20, 0xFA	; 250
    7810:	54 e4       	ldi	r21, 0x44	; 68
    7812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7816:	dc 01       	movw	r26, r24
    7818:	cb 01       	movw	r24, r22
    781a:	8f 83       	std	Y+7, r24	; 0x07
    781c:	98 87       	std	Y+8, r25	; 0x08
    781e:	a9 87       	std	Y+9, r26	; 0x09
    7820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7822:	6f 81       	ldd	r22, Y+7	; 0x07
    7824:	78 85       	ldd	r23, Y+8	; 0x08
    7826:	89 85       	ldd	r24, Y+9	; 0x09
    7828:	9a 85       	ldd	r25, Y+10	; 0x0a
    782a:	20 e0       	ldi	r18, 0x00	; 0
    782c:	30 e0       	ldi	r19, 0x00	; 0
    782e:	40 e8       	ldi	r20, 0x80	; 128
    7830:	5f e3       	ldi	r21, 0x3F	; 63
    7832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7836:	88 23       	and	r24, r24
    7838:	2c f4       	brge	.+10     	; 0x7844 <EEPROM_voidSendData+0x8e>
		__ticks = 1;
    783a:	81 e0       	ldi	r24, 0x01	; 1
    783c:	90 e0       	ldi	r25, 0x00	; 0
    783e:	9e 83       	std	Y+6, r25	; 0x06
    7840:	8d 83       	std	Y+5, r24	; 0x05
    7842:	3f c0       	rjmp	.+126    	; 0x78c2 <EEPROM_voidSendData+0x10c>
	else if (__tmp > 65535)
    7844:	6f 81       	ldd	r22, Y+7	; 0x07
    7846:	78 85       	ldd	r23, Y+8	; 0x08
    7848:	89 85       	ldd	r24, Y+9	; 0x09
    784a:	9a 85       	ldd	r25, Y+10	; 0x0a
    784c:	20 e0       	ldi	r18, 0x00	; 0
    784e:	3f ef       	ldi	r19, 0xFF	; 255
    7850:	4f e7       	ldi	r20, 0x7F	; 127
    7852:	57 e4       	ldi	r21, 0x47	; 71
    7854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7858:	18 16       	cp	r1, r24
    785a:	4c f5       	brge	.+82     	; 0x78ae <EEPROM_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    785c:	6b 85       	ldd	r22, Y+11	; 0x0b
    785e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7860:	8d 85       	ldd	r24, Y+13	; 0x0d
    7862:	9e 85       	ldd	r25, Y+14	; 0x0e
    7864:	20 e0       	ldi	r18, 0x00	; 0
    7866:	30 e0       	ldi	r19, 0x00	; 0
    7868:	40 e2       	ldi	r20, 0x20	; 32
    786a:	51 e4       	ldi	r21, 0x41	; 65
    786c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7870:	dc 01       	movw	r26, r24
    7872:	cb 01       	movw	r24, r22
    7874:	bc 01       	movw	r22, r24
    7876:	cd 01       	movw	r24, r26
    7878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    787c:	dc 01       	movw	r26, r24
    787e:	cb 01       	movw	r24, r22
    7880:	9e 83       	std	Y+6, r25	; 0x06
    7882:	8d 83       	std	Y+5, r24	; 0x05
    7884:	0f c0       	rjmp	.+30     	; 0x78a4 <EEPROM_voidSendData+0xee>
    7886:	88 ec       	ldi	r24, 0xC8	; 200
    7888:	90 e0       	ldi	r25, 0x00	; 0
    788a:	9c 83       	std	Y+4, r25	; 0x04
    788c:	8b 83       	std	Y+3, r24	; 0x03
    788e:	8b 81       	ldd	r24, Y+3	; 0x03
    7890:	9c 81       	ldd	r25, Y+4	; 0x04
    7892:	01 97       	sbiw	r24, 0x01	; 1
    7894:	f1 f7       	brne	.-4      	; 0x7892 <EEPROM_voidSendData+0xdc>
    7896:	9c 83       	std	Y+4, r25	; 0x04
    7898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    789a:	8d 81       	ldd	r24, Y+5	; 0x05
    789c:	9e 81       	ldd	r25, Y+6	; 0x06
    789e:	01 97       	sbiw	r24, 0x01	; 1
    78a0:	9e 83       	std	Y+6, r25	; 0x06
    78a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78a4:	8d 81       	ldd	r24, Y+5	; 0x05
    78a6:	9e 81       	ldd	r25, Y+6	; 0x06
    78a8:	00 97       	sbiw	r24, 0x00	; 0
    78aa:	69 f7       	brne	.-38     	; 0x7886 <EEPROM_voidSendData+0xd0>
    78ac:	14 c0       	rjmp	.+40     	; 0x78d6 <EEPROM_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78ae:	6f 81       	ldd	r22, Y+7	; 0x07
    78b0:	78 85       	ldd	r23, Y+8	; 0x08
    78b2:	89 85       	ldd	r24, Y+9	; 0x09
    78b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    78b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    78ba:	dc 01       	movw	r26, r24
    78bc:	cb 01       	movw	r24, r22
    78be:	9e 83       	std	Y+6, r25	; 0x06
    78c0:	8d 83       	std	Y+5, r24	; 0x05
    78c2:	8d 81       	ldd	r24, Y+5	; 0x05
    78c4:	9e 81       	ldd	r25, Y+6	; 0x06
    78c6:	9a 83       	std	Y+2, r25	; 0x02
    78c8:	89 83       	std	Y+1, r24	; 0x01
    78ca:	89 81       	ldd	r24, Y+1	; 0x01
    78cc:	9a 81       	ldd	r25, Y+2	; 0x02
    78ce:	01 97       	sbiw	r24, 0x01	; 1
    78d0:	f1 f7       	brne	.-4      	; 0x78ce <EEPROM_voidSendData+0x118>
    78d2:	9a 83       	std	Y+2, r25	; 0x02
    78d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    78d6:	61 96       	adiw	r28, 0x11	; 17
    78d8:	0f b6       	in	r0, 0x3f	; 63
    78da:	f8 94       	cli
    78dc:	de bf       	out	0x3e, r29	; 62
    78de:	0f be       	out	0x3f, r0	; 63
    78e0:	cd bf       	out	0x3d, r28	; 61
    78e2:	cf 91       	pop	r28
    78e4:	df 91       	pop	r29
    78e6:	08 95       	ret

000078e8 <EEPROM_voidRecieveData>:
void EEPROM_voidRecieveData(u16 Copy_u16Address,u8 *Copy_u8ReceivedData)
{
    78e8:	df 93       	push	r29
    78ea:	cf 93       	push	r28
    78ec:	00 d0       	rcall	.+0      	; 0x78ee <EEPROM_voidRecieveData+0x6>
    78ee:	00 d0       	rcall	.+0      	; 0x78f0 <EEPROM_voidRecieveData+0x8>
    78f0:	cd b7       	in	r28, 0x3d	; 61
    78f2:	de b7       	in	r29, 0x3e	; 62
    78f4:	9a 83       	std	Y+2, r25	; 0x02
    78f6:	89 83       	std	Y+1, r24	; 0x01
    78f8:	7c 83       	std	Y+4, r23	; 0x04
    78fa:	6b 83       	std	Y+3, r22	; 0x03


	/*1-Send Start Condition*/
	TWI_voidStartCond();
    78fc:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_voidStartCond>
	/*2-Send (0,1,0,1,A2,b1,b0,w)*/
	TWI_voidSendSlaveAddressWithWrite((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    7900:	89 81       	ldd	r24, Y+1	; 0x01
    7902:	9a 81       	ldd	r25, Y+2	; 0x02
    7904:	89 2f       	mov	r24, r25
    7906:	99 27       	eor	r25, r25
    7908:	80 65       	ori	r24, 0x50	; 80
    790a:	0e 94 13 0b 	call	0x1626	; 0x1626 <TWI_voidSendSlaveAddressWithWrite>
	/*3-Send Address*/
	TWI_voidMasterWriteData((u8)Copy_u16Address);
    790e:	89 81       	ldd	r24, Y+1	; 0x01
    7910:	0e 94 2e 0b 	call	0x165c	; 0x165c <TWI_voidMasterWriteData>
	/*4-Send repeated start Condition*/
	TWI_voidStopCond();
    7914:	0e 94 6d 0b 	call	0x16da	; 0x16da <TWI_voidStopCond>
	TWI_voidStartCond();
    7918:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_voidStartCond>
	/*5-Send Slave Address with read*/
	TWI_voidSendSlaveAddressWithRead((u8) (0b01010000) | (A_2 << 2) | (Copy_u16Address >> 8));
    791c:	89 81       	ldd	r24, Y+1	; 0x01
    791e:	9a 81       	ldd	r25, Y+2	; 0x02
    7920:	89 2f       	mov	r24, r25
    7922:	99 27       	eor	r25, r25
    7924:	80 65       	ori	r24, 0x50	; 80
    7926:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <TWI_voidSendSlaveAddressWithRead>
	TWI_voidMasterReadData(Copy_u8ReceivedData);
    792a:	8b 81       	ldd	r24, Y+3	; 0x03
    792c:	9c 81       	ldd	r25, Y+4	; 0x04
    792e:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_voidMasterReadData>
	TWI_voidStopCond();
    7932:	0e 94 6d 0b 	call	0x16da	; 0x16da <TWI_voidStopCond>

}
    7936:	0f 90       	pop	r0
    7938:	0f 90       	pop	r0
    793a:	0f 90       	pop	r0
    793c:	0f 90       	pop	r0
    793e:	cf 91       	pop	r28
    7940:	df 91       	pop	r29
    7942:	08 95       	ret

00007944 <main>:




void main()
{
    7944:	df 93       	push	r29
    7946:	cf 93       	push	r28
    7948:	cd b7       	in	r28, 0x3d	; 61
    794a:	de b7       	in	r29, 0x3e	; 62
	Pass();
    794c:	0e 94 8f 08 	call	0x111e	; 0x111e <Pass>
}
    7950:	cf 91       	pop	r28
    7952:	df 91       	pop	r29
    7954:	08 95       	ret

00007956 <__mulsi3>:
    7956:	62 9f       	mul	r22, r18
    7958:	d0 01       	movw	r26, r0
    795a:	73 9f       	mul	r23, r19
    795c:	f0 01       	movw	r30, r0
    795e:	82 9f       	mul	r24, r18
    7960:	e0 0d       	add	r30, r0
    7962:	f1 1d       	adc	r31, r1
    7964:	64 9f       	mul	r22, r20
    7966:	e0 0d       	add	r30, r0
    7968:	f1 1d       	adc	r31, r1
    796a:	92 9f       	mul	r25, r18
    796c:	f0 0d       	add	r31, r0
    796e:	83 9f       	mul	r24, r19
    7970:	f0 0d       	add	r31, r0
    7972:	74 9f       	mul	r23, r20
    7974:	f0 0d       	add	r31, r0
    7976:	65 9f       	mul	r22, r21
    7978:	f0 0d       	add	r31, r0
    797a:	99 27       	eor	r25, r25
    797c:	72 9f       	mul	r23, r18
    797e:	b0 0d       	add	r27, r0
    7980:	e1 1d       	adc	r30, r1
    7982:	f9 1f       	adc	r31, r25
    7984:	63 9f       	mul	r22, r19
    7986:	b0 0d       	add	r27, r0
    7988:	e1 1d       	adc	r30, r1
    798a:	f9 1f       	adc	r31, r25
    798c:	bd 01       	movw	r22, r26
    798e:	cf 01       	movw	r24, r30
    7990:	11 24       	eor	r1, r1
    7992:	08 95       	ret

00007994 <__udivmodhi4>:
    7994:	aa 1b       	sub	r26, r26
    7996:	bb 1b       	sub	r27, r27
    7998:	51 e1       	ldi	r21, 0x11	; 17
    799a:	07 c0       	rjmp	.+14     	; 0x79aa <__udivmodhi4_ep>

0000799c <__udivmodhi4_loop>:
    799c:	aa 1f       	adc	r26, r26
    799e:	bb 1f       	adc	r27, r27
    79a0:	a6 17       	cp	r26, r22
    79a2:	b7 07       	cpc	r27, r23
    79a4:	10 f0       	brcs	.+4      	; 0x79aa <__udivmodhi4_ep>
    79a6:	a6 1b       	sub	r26, r22
    79a8:	b7 0b       	sbc	r27, r23

000079aa <__udivmodhi4_ep>:
    79aa:	88 1f       	adc	r24, r24
    79ac:	99 1f       	adc	r25, r25
    79ae:	5a 95       	dec	r21
    79b0:	a9 f7       	brne	.-22     	; 0x799c <__udivmodhi4_loop>
    79b2:	80 95       	com	r24
    79b4:	90 95       	com	r25
    79b6:	bc 01       	movw	r22, r24
    79b8:	cd 01       	movw	r24, r26
    79ba:	08 95       	ret

000079bc <__divmodsi4>:
    79bc:	97 fb       	bst	r25, 7
    79be:	09 2e       	mov	r0, r25
    79c0:	05 26       	eor	r0, r21
    79c2:	0e d0       	rcall	.+28     	; 0x79e0 <__divmodsi4_neg1>
    79c4:	57 fd       	sbrc	r21, 7
    79c6:	04 d0       	rcall	.+8      	; 0x79d0 <__divmodsi4_neg2>
    79c8:	14 d0       	rcall	.+40     	; 0x79f2 <__udivmodsi4>
    79ca:	0a d0       	rcall	.+20     	; 0x79e0 <__divmodsi4_neg1>
    79cc:	00 1c       	adc	r0, r0
    79ce:	38 f4       	brcc	.+14     	; 0x79de <__divmodsi4_exit>

000079d0 <__divmodsi4_neg2>:
    79d0:	50 95       	com	r21
    79d2:	40 95       	com	r20
    79d4:	30 95       	com	r19
    79d6:	21 95       	neg	r18
    79d8:	3f 4f       	sbci	r19, 0xFF	; 255
    79da:	4f 4f       	sbci	r20, 0xFF	; 255
    79dc:	5f 4f       	sbci	r21, 0xFF	; 255

000079de <__divmodsi4_exit>:
    79de:	08 95       	ret

000079e0 <__divmodsi4_neg1>:
    79e0:	f6 f7       	brtc	.-4      	; 0x79de <__divmodsi4_exit>
    79e2:	90 95       	com	r25
    79e4:	80 95       	com	r24
    79e6:	70 95       	com	r23
    79e8:	61 95       	neg	r22
    79ea:	7f 4f       	sbci	r23, 0xFF	; 255
    79ec:	8f 4f       	sbci	r24, 0xFF	; 255
    79ee:	9f 4f       	sbci	r25, 0xFF	; 255
    79f0:	08 95       	ret

000079f2 <__udivmodsi4>:
    79f2:	a1 e2       	ldi	r26, 0x21	; 33
    79f4:	1a 2e       	mov	r1, r26
    79f6:	aa 1b       	sub	r26, r26
    79f8:	bb 1b       	sub	r27, r27
    79fa:	fd 01       	movw	r30, r26
    79fc:	0d c0       	rjmp	.+26     	; 0x7a18 <__udivmodsi4_ep>

000079fe <__udivmodsi4_loop>:
    79fe:	aa 1f       	adc	r26, r26
    7a00:	bb 1f       	adc	r27, r27
    7a02:	ee 1f       	adc	r30, r30
    7a04:	ff 1f       	adc	r31, r31
    7a06:	a2 17       	cp	r26, r18
    7a08:	b3 07       	cpc	r27, r19
    7a0a:	e4 07       	cpc	r30, r20
    7a0c:	f5 07       	cpc	r31, r21
    7a0e:	20 f0       	brcs	.+8      	; 0x7a18 <__udivmodsi4_ep>
    7a10:	a2 1b       	sub	r26, r18
    7a12:	b3 0b       	sbc	r27, r19
    7a14:	e4 0b       	sbc	r30, r20
    7a16:	f5 0b       	sbc	r31, r21

00007a18 <__udivmodsi4_ep>:
    7a18:	66 1f       	adc	r22, r22
    7a1a:	77 1f       	adc	r23, r23
    7a1c:	88 1f       	adc	r24, r24
    7a1e:	99 1f       	adc	r25, r25
    7a20:	1a 94       	dec	r1
    7a22:	69 f7       	brne	.-38     	; 0x79fe <__udivmodsi4_loop>
    7a24:	60 95       	com	r22
    7a26:	70 95       	com	r23
    7a28:	80 95       	com	r24
    7a2a:	90 95       	com	r25
    7a2c:	9b 01       	movw	r18, r22
    7a2e:	ac 01       	movw	r20, r24
    7a30:	bd 01       	movw	r22, r26
    7a32:	cf 01       	movw	r24, r30
    7a34:	08 95       	ret

00007a36 <__prologue_saves__>:
    7a36:	2f 92       	push	r2
    7a38:	3f 92       	push	r3
    7a3a:	4f 92       	push	r4
    7a3c:	5f 92       	push	r5
    7a3e:	6f 92       	push	r6
    7a40:	7f 92       	push	r7
    7a42:	8f 92       	push	r8
    7a44:	9f 92       	push	r9
    7a46:	af 92       	push	r10
    7a48:	bf 92       	push	r11
    7a4a:	cf 92       	push	r12
    7a4c:	df 92       	push	r13
    7a4e:	ef 92       	push	r14
    7a50:	ff 92       	push	r15
    7a52:	0f 93       	push	r16
    7a54:	1f 93       	push	r17
    7a56:	cf 93       	push	r28
    7a58:	df 93       	push	r29
    7a5a:	cd b7       	in	r28, 0x3d	; 61
    7a5c:	de b7       	in	r29, 0x3e	; 62
    7a5e:	ca 1b       	sub	r28, r26
    7a60:	db 0b       	sbc	r29, r27
    7a62:	0f b6       	in	r0, 0x3f	; 63
    7a64:	f8 94       	cli
    7a66:	de bf       	out	0x3e, r29	; 62
    7a68:	0f be       	out	0x3f, r0	; 63
    7a6a:	cd bf       	out	0x3d, r28	; 61
    7a6c:	09 94       	ijmp

00007a6e <__epilogue_restores__>:
    7a6e:	2a 88       	ldd	r2, Y+18	; 0x12
    7a70:	39 88       	ldd	r3, Y+17	; 0x11
    7a72:	48 88       	ldd	r4, Y+16	; 0x10
    7a74:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a76:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a78:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a80:	b9 84       	ldd	r11, Y+9	; 0x09
    7a82:	c8 84       	ldd	r12, Y+8	; 0x08
    7a84:	df 80       	ldd	r13, Y+7	; 0x07
    7a86:	ee 80       	ldd	r14, Y+6	; 0x06
    7a88:	fd 80       	ldd	r15, Y+5	; 0x05
    7a8a:	0c 81       	ldd	r16, Y+4	; 0x04
    7a8c:	1b 81       	ldd	r17, Y+3	; 0x03
    7a8e:	aa 81       	ldd	r26, Y+2	; 0x02
    7a90:	b9 81       	ldd	r27, Y+1	; 0x01
    7a92:	ce 0f       	add	r28, r30
    7a94:	d1 1d       	adc	r29, r1
    7a96:	0f b6       	in	r0, 0x3f	; 63
    7a98:	f8 94       	cli
    7a9a:	de bf       	out	0x3e, r29	; 62
    7a9c:	0f be       	out	0x3f, r0	; 63
    7a9e:	cd bf       	out	0x3d, r28	; 61
    7aa0:	ed 01       	movw	r28, r26
    7aa2:	08 95       	ret

00007aa4 <_exit>:
    7aa4:	f8 94       	cli

00007aa6 <__stop_program>:
    7aa6:	ff cf       	rjmp	.-2      	; 0x7aa6 <__stop_program>
